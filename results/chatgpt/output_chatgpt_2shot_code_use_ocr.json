{
    "1": {
        "question": "When a spring does work on an object, we cannot find the work by simply multiplying the spring force by the object's displacement. The reason is that there is no one value for the force-it changes. However, we can split the displacement up into an infinite number of tiny parts and then approximate the force in each as being constant. Integration sums the work done in all those parts. Here we use the generic result of the integration.\r\n\r\nIn Figure, a cumin canister of mass $m=0.40 \\mathrm{~kg}$ slides across a horizontal frictionless counter with speed $v=0.50 \\mathrm{~m} / \\mathrm{s}$. It then runs into and compresses a spring of spring constant $k=750 \\mathrm{~N} / \\mathrm{m}$. When the canister is momentarily stopped by the spring, by what distance $d$ is the spring compressed?",
        "image": "images/1.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "1.2",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "1",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1514,
            "img_height": 720,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([161, 39], 'The spring force does'), ([158, 104], 'negative work; decreasing'), ([154, 197], 'speed and kinetic energy:'), ([316, 304], 'k'), ([812, 378], 'Frictionless'), ([1186, 378], 'mL'), ([473, 569], 'd'), ([631, 643], 'First touch'), ([240, 638], 'Stop')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When a spring does work on an object, we cannot find the work by simply multiplying the spring force by the object's displacement. The reason is that there is no one value for the force-it changes. However, we can split the displacement up into an infinite number of tiny parts and then approximate the force in each as being constant. Integration sums the work done in all those parts. Here we use the generic result of the integration.\r\n\r\nIn Figure, a cumin canister of mass $m=0.40 \\mathrm{~kg}$ slides across a horizontal frictionless counter with speed $v=0.50 \\mathrm{~m} / \\mathrm{s}$. It then runs into and compresses a spring of spring constant $k=750 \\mathrm{~N} / \\mathrm{m}$. When the canister is momentarily stopped by the spring, by what distance $d$ is the spring compressed?\nImage detected text: [([161, 39], 'The spring force does'), ([158, 104], 'negative work; decreasing'), ([154, 197], 'speed and kinetic energy:'), ([316, 304], 'k'), ([812, 378], 'Frictionless'), ([1186, 378], 'mL'), ([473, 569], 'd'), ([631, 643], 'First touch'), ([240, 638], 'Stop')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "m = 0.40  # mass of the canister in kg\nv = 0.50  # speed of the canister in m/s\nk = 750  # spring constant in N/m\n\n# The work done by the spring is equal to the change in kinetic energy of the canister\n# At the moment the canister is stopped by the spring, its kinetic energy is zero\n\n# Initial kinetic energy of the canister\ninitial_kinetic_energy = 0.5 * m * v**2\n\n# Final kinetic energy of the canister (zero)\nfinal_kinetic_energy = 0\n\n# Change in kinetic energy\ndelta_kinetic_energy = final_kinetic_energy - initial_kinetic_energy\n\n# The work done by the spring is equal to the change in kinetic energy\nwork_done = delta_kinetic_energy\n\n# The work done by the spring is also equal to the potential energy stored in the spring\n# The potential energy stored in a spring is given by 0.5 * k * x^2, where x is the displacement of the spring\n# Setting the work done equal to the potential energy, we can solve for x\n\nx = (2 * work_done / k)**0.5\n\nprint(\"The spring is compressed by a distance of\", x, \"meters\")",
        "execution": "The spring is compressed by a distance of (7.07050159149938e-19+0.011547005383792516j) meters",
        "error": "None",
        "extraction": "The spring is compressed by a distance of 0.2 meters.",
        "prediction": null,
        "true_false": false
    },
    "2": {
        "question": "what is the total volume of the measuring cup?",
        "image": "images/2.jpg",
        "choices": null,
        "unit": "g",
        "precision": null,
        "answer": "1000",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "2",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 768,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([741, 367], 'SucreMehl/ Farine'), ([751, 391], '000'), ([825, 389], '800'), ([740, 414], '90O'), ([737, 435], '800'), ([813, 447], '600'), ([731, 479], '600'), ([807, 475], '500'), ([730, 502], '500'), ([632, 332], 'Lier Litre'), ([687, 360], 'Zucker *'), ([657, 364], 'Tooecm'), ([655, 384], '900'), ([655, 407], '8uo'), ([816, 421], '700')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: what is the total volume of the measuring cup? (Unit: g)\nImage detected text: [([741, 367], 'SucreMehl/ Farine'), ([751, 391], '000'), ([825, 389], '800'), ([740, 414], '90O'), ([737, 435], '800'), ([813, 447], '600'), ([731, 479], '600'), ([807, 475], '500'), ([730, 502], '500'), ([632, 332], 'Lier Litre'), ([687, 360], 'Zucker *'), ([657, 364], 'Tooecm'), ([655, 384], '900'), ([655, 407], '8uo'), ([816, 421], '700')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "measuring_cup_volumes = [800, 600, 500]\ntotal_volume = sum(measuring_cup_volumes)\nprint(total_volume)",
        "execution": "1900",
        "error": "None",
        "extraction": "2900",
        "prediction": "2900",
        "true_false": false
    },
    "3": {
        "question": "\u25b3ABC\u7684\u4e24\u5185\u89d2\u5e73\u5206\u7ebfOB\u3001OC\u76f8\u4ea4\u4e8e\u70b9O\uff0c\u82e5\u2220A\uff1d110\u00b0\uff0c\u5219\u2220BOC\uff1d\uff08\uff09",
        "image": "images/3.jpg",
        "choices": [
            "135\u00b0",
            "140\u00b0",
            "145\u00b0",
            "150\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "145\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "3",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 131,
            "img_height": 60,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u25b3ABC\u7684\u4e24\u5185\u89d2\u5e73\u5206\u7ebfOB\u3001OC\u76f8\u4ea4\u4e8e\u70b9O\uff0c\u82e5\u2220A\uff1d110\u00b0\uff0c\u5219\u2220BOC\uff1d\uff08\uff09\nChoices:\n(A) 135\u00b0\n(B) 140\u00b0\n(C) 145\u00b0\n(D) 150\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_BOC(angle_A):\n    angle_BOA = angle_A / 2\n    angle_BOC = 180 - angle_BOA\n    return angle_BOC\n\nangle_A = 110\nangle_BOC = find_angle_BOC(angle_A)\nprint(angle_BOC)",
        "execution": "125.0",
        "error": "None",
        "extraction": "145",
        "prediction": "145\u00b0",
        "true_false": true
    },
    "4": {
        "question": "Subtract all large rubber spheres. Subtract all big shiny cylinders. How many objects are left?",
        "image": "images/4.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "4",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large rubber spheres. Subtract all big shiny cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_rubber_spheres = 5\nbig_shiny_cylinders = 3\n\nobjects_left = large_rubber_spheres - big_shiny_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "5": {
        "question": "Find $m\\angle H$",
        "image": "images/5.jpg",
        "choices": [
            "97",
            "102",
            "107",
            "122"
        ],
        "unit": null,
        "precision": null,
        "answer": "97",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "5",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 322,
            "img_height": 245,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([52, 44], '(x + 20)\" (x + 5)5'), ([2, 76], 'E'), ([154, 92], '(x -5)8'), ([126, 140], '(x +10)8'), ([266, 134], 'H')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $m\\angle H$\nChoices:\n(A) 97\n(B) 102\n(C) 107\n(D) 122\nImage detected text: [([52, 44], '(x + 20)\" (x + 5)5'), ([2, 76], 'E'), ([154, 92], '(x -5)8'), ([126, 140], '(x +10)8'), ([266, 134], 'H')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nangle_E = (x + 20)*(x + 5)*5\nangle_H = (x - 5)*8\n\neq = sp.Eq(angle_E + angle_H, 180)\nsolution = sp.solve(eq, x)\n\nangle_H_value = angle_H.subs(x, solution[0])\nprint(angle_H_value)",
        "execution": "-732/5 - 4*sqrt(12089)/5",
        "error": "None",
        "extraction": "102",
        "prediction": "102",
        "true_false": false
    },
    "6": {
        "question": "As shown in the figure, if CB = 4.0, DB = 7.0, and D is the midpoint of AC, then the length of AC is ()",
        "image": "images/6.jpg",
        "choices": [
            "6cm",
            "7cm",
            "4cm",
            "5cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "6cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "6",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 30,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, if CB = 4.0, DB = 7.0, and D is the midpoint of AC, then the length of AC is ()\nChoices:\n(A) 6cm\n(B) 7cm\n(C) 4cm\n(D) 5cm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "CB = 4.0\nDB = 7.0\n\nAC = 2 * DB - CB\nprint(AC)",
        "execution": "10.0",
        "error": "None",
        "extraction": "5.0",
        "prediction": "5cm",
        "true_false": false
    },
    "7": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) after eight.",
        "image": "images/7.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "7",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) after eight.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter\"\nprint(time_word)",
        "execution": "quarter",
        "error": "None",
        "extraction": "quarter",
        "prediction": "quarter",
        "true_false": true
    },
    "8": {
        "question": "Is the number of tiny gray bicycles that are on the left side of the brown metal sedan greater than the number of things that are to the left of the tiny green bicycle?",
        "image": "images/8.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "8",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of tiny gray bicycles that are on the left side of the brown metal sedan greater than the number of things that are to the left of the tiny green bicycle?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bicycles(caption):\n    left_gray_bicycles = 0\n    left_green_bicycles = 0\n\n    if \"tiny gray bicycle\" in caption:\n        left_gray_bicycles += 1\n\n    if \"tiny green bicycle\" in caption:\n        left_green_bicycles += 1\n\n    if left_gray_bicycles > left_green_bicycles:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"The image shows a street scene with a brown metal sedan parked on the right side. On the left side, there are two tiny gray bicycles and one tiny green bicycle. There are also several other objects to the left of the green bicycle.\"\n\nprint(compare_bicycles(caption))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "9": {
        "question": "\u5982\u56fe\u662f\u4e00\u682a\u7f8e\u4e3d\u7684\u52fe\u80a1\u6811\uff0c\u5176\u4e2d\u6240\u6709\u56db\u8fb9\u5f62\u90fd\u662f\u6b63\u65b9\u5f62\uff0c\u6240\u6709\u7684\u4e09\u89d2\u5f62\u90fd\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u82e5\u6b63\u65b9\u5f62A\u3001B\u7684\u9762\u79ef\u5206\u522b\u4e3a5\u30013\uff0c\u5219\u6700\u5927\u6b63\u65b9\u5f62C\u7684\u9762\u79ef\u662f\uff08\uff09",
        "image": "images/9.jpg",
        "choices": [
            "15",
            "13",
            "11",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "9",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 134,
            "img_height": 155,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\u662f\u4e00\u682a\u7f8e\u4e3d\u7684\u52fe\u80a1\u6811\uff0c\u5176\u4e2d\u6240\u6709\u56db\u8fb9\u5f62\u90fd\u662f\u6b63\u65b9\u5f62\uff0c\u6240\u6709\u7684\u4e09\u89d2\u5f62\u90fd\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u82e5\u6b63\u65b9\u5f62A\u3001B\u7684\u9762\u79ef\u5206\u522b\u4e3a5\u30013\uff0c\u5219\u6700\u5927\u6b63\u65b9\u5f62C\u7684\u9762\u79ef\u662f\uff08\uff09\nChoices:\n(A) 15\n(B) 13\n(C) 11\n(D) 8\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_max_square_area(square_a_area, square_b_area):\n    # The area of square C is equal to the sum of the areas of square A and square B\n    square_c_area = square_a_area + square_b_area\n    return square_c_area\n\nsquare_a_area = 5\nsquare_b_area = 3\n\nmax_square_c_area = find_max_square_area(square_a_area, square_b_area)\nprint(max_square_c_area)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": true
    },
    "10": {
        "question": "Which object comes next?",
        "image": "images/10.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "E",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "10",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 376,
            "img_height": 418,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([36, 24], 'I'), ([283, 25], 'F')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which object comes next?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nImage detected text: [([36, 24], 'I'), ([283, 25], 'F')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = ['A', 'B', 'C', 'D', 'E']\ndetected_text = ['I', 'F']\n\nnext_object = objects[objects.index(detected_text[-1]) + 1]\nprint(next_object)",
        "execution": "",
        "error": "'F' is not in list",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "11": {
        "question": "Subtract all red things. Subtract all tiny matte balls. How many objects are left?",
        "image": "images/11.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "11",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all red things. Subtract all tiny matte balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "red_things = 5\ntiny_matte_balls = 3\n\nobjects_left = red_things - tiny_matte_balls\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "12": {
        "question": "Are there fewer metallic fighters than rubber objects?",
        "image": "images/12.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "12",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer metallic fighters than rubber objects?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "metallic_fighters = 10\nrubber_objects = 15\n\nif metallic_fighters < rubber_objects:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "13": {
        "question": "How many objects are preferred by more than 90 percent of people in at least one category?",
        "image": "images/13.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "13",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([92, 10], 'Most preferred objects of different'), ([200, 36], 'categories'), ([37, 53], '100'), ([47, 97], '80'), ([14, 104], '2'), ([15, 159], '5'), ([47, 187], '40'), ([15, 181], 'L'), ([47, 231], '20'), ([100, 294], '8'), ([157, 293], '1'), ([217, 297], '1'), ([268, 294], '8'), ([327, 295], '2'), ([380, 300], 'g'), ([213, 361], 'categories'), ([127, 385], 'racing'), ([249, 381], 'afraid'), ([370, 383], 'grease')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many objects are preferred by more than 90 percent of people in at least one category?\nImage detected text: [([92, 10], 'Most preferred objects of different'), ([200, 36], 'categories'), ([37, 53], '100'), ([47, 97], '80'), ([14, 104], '2'), ([15, 159], '5'), ([47, 187], '40'), ([15, 181], 'L'), ([47, 231], '20'), ([100, 294], '8'), ([157, 293], '1'), ([217, 297], '1'), ([268, 294], '8'), ([327, 295], '2'), ([380, 300], 'g'), ([213, 361], 'categories'), ([127, 385], 'racing'), ([249, 381], 'afraid'), ([370, 383], 'grease')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = {\n    'category1': [100, 80, 2, 5],\n    'category2': [40, 20, 8, 1],\n    'category3': [2, 8, 2, 'g']\n}\n\ncount = 0\nfor category in objects.values():\n    for obj in category:\n        if isinstance(obj, int) and obj > 90:\n            count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "14": {
        "question": "Is the number of tiny objects that are behind the small metal jet less than the number of tiny things left of the tiny sedan?",
        "image": "images/14.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "14",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of tiny objects that are behind the small metal jet less than the number of tiny things left of the tiny sedan?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(num_objects_behind_jet, num_objects_left_of_sedan):\n    if num_objects_behind_jet < num_objects_left_of_sedan:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_objects_behind_jet = 10\nnum_objects_left_of_sedan = 15\n\nprint(compare_objects(num_objects_behind_jet, num_objects_left_of_sedan))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "15": {
        "question": "Which organism with be most affected if algae was eliminated?",
        "image": "images/15.jpg",
        "choices": [
            "Tilapia",
            "Common water flea",
            "Great diving beetle",
            "Tadpole"
        ],
        "unit": null,
        "precision": null,
        "answer": "Common water flea",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "15",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 232,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([141, 13], 'Common'), ([139, 27], 'water flea'), ([254, 34], 'Algae'), ([25, 51], 'Water snail'), ([143, 95], 'Tilapia'), ([327, 93], 'Water plant'), ([15, 157], 'Kingfisher'), ([263, 155], 'Tadpole'), ([117, 191], 'Great diving'), ([135, 209], 'beetle')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which organism with be most affected if algae was eliminated?\nChoices:\n(A) Tilapia\n(B) Common water flea\n(C) Great diving beetle\n(D) Tadpole\nImage detected text: [([141, 13], 'Common'), ([139, 27], 'water flea'), ([254, 34], 'Algae'), ([25, 51], 'Water snail'), ([143, 95], 'Tilapia'), ([327, 93], 'Water plant'), ([15, 157], 'Kingfisher'), ([263, 155], 'Tadpole'), ([117, 191], 'Great diving'), ([135, 209], 'beetle')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_affected_organism(text):\n    organisms = {\n        'Tilapia': 0,\n        'Common water flea': 0,\n        'Great diving beetle': 0,\n        'Tadpole': 0\n    }\n\n    for word in text.split():\n        if word in organisms.keys():\n            organisms[word] += 1\n\n    max_affected = max(organisms, key=organisms.get)\n    return max_affected\n\ntext = \"Common water flea, Great diving beetle, Tadpole, Tilapia\"\nprint(most_affected_organism(text))",
        "execution": "Tilapia",
        "error": "None",
        "extraction": "Common water flea",
        "prediction": "Common water flea",
        "true_false": true
    },
    "16": {
        "question": "How many items sold less than 5 units in at least one store?",
        "image": "images/16.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "16",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([113, 11], 'Sales statistics for'), ([67, 45], 'items in different stores'), ([48, 70], '10'), ([173, 105], 'stores'), ([63, 133], '8'), ([194, 130], 'candy'), ([194, 166], 'cook'), ([14, 164], '8'), ([63, 193], '6'), ([12, 228], '3'), ([65, 313], '2'), ([106, 403], 'very'), ([190, 404], 'mill'), ([266, 408], 'cop'), ([346, 404], 'dot')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many items sold less than 5 units in at least one store?\nImage detected text: [([113, 11], 'Sales statistics for'), ([67, 45], 'items in different stores'), ([48, 70], '10'), ([173, 105], 'stores'), ([63, 133], '8'), ([194, 130], 'candy'), ([194, 166], 'cook'), ([14, 164], '8'), ([63, 193], '6'), ([12, 228], '3'), ([65, 313], '2'), ([106, 403], 'very'), ([190, 404], 'mill'), ([266, 408], 'cop'), ([346, 404], 'dot')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sales = [10, 8, 6, 3, 2]\ncount = 0\n\nfor sale in sales:\n    if sale < 5:\n        count += 1\n\nprint(count)",
        "execution": "2",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "17": {
        "question": "\u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ACB\uff1d90\u00b0\uff0cD\u662fAB\u7684\u4e2d\u70b9\uff0cAB\uff1d10\uff0c\u5219CD\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/17.jpg",
        "choices": [
            "5",
            "6",
            "8",
            "10"
        ],
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "17",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 125,
            "img_height": 172,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ACB\uff1d90\u00b0\uff0cD\u662fAB\u7684\u4e2d\u70b9\uff0cAB\uff1d10\uff0c\u5219CD\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 5\n(B) 6\n(C) 8\n(D) 10\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 10\nCD = AB / 2\nCD",
        "execution": "",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": true
    },
    "18": {
        "question": "The passage below describes an experiment. Read the passage and then follow the instructions below.\n\nLinda applied a thin layer of wax to the underside of her snowboard and rode the board straight down a hill. Then, she removed the wax and rode the snowboard straight down the hill again. She repeated the rides four more times, alternating whether she rode with a thin layer of wax on the board or not. Her friend Bob timed each ride. Linda and Bob calculated the average time it took to slide straight down the hill on the snowboard with wax compared to the average time on the snowboard without wax.\nFigure: snowboarding down a hill. Identify the question that Linda and Bob's experiment can best answer.",
        "image": "images/18.jpg",
        "choices": [
            "Does Linda's snowboard slide down a hill in less time when it has a thin layer of wax or a thick layer of wax?",
            "Does Linda's snowboard slide down a hill in less time when it has a layer of wax or when it does not have a layer of wax?"
        ],
        "unit": null,
        "precision": null,
        "answer": "Does Linda's snowboard slide down a hill in less time when it has a layer of wax or when it does not have a layer of wax?",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "18",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 302,
            "img_height": 232,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "natural image",
            "grade": "elementary school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The passage below describes an experiment. Read the passage and then follow the instructions below.\n\nLinda applied a thin layer of wax to the underside of her snowboard and rode the board straight down a hill. Then, she removed the wax and rode the snowboard straight down the hill again. She repeated the rides four more times, alternating whether she rode with a thin layer of wax on the board or not. Her friend Bob timed each ride. Linda and Bob calculated the average time it took to slide straight down the hill on the snowboard with wax compared to the average time on the snowboard without wax.\nFigure: snowboarding down a hill. Identify the question that Linda and Bob's experiment can best answer.\nChoices:\n(A) Does Linda's snowboard slide down a hill in less time when it has a thin layer of wax or a thick layer of wax?\n(B) Does Linda's snowboard slide down a hill in less time when it has a layer of wax or when it does not have a layer of wax?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def calculate_average_time(wax_times, no_wax_times):\n    wax_average = sum(wax_times) / len(wax_times)\n    no_wax_average = sum(no_wax_times) / len(no_wax_times)\n    return wax_average, no_wax_average\n\nwax_times = [10, 12, 11, 13, 10]\nno_wax_times = [15, 14, 16, 13, 15]\n\nwax_average, no_wax_average = calculate_average_time(wax_times, no_wax_times)\nprint(\"Average time with wax:\", wax_average)\nprint(\"Average time without wax:\", no_wax_average)",
        "execution": "Average time with wax: 11.2\nAverage time without wax: 14.6",
        "error": "None",
        "extraction": "(B) Does Linda's snowboard slide down a hill in less time when it has a layer of wax or when it does not have a layer of wax?",
        "prediction": "Does Linda's snowboard slide down a hill in less time when it has a layer of wax or when it does not have a layer of wax?",
        "true_false": true
    },
    "19": {
        "question": "what is the highest amount this class measures?",
        "image": "images/19.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "400",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "19",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 684,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([477, 205], '400'), ([322, 228], '0'), ([302, 252], 'IALPHAI'), ([253, 277], 'ROROSILICATE'), ([477, 307], 'jo'), ([289, 321], 'GLASS'), ([283, 357], 'Goom4'), ([411, 407], 'g'), ([476, 412], '200'), ([408, 446], '0'), ([476, 514], '100')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: what is the highest amount this class measures?\nImage detected text: [([477, 205], '400'), ([322, 228], '0'), ([302, 252], 'IALPHAI'), ([253, 277], 'ROROSILICATE'), ([477, 307], 'jo'), ([289, 321], 'GLASS'), ([283, 357], 'Goom4'), ([411, 407], 'g'), ([476, 412], '200'), ([408, 446], '0'), ([476, 514], '100')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_amount = 0\n\nfor text in image_detected_text:\n    if text[1].isdigit():\n        amount = int(text[1])\n        if amount > highest_amount:\n            highest_amount = amount\n\nprint(highest_amount)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "400",
        "prediction": "400",
        "true_false": true
    },
    "20": {
        "question": "Is the sum of smallest two bar is greater then the largest bar?",
        "image": "images/20.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "20",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 12], 'Government'), ([134, 6], 'expenditure on secondary education by country, 1974-2014,'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([12, 36], '2003'), ([15, 63], 'Government expenditure per student as'), ([285, 63], 'percentage of GDP per capita_'), ([19, 147], 'Czechia'), ([745, 143], '21.37%'), ([8, 290], 'Paraguay'), ([471, 293], '12.51%0'), ([39, 439], 'Laos'), ([381, 439], '29% (2002)'), ([373, 543], '10%'), ([527, 541], '15%'), ([681, 541], '20%'), ([15, 571], 'Source: World Bank'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the sum of smallest two bar is greater then the largest bar?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([12, 12], 'Government'), ([134, 6], 'expenditure on secondary education by country, 1974-2014,'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([12, 36], '2003'), ([15, 63], 'Government expenditure per student as'), ([285, 63], 'percentage of GDP per capita_'), ([19, 147], 'Czechia'), ([745, 143], '21.37%'), ([8, 290], 'Paraguay'), ([471, 293], '12.51%0'), ([39, 439], 'Laos'), ([381, 439], '29% (2002)'), ([373, 543], '10%'), ([527, 541], '15%'), ([681, 541], '20%'), ([15, 571], 'Source: World Bank'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def sum_of_smallest_two_bars_greater_than_largest_bar(bars):\n    sorted_bars = sorted(bars)\n    if sorted_bars[0] + sorted_bars[1] > sorted_bars[2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbars = [10, 15, 20]\nprint(sum_of_smallest_two_bars_greater_than_largest_bar(bars))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "21": {
        "question": "Fill in the blank to describe the model. The model has 4 dots divided into 2 equal groups. There are (_) dots in each group.",
        "image": "images/21.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "21",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 418,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 4 dots divided into 2 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 4\ngroups = 2\ndots_in_each_group = dots // groups\n\nprint(dots_in_each_group)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "22": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/22.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "22",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 555,
            "img_height": 785,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(people_birth_years):\n    current_year = datetime.datetime.now().year\n    count = 0\n    for year in people_birth_years:\n        if year > 1945 and year <= current_year:\n            count += 1\n    return count\n\npeople_birth_years = [1930, 1950, 1965, 1980, 1995]\nprint(count_people_after_ww2(people_birth_years))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "23": {
        "question": "The derivative of f(x) at x=2 is ____ that at x=5",
        "image": "images/23.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "equal to",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "23",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 552,
            "img_height": 393,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The derivative of f(x) at x=2 is ____ that at x=5\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = 10*x**3 + 12*x**2 + 3*x + 10\n\nf_derivative_at_2 = sp.diff(f, x).subs(x, 2)\nf_derivative_at_5 = sp.diff(f, x).subs(x, 5)\n\nif f_derivative_at_2 > f_derivative_at_5:\n    answer = \"(A) larger than\"\nelif f_derivative_at_2 == f_derivative_at_5:\n    answer = \"(B) equal to\"\nelse:\n    answer = \"(C) smaller than\"\n\nprint(\"The derivative of f(x) at x=2 is\", answer, \"that at x=5\")",
        "execution": "The derivative of f(x) at x=2 is (C) smaller than that at x=5",
        "error": "None",
        "extraction": "(C) smaller than",
        "prediction": "smaller than",
        "true_false": false
    },
    "24": {
        "question": "Is Periwinkle the maximum?",
        "image": "images/24.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "24",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 709,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 11], 'title'), ([25, 31], '100'), ([7, 121], '1'), ([9, 159], '1'), ([133, 295], '1'), ([295, 295], '1'), ([458, 298], '1'), ([620, 298], '1'), ([133, 327], '{'), ([345, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Periwinkle the maximum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([57, 11], 'title'), ([25, 31], '100'), ([7, 121], '1'), ([9, 159], '1'), ([133, 295], '1'), ([295, 295], '1'), ([458, 298], '1'), ([620, 298], '1'), ([133, 327], '{'), ([345, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "max_value = 100\nanswer = \"no\"\n\nif max_value == 100:\n    answer = \"yes\"\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "25": {
        "question": "Is Medium Periwinkle the smoothest?",
        "image": "images/25.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "25",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 770,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 155], '9'), ([9, 191], '1'), ([631, 235], 'Medium Periwinkle'), ([631, 257], 'Cadet Blue'), ([631, 279], 'Dark Gray'), ([631, 303], 'Web Gray'), ([631, 327], 'Violet'), ([631, 349], 'Rebecca Purple'), ([561, 363], '100'), ([631, 373], 'Hot Pink'), ([287, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Medium Periwinkle the smoothest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 155], '9'), ([9, 191], '1'), ([631, 235], 'Medium Periwinkle'), ([631, 257], 'Cadet Blue'), ([631, 279], 'Dark Gray'), ([631, 303], 'Web Gray'), ([631, 327], 'Violet'), ([631, 349], 'Rebecca Purple'), ([561, 363], '100'), ([631, 373], 'Hot Pink'), ([287, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smoothest_color = 'Medium Periwinkle'\nchoices = ['yes', 'no']\n\nif smoothest_color == 'Medium Periwinkle':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "26": {
        "question": "Is Black greater than Deep Sky Blue?",
        "image": "images/26.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "26",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 761,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([131, 11], 'title'), ([31, 53], 'Dark Periwinkle'), ([85, 105], 'Yellow'), ([61, 159], 'Olive Drab'), ([7, 155], '9'), ([9, 191], '1'), ([39, 211], 'Deep Sky Blue'), ([89, 265], 'Black'), ([97, 319], 'Pink'), ([407, 383], 'raxis label'), ([63, 317], 'Dcep')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Black greater than Deep Sky Blue?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([131, 11], 'title'), ([31, 53], 'Dark Periwinkle'), ([85, 105], 'Yellow'), ([61, 159], 'Olive Drab'), ([7, 155], '9'), ([9, 191], '1'), ([39, 211], 'Deep Sky Blue'), ([89, 265], 'Black'), ([97, 319], 'Pink'), ([407, 383], 'raxis label'), ([63, 317], 'Dcep')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "black = (0, 0, 0)\ndeep_sky_blue = (0, 191, 255)\n\nif black > deep_sky_blue:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "27": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/27.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "11",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "27",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2628,
            "img_height": 1752,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1711, 1021], '(Rma>esN'), ([1674, 1076], 'HLFED NOGEL'), ([1686, 1148], '(7 f6I'), ([1619, 1171], '7\"t')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([1711, 1021], '(Rma>esN'), ([1674, 1076], 'HLFED NOGEL'), ([1686, 1148], '(7 f6I'), ([1619, 1171], '7\"t')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1990\nperson2_birth_year = 1985\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "28": {
        "question": "$\\overline{AB}$ is a diameter, $AC=8$ inches, and $BC=15$ inches. Find the radius of the circle.",
        "image": "images/28.jpg",
        "choices": [
            "7.5",
            "8",
            "8.5",
            "17"
        ],
        "unit": null,
        "precision": null,
        "answer": "8.5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "28",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 519,
            "img_height": 431,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([54, 190], 'A'), ([416, 190], 'B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: $\\overline{AB}$ is a diameter, $AC=8$ inches, and $BC=15$ inches. Find the radius of the circle.\nChoices:\n(A) 7.5\n(B) 8\n(C) 8.5\n(D) 17\nImage detected text: [([54, 190], 'A'), ([416, 190], 'B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAC = 8\nBC = 15\n\nradius = (AC + BC) / 2\n\nprint(radius)",
        "execution": "11.5",
        "error": "None",
        "extraction": "11.5",
        "prediction": "7.5",
        "true_false": false
    },
    "29": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/29.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "29",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 670,
            "img_height": 440,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([152, 1], \"'UUIRZ\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([152, 1], \"'UUIRZ\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age_gap(birthdate1, birthdate2):\n    date_format = \"%Y-%m-%d\"\n    birthdate1 = datetime.datetime.strptime(birthdate1, date_format)\n    birthdate2 = datetime.datetime.strptime(birthdate2, date_format)\n    age_gap = abs((birthdate1 - birthdate2).days) // 365\n    return age_gap\n\nbirthdate1 = \"1990-05-15\"\nbirthdate2 = \"1985-10-20\"\n\nage_gap = calculate_age_gap(birthdate1, birthdate2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "30": {
        "question": "As shown in the figure, the two chords AB and CD in the circle intersect at E, \u2220D = 35.0, \u2220AEC = 105.0, then \u2220C = ()",
        "image": "images/30.jpg",
        "choices": [
            "60\u00b0",
            "70\u00b0",
            "80\u00b0",
            "85\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "70\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "30",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 117,
            "img_height": 113,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the two chords AB and CD in the circle intersect at E, \u2220D = 35.0, \u2220AEC = 105.0, then \u2220C = ()\nChoices:\n(A) 60\u00b0\n(B) 70\u00b0\n(C) 80\u00b0\n(D) 85\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_D, angle_AEC):\n    angle_C = 180 - angle_D - angle_AEC\n    return angle_C\n\nangle_D = 35.0\nangle_AEC = 105.0\n\nangle_C = find_angle(angle_D, angle_AEC)\nprint(angle_C)",
        "execution": "40.0",
        "error": "None",
        "extraction": "80",
        "prediction": "80\u00b0",
        "true_false": false
    },
    "31": {
        "question": "Are there more big red rubber double buss in front of the large red double bus than big green things?",
        "image": "images/31.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "31",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there more big red rubber double buss in front of the large red double bus than big green things?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_big_red_rubber_double_buses(big_red_rubber_double_buses, large_red_double_bus, big_green_things):\n    if big_red_rubber_double_buses > large_red_double_bus and big_red_rubber_double_buses > big_green_things:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbig_red_rubber_double_buses = 5\nlarge_red_double_bus = 3\nbig_green_things = 2\n\nprint(count_big_red_rubber_double_buses(big_red_rubber_double_buses, large_red_double_bus, big_green_things))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "32": {
        "question": "\u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAB\uff1dAC\uff0c\u2220CAB\uff1d40\u00b0\uff0c\u5219\u2220D\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/32.jpg",
        "choices": [
            "40\u00b0",
            "50\u00b0",
            "60\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "70\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "32",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 168,
            "img_height": 100,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAB\uff1dAC\uff0c\u2220CAB\uff1d40\u00b0\uff0c\u5219\u2220D\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 40\u00b0\n(B) 50\u00b0\n(C) 60\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    AB = AC = 1\n    CAB = 40\n\n    # Using law of cosines to find angle D\n    cosD = (AB**2 + AC**2 - 2*AB*AC*math.cos(math.radians(CAB))) / (2*AB*AC)\n    angleD = math.degrees(math.acos(cosD))\n\n    return angleD\n\nprint(find_angle())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": false
    },
    "33": {
        "question": "Use a sector paper sheet with a central angle of 120.0 and a radius of 6.0 to roll into a conical bottomless paper cap (as shown in the picture), then the bottom perimeter of the paper cap is ()",
        "image": "images/33.jpg",
        "choices": [
            "2\u03c0cm",
            "3\u03c0cm",
            "4\u03c0cm",
            "5\u03c0cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "4\u03c0cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "33",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 331,
            "img_height": 95,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Use a sector paper sheet with a central angle of 120.0 and a radius of 6.0 to roll into a conical bottomless paper cap (as shown in the picture), then the bottom perimeter of the paper cap is ()\nChoices:\n(A) 2\u03c0cm\n(B) 3\u03c0cm\n(C) 4\u03c0cm\n(D) 5\u03c0cm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ncentral_angle = 120.0\nradius = 6.0\n\n# Calculate the circumference of the base of the cone\ncircumference = 2 * math.pi * radius\n\n# Calculate the length of the arc of the sector paper sheet\narc_length = (central_angle / 360) * circumference\n\n# Calculate the bottom perimeter of the paper cap\nbottom_perimeter = arc_length\n\nprint(bottom_perimeter)",
        "execution": "12.566370614359172",
        "error": "None",
        "extraction": "12\u03c0cm",
        "prediction": "2\u03c0cm",
        "true_false": false
    },
    "34": {
        "question": "Is this function continuous at each point?",
        "image": "images/34.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "34",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 479,
            "img_height": 479,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([26, 244], '~6 5 -4 3 22'), ([260, 246], '41'), ([401, 247], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this function continuous at each point?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([26, 244], '~6 5 -4 3 22'), ([260, 246], '41'), ([401, 247], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_continuous(points):\n    for i in range(len(points)-1):\n        if points[i] != points[i+1]:\n            return \"No\"\n    return \"Yes\"\n\npoints = [6, 5, -4, 3, 22, 41, 5]\nprint(is_continuous(points))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "35": {
        "question": "\u5982\u56fe\uff0cAB\u662f\u2299O\u7684\u76f4\u5f84\uff0cEF\uff0cEB\u662f\u2299O\u7684\u5f26\uff0c\u70b9E\u662fFEB\u7684\u4e2d\u70b9\uff0cEF\u4e0eAB\u4ea4\u4e8e\u70b9C\uff0c\u8fde\u63a5OF\uff0c\u82e5\u2220AOF\uff1d40\u00b0\uff0c\u5219\u2220F\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/35.jpg",
        "choices": [
            "20\u00b0",
            "35\u00b0",
            "40\u00b0",
            "55\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "35\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "35",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 151,
            "img_height": 141,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAB\u662f\u2299O\u7684\u76f4\u5f84\uff0cEF\uff0cEB\u662f\u2299O\u7684\u5f26\uff0c\u70b9E\u662fFEB\u7684\u4e2d\u70b9\uff0cEF\u4e0eAB\u4ea4\u4e8e\u70b9C\uff0c\u8fde\u63a5OF\uff0c\u82e5\u2220AOF\uff1d40\u00b0\uff0c\u5219\u2220F\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 20\u00b0\n(B) 35\u00b0\n(C) 40\u00b0\n(D) 55\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_AOF = 40\n    angle_AOB = 180\n    angle_BOC = (angle_AOB - angle_AOF) / 2\n    angle_F = 180 - angle_BOC\n    return angle_F\n\nprint(find_angle())",
        "execution": "110.0",
        "error": "None",
        "extraction": "35",
        "prediction": "35\u00b0",
        "true_false": true
    },
    "36": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/36.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "36",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 480,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([601, 283], 'GECF'), ([537, 361], 'Mll uhilo Olci SU')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([601, 283], 'GECF'), ([537, 361], 'Mll uhilo Olci SU')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef find_age_gap(text):\n    pattern = r'\\d+'\n    ages = re.findall(pattern, text)\n    if len(ages) == 2:\n        age1 = int(ages[0])\n        age2 = int(ages[1])\n        age_gap = abs(age1 - age2)\n        return age_gap\n    else:\n        return None\n\ntext = \"GECF Mll uhilo Olci SU\"\nage_gap = find_age_gap(text)\nprint(age_gap)",
        "execution": "None",
        "error": "None",
        "extraction": "None",
        "prediction": null,
        "true_false": false
    },
    "37": {
        "question": "What is the limit as x approaches -1?",
        "image": "images/37.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "37",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 408,
            "img_height": 410,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the limit as x approaches -1?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nexpr = (x**2 - 1) / (x + 1)\nlimit_expr = sp.limit(expr, x, -1)\nprint(limit_expr)",
        "execution": "-2",
        "error": "None",
        "extraction": "-2",
        "prediction": "-2",
        "true_false": false
    },
    "38": {
        "question": "How many bars have values smaller than 6?",
        "image": "images/38.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "38",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 16], 'Title'), ([44, 34], '10'), ([17, 193], '9'), ([115, 407], 'butt'), ([349, 407], 'sick')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have values smaller than 6?\nImage detected text: [([224, 16], 'Title'), ([44, 34], '10'), ([17, 193], '9'), ([115, 407], 'butt'), ([349, 407], 'sick')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\ncount = 0\nfor bar in bars:\n    if bar < 6:\n        count += 1\n\nprint(count)",
        "execution": "5",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "39": {
        "question": "Is this function odd or even?",
        "image": "images/39.jpg",
        "choices": [
            "odd",
            "even"
        ],
        "unit": null,
        "precision": null,
        "answer": "odd",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "39",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 433,
            "img_height": 304,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 100], 'Y-0r,ax1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this function odd or even?\nChoices:\n(A) odd\n(B) even\nImage detected text: [([53, 100], 'Y-0r,ax1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_odd_or_even(function):\n    if function % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\nfunction = \"Y-0r,ax1\"\nprint(is_odd_or_even(function))",
        "execution": "",
        "error": "not all arguments converted during string formatting",
        "extraction": "odd",
        "prediction": "odd",
        "true_false": true
    },
    "40": {
        "question": "Subtract all brown blocks. Subtract all large blue rubber things. How many objects are left?",
        "image": "images/40.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "40",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown blocks. Subtract all large blue rubber things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "brown_blocks = 5\nlarge_blue_rubber_things = 3\n\nobjects_left = brown_blocks - large_blue_rubber_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "41": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/41.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "41",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 5236,
            "img_height": 3491,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "42": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/42.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "42",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 401,
            "img_height": 539,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "43": {
        "question": "Use the graph to answer the question below. Which month is the wettest on average in Christchurch?",
        "image": "images/43.jpg",
        "choices": [
            "August",
            "April",
            "May"
        ],
        "unit": null,
        "precision": null,
        "answer": "May",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "43",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 449,
            "img_height": 323,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "line plot",
            "grade": "elementary school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 0], 'Average precipitation in Christchurch; New Zealand'), ([21, 47], '70'), ([3, 111], '1'), ([1, 145], 'I'), ([21, 177], '30'), ([21, 209], '20'), ([21, 241], '10'), ([54, 290], '8 4 < 8 $ $ $ + 68'), ([350, 284], '8'), ([385, 285], '9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Use the graph to answer the question below. Which month is the wettest on average in Christchurch?\nChoices:\n(A) August\n(B) April\n(C) May\nImage detected text: [([43, 0], 'Average precipitation in Christchurch; New Zealand'), ([21, 47], '70'), ([3, 111], '1'), ([1, 145], 'I'), ([21, 177], '30'), ([21, 209], '20'), ([21, 241], '10'), ([54, 290], '8 4 < 8 $ $ $ + 68'), ([350, 284], '8'), ([385, 285], '9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def wettest_month(data):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    max_precipitation = max(data)\n    wettest_month_index = data.index(max_precipitation)\n    wettest_month = months[wettest_month_index]\n    return wettest_month\n\ndata = [70, 30, 20, 10, 8, 9]\nprint(wettest_month(data))",
        "execution": "January",
        "error": "None",
        "extraction": "May",
        "prediction": "May",
        "true_false": true
    },
    "44": {
        "question": "Chase wants to buy 4 kilograms of oval beads and 5 kilograms of star-shaped beads. How much will he spend? (Unit: $)",
        "image": "images/44.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "44",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 305,
            "img_height": 226,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 7], 'oval beads'), ([209, 7], 'S2lkilogram'), ([9, 41], 'rectangular beads'), ([209, 39], 'S3/kilogram'), ([11, 73], 'star-shaped beads'), ([209, 71], 'S2lkilogram'), ([9, 103], 'spherical beads'), ([209, 103], 'S2lkilogram'), ([9, 134], 'heart-shaped beads'), ([208, 132], 'S3/kilogram'), ([11, 167], 'square beads'), ([209, 167], 'S2lkilogram'), ([11, 199], 'flower-shaped beads'), ([209, 199], 'S2lkilogram')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Chase wants to buy 4 kilograms of oval beads and 5 kilograms of star-shaped beads. How much will he spend? (Unit: $)\nImage detected text: [([11, 7], 'oval beads'), ([209, 7], 'S2lkilogram'), ([9, 41], 'rectangular beads'), ([209, 39], 'S3/kilogram'), ([11, 73], 'star-shaped beads'), ([209, 71], 'S2lkilogram'), ([9, 103], 'spherical beads'), ([209, 103], 'S2lkilogram'), ([9, 134], 'heart-shaped beads'), ([208, 132], 'S3/kilogram'), ([11, 167], 'square beads'), ([209, 167], 'S2lkilogram'), ([11, 199], 'flower-shaped beads'), ([209, 199], 'S2lkilogram')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "oval_beads_price = 2.00\nstar_shaped_beads_price = 2.00\n\ntotal_cost = (4 * oval_beads_price) + (5 * star_shaped_beads_price)\nprint(total_cost)",
        "execution": "18.0",
        "error": "None",
        "extraction": "18.0",
        "prediction": null,
        "true_false": false
    },
    "45": {
        "question": "An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between August and September? (Unit: minutes per month)",
        "image": "images/45.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "45",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 273,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([18, 2], 'Average waiting time at the DMV'), ([25, 37], 'Month'), ([101, 34], 'Waiting time (minutes)'), ([7, 67], 'August'), ([173, 67], '17'), ([7, 99], 'September'), ([172, 96], '14'), ([9, 131], 'October'), ([9, 163], 'November'), ([173, 161], '17'), ([9, 193], 'December'), ([173, 191], '25')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between August and September? (Unit: minutes per month)\nImage detected text: [([18, 2], 'Average waiting time at the DMV'), ([25, 37], 'Month'), ([101, 34], 'Waiting time (minutes)'), ([7, 67], 'August'), ([173, 67], '17'), ([7, 99], 'September'), ([172, 96], '14'), ([9, 131], 'October'), ([9, 163], 'November'), ([173, 161], '17'), ([9, 193], 'December'), ([173, 191], '25')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "august_wait_time = 17\nseptember_wait_time = 14\n\nrate_of_change = (september_wait_time - august_wait_time) / 1\nprint(rate_of_change)",
        "execution": "-3.0",
        "error": "None",
        "extraction": "-3",
        "prediction": "-3",
        "true_false": true
    },
    "46": {
        "question": "What would happen to the population of adult spiders if predator ate all the spider eggs?",
        "image": "images/46.jpg",
        "choices": [
            "Adult spider population would remain the same",
            "Adult spider population would double.",
            "Adults spider population would decrease",
            "Adult spider population would increase."
        ],
        "unit": null,
        "precision": null,
        "answer": "Adults spider population would decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "46",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 829,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([63, 15], 'SPIDER'), ([16, 76], 'LIFE CYCLE'), ([742, 82], 'Egg sac'), ([89, 185], 'Adult'), ([904, 416], 'Eggs'), ([36, 756], 'Spiderlings'), ([682, 762], 'Baby spiderlings')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would happen to the population of adult spiders if predator ate all the spider eggs?\nChoices:\n(A) Adult spider population would remain the same\n(B) Adult spider population would double.\n(C) Adults spider population would decrease\n(D) Adult spider population would increase.\nImage detected text: [([63, 15], 'SPIDER'), ([16, 76], 'LIFE CYCLE'), ([742, 82], 'Egg sac'), ([89, 185], 'Adult'), ([904, 416], 'Eggs'), ([36, 756], 'Spiderlings'), ([682, 762], 'Baby spiderlings')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def spider_population():\n    eggs = 100\n    spiderlings = 0\n    adults = 0\n\n    # If predator eats all the spider eggs\n    spiderlings += eggs\n    eggs = 0\n\n    # Spiderlings grow into adult spiders\n    adults += spiderlings\n    spiderlings = 0\n\n    return adults\n\npopulation = spider_population()\n\nif population == 0:\n    answer = \"Adult spider population would remain the same\"\nelif population > 0:\n    answer = \"Adult spider population would increase\"\nelse:\n    answer = \"Adult spider population would decrease\"\n\nprint(answer)",
        "execution": "Adult spider population would increase",
        "error": "None",
        "extraction": "Adult spider population would increase",
        "prediction": "Adult spider population would increase.",
        "true_false": false
    },
    "47": {
        "question": "Subtract all rubber balls. Subtract all yellow shiny things. How many objects are left?",
        "image": "images/47.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "47",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all rubber balls. Subtract all yellow shiny things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "rubber_balls = 5\nyellow_shiny_things = 3\n\nobjects_left = rubber_balls - yellow_shiny_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "48": {
        "question": "Find $m \\angle 3$.",
        "image": "images/48.jpg",
        "choices": [
            "28",
            "38",
            "52",
            "62"
        ],
        "unit": null,
        "precision": null,
        "answer": "38",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "48",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 596,
            "img_height": 426,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([505, 35], 'W'), ([406, 68], '3'), ([460, 98], '2'), ([252, 258], 'Z'), ([88, 284], '528'), ([146, 324], '380')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $m \\angle 3$.\nChoices:\n(A) 28\n(B) 38\n(C) 52\n(D) 62\nImage detected text: [([505, 35], 'W'), ([406, 68], '3'), ([460, 98], '2'), ([252, 258], 'Z'), ([88, 284], '528'), ([146, 324], '380')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle1, angle2):\n    angle3 = 180 - angle1 - angle2\n    return angle3\n\nangle1 = 52\nangle2 = 38\n\nangle3 = find_angle(angle1, angle2)\nprint(angle3)",
        "execution": "90",
        "error": "None",
        "extraction": "62",
        "prediction": "62",
        "true_false": false
    },
    "49": {
        "question": "What is the sum of the digits on either end of the sign in the corner?",
        "image": "images/49.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "49",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 626,
            "img_height": 476,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([41, 20], 'ONE'), ([38, 79], 'Way')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the digits on either end of the sign in the corner?\nImage detected text: [([41, 20], 'ONE'), ([38, 79], 'Way')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sign_text = \"ONE Way\"\ndigits = [int(char) for char in sign_text if char.isdigit()]\nsum_digits = sum(digits)\nprint(sum_digits)",
        "execution": "0",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "50": {
        "question": "Based on the food web, what would likely happen if the number of large roach would decrease?",
        "image": "images/50.jpg",
        "choices": [
            "The population of steelheads would decrease.",
            "The population of stickleback fry would increase.",
            "The population of predatory insects would increase.",
            "The population of predatory insects would decrease."
        ],
        "unit": null,
        "precision": null,
        "answer": "The population of predatory insects would decrease.",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "50",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 633,
            "img_height": 600,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([121, 107], 'Large roaeh'), ([461, 113], 'Steelhead'), ([306, 264], 'Roach fry'), ([63, 308], 'Predatory inseets'), ([488, 308], 'Sticklebaek fry'), ([103, 337], '(lestids)'), ([233, 434], 'Tuft-weaving chironomids'), ([182, 570], 'Cladophora. epiphytie diatoms. Nostoe')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Based on the food web, what would likely happen if the number of large roach would decrease?\nChoices:\n(A) The population of steelheads would decrease.\n(B) The population of stickleback fry would increase.\n(C) The population of predatory insects would increase.\n(D) The population of predatory insects would decrease.\nImage detected text: [([121, 107], 'Large roaeh'), ([461, 113], 'Steelhead'), ([306, 264], 'Roach fry'), ([63, 308], 'Predatory inseets'), ([488, 308], 'Sticklebaek fry'), ([103, 337], '(lestids)'), ([233, 434], 'Tuft-weaving chironomids'), ([182, 570], 'Cladophora. epiphytie diatoms. Nostoe')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_web_change(population_change):\n    if population_change == \"decrease\":\n        return \"The population of predatory insects would increase.\"\n    else:\n        return \"No change in population.\"\n\npopulation_change = \"decrease\"\nprint(food_web_change(population_change))",
        "execution": "The population of predatory insects would increase.",
        "error": "None",
        "extraction": "The population of predatory insects would increase.",
        "prediction": "The population of predatory insects would increase.",
        "true_false": false
    },
    "51": {
        "question": "Is the number of gray rubber objects in front of the small yellow aeroplane greater than the number of big cyan matte fighters?",
        "image": "images/51.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "51",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of gray rubber objects in front of the small yellow aeroplane greater than the number of big cyan matte fighters?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "gray_rubber_objects = 5\nbig_cyan_matte_fighters = 3\n\nif gray_rubber_objects > big_cyan_matte_fighters:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "52": {
        "question": "Subtract all big red metallic spheres. Subtract all big brown matte things. How many objects are left?",
        "image": "images/52.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "52",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big red metallic spheres. Subtract all big brown matte things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_red_metallic_spheres = 10\nbig_brown_matte_things = 5\n\nobjects_left = big_red_metallic_spheres - big_brown_matte_things\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "53": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/53.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "53",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 593,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "54": {
        "question": "In the figure above, the ratio of the length of line AB to the length of line AC is 2 : 5. If AC = 25, what is the length of line AB?",
        "image": "images/54.jpg",
        "choices": [
            "8",
            "10",
            "15",
            "18",
            "20"
        ],
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "54",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 433,
            "img_height": 310,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 105], 'In the figure above, the ratio of the length of AB to the'), ([50, 120], 'the length of AC is 2 : 5. IE AC = 25'), ([305, 125], 'what is the length'), ([51, 141], 'of AB'), ([52, 190], '(8)'), ([47, 223], '8 %')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, the ratio of the length of line AB to the length of line AC is 2 : 5. If AC = 25, what is the length of line AB?\nChoices:\n(A) 8\n(B) 10\n(C) 15\n(D) 18\n(E) 20\nImage detected text: [([51, 105], 'In the figure above, the ratio of the length of AB to the'), ([50, 120], 'the length of AC is 2 : 5. IE AC = 25'), ([305, 125], 'what is the length'), ([51, 141], 'of AB'), ([52, 190], '(8)'), ([47, 223], '8 %')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ratio = 2/5\nAC = 25\n\nAB = ratio * AC\nAB",
        "execution": "",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": true
    },
    "55": {
        "question": "\u5982\u56fe\uff0c\u4e00\u5757\u76f4\u89d2\u4e09\u89d2\u677f60\u00b0\u7684\u89d2\u7684\u9876\u70b9A\u4e0e\u76f4\u89d2\u9876\u70b9C\u5206\u522b\u5728\u4e24\u5e73\u884c\u7ebfFG\uff0cDE\u4e0a\uff0c\u659c\u8fb9AB\u5e73\u5206\u2220CAG\uff0c\u4ea4\u76f4\u7ebfDE\u4e8e\u70b9H\uff0c\u5219\u2220BCH\u7684\u5927\u5c0f\u4e3a\uff08\uff09",
        "image": "images/55.jpg",
        "choices": [
            "60\u00b0",
            "45\u00b0",
            "30\u00b0",
            "25\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "30\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "55",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 175,
            "img_height": 125,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u4e00\u5757\u76f4\u89d2\u4e09\u89d2\u677f60\u00b0\u7684\u89d2\u7684\u9876\u70b9A\u4e0e\u76f4\u89d2\u9876\u70b9C\u5206\u522b\u5728\u4e24\u5e73\u884c\u7ebfFG\uff0cDE\u4e0a\uff0c\u659c\u8fb9AB\u5e73\u5206\u2220CAG\uff0c\u4ea4\u76f4\u7ebfDE\u4e8e\u70b9H\uff0c\u5219\u2220BCH\u7684\u5927\u5c0f\u4e3a\uff08\uff09\nChoices:\n(A) 60\u00b0\n(B) 45\u00b0\n(C) 30\u00b0\n(D) 25\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_BCH():\n    angle_ACG = 60\n    angle_BAC = angle_ACG / 2\n    angle_BCA = 90 - angle_BAC\n    angle_BCH = 180 - angle_BCA\n    return angle_BCH\n\nprint(angle_BCH())",
        "execution": "120.0",
        "error": "None",
        "extraction": "90",
        "prediction": "60\u00b0",
        "true_false": false
    },
    "56": {
        "question": "What is the perimeter of the rectangle?",
        "image": "images/56.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "56",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 202,
            "img_height": 295,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([85, 0], '1 yd'), ([0, 137], '2 yd'), ([169, 139], '2 yd')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the rectangle?\nImage detected text: [([85, 0], '1 yd'), ([0, 137], '2 yd'), ([169, 139], '2 yd')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "length = 2\nwidth = 1\n\nperimeter = 2 * (length + width)\nprint(perimeter)",
        "execution": "6",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": true
    },
    "57": {
        "question": "Subtract all small balls. Subtract all blue rubber things. How many objects are left?",
        "image": "images/57.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "57",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small balls. Subtract all blue rubber things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_balls = 5\nblue_rubber_things = 3\n\nobjects_left = small_balls - blue_rubber_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "58": {
        "question": "Does Firebrick have the maximum area under the curve?",
        "image": "images/58.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "58",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 760,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 153], '1'), ([83, 173], 'Firebrick'), ([9, 191], '1'), ([84, 194], 'Orange'), ([711, 363], '100'), ([365, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Firebrick have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 153], '1'), ([83, 173], 'Firebrick'), ([9, 191], '1'), ([84, 194], 'Orange'), ([711, 363], '100'), ([365, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [10, 15, 7, 12, 9]\n\nplt.plot(x, y)\nplt.fill_between(x, y, color='firebrick', alpha=0.5)\n\nplt.xlabel('x')\nplt.ylabel('y')\n\nplt.show()\n\n# The maximum area under the curve can be determined by finding the maximum y value in the y list.\nmax_y = max(y)\n\nif y.index(max_y) == x.index(3):\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "59": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, CD is the chord of \u2299O, \u2220ADC = 26.0, then the degree of \u2220CAB is ()",
        "image": "images/59.jpg",
        "choices": [
            "26\u00b0",
            "74\u00b0",
            "64\u00b0",
            "54\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "64\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "59",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 157,
            "img_height": 146,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, CD is the chord of \u2299O, \u2220ADC = 26.0, then the degree of \u2220CAB is ()\nChoices:\n(A) 26\u00b0\n(B) 74\u00b0\n(C) 64\u00b0\n(D) 54\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_ADC):\n    angle_CAB = (180 - angle_ADC) / 2\n    return angle_CAB\n\nangle_ADC = 26.0\nangle_CAB = find_angle(angle_ADC)\nprint(angle_CAB)",
        "execution": "77.0",
        "error": "None",
        "extraction": "64",
        "prediction": "64\u00b0",
        "true_false": true
    },
    "60": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/60.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "22",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "60",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 477,
            "img_height": 381,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "61": {
        "question": "Is Coral the roughest?",
        "image": "images/61.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "61",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 427,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 153], '1'), ([9, 191], '1'), ([303, 323], 'Purple'), ([375, 323], 'Coral'), ([393, 363], '100'), ([199, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Coral the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 153], '1'), ([9, 191], '1'), ([303, 323], 'Purple'), ([375, 323], 'Coral'), ([393, 363], '100'), ([199, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_roughest(caption):\n    for line in caption.split('\\n'):\n        if 'Coral' in line:\n            return 'yes'\n    return 'no'\n\ncaption = \"The image shows a graph comparing the roughness of different materials. The graph has a title that says 'Roughness Comparison'. There are two bars on the graph, one labeled 'Purple' and one labeled 'Coral'. The bar labeled 'Coral' is taller than the bar labeled 'Purple'.\"\n\nprint(is_roughest(caption))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "62": {
        "question": "\u5982\u56fe\uff0cE\uff0cF\u5206\u522b\u662f\u83f1\u5f62ABCD\u7684\u8fb9AB\uff0cAD\u7684\u4e2d\u70b9\uff0c\u4e14AB\uff1d5\uff0cAC\uff1d6\uff0e\u5219EF\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/62.jpg",
        "choices": [
            "4",
            "5",
            "5.5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "62",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 160,
            "img_height": 138,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cE\uff0cF\u5206\u522b\u662f\u83f1\u5f62ABCD\u7684\u8fb9AB\uff0cAD\u7684\u4e2d\u70b9\uff0c\u4e14AB\uff1d5\uff0cAC\uff1d6\uff0e\u5219EF\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 4\n(B) 5\n(C) 5.5\n(D) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 5\nAC = 6\n\nEF = (AB + AC) / 2\nprint(EF)",
        "execution": "5.5",
        "error": "None",
        "extraction": "5.5",
        "prediction": "5.5",
        "true_false": false
    },
    "63": {
        "question": "Subtract all red matte cubes. Subtract all small green metal objects. How many objects are left?",
        "image": "images/63.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "63",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all red matte cubes. Subtract all small green metal objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "red_matte_cubes = 10\nsmall_green_metal_objects = 5\n\nobjects_left = red_matte_cubes - small_green_metal_objects\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "64": {
        "question": "The diagrams below show two pure samples of gas in identical closed, rigid containers. Each colored ball represents one gas particle. Both samples have the same number of particles. Compare the average kinetic energies of the particles in each sample. Which sample has the higher temperature?",
        "image": "images/64.jpg",
        "choices": [
            "neither; the samples have the same temperature",
            "sample A",
            "sample B"
        ],
        "unit": null,
        "precision": null,
        "answer": "sample A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "64",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 550,
            "img_height": 405,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "elementary school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([77, 315], 'Sample A'), ([395, 313], 'Sample B'), ([16, 346], 'Mass of each particle: 40 u'), ([336, 346], 'Mass of each particle: 32 u'), ([0, 384], 'Average particle speed: 950 mls'), ([319, 384], 'Average particle speed: 750 mls')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The diagrams below show two pure samples of gas in identical closed, rigid containers. Each colored ball represents one gas particle. Both samples have the same number of particles. Compare the average kinetic energies of the particles in each sample. Which sample has the higher temperature?\nChoices:\n(A) neither; the samples have the same temperature\n(B) sample A\n(C) sample B\nImage detected text: [([77, 315], 'Sample A'), ([395, 313], 'Sample B'), ([16, 346], 'Mass of each particle: 40 u'), ([336, 346], 'Mass of each particle: 32 u'), ([0, 384], 'Average particle speed: 950 mls'), ([319, 384], 'Average particle speed: 750 mls')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "mass_A = 40\nmass_B = 32\nspeed_A = 950\nspeed_B = 750\n\nkinetic_energy_A = 0.5 * mass_A * (speed_A ** 2)\nkinetic_energy_B = 0.5 * mass_B * (speed_B ** 2)\n\nif kinetic_energy_A > kinetic_energy_B:\n    answer = \"sample A\"\nelif kinetic_energy_A < kinetic_energy_B:\n    answer = \"sample B\"\nelse:\n    answer = \"neither; the samples have the same temperature\"\n\nprint(answer)",
        "execution": "sample A",
        "error": "None",
        "extraction": "sample A",
        "prediction": "sample A",
        "true_false": true
    },
    "65": {
        "question": "is f(3) > 0?",
        "image": "images/65.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "65",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 327,
            "img_height": 325,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: is f(3) > 0?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    return x**2 - 4*x + 3\n\nresult = f(3) > 0\nif result:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "66": {
        "question": "Choose the answer for the missing picture.",
        "image": "images/66.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F"
        ],
        "unit": null,
        "precision": null,
        "answer": "A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "66",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 562,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 337], 'CHOOSE ANSWER')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Choose the answer for the missing picture.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\n(F) F\nImage detected text: [([79, 337], 'CHOOSE ANSWER')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "answer = 'C'\nprint(answer)",
        "execution": "C",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "67": {
        "question": "What is the perimeter of the square?",
        "image": "images/67.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "16",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "67",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 292,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1, 139], '4 m')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the square?\nImage detected text: [([1, 139], '4 m')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side_length = 4\nperimeter = 4 * side_length\nprint(perimeter)",
        "execution": "16",
        "error": "None",
        "extraction": "16",
        "prediction": "16",
        "true_false": true
    },
    "68": {
        "question": "\u5c06\u4e00\u6839\u957f\u5ea6\u4e3a16cm\u81ea\u7136\u4f38\u76f4\u7684\u5f39\u6027\u76ae\u7b4bAB\u4e24\u7aef\u56fa\u5b9a\u5728\u6c34\u5e73\u7684\u684c\u9762\u4e0a\uff0c\u7136\u540e\u628a\u4e2d\u70b9C\u7ad6\u76f4\u5411\u4e0a\u62c9\u53476cm\u81f3D\u70b9\uff08\u5982\u56fe\uff09\uff0c\u5219\u8be5\u5f39\u6027\u76ae\u7b4b\u88ab\u62c9\u957f\u4e86\uff08\uff09",
        "image": "images/68.jpg",
        "choices": [
            "2cm",
            "4cm",
            "6cm",
            "8cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "4cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "68",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 252,
            "img_height": 84,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5c06\u4e00\u6839\u957f\u5ea6\u4e3a16cm\u81ea\u7136\u4f38\u76f4\u7684\u5f39\u6027\u76ae\u7b4bAB\u4e24\u7aef\u56fa\u5b9a\u5728\u6c34\u5e73\u7684\u684c\u9762\u4e0a\uff0c\u7136\u540e\u628a\u4e2d\u70b9C\u7ad6\u76f4\u5411\u4e0a\u62c9\u53476cm\u81f3D\u70b9\uff08\u5982\u56fe\uff09\uff0c\u5219\u8be5\u5f39\u6027\u76ae\u7b4b\u88ab\u62c9\u957f\u4e86\uff08\uff09\nChoices:\n(A) 2cm\n(B) 4cm\n(C) 6cm\n(D) 8cm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "length_AB = 16\ndistance_CD = 6\n\nlength_AD = length_AB + distance_CD\nelongation = length_AD - length_AB\n\nprint(elongation)",
        "execution": "6",
        "error": "None",
        "extraction": "6",
        "prediction": "6cm",
        "true_false": false
    },
    "69": {
        "question": "Subtract all big matte balls. Subtract all green rubber objects. How many objects are left?",
        "image": "images/69.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "69",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big matte balls. Subtract all green rubber objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_matte_balls = 10\ngreen_rubber_objects = 5\n\nobjects_left = big_matte_balls - green_rubber_objects\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "70": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/70.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "70",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2266,
            "img_height": 2600,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1737, 848], '{'), ([1561, 1240], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([1737, 848], '{'), ([1561, 1240], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1737\nperson2_birth_year = 1561\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "176",
        "error": "None",
        "extraction": "176",
        "prediction": "176",
        "true_false": false
    },
    "71": {
        "question": "What is the perimeter of the rectangle?",
        "image": "images/71.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "71",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 187,
            "img_height": 292,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([81, 0], '3 ft')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the rectangle?\nImage detected text: [([81, 0], '3 ft')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "length = 3\nwidth = 3\n\nperimeter = 2 * (length + width)\nprint(perimeter)",
        "execution": "12",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": false
    },
    "72": {
        "question": "A real estate agent drove around the neighborhood and counted the number of houses on each block. How many blocks have exactly 36 houses? (Unit: blocks)",
        "image": "images/72.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "72",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 197,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([29, 0], 'Houses per block'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([53, 73], '0 4 5'), ([63, 88], '0 123346 7 8 9'), ([53, 117], '0 1 2 4 6 8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A real estate agent drove around the neighborhood and counted the number of houses on each block. How many blocks have exactly 36 houses? (Unit: blocks)\nImage detected text: [([29, 0], 'Houses per block'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([53, 73], '0 4 5'), ([63, 88], '0 123346 7 8 9'), ([53, 117], '0 1 2 4 6 8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "houses_per_block = [4, 5, 0, 1, 2, 3, 3, 4, 6, 7, 8, 9]\ncount = 0\n\nfor houses in houses_per_block:\n    if houses == 36:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "73": {
        "question": "Complete the matrix.",
        "image": "images/73.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "73",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 387,
            "img_height": 654,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([83, 321], 'IQ Test Labs?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Complete the matrix.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\n(F) F\nImage detected text: [([83, 321], 'IQ Test Labs?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\ndef complete_matrix(matrix):\n    row_sum = [sum(row) for row in matrix]\n    col_sum = [sum(col) for col in zip(*matrix)]\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if row_sum[i] == col_sum[j]:\n                return matrix[i][j]\n    \n    return \"\"\n\nprint(complete_matrix(matrix))",
        "execution": "5",
        "error": "None",
        "extraction": "A",
        "prediction": "A",
        "true_false": false
    },
    "74": {
        "question": "What is the difference of largest and smallest bar?",
        "image": "images/74.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "47.6",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "74",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 10], 'Share of population using at least basic drinking water source, 2000'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([15, 41], 'Share of the population using at least a basic'), ([303, 36], 'drinking water service; that is,'), ([499, 43], \"an improved source within 30 minutes'\"), ([13, 59], 'round trip to collect water'), ([27, 127], 'Iceland'), ([783, 125], '100%'), ([19, 239], 'Hungary'), ([783, 237], '99.96%'), ([33, 349], 'Turkey'), ([751, 349], '95.49%'), ([9, 461], 'cambodia'), ([201, 541], '20%'), ([341, 541], '40%'), ([483, 541], '60%'), ([623, 543], '80%'), ([757, 541], '100%'), ([15, 569], 'Source: WHOIUNICEF Joint Monitoring Programme for Water Supply; Sanitation and Hygiene (JMP)'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference of largest and smallest bar?\nImage detected text: [([12, 10], 'Share of population using at least basic drinking water source, 2000'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([15, 41], 'Share of the population using at least a basic'), ([303, 36], 'drinking water service; that is,'), ([499, 43], \"an improved source within 30 minutes'\"), ([13, 59], 'round trip to collect water'), ([27, 127], 'Iceland'), ([783, 125], '100%'), ([19, 239], 'Hungary'), ([783, 237], '99.96%'), ([33, 349], 'Turkey'), ([751, 349], '95.49%'), ([9, 461], 'cambodia'), ([201, 541], '20%'), ([341, 541], '40%'), ([483, 541], '60%'), ([623, 543], '80%'), ([757, 541], '100%'), ([15, 569], 'Source: WHOIUNICEF Joint Monitoring Programme for Water Supply; Sanitation and Hygiene (JMP)'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_bar = 100\nsmallest_bar = 20\n\ndifference = largest_bar - smallest_bar\nprint(difference)",
        "execution": "80",
        "error": "None",
        "extraction": "80",
        "prediction": "80.0",
        "true_false": false
    },
    "75": {
        "question": "Is Sky Blue less than Web Maroon?",
        "image": "images/75.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "75",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 11], 'title'), ([429, 135], 'Sky Blue'), ([429, 157], 'Web Maroon'), ([429, 181], 'Salmon'), ([427, 203], 'Dark Olive'), ([427, 225], 'Dark Seafoam'), ([427, 249], 'Burlywood')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Sky Blue less than Web Maroon?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 11], 'title'), ([429, 135], 'Sky Blue'), ([429, 157], 'Web Maroon'), ([429, 181], 'Salmon'), ([427, 203], 'Dark Olive'), ([427, 225], 'Dark Seafoam'), ([427, 249], 'Burlywood')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sky_blue = 429\nweb_maroon = 429\n\nif sky_blue < web_maroon:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "76": {
        "question": "What happens to fish if pelicans increase?",
        "image": "images/76.jpg",
        "choices": [
            "decrease",
            "nothing",
            "increase",
            "none of the above"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "76",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 947,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What happens to fish if pelicans increase?\nChoices:\n(A) decrease\n(B) nothing\n(C) increase\n(D) none of the above\nImage detected text: [([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def fish_pelican_relationship(text):\n    if \"increase\" in text:\n        return \"decrease\"\n    else:\n        return \"nothing\"\n\ntext = \"The image shows a food chain with different levels. The primary consumer is a caterpillar, the secondary consumer is a lizard, and the tertiary consumer is a snake. The snake eats the lizard, and the lizard eats the caterpillar. The food chain also includes plankton as a primary consumer and fish as a secondary consumer. The text on the image mentions that pelicans are also part of the food chain. Based on this information, what happens to fish if pelicans increase?\"\n\nprint(fish_pelican_relationship(text))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "77": {
        "question": "Which year showed the largest difference in the data points between the two lines",
        "image": "images/77.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2019",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "77",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([625, 87], '77-67'), ([683, 81], '77.84'), ([567, 91], '77.45'), ([513, 99], '77.2'), ([453, 107], '76.9'), ([393, 117], '76.54'), ([335, 127], '76.13'), ([277, 141], '75.68'), ([219, 153], '75.22'), ([161, 167], '74.74'), ([103, 179], '74.29'), ([44, 136], ''), ([451, 259], '71.42'), ([513, 257], '71.5'), ([567, 255], '71.53'), ([625, 255], '71.58'), ([683, 253], '71.65'), ([393, 263], '71.27-'), ([335, 269], '71.01'), ([277, 281], '70.64'), ([219, 293], '70.15'), ([161, 311], '69-59'), ([103, 325], '69.01'), ([105, 389], '2009'), ([163, 391], '2010'), ([219, 391], '2011'), ([277, 389], '2012'), ([335, 391], '2013'), ([393, 389], '2014'), ([451, 389], '2015'), ([509, 389], '2016'), ([567, 389], '2017'), ([625, 389], '2018'), ([683, 389], '2019'), ([339, 431], 'female'), ([413, 431], 'male'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which year showed the largest difference in the data points between the two lines\nImage detected text: [([625, 87], '77-67'), ([683, 81], '77.84'), ([567, 91], '77.45'), ([513, 99], '77.2'), ([453, 107], '76.9'), ([393, 117], '76.54'), ([335, 127], '76.13'), ([277, 141], '75.68'), ([219, 153], '75.22'), ([161, 167], '74.74'), ([103, 179], '74.29'), ([44, 136], ''), ([451, 259], '71.42'), ([513, 257], '71.5'), ([567, 255], '71.53'), ([625, 255], '71.58'), ([683, 253], '71.65'), ([393, 263], '71.27-'), ([335, 269], '71.01'), ([277, 281], '70.64'), ([219, 293], '70.15'), ([161, 311], '69-59'), ([103, 325], '69.01'), ([105, 389], '2009'), ([163, 391], '2010'), ([219, 391], '2011'), ([277, 389], '2012'), ([335, 391], '2013'), ([393, 389], '2014'), ([451, 389], '2015'), ([509, 389], '2016'), ([567, 389], '2017'), ([625, 389], '2018'), ([683, 389], '2019'), ([339, 431], 'female'), ([413, 431], 'male'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def largest_difference(data_points):\n    max_difference = 0\n    max_year = \"\"\n\n    for i in range(len(data_points)-1):\n        year1 = int(data_points[i][1])\n        year2 = int(data_points[i+1][1])\n        difference = abs(year1 - year2)\n\n        if difference > max_difference:\n            max_difference = difference\n            max_year = data_points[i][1]\n\n    return max_year\n\ndata_points = [('77-67', '77.84'), ('77.84', '77.45'), ('77.45', '77.2'), ('77.2', '76.9'), ('76.9', '76.54'), ('76.54', '76.13'), ('76.13', '75.68'), ('75.68', '75.22'), ('75.22', '74.74'), ('74.74', '74.29'), ('74.29', ''), ('71.42', '71.5'), ('71.5', '71.53'), ('71.53', '71.58'), ('71.58', '71.65'), ('71.65', '71.27-'), ('71.27-', '71.01'), ('71.01', '70.64'), ('70.64', '70.15'), ('70.15', '69-59'), ('69-59', '69.01'), ('2009', '2010'), ('2010', '2011'), ('2011', '2012'), ('2012', '2013'), ('2013', '2014'), ('2014', '2015'), ('2015', '2016'), ('2016', '2017'), ('2017', '2018'), ('2018', '2019'), ('female', 'male'), ('Statista 2021', 'Addirional Information'), ('Addirional Information', 'Show source')]\n\nprint(largest_difference(data_points))",
        "execution": "",
        "error": "invalid literal for int() with base 10: '77.84'",
        "extraction": "2011",
        "prediction": "2011",
        "true_false": false
    },
    "78": {
        "question": "Find the missing value.",
        "image": "images/78.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "78",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1062,
            "img_height": 394,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([162, 70], '2'), ([476, 70], '2'), ([768, 66], '10'), ([161, 169], '7'), ([474, 166], '3'), ([766, 158], '21'), ([163, 257], '5'), ([478, 256], '4'), ([797, 255], '?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the missing value.\nImage detected text: [([162, 70], '2'), ([476, 70], '2'), ([768, 66], '10'), ([161, 169], '7'), ([474, 166], '3'), ([766, 158], '21'), ([163, 257], '5'), ([478, 256], '4'), ([797, 255], '?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_value = 0\n\nfor i in range(1, 11):\n    if i not in [2, 7, 10]:\n        missing_value = i\n\nprint(missing_value)",
        "execution": "9",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "79": {
        "question": "As shown in the figure, points A, B, C, and D are on circle O, and point E is on the extended line of AD. If \u2220ABC = 60.0, then the degree of \u2220CDE is ()",
        "image": "images/79.jpg",
        "choices": [
            "30\u00b0",
            "45\u00b0",
            "60\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "60\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "79",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 123,
            "img_height": 104,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, points A, B, C, and D are on circle O, and point E is on the extended line of AD. If \u2220ABC = 60.0, then the degree of \u2220CDE is ()\nChoices:\n(A) 30\u00b0\n(B) 45\u00b0\n(C) 60\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_CDE(angle_ABC):\n    angle_CDE = 180 - angle_ABC\n    return angle_CDE\n\nangle_ABC = 60.0\nangle_CDE = angle_CDE(angle_ABC)\nprint(angle_CDE)",
        "execution": "120.0",
        "error": "None",
        "extraction": "120",
        "prediction": "30\u00b0",
        "true_false": false
    },
    "80": {
        "question": "According to the food web, what will happen if all the algae died due to pesticides?",
        "image": "images/80.jpg",
        "choices": [
            "Crabs and limpets will decrease",
            "Dolphins will increase",
            "Sea gulls will become extinct",
            "Star fish will increase"
        ],
        "unit": null,
        "precision": null,
        "answer": "Crabs and limpets will decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "80",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 372,
            "img_height": 199,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([289, 1], 'not to scalel'), ([1, 27], 'dolphin'), ([113, 41], 'seal'), ([216, 46], 'agull'), ([313, 55], 'starfish'), ([11, 93], 'herring'), ([113, 131], 'mussel'), ([225, 127], 'crab'), ([5, 139], '1Food'), ([3, 155], '{Web'), ([153, 163], 'algae'), ([9, 175], 'SEA'), ([77, 166], 'plankton'), ([192, 170], '~seaweed:'), ([283, 171], 'gills ?'), ([319, 171], 'dont'), ([283, 187], 'belong herel'), ([333, 114], 'pet')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: According to the food web, what will happen if all the algae died due to pesticides?\nChoices:\n(A) Crabs and limpets will decrease\n(B) Dolphins will increase\n(C) Sea gulls will become extinct\n(D) Star fish will increase\nImage detected text: [([289, 1], 'not to scalel'), ([1, 27], 'dolphin'), ([113, 41], 'seal'), ([216, 46], 'agull'), ([313, 55], 'starfish'), ([11, 93], 'herring'), ([113, 131], 'mussel'), ([225, 127], 'crab'), ([5, 139], '1Food'), ([3, 155], '{Web'), ([153, 163], 'algae'), ([9, 175], 'SEA'), ([77, 166], 'plankton'), ([192, 170], '~seaweed:'), ([283, 171], 'gills ?'), ([319, 171], 'dont'), ([283, 187], 'belong herel'), ([333, 114], 'pet')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_web_outcome(text):\n    if \"algae\" in text and \"pesticides\" in text:\n        return \"Crabs and limpets will decrease\"\n    else:\n        return \"\"\n\ntext = \"According to the food web, what will happen if all the algae died due to pesticides?\"\n\nprint(food_web_outcome(text))",
        "execution": "Crabs and limpets will decrease",
        "error": "None",
        "extraction": "Crabs and limpets will decrease",
        "prediction": "Crabs and limpets will decrease",
        "true_false": true
    },
    "81": {
        "question": "What is the value of r at theta=3*pi/2?",
        "image": "images/81.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "81",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 616,
            "img_height": 460,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([309, 13], \"90'\"), ([195, 37], '120\"'), ([123, 109], '150\"'), ([329, 103], '0.6'), ([97, 215], '1808'), ([123, 319], '2109'), ([487, 319], '3309'), ([193, 389], '2408'), ([417, 389], \"300'\"), ([305, 415], '270\"')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of r at theta=3*pi/2?\nImage detected text: [([309, 13], \"90'\"), ([195, 37], '120\"'), ([123, 109], '150\"'), ([329, 103], '0.6'), ([97, 215], '1808'), ([123, 319], '2109'), ([487, 319], '3309'), ([193, 389], '2408'), ([417, 389], \"300'\"), ([305, 415], '270\"')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ntheta = 3 * math.pi / 2\nr = 0.6\n\nprint(r)",
        "execution": "0.6",
        "error": "None",
        "extraction": "0.6",
        "prediction": null,
        "true_false": false
    },
    "82": {
        "question": "A square is inscribed in a circle of area 18$\\pi$ square units. Find the length of a side of the square.",
        "image": "images/82.jpg",
        "choices": [
            "3",
            "3 \\sqrt 2",
            "6",
            "6 \\sqrt 2"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "82",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 200,
            "img_height": 202,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A square is inscribed in a circle of area 18$\\pi$ square units. Find the length of a side of the square.\nChoices:\n(A) 3\n(B) 3 \\sqrt 2\n(C) 6\n(D) 6 \\sqrt 2\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_side_length(area):\n    radius = math.sqrt(area / math.pi)\n    side_length = 2 * radius / math.sqrt(2)\n    return side_length\n\narea = 18 * math.pi\nside_length = find_side_length(area)\nprint(side_length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "3.0",
        "prediction": "3",
        "true_false": false
    },
    "83": {
        "question": "Is the number of shiny buss less than the number of matte things?",
        "image": "images/83.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "83",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of shiny buss less than the number of matte things?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "shiny_buss = 10\nmatte_things = 15\n\nif shiny_buss < matte_things:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "84": {
        "question": "ABCD is a square. Inscribed Circle center is O. Find the the angle of \u2220AMK. Return the numeric value.",
        "image": "images/84.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "130.9",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "84",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1194,
            "img_height": 1220,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([39, 41], 'B'), ([606, 30], 'F'), ([1093, 27], 'C'), ([405, 529], 'M'), ([1093, 525], 'G'), ([36, 562], 'Eo'), ([40, 1122], 'A')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: ABCD is a square. Inscribed Circle center is O. Find the the angle of \u2220AMK. Return the numeric value.\nImage detected text: [([39, 41], 'B'), ([606, 30], 'F'), ([1093, 27], 'C'), ([405, 529], 'M'), ([1093, 525], 'G'), ([36, 562], 'Eo'), ([40, 1122], 'A')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(AB, AM):\n    AO = AB / 2\n    OM = AM / 2\n    angle = math.degrees(math.atan(OM / AO))\n    return angle\n\nAB = 100\nAM = 80\n\nangle = find_angle(AB, AM)\nprint(angle)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "45",
        "prediction": "45.0",
        "true_false": false
    },
    "85": {
        "question": "How many countries have people working for more than 35 hours over the years?",
        "image": "images/85.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "85",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 8], 'Average usual weekly hours worked;'), ([364, 8], 'women 15 years and older; 1995 to'), ([777, 19], 'Our World'), ([797, 31], 'Data'), ([12, 38], '2007'), ([14, 62], 'Average usual weekly hours worked on the main job; for women ages 15+'), ([495, 63], 'Estimates correspond to total declared'), ([15, 81], 'employment: This includes part-time and full-time employment; as well as self-employment and dependent employment'), ([13, 101], '40'), ([733, 111], 'Romania'), ([732, 135], 'Portuga'), ([13, 155], '35'), ([733, 221], 'Switzerland'), ([13, 261], '25'), ([13, 313], '20'), ([13, 365], '15'), ([13, 419], '10'), ([19, 541], '1995'), ([77, 541], '1996'), ([191, 541], '1998'), ([305, 541], '2000'), ([421, 541], '2002'), ([537, 541], '2004'), ([653, 541], '2006'), ([709, 541], '2007'), ([15, 567], 'Source: OECD Labor Force Statistics (2017)'), ([437, 571], 'OurW orldlnData org female-labor-force-participation-key-facts'), ([793, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many countries have people working for more than 35 hours over the years?\nImage detected text: [([11, 8], 'Average usual weekly hours worked;'), ([364, 8], 'women 15 years and older; 1995 to'), ([777, 19], 'Our World'), ([797, 31], 'Data'), ([12, 38], '2007'), ([14, 62], 'Average usual weekly hours worked on the main job; for women ages 15+'), ([495, 63], 'Estimates correspond to total declared'), ([15, 81], 'employment: This includes part-time and full-time employment; as well as self-employment and dependent employment'), ([13, 101], '40'), ([733, 111], 'Romania'), ([732, 135], 'Portuga'), ([13, 155], '35'), ([733, 221], 'Switzerland'), ([13, 261], '25'), ([13, 313], '20'), ([13, 365], '15'), ([13, 419], '10'), ([19, 541], '1995'), ([77, 541], '1996'), ([191, 541], '1998'), ([305, 541], '2000'), ([421, 541], '2002'), ([537, 541], '2004'), ([653, 541], '2006'), ([709, 541], '2007'), ([15, 567], 'Source: OECD Labor Force Statistics (2017)'), ([437, 571], 'OurW orldlnData org female-labor-force-participation-key-facts'), ([793, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_countries(image_text):\n    count = 0\n    lines = image_text.split('\\n')\n    for line in lines:\n        if 'hours worked on the main job' in line:\n            count += 1\n    return count\n\nimage_text = \"Average usual weekly hours worked; women 15 years and older; 1995 to\\nOur World\\nData\\n2007\\nAverage usual weekly hours worked on the main job; for women ages 15+\\nEstimates correspond to total declared\\nemployment: This includes part-time and full-time employment; as well as self-employment and dependent employment\\n40\\nRomania\\nPortuga\\n35\\nSwitzerland\\n25\\n20\\n15\\n10\\n1995\\n1996\\n1998\\n2000\\n2002\\n2004\\n2006\\n2007\\nSource: OECD Labor Force Statistics (2017)\\nOurW orldlnData org female-labor-force-participation-key-facts\\nCC BY\"\n\nprint(count_countries(image_text))",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "86": {
        "question": "Which model has the highest Acc score when Pretrain Loss is equal to 1.80?",
        "image": "images/86.jpg",
        "choices": [
            "ICL",
            "SFT",
            "SFT 1/8",
            "RFT k=100",
            "RFT k=25",
            "RET k=6",
            "RFT U13B"
        ],
        "unit": null,
        "precision": null,
        "answer": "RFT U13B",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "86",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1734,
            "img_height": 1046,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([751, 7], 'Model Performance'), ([1560, 98], 'LLaMA2-70B'), ([52, 112], '60'), ([1224, 150], 'LLaMA-65B_'), ([982, 214], 'LLaMA-33B'), ([50, 248], '50'), ([682, 278], 'LLaMA2-13B'), ([446, 374], 'LLaMA-13B'), ([50, 386], '40'), ([348, 392], 'LLaMA2-7B'), ([20, 410], '8'), ([1524, 444], 'ICL'), ([110, 470], 'LLaMA-7B'), ([1526, 486], 'SFT'), ([50, 522], '30'), ([1526, 526], 'SFT 1/2'), ([1526, 568], 'SFT 1/4'), ([1526, 608], 'SFT 1/8'), ([50, 658], '20'), ([1528, 650], 'RFT k=100'), ([1528, 690], 'RFT k=25'), ([1526, 730], 'RFT k=6'), ([1526, 772], 'RFT U13B'), ([52, 794], '10'), ([140, 836], '1.80'), ([384, 836], '1.75'), ([626, 836], '1.70'), ([870, 836], '1.65'), ([1114, 836], '1.60'), ([1358, 836], '1.55'), ([1600, 836], '1.50'), ([806, 862], 'Pretrain Loss'), ([2, 984], 'Figure l: The'), ([326, 979], 'findings of scaling relationship on learning math reasoning ability with LLMs.'), ([258, 983], 'key')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model has the highest Acc score when Pretrain Loss is equal to 1.80?\nChoices:\n(A) ICL\n(B) SFT\n(C) SFT 1/8\n(D) RFT k=100\n(E) RFT k=25\n(F) RET k=6\n(G) RFT U13B\nImage detected text: [([751, 7], 'Model Performance'), ([1560, 98], 'LLaMA2-70B'), ([52, 112], '60'), ([1224, 150], 'LLaMA-65B_'), ([982, 214], 'LLaMA-33B'), ([50, 248], '50'), ([682, 278], 'LLaMA2-13B'), ([446, 374], 'LLaMA-13B'), ([50, 386], '40'), ([348, 392], 'LLaMA2-7B'), ([20, 410], '8'), ([1524, 444], 'ICL'), ([110, 470], 'LLaMA-7B'), ([1526, 486], 'SFT'), ([50, 522], '30'), ([1526, 526], 'SFT 1/2'), ([1526, 568], 'SFT 1/4'), ([1526, 608], 'SFT 1/8'), ([50, 658], '20'), ([1528, 650], 'RFT k=100'), ([1528, 690], 'RFT k=25'), ([1526, 730], 'RFT k=6'), ([1526, 772], 'RFT U13B'), ([52, 794], '10'), ([140, 836], '1.80'), ([384, 836], '1.75'), ([626, 836], '1.70'), ([870, 836], '1.65'), ([1114, 836], '1.60'), ([1358, 836], '1.55'), ([1600, 836], '1.50'), ([806, 862], 'Pretrain Loss'), ([2, 984], 'Figure l: The'), ([326, 979], 'findings of scaling relationship on learning math reasoning ability with LLMs.'), ([258, 983], 'key')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_acc_score(model_performance, pretrain_loss):\n    models = {\n        'ICL': 'LLaMA2-70B',\n        'SFT': 'LLaMA-65B_',\n        'SFT 1/8': 'LLaMA-33B',\n        'RFT k=100': 'LLaMA2-13B',\n        'RFT k=25': 'LLaMA-13B',\n        'RET k=6': 'LLaMA2-7B',\n        'RFT U13B': 'LLaMA-7B'\n    }\n\n    highest_acc = 0\n    highest_acc_model = \"\"\n\n    for model, performance in model_performance.items():\n        if performance['Pretrain Loss'] == pretrain_loss and performance['Acc Score'] > highest_acc:\n            highest_acc = performance['Acc Score']\n            highest_acc_model = model\n\n    return highest_acc_model\n\nmodel_performance = {\n    'ICL': {'Acc Score': 60, 'Pretrain Loss': 1.80},\n    'SFT': {'Acc Score': 50, 'Pretrain Loss': 1.80},\n    'SFT 1/8': {'Acc Score': 40, 'Pretrain Loss': 1.80},\n    'RFT k=100': {'Acc Score': 30, 'Pretrain Loss': 1.80},\n    'RFT k=25': {'Acc Score': 20, 'Pretrain Loss': 1.80},\n    'RET k=6': {'Acc Score': 10, 'Pretrain Loss': 1.80},\n    'RFT U13B': {'Acc Score': 8, 'Pretrain Loss': 1.80}\n}\n\npretrain_loss = 1.80\n\nprint(highest_acc_score(model_performance, pretrain_loss))",
        "execution": "ICL",
        "error": "None",
        "extraction": "SFT",
        "prediction": "SFT",
        "true_false": false
    },
    "87": {
        "question": "Look at the table. Then answer the question. At a price of $790, is there a shortage or a surplus?'",
        "image": "images/87.jpg",
        "choices": [
            "shortage",
            "surplus"
        ],
        "unit": null,
        "precision": null,
        "answer": "surplus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "87",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 353,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'Price'), ([63, 7], 'Quantity demanded'), ([219, 4], 'Quantity supplied'), ([4, 32], '8250'), ([107, 35], '14,400'), ([259, 35], '1,200'), ([7, 67], '5430'), ([107, 67], '11,300'), ([259, 67], '5,700'), ([7, 97], '5610'), ([111, 99], '8,200'), ([255, 99], '10,200'), ([7, 129], 'S790'), ([113, 129], '5,100'), ([255, 129], '14,700'), ([7, 161], 'S970'), ([111, 161], '2,000'), ([255, 159], '19,200')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Look at the table. Then answer the question. At a price of $790, is there a shortage or a surplus?'\nChoices:\n(A) shortage\n(B) surplus\nImage detected text: [([9, 7], 'Price'), ([63, 7], 'Quantity demanded'), ([219, 4], 'Quantity supplied'), ([4, 32], '8250'), ([107, 35], '14,400'), ([259, 35], '1,200'), ([7, 67], '5430'), ([107, 67], '11,300'), ([259, 67], '5,700'), ([7, 97], '5610'), ([111, 99], '8,200'), ([255, 99], '10,200'), ([7, 129], 'S790'), ([113, 129], '5,100'), ([255, 129], '14,700'), ([7, 161], 'S970'), ([111, 161], '2,000'), ([255, 159], '19,200')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "price = 790\nquantity_demanded = 8250\nquantity_supplied = 1200\n\nif quantity_demanded > quantity_supplied:\n    ans = \"shortage\"\nelif quantity_demanded < quantity_supplied:\n    ans = \"surplus\"\nelse:\n    ans = \"neither shortage nor surplus\"\n\nprint(ans)",
        "execution": "shortage",
        "error": "None",
        "extraction": "shortage",
        "prediction": "shortage",
        "true_false": false
    },
    "88": {
        "question": "A square is tangent to a line at point P in the figure above. What is the value of x?",
        "image": "images/88.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "30",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "88",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 442,
            "img_height": 277,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 197], 'square I8 tangent to'), ([211, 195], 'line at point P in the figure'), ([33, 213], 'above. What is the value of x?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A square is tangent to a line at point P in the figure above. What is the value of x?\nImage detected text: [([51, 197], 'square I8 tangent to'), ([211, 195], 'line at point P in the figure'), ([33, 213], 'above. What is the value of x?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\neq = sp.Eq(x, 90)\nsol = sp.solve(eq, x)\nsol",
        "execution": "",
        "error": "None",
        "extraction": "90",
        "prediction": "90",
        "true_false": false
    },
    "89": {
        "question": "How many miles per gallon do an average city bus get?",
        "image": "images/89.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "25",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "89",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 384,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([52, 4], 'OxF'), ([189, 81], 'IURNS')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many miles per gallon do an average city bus get?\nImage detected text: [([52, 4], 'OxF'), ([189, 81], 'IURNS')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def miles_per_gallon(city_bus):\n    return city_bus\n\ncity_bus = 0\nprint(miles_per_gallon(city_bus))",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "90": {
        "question": "Subtract all yellow matte blocks. Subtract all tiny brown cylinders. How many objects are left?",
        "image": "images/90.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "90",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all yellow matte blocks. Subtract all tiny brown cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_matte_blocks = 5\ntiny_brown_cylinders = 3\n\nobjects_left = yellow_matte_blocks - tiny_brown_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "91": {
        "question": "Is the number of brown suvs less than the number of brown rubber school buss?",
        "image": "images/91.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "91",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of brown suvs less than the number of brown rubber school buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(brown_suv, brown_rubber_school_bus):\n    if brown_suv < brown_rubber_school_bus:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbrown_suv = 10\nbrown_rubber_school_bus = 15\n\nprint(compare_numbers(brown_suv, brown_rubber_school_bus))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "92": {
        "question": "Do the windows have a geometric shape that most houses have?",
        "image": "images/92.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "92",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 375,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Do the windows have a geometric shape that most houses have?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def windows_have_geometric_shape(image):\n    geometric_shapes = ['square', 'rectangle', 'circle', 'triangle']\n    for shape in geometric_shapes:\n        if shape in image:\n            return \"Yes\"\n    return \"No\"\n\nimage = \"The house has square windows and a triangular roof.\"\nprint(windows_have_geometric_shape(image))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "93": {
        "question": "What's the computing and wirless total for semiconductor demand in 2014?",
        "image": "images/93.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "197.3",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "93",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 107], '400'), ([41, 141], '1'), ([241, 159], '23.6'), ([61, 175], '300'), ([241, 179], '32 1'), ([557, 177], '413'), ([241, 199], '25.-8'), ([555, 209], '614'), ([241, 225], '539'), ([41, 197], '1'), ([61, 239], '200'), ([553, 267], '107.8'), ([241, 273], '91-9'), ([61, 307], '100'), ([237, 339], '105.4'), ([551, 339], '107.2'), ([241, 391], '201'), ([553, 389], '2019*'), ([89, 431], 'Computing'), ([187, 429], 'Wireless'), ([271, 431], 'Consumer'), ([363, 431], 'Automotive'), ([465, 431], 'Industrial'), ([553, 429], 'Wired Communications'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What's the computing and wirless total for semiconductor demand in 2014?\nImage detected text: [([61, 107], '400'), ([41, 141], '1'), ([241, 159], '23.6'), ([61, 175], '300'), ([241, 179], '32 1'), ([557, 177], '413'), ([241, 199], '25.-8'), ([555, 209], '614'), ([241, 225], '539'), ([41, 197], '1'), ([61, 239], '200'), ([553, 267], '107.8'), ([241, 273], '91-9'), ([61, 307], '100'), ([237, 339], '105.4'), ([551, 339], '107.2'), ([241, 391], '201'), ([553, 389], '2019*'), ([89, 431], 'Computing'), ([187, 429], 'Wireless'), ([271, 431], 'Consumer'), ([363, 431], 'Automotive'), ([465, 431], 'Industrial'), ([553, 429], 'Wired Communications'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "computing_total = 0\nwireless_total = 0\n\nfor text in detected_text:\n    if text[1] == 'Computing':\n        computing_total = int(detected_text[detected_text.index(text) + 1][1])\n    elif text[1] == 'Wireless':\n        wireless_total = int(detected_text[detected_text.index(text) + 1][1])\n\ntotal = computing_total + wireless_total\nprint(total)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "400",
        "prediction": "400.0",
        "true_false": false
    },
    "94": {
        "question": "\u5982\u56fe\uff0cD\u4e3a\u25b3ABC\u5185\u4e00\u70b9\uff0cCD\u5e73\u5206\u2220ACB\uff0cBD\u22a5CD\uff0c\u2220A\uff1d\u2220ABD\uff0c\u82e5\u2220DBC\uff1d54\u00b0\uff0c\u5219\u2220A\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/94.jpg",
        "choices": [
            "36\u00b0",
            "44\u00b0",
            "27\u00b0",
            "54\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "27\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "94",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 160,
            "img_height": 74,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cD\u4e3a\u25b3ABC\u5185\u4e00\u70b9\uff0cCD\u5e73\u5206\u2220ACB\uff0cBD\u22a5CD\uff0c\u2220A\uff1d\u2220ABD\uff0c\u82e5\u2220DBC\uff1d54\u00b0\uff0c\u5219\u2220A\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 36\u00b0\n(B) 44\u00b0\n(C) 27\u00b0\n(D) 54\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the angles\nangle_DBC = 54\n\n# Define the variables\nangle_A = sp.Symbol('angle_A')\n\n# Define the equations\neq1 = sp.Eq(angle_A, angle_A)\neq2 = sp.Eq(angle_A, 180 - angle_A - angle_DBC)\neq3 = sp.Eq(angle_A, 180 - angle_A - angle_DBC)\n\n# Solve the equations\nsolution = sp.solve((eq1, eq2, eq3), (angle_A))\n\n# Print the solution\nprint(solution)",
        "execution": "{angle_A: 63}",
        "error": "None",
        "extraction": "[54]",
        "prediction": "54\u00b0",
        "true_false": false
    },
    "95": {
        "question": "As shown in the figure, the straight lines AB and CD intersect at point O, OD bisects \u2220AOE, \u2220BOC = 50.0, then \u2220EOB = ()",
        "image": "images/95.jpg",
        "choices": [
            "50\u00b0",
            "60\u00b0",
            "70\u00b0",
            "80\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "80\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "95",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 162,
            "img_height": 118,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the straight lines AB and CD intersect at point O, OD bisects \u2220AOE, \u2220BOC = 50.0, then \u2220EOB = ()\nChoices:\n(A) 50\u00b0\n(B) 60\u00b0\n(C) 70\u00b0\n(D) 80\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the angles\nangle_BOC = 50\n\n# Define the unknown angle\nangle_EOB = sp.Symbol('angle_EOB')\n\n# Define the equation for angle sum\neq = sp.Eq(angle_BOC + angle_EOB, 180)\n\n# Solve the equation\nsolution = sp.solve(eq, angle_EOB)\n\n# Print the solution\nprint(solution)",
        "execution": "[130]",
        "error": "None",
        "extraction": "[130]",
        "prediction": "50\u00b0",
        "true_false": false
    },
    "96": {
        "question": "How many times Dissatisfied more than satisfied?",
        "image": "images/96.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "3.9",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "96",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 186,
            "img_height": 328,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([3, 7], 'Most Dissatisfied'), ([3, 26], 'With Country'), ([3, 41], 'Direction'), ([67, 115], 'Dissatisfied'), ([89, 129], '78%'), ([23, 199], 'Satisfied'), ([35, 213], '20%'), ([89, 277], '29/'), ([1, 305], 'PEW RESEARCH CENTER Q2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many times Dissatisfied more than satisfied?\nImage detected text: [([3, 7], 'Most Dissatisfied'), ([3, 26], 'With Country'), ([3, 41], 'Direction'), ([67, 115], 'Dissatisfied'), ([89, 129], '78%'), ([23, 199], 'Satisfied'), ([35, 213], '20%'), ([89, 277], '29/'), ([1, 305], 'PEW RESEARCH CENTER Q2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dissatisfied_percentage = 78\nsatisfied_percentage = 20\n\ndissatisfied_times = dissatisfied_percentage / satisfied_percentage\nprint(dissatisfied_times)",
        "execution": "3.9",
        "error": "None",
        "extraction": "3.9",
        "prediction": "3.9",
        "true_false": true
    },
    "97": {
        "question": "How many algorithms have accuracies higher than 9?",
        "image": "images/97.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "97",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([14, 186], '1'), ([336, 407], 'irony'), ([117, 406], 'icy')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracies higher than 9?\nImage detected text: [([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([14, 186], '1'), ([336, 407], 'irony'), ([117, 406], 'icy')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [10, 1]\ncount = 0\n\nfor accuracy in accuracies:\n    if accuracy > 9:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "98": {
        "question": "Find the value of the square in the figure.",
        "image": "images/98.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "98",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 900,
            "img_height": 506,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the value of the square in the figure.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_square_value(side_length):\n    return side_length ** 2\n\nside_length = 5\nsquare_value = find_square_value(side_length)\nprint(square_value)",
        "execution": "25",
        "error": "None",
        "extraction": "25",
        "prediction": "25",
        "true_false": false
    },
    "99": {
        "question": "Which cat is larger?",
        "image": "images/99.jpg",
        "choices": [
            "white five",
            "white three",
            "white four",
            "white one",
            "white two"
        ],
        "unit": null,
        "precision": null,
        "answer": "white one",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "99",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which cat is larger?\nChoices:\n(A) white five\n(B) white three\n(C) white four\n(D) white one\n(E) white two\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "cat_sizes = {\n    'white one': 10,\n    'white two': 8,\n    'white three': 12,\n    'white four': 9,\n    'white five': 11\n}\n\nlargest_cat = max(cat_sizes, key=cat_sizes.get)\nprint(largest_cat)",
        "execution": "white three",
        "error": "None",
        "extraction": "white three",
        "prediction": "white three",
        "true_false": false
    },
    "100": {
        "question": "What is the sum of all the values in the ruling group?",
        "image": "images/100.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "100",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([229, 13], 'Title'), ([25, 65], 'viruS'), ([22, 108], 'vigor'), ([18, 156], 'ruling'), ([14, 202], 'ninety'), ([37, 251], 'calf'), ([17, 299], 'flower'), ([25, 343], 'toilet'), ([383, 363], 'ace'), ([411, 391], '10'), ([223, 415], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of all the values in the ruling group?\nImage detected text: [([229, 13], 'Title'), ([25, 65], 'viruS'), ([22, 108], 'vigor'), ([18, 156], 'ruling'), ([14, 202], 'ninety'), ([37, 251], 'calf'), ([17, 299], 'flower'), ([25, 343], 'toilet'), ([383, 363], 'ace'), ([411, 391], '10'), ([223, 415], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [65, 108, 156, 202, 251, 299, 343, 363, 391, 415]\nsum_values = sum(values)\nprint(sum_values)",
        "execution": "2593",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "101": {
        "question": "Which shape is most erect?",
        "image": "images/101.jpg",
        "choices": [
            "Lanceolate",
            "Heart-shaped",
            "Linear",
            "Spatulate"
        ],
        "unit": null,
        "precision": null,
        "answer": "Linear",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "101",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 376,
            "img_height": 1204,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([4, 0], 'Many'), ([65, 3], 'broadleaf'), ([153, 3], 'plants'), ([215, 7], 'may'), ([259, 3], 'be   identified'), ([6, 20], 'by looking'), ([109, 23], 'at the'), ([166, 22], 'shape of the cotyledons'), ([7, 45], 'or true leaves'), ([31, 312], 'Oblong'), ([148, 316], 'Spatulate'), ([265, 319], 'Lanceolate'), ([30, 604], 'Hastate'), ([144, 605], 'Sagittate'), ([251, 609], 'Heart-shaped'), ([29, 889], 'Elliptic'), ([157, 889], 'Linear'), ([282, 886], 'Ovate'), ([21, 1181], 'Orbicular'), ([159, 1181], 'Lobed'), ([246, 1178], 'Kidney-shaped')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which shape is most erect?\nChoices:\n(A) Lanceolate\n(B) Heart-shaped\n(C) Linear\n(D) Spatulate\nImage detected text: [([4, 0], 'Many'), ([65, 3], 'broadleaf'), ([153, 3], 'plants'), ([215, 7], 'may'), ([259, 3], 'be   identified'), ([6, 20], 'by looking'), ([109, 23], 'at the'), ([166, 22], 'shape of the cotyledons'), ([7, 45], 'or true leaves'), ([31, 312], 'Oblong'), ([148, 316], 'Spatulate'), ([265, 319], 'Lanceolate'), ([30, 604], 'Hastate'), ([144, 605], 'Sagittate'), ([251, 609], 'Heart-shaped'), ([29, 889], 'Elliptic'), ([157, 889], 'Linear'), ([282, 886], 'Ovate'), ([21, 1181], 'Orbicular'), ([159, 1181], 'Lobed'), ([246, 1178], 'Kidney-shaped')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_erect_shape(shapes):\n    erectness = {\n        'Lanceolate': 1,\n        'Heart-shaped': 2,\n        'Linear': 3,\n        'Spatulate': 4\n    }\n\n    max_erectness = 0\n    most_erect_shape = \"\"\n\n    for shape in shapes:\n        if erectness[shape] > max_erectness:\n            max_erectness = erectness[shape]\n            most_erect_shape = shape\n\n    return most_erect_shape\n\nshapes = ['Lanceolate', 'Heart-shaped', 'Linear', 'Spatulate']\nprint(most_erect_shape(shapes))",
        "execution": "Spatulate",
        "error": "None",
        "extraction": "Linear",
        "prediction": "Linear",
        "true_false": true
    },
    "102": {
        "question": "The shape is made of unit squares. What is the area of the shape?",
        "image": "images/102.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "102",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 106,
            "img_height": 156,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The shape is made of unit squares. What is the area of the shape?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "shape = [\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1]\n]\n\narea = len(shape) * len(shape[0])\nprint(area)",
        "execution": "25",
        "error": "None",
        "extraction": "25",
        "prediction": "25",
        "true_false": false
    },
    "103": {
        "question": "Subtract all small purple matte blocks. Subtract all blocks. How many objects are left?",
        "image": "images/103.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "103",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small purple matte blocks. Subtract all blocks. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_purple_matte_blocks = 10\nall_blocks = 50\n\nobjects_left = all_blocks - small_purple_matte_blocks\nprint(objects_left)",
        "execution": "40",
        "error": "None",
        "extraction": "40",
        "prediction": "40",
        "true_false": false
    },
    "104": {
        "question": "What is the fraction of females facing the camera?",
        "image": "images/104.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "0.8",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "104",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([137, 59], 'LEED')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the fraction of females facing the camera?\nImage detected text: [([137, 59], 'LEED')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_faces = 10\nfemale_faces = 7\n\nfraction_female = female_faces / total_faces\nprint(fraction_female)",
        "execution": "0.7",
        "error": "None",
        "extraction": "0.7",
        "prediction": "0.7",
        "true_false": false
    },
    "105": {
        "question": "Does Dark Violet have the minimum area under the curve?",
        "image": "images/105.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "105",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 727,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([627, 147], 'Dark Violet'), ([7, 153], '1'), ([627, 169], 'Hot Pink'), ([627, 193], 'Medium Mint'), ([9, 191], '1'), ([627, 215], 'Dark Cyan'), ([627, 239], 'Yellow Green'), ([557, 363], '100'), ([285, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Dark Violet have the minimum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([627, 147], 'Dark Violet'), ([7, 153], '1'), ([627, 169], 'Hot Pink'), ([627, 193], 'Medium Mint'), ([9, 191], '1'), ([627, 215], 'Dark Cyan'), ([627, 239], 'Yellow Green'), ([557, 363], '100'), ([285, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def minimum_area_curve(colors, areas):\n    min_area = min(areas)\n    min_color = colors[areas.index(min_area)]\n    \n    if min_color == 'Dark Violet':\n        return 'yes'\n    else:\n        return 'no'\n\ncolors = ['Dark Violet', 'Hot Pink', 'Medium Mint', 'Dark Cyan', 'Yellow Green']\nareas = [1, 2, 3, 4, 5]\n\nprint(minimum_area_curve(colors, areas))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "106": {
        "question": "How many bars have values smaller than 1?",
        "image": "images/106.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "106",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([213, 13], 'Title'), ([15, 79], '3'), ([14, 194], '5'), ([16, 314], '2'), ([411, 391], '10'), ([207, 415], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have values smaller than 1?\nImage detected text: [([213, 13], 'Title'), ([15, 79], '3'), ([14, 194], '5'), ([16, 314], '2'), ([411, 391], '10'), ([207, 415], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [3, 5, 2, 10]\ncount = 0\n\nfor bar in bars:\n    if bar < 1:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": true
    },
    "107": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) past six.",
        "image": "images/107.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "107",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) past six.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter past\"\nprint(time_word)",
        "execution": "quarter past",
        "error": "None",
        "extraction": "quarter past",
        "prediction": "quarter past",
        "true_false": false
    },
    "108": {
        "question": "Find out the average of the bottom two countries ??",
        "image": "images/108.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "51.04",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "108",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 10], 'Scheduled teaching time that teachers are in the classroom; 2002 to 2016'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([15, 41], 'Percentage of time fficially allocated to schooling that'), ([375, 39], 'teacher is in the classroom: In some cases estimates'), ([15, 55], 'correspond to selected regions and are therefore not necessarily nationally representative (see source for details)'), ([51, 125], 'Egypt'), ([741, 125], '93.459 (2002)'), ([43, 237], 'Tunisia'), ([715, 237], '89.89% (2009)'), ([9, 349], 'Madagascar'), ([497, 347], '58.09%'), ([5, 461], 'Mozambique'), ([401, 459], '44% (2012)'), ([213, 541], '20%'), ([349, 541], '40%'), ([487, 541], '60%'), ([627, 543], '80%'), ([15, 571], 'Source: Teaching time lost -'), ([173, 571], 'World Development Report (2018)'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find out the average of the bottom two countries ??\nImage detected text: [([12, 10], 'Scheduled teaching time that teachers are in the classroom; 2002 to 2016'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([15, 41], 'Percentage of time fficially allocated to schooling that'), ([375, 39], 'teacher is in the classroom: In some cases estimates'), ([15, 55], 'correspond to selected regions and are therefore not necessarily nationally representative (see source for details)'), ([51, 125], 'Egypt'), ([741, 125], '93.459 (2002)'), ([43, 237], 'Tunisia'), ([715, 237], '89.89% (2009)'), ([9, 349], 'Madagascar'), ([497, 347], '58.09%'), ([5, 461], 'Mozambique'), ([401, 459], '44% (2012)'), ([213, 541], '20%'), ([349, 541], '40%'), ([487, 541], '60%'), ([627, 543], '80%'), ([15, 571], 'Source: Teaching time lost -'), ([173, 571], 'World Development Report (2018)'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "countries = {\n    'Egypt': 93.459,\n    'Tunisia': 89.89,\n    'Madagascar': 58.09,\n    'Mozambique': 44\n}\n\nsorted_countries = sorted(countries.items(), key=lambda x: x[1])\naverage = (sorted_countries[0][1] + sorted_countries[1][1]) / 2\nprint(average)",
        "execution": "51.045",
        "error": "None",
        "extraction": "73.495",
        "prediction": "73.5",
        "true_false": false
    },
    "109": {
        "question": "Subtract all tiny balls. Subtract all green metallic things. How many objects are left?",
        "image": "images/109.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "109",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny balls. Subtract all green metallic things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_balls = 5\ngreen_metallic_things = 3\n\nobjects_left = tiny_balls - green_metallic_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "110": {
        "question": "Is the sum of two lowest bar is greater then the largest bar?",
        "image": "images/110.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "110",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 12], 'Deaths'), ([156, 9], 'natural disasters a8 a share of total deaths, 2014'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([9, 97], 'Ecuador'), ([783, 97], '0.02%'), ([27, 191], 'China'), ([555, 191], '0.02%0'), ([19, 285], 'Ireland'), ([173, 285], '<0.01%0'), ([9, 377], 'Armenia'), ([73, 377], '0%'), ([27, 473], 'Israel'), ([73, 471], '0%'), ([197, 541], '005%'), ([333, 541], '0.01%'), ([473, 541], '0.015%'), ([633, 541], '02%'), ([15, 571], 'Source'), ([61, 569], 'Institute for Health Metrics and Evaluation (IHME) , Global'), ([385, 571], 'Burden of Disease'), ([573, 569], 'OurWorldlnData orglnatural-disasters'), ([793, 571], 'CC BY'), ([95, 9], 'from')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the sum of two lowest bar is greater then the largest bar?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([12, 12], 'Deaths'), ([156, 9], 'natural disasters a8 a share of total deaths, 2014'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([9, 97], 'Ecuador'), ([783, 97], '0.02%'), ([27, 191], 'China'), ([555, 191], '0.02%0'), ([19, 285], 'Ireland'), ([173, 285], '<0.01%0'), ([9, 377], 'Armenia'), ([73, 377], '0%'), ([27, 473], 'Israel'), ([73, 471], '0%'), ([197, 541], '005%'), ([333, 541], '0.01%'), ([473, 541], '0.015%'), ([633, 541], '02%'), ([15, 571], 'Source'), ([61, 569], 'Institute for Health Metrics and Evaluation (IHME) , Global'), ([385, 571], 'Burden of Disease'), ([573, 569], 'OurWorldlnData orglnatural-disasters'), ([793, 571], 'CC BY'), ([95, 9], 'from')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def sum_of_two_lowest_bars_greater_than_largest_bar(bars):\n    sorted_bars = sorted(bars)\n    return sorted_bars[0] + sorted_bars[1] > sorted_bars[-1]\n\nbars = [12, 156, 775]\nprint(sum_of_two_lowest_bars_greater_than_largest_bar(bars))",
        "execution": "False",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "111": {
        "question": "Subtract all big gray matte things. Subtract all small metallic cylinders. How many objects are left?",
        "image": "images/111.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "111",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big gray matte things. Subtract all small metallic cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_gray_matte_things = 5\nsmall_metallic_cylinders = 3\n\nobjects_left = big_gray_matte_things - small_metallic_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "112": {
        "question": "Is the number of big cyan airliners less than the number of gray shiny utility bikes?",
        "image": "images/112.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "112",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of big cyan airliners less than the number of gray shiny utility bikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_cyan_airliners = 5\ngray_shiny_utility_bikes = 8\n\nif big_cyan_airliners < gray_shiny_utility_bikes:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "113": {
        "question": "How many baseballs are there?",
        "image": "images/113.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "20",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "113",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 721,
            "img_height": 458,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many baseballs are there?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef count_baseballs(text):\n    pattern = r'\\b(\\d+)\\s*baseballs?\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return int(matches[0])\n    else:\n        return 0\n\ntext = \"There are 5 baseballs on the table.\"\nprint(count_baseballs(text))",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "114": {
        "question": "In the figure, KL is tangent to $\\odot M$ at K. Find the value of x.",
        "image": "images/114.jpg",
        "choices": [
            "6.00",
            "9.45",
            "18.9",
            "37.8"
        ],
        "unit": null,
        "precision": null,
        "answer": "9.45",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "114",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 347,
            "img_height": 273,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([90, 88], 'M'), ([254, 114], '17'), ([214, 198], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure, KL is tangent to $\\odot M$ at K. Find the value of x.\nChoices:\n(A) 6.00\n(B) 9.45\n(C) 18.9\n(D) 37.8\nImage detected text: [([90, 88], 'M'), ([254, 114], '17'), ([214, 198], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\nangle_M = 17\nangle_K = 10\n\neq = Eq(angle_M, 180 - angle_K - x)\nsol = solve(eq, x)\n\nprint(sol[0])",
        "execution": "153",
        "error": "None",
        "extraction": "9.0",
        "prediction": "6.00",
        "true_false": false
    },
    "115": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/115.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "115",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 826,
            "img_height": 1079,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([273, 411], '/S')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([273, 411], '/S')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1990\nperson2_birth_year = 1985\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "116": {
        "question": "Which leaf has the most veins?",
        "image": "images/116.jpg",
        "choices": [
            "Acuminate",
            "Truncate",
            "Mucronate",
            "Acute"
        ],
        "unit": null,
        "precision": null,
        "answer": "Acuminate",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "116",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 350,
            "img_height": 187,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 75], 'acuminate'), ([121, 77], 'acute'), ([193, 77], 'cuspidate'), ([267, 77], 'emarginate'), ([21, 171], 'Mucronatc'), ([114, 172], 'obcordato'), ([209, 171], 'obtuse'), ([279, 171], 'truncatc')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which leaf has the most veins?\nChoices:\n(A) Acuminate\n(B) Truncate\n(C) Mucronate\n(D) Acute\nImage detected text: [([12, 75], 'acuminate'), ([121, 77], 'acute'), ([193, 77], 'cuspidate'), ([267, 77], 'emarginate'), ([21, 171], 'Mucronatc'), ([114, 172], 'obcordato'), ([209, 171], 'obtuse'), ([279, 171], 'truncatc')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_veins_leaf(leaf_list):\n    veins_count = {}\n    for leaf in leaf_list:\n        veins_count[leaf[1]] = veins_count.get(leaf[1], 0) + 1\n    \n    max_veins = max(veins_count.values())\n    for leaf, count in veins_count.items():\n        if count == max_veins:\n            return leaf\n    \n    return \"\"\n\nleaf_list = [([12, 75], 'acuminate'), ([121, 77], 'acute'), ([193, 77], 'cuspidate'), ([267, 77], 'emarginate'), ([21, 171], 'Mucronatc'), ([114, 172], 'obcordato'), ([209, 171], 'obtuse'), ([279, 171], 'truncatc')]\nprint(most_veins_leaf(leaf_list))",
        "execution": "acuminate",
        "error": "None",
        "extraction": "truncatc",
        "prediction": "Truncate",
        "true_false": false
    },
    "117": {
        "question": "What is the range of this function?",
        "image": "images/117.jpg",
        "choices": [
            "[0, 2]",
            "[3, 2]",
            "[2, 4]",
            "[-3, 4]"
        ],
        "unit": null,
        "precision": null,
        "answer": "[0, 2]",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "117",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 460,
            "img_height": 356,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([321, 94], '(3,,41')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the range of this function?\nChoices:\n(A) [0, 2]\n(B) [3, 2]\n(C) [2, 4]\n(D) [-3, 4]\nImage detected text: [([321, 94], '(3,,41')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\ndef find_range(function):\n    x = np.linspace(-10, 10, 1000)\n    y = eval(function)\n    return [np.min(y), np.max(y)]\n\nfunction = \"3*x**2 + 4*x - 1\"\nrange_of_function = find_range(function)\nprint(range_of_function)",
        "execution": "",
        "error": "name 'np' is not defined",
        "extraction": "[0, 2]",
        "prediction": "[0, 2]",
        "true_false": true
    },
    "118": {
        "question": "What is the maximum value of this function?",
        "image": "images/118.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "118",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 296,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the maximum value of this function?\nImage detected text: [([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def maximum_value(function):\n    max_value = float('-inf')\n    for value in function:\n        if value.isdigit():\n            max_value = max(max_value, int(value))\n    return max_value\n\nfunction = ['2', '3', '3', '3', '?']\nprint(maximum_value(function))",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "119": {
        "question": "As shown in the figure, P is a point outside \u2299O, PA and PB intersect \u2299O at two points C and D respectively. It is known that the central angles of \u2040AB and \u2040CD are 90.0 and 50.0 respectively, then \u2220P = ()",
        "image": "images/119.jpg",
        "choices": [
            "45\u00b0",
            "40\u00b0",
            "25\u00b0",
            "20\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "20\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "119",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 103,
            "img_height": 165,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, P is a point outside \u2299O, PA and PB intersect \u2299O at two points C and D respectively. It is known that the central angles of \u2040AB and \u2040CD are 90.0 and 50.0 respectively, then \u2220P = ()\nChoices:\n(A) 45\u00b0\n(B) 40\u00b0\n(C) 25\u00b0\n(D) 20\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_AB, angle_CD):\n    angle_AD = 180 - angle_AB\n    angle_P = angle_AD - angle_CD\n    return angle_P\n\nangle_AB = 90.0\nangle_CD = 50.0\n\nangle_P = find_angle(angle_AB, angle_CD)\nprint(angle_P)",
        "execution": "40.0",
        "error": "None",
        "extraction": "25",
        "prediction": "25\u00b0",
        "true_false": false
    },
    "120": {
        "question": "What is the degree of this function?",
        "image": "images/120.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "120",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 312,
            "img_height": 320,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the degree of this function?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = x**3 + 2*x**2 - 5*x + 1\n\ndegree = sp.degree(f, x)\nprint(degree)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "121": {
        "question": "In trying to calculate how much money could be saved by packing lunch, Manny recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Wednesday and Thursday? (Unit: $, per day)",
        "image": "images/121.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "121",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 235,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([8, 6], 'Amount Manny spent on lunch'), ([39, 37], 'Day'), ([123, 38], 'Amount spent'), ([5, 64], 'Tuesday'), ([157, 67], 'S10'), ([7, 99], 'Wednesday'), ([5, 126], 'Thursday'), ([5, 157], 'Friday'), ([161, 161], '59'), ([5, 188], 'Saturday'), ([161, 191], '$8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In trying to calculate how much money could be saved by packing lunch, Manny recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Wednesday and Thursday? (Unit: $, per day)\nImage detected text: [([8, 6], 'Amount Manny spent on lunch'), ([39, 37], 'Day'), ([123, 38], 'Amount spent'), ([5, 64], 'Tuesday'), ([157, 67], 'S10'), ([7, 99], 'Wednesday'), ([5, 126], 'Thursday'), ([5, 157], 'Friday'), ([161, 161], '59'), ([5, 188], 'Saturday'), ([161, 191], '$8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "wednesday_spent = 10\nthursday_spent = 8\n\nrate_of_change = thursday_spent - wednesday_spent\nprint(rate_of_change)",
        "execution": "-2",
        "error": "None",
        "extraction": "-2",
        "prediction": "-2",
        "true_false": false
    },
    "122": {
        "question": "Are there fewer yellow regular buss than small yellow metallic school buss?",
        "image": "images/122.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "122",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer yellow regular buss than small yellow metallic school buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def fewer_yellow_buses(regular_buses, school_buses):\n    if regular_buses < school_buses:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nregular_buses = 10\nschool_buses = 5\n\nprint(fewer_yellow_buses(regular_buses, school_buses))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "123": {
        "question": "The diagram represents successive rotations, starting from the top down. Which shape comes next?",
        "image": "images/123.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "123",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 412,
            "img_height": 579,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The diagram represents successive rotations, starting from the top down. Which shape comes next?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def next_shape(diagram, choices):\n    shapes = ['A', 'B', 'C', 'D', 'E']\n    index = shapes.index(diagram)\n    next_index = (index + 1) % len(shapes)\n    return choices[next_index]\n\nchoices = ['A', 'B', 'C', 'D', 'E']\ndiagram = 'C'\n\nprint(next_shape(diagram, choices))",
        "execution": "D",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "124": {
        "question": "This type of leaf arrangement consists of at least three leaves attached to a node.",
        "image": "images/124.jpg",
        "choices": [
            "Whorled",
            "Simple",
            "Opposite",
            "Alternate"
        ],
        "unit": null,
        "precision": null,
        "answer": "Whorled",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "124",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 576,
            "img_height": 225,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([281, 179], 'opposite'), ([501, 189], 'whorled'), ([109, 201], 'alternate')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: This type of leaf arrangement consists of at least three leaves attached to a node.\nChoices:\n(A) Whorled\n(B) Simple\n(C) Opposite\n(D) Alternate\nImage detected text: [([281, 179], 'opposite'), ([501, 189], 'whorled'), ([109, 201], 'alternate')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "leaf_arrangement = \"\"\n\nfor text in detected_text:\n    if \"opposite\" in text:\n        leaf_arrangement = \"opposite\"\n    elif \"whorled\" in text:\n        leaf_arrangement = \"whorled\"\n    elif \"alternate\" in text:\n        leaf_arrangement = \"alternate\"\n\nprint(leaf_arrangement)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "Opposite",
        "prediction": "Opposite",
        "true_false": false
    },
    "125": {
        "question": "What happens if caterpillars decrease?",
        "image": "images/125.jpg",
        "choices": [
            "plants decrease",
            "plants increase",
            "nothing happens",
            "none of the above"
        ],
        "unit": null,
        "precision": null,
        "answer": "plants increase",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "125",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 947,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What happens if caterpillars decrease?\nChoices:\n(A) plants decrease\n(B) plants increase\n(C) nothing happens\n(D) none of the above\nImage detected text: [([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def what_happens(caption, choices):\n    if \"caterpillars decrease\" in caption:\n        return choices[1]  # plants increase\n    else:\n        return choices[2]  # nothing happens\n\nchoices = ['plants decrease', 'plants increase', 'nothing happens', 'none of the above']\ncaption = \"The image shows a food chain with caterpillars as a primary consumer. If the population of caterpillars decreases, what will happen?\"\n\nprint(what_happens(caption, choices))",
        "execution": "plants increase",
        "error": "None",
        "extraction": "plants increase",
        "prediction": "plants increase",
        "true_false": true
    },
    "126": {
        "question": "What is the age gap between the leftmost and the rigtmost person?",
        "image": "images/126.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "126",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 623,
            "img_height": 800,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between the leftmost and the rigtmost person? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "leftmost_age = 25\nrightmost_age = 40\n\nage_gap = rightmost_age - leftmost_age\nprint(age_gap)",
        "execution": "15",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "127": {
        "question": "How much more accurate is the most accurate algorithm compared the least accurate algorithm?",
        "image": "images/127.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "127",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([14, 186], '1'), ([92, 408], 'bronze'), ([219, 413], 'spray'), ([353, 413], 'cab')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much more accurate is the most accurate algorithm compared the least accurate algorithm?\nImage detected text: [([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([14, 186], '1'), ([92, 408], 'bronze'), ([219, 413], 'spray'), ([353, 413], 'cab')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_accurate = 10\nleast_accurate = 1\n\ndifference = most_accurate - least_accurate\nprint(difference)",
        "execution": "9",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "128": {
        "question": "Subtract all large metal blocks. Subtract all yellow cylinders. How many objects are left?",
        "image": "images/128.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "128",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large metal blocks. Subtract all yellow cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_metal_blocks = 5\nyellow_cylinders = 3\n\nobjects_left = large_metal_blocks - yellow_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "129": {
        "question": "Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.",
        "image": "images/129.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "129",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 156,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 123], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.\nImage detected text: [([19, 123], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(ruler_start, ruler_end):\n    length = ruler_end - ruler_start\n    length = math.ceil(length)\n    return length\n\nruler_start = 19\nruler_end = 123\n\nlength = measure_length(ruler_start, ruler_end)\nprint(f\"The twig is about {length} inches long.\")",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "104",
        "prediction": "104",
        "true_false": false
    },
    "130": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/130.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "130",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1063,
            "img_height": 1403,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "131": {
        "question": "How many bars have value below 40?",
        "image": "images/131.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "131",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '125'), ([43, 123], ']'), ([431, 169], '72.9'), ([640, 218], '5522'), ([44, 190], 'L'), ([473, 275], '32.5'), ([135, 391], '2014'), ([241, 391], '2015'), ([345, 389], '2016'), ([451, 391], '2017'), ([555, 389], '2018'), ([659, 389], '2019'), ([327, 431], 'Banknotes'), ([421, 431], 'Coins'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have value below 40?\nImage detected text: [([61, 41], '125'), ([43, 123], ']'), ([431, 169], '72.9'), ([640, 218], '5522'), ([44, 190], 'L'), ([473, 275], '32.5'), ([135, 391], '2014'), ([241, 391], '2015'), ([345, 389], '2016'), ([451, 391], '2017'), ([555, 389], '2018'), ([659, 389], '2019'), ([327, 431], 'Banknotes'), ([421, 431], 'Coins'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [125, 72.9, 5522, 32.5]\ncount = 0\n\nfor bar in bars:\n    if bar < 40:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "132": {
        "question": "\u5982\u56fe\uff0c\u57284\u00d74\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5c0f\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u5747\u4e3a1\uff0c\u70b9A\uff0cB\uff0cC\u90fd\u5728\u683c\u70b9\u4e0a\uff0cAD\u22a5BC\u4e8eD\uff0c\u5219AD\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/132.jpg",
        "choices": [
            "1",
            "1.5",
            "2",
            "\\frac{7}{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "132",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 155,
            "img_height": 160,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u57284\u00d74\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5c0f\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u5747\u4e3a1\uff0c\u70b9A\uff0cB\uff0cC\u90fd\u5728\u683c\u70b9\u4e0a\uff0cAD\u22a5BC\u4e8eD\uff0c\u5219AD\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 1\n(B) 1.5\n(C) 2\n(D) \\frac{7}{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_AD_length():\n    # The coordinates of points A, B, C\n    A = (0, 0)\n    B = (3, 0)\n    C = (3, 3)\n\n    # Calculate the distance between A and D using the Pythagorean theorem\n    AD_length = ((C[0] - B[0])**2 + (C[1] - B[1])**2)**0.5\n\n    return AD_length\n\nprint(find_AD_length())",
        "execution": "3.0",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "133": {
        "question": "In how many years, is the merchandise exports greater than 0.92 %?",
        "image": "images/133.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "133",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1268,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 9], 'Trade statistics of Hong Kong with developing economies in Latin America'), ([9, 81], '1'), ([7, 214], '1'), ([7, 285], '1'), ([1097, 305], 'Merchandise exports'), ([1095, 329], 'Merchandise imports'), ([9, 333], '6'), ([7, 354], '1'), ([9, 447], '1'), ([9, 487], '1'), ([99, 591], '8'), ([403, 591], '8'), ([707, 591], '8'), ([1011, 591], '2'), ([539, 628], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the merchandise exports greater than 0.92 %?\nImage detected text: [([57, 9], 'Trade statistics of Hong Kong with developing economies in Latin America'), ([9, 81], '1'), ([7, 214], '1'), ([7, 285], '1'), ([1097, 305], 'Merchandise exports'), ([1095, 329], 'Merchandise imports'), ([9, 333], '6'), ([7, 354], '1'), ([9, 447], '1'), ([9, 487], '1'), ([99, 591], '8'), ([403, 591], '8'), ([707, 591], '8'), ([1011, 591], '2'), ([539, 628], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "merchandise_exports = 0.92\nyear = 1\n\nwhile merchandise_exports <= 0.92:\n    merchandise_exports *= 1.08\n    year += 1\n\nprint(year)",
        "execution": "2",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "134": {
        "question": "People can use the engineering-design process to develop solutions to problems. One step in the process is testing if a potential solution meets the requirements of the design.\nThe passage below describes how the engineering-design process was used to test a solution to a problem. Read the passage. Then answer the question below.\n\nCooper was a landscape architect who was hired to design a new city park. The city council wanted the park to have space for outdoor concerts and to have at least 20% of the park shaded by trees. Cooper thought the concert area should be at least 150 meters from the road so traffic noise didn't interrupt the music. He developed three possible designs for the park with the concert area in a different location in each design. Then, he tested each design by measuring the distance between the road and the concert area.\nFigure: studying an architect's design. Which of the following could Cooper's test show?",
        "image": "images/134.jpg",
        "choices": [
            "if at least 20% of the park would be shaded by trees in each design",
            "which design would have the least traffic noise in the concert area",
            "which design would have the greatest distance between the concert area and the road"
        ],
        "unit": null,
        "precision": null,
        "answer": "which design would have the greatest distance between the concert area and the road",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "134",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 302,
            "img_height": 232,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "natural image",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: People can use the engineering-design process to develop solutions to problems. One step in the process is testing if a potential solution meets the requirements of the design.\nThe passage below describes how the engineering-design process was used to test a solution to a problem. Read the passage. Then answer the question below.\n\nCooper was a landscape architect who was hired to design a new city park. The city council wanted the park to have space for outdoor concerts and to have at least 20% of the park shaded by trees. Cooper thought the concert area should be at least 150 meters from the road so traffic noise didn't interrupt the music. He developed three possible designs for the park with the concert area in a different location in each design. Then, he tested each design by measuring the distance between the road and the concert area.\nFigure: studying an architect's design. Which of the following could Cooper's test show?\nChoices:\n(A) if at least 20% of the park would be shaded by trees in each design\n(B) which design would have the least traffic noise in the concert area\n(C) which design would have the greatest distance between the concert area and the road\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def test_solution(designs):\n    distances = []\n    for design in designs:\n        distance = design['distance']\n        distances.append(distance)\n    max_distance = max(distances)\n    return max_distance\n\ndesigns = [\n    {'distance': 100},\n    {'distance': 200},\n    {'distance': 150}\n]\n\nprint(test_solution(designs))",
        "execution": "200",
        "error": "None",
        "extraction": "150",
        "prediction": "if at least 20% of the park would be shaded by trees in each design",
        "true_false": false
    },
    "135": {
        "question": "Is the number of buss that are in front of the big yellow aeroplane less than the number of matte bicycles that are on the right side of the tiny thing?",
        "image": "images/135.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "135",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of buss that are in front of the big yellow aeroplane less than the number of matte bicycles that are on the right side of the tiny thing?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(num_buses, num_bicycles):\n    if num_buses < num_bicycles:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_buses = 5\nnum_bicycles = 3\n\nprint(compare_numbers(num_buses, num_bicycles))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "136": {
        "question": "What is the difference between the highest and the lowest value of blue bar?",
        "image": "images/136.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "64",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "136",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 415,
            "img_height": 443,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 8], '89% of Cell Owners Used Their Phones During Their'), ([0, 28], 'Most Recent Social Activity with Others'), ([13, 57], 'f cell owners whodid thefollowing using their cellphone during their'), ([1, 75], 'most recent social gathering'), ([7, 113], 'Did at least one ofthese activties below'), ([387, 115], '893'), ([15, 143], 'Read'), ([55, 143], 'messagesuch astext'), ([179, 143], 'email'), ([99, 171], 'Tcok'), ([137, 171], 'photo'), ([181, 171], 'video'), ([7, 201], 'Senta meszagesuch 83'), ([145, 201], 'text or email'), ([75, 227], 'Received an incomingcall'), ([19, 249], 'Checked'), ([77, 249], 'see ifyouve'), ([147, 249], 'eceived any'), ([183, 263], 'lert:'), ([143, 285], 'Placed'), ([145, 313], 'Used'), ([175, 315], 'an BPp'), ([57, 343], 'Searched'), ([121, 343], 'browzed the web'), ([0, 384], 'Somce'), ([41, 383], 'Pew Research Center American Trends Panelsurvey, May 30-June 30, 2014.'), ([0, 395], 'N=3,042 cel'), ([63, 397], 'Users'), ([1, 415], 'PEW RESEARCH CENTER')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the highest and the lowest value of blue bar?\nImage detected text: [([0, 8], '89% of Cell Owners Used Their Phones During Their'), ([0, 28], 'Most Recent Social Activity with Others'), ([13, 57], 'f cell owners whodid thefollowing using their cellphone during their'), ([1, 75], 'most recent social gathering'), ([7, 113], 'Did at least one ofthese activties below'), ([387, 115], '893'), ([15, 143], 'Read'), ([55, 143], 'messagesuch astext'), ([179, 143], 'email'), ([99, 171], 'Tcok'), ([137, 171], 'photo'), ([181, 171], 'video'), ([7, 201], 'Senta meszagesuch 83'), ([145, 201], 'text or email'), ([75, 227], 'Received an incomingcall'), ([19, 249], 'Checked'), ([77, 249], 'see ifyouve'), ([147, 249], 'eceived any'), ([183, 263], 'lert:'), ([143, 285], 'Placed'), ([145, 313], 'Used'), ([175, 315], 'an BPp'), ([57, 343], 'Searched'), ([121, 343], 'browzed the web'), ([0, 384], 'Somce'), ([41, 383], 'Pew Research Center American Trends Panelsurvey, May 30-June 30, 2014.'), ([0, 395], 'N=3,042 cel'), ([63, 397], 'Users'), ([1, 415], 'PEW RESEARCH CENTER')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_bar_values = [893, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83,",
        "execution": "",
        "error": "unexpected EOF while parsing (<string>, line 1)",
        "extraction": "83",
        "prediction": "83",
        "true_false": false
    },
    "137": {
        "question": "Is the function (f: R to R) injective?",
        "image": "images/137.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "137",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 258,
            "img_height": 291,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([110, 16], '54'), ([156, 14], 'f(x) = x2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the function (f: R to R) injective?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([110, 16], '54'), ([156, 14], 'f(x) = x2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_injective(f):\n    # Check if f(x) = f(y) implies x = y\n    for x in range(-100, 101):\n        for y in range(-100, 101):\n            if f(x) == f(y) and x != y:\n                return False\n    return True\n\ndef f(x):\n    return x**2\n\nif is_injective(f):\n    print(\"The function is injective\")\nelse:\n    print(\"The function is not injective\")",
        "execution": "The function is not injective",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "138": {
        "question": "Is the sandwich cut in half?",
        "image": "images/138.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "138",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the sandwich cut in half?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_sandwich_cut_in_half(caption):\n    if \"cut in half\" in caption:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"The image shows a sandwich with lettuce, tomato, and cheese. It is cut in half.\"\nprint(is_sandwich_cut_in_half(caption))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "139": {
        "question": "Does Indigo have the lowest value?",
        "image": "images/139.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "139",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 543,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([459, 13], 'Hot Pink'), ([458, 34], 'Navy Blue'), ([457, 59], 'Indigo'), ([459, 81], 'Sky Blue'), ([459, 105], 'Magenta'), ([459, 126], 'Web Gray'), ([459, 151], 'Chartreuse'), ([7, 153], '1'), ([9, 191], '1'), ([397, 363], '100'), ([201, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Indigo have the lowest value?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([459, 13], 'Hot Pink'), ([458, 34], 'Navy Blue'), ([457, 59], 'Indigo'), ([459, 81], 'Sky Blue'), ([459, 105], 'Magenta'), ([459, 126], 'Web Gray'), ([459, 151], 'Chartreuse'), ([7, 153], '1'), ([9, 191], '1'), ([397, 363], '100'), ([201, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "colors = {\n    'Hot Pink': 1,\n    'Navy Blue': 1,\n    'Indigo': 1,\n    'Sky Blue': 1,\n    'Magenta': 1,\n    'Web Gray': 1,\n    'Chartreuse': 1\n}\n\nlowest_value = min(colors.values())\n\nif lowest_value == colors['Indigo']:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "140": {
        "question": "Which food has the least carbs?",
        "image": "images/140.jpg",
        "choices": [
            "soup",
            "water",
            "sandwich",
            "buns"
        ],
        "unit": null,
        "precision": null,
        "answer": "soup",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "140",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 428,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([345, 389], 'LESCURE'), ([383, 397], 'LESCURR')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which food has the least carbs?\nChoices:\n(A) soup\n(B) water\n(C) sandwich\n(D) buns\nImage detected text: [([345, 389], 'LESCURE'), ([383, 397], 'LESCURR')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "carbs = {\n    'soup': 10,\n    'water': 0,\n    'sandwich': 30,\n    'buns': 25\n}\n\nleast_carbs = min(carbs, key=carbs.get)\nprint(least_carbs)",
        "execution": "water",
        "error": "None",
        "extraction": "water",
        "prediction": "water",
        "true_false": false
    },
    "141": {
        "question": "As shown in the figure, AB is a long ladder leaning on the wall, the foot of the ladder B is away from the wall 1.6, the point D on the ladder is away from the wall 1.4, the length of BD is 0.55, then the length of the ladder is ()",
        "image": "images/141.jpg",
        "choices": [
            "3.85\u7c73",
            "4.00\u7c73",
            "4.40\u7c73",
            "4.50\u7c73"
        ],
        "unit": null,
        "precision": null,
        "answer": "4.40\u7c73",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "141",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 78,
            "img_height": 128,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is a long ladder leaning on the wall, the foot of the ladder B is away from the wall 1.6, the point D on the ladder is away from the wall 1.4, the length of BD is 0.55, then the length of the ladder is ()\nChoices:\n(A) 3.85\u7c73\n(B) 4.00\u7c73\n(C) 4.40\u7c73\n(D) 4.50\u7c73\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_ladder_length(foot_distance, point_distance, bd_length):\n    ab_length = math.sqrt((foot_distance + point_distance)**2 + bd_length**2)\n    return ab_length\n\nfoot_distance = 1.6\npoint_distance = 1.4\nbd_length = 0.55\n\nladder_length = find_ladder_length(foot_distance, point_distance, bd_length)\nprint(ladder_length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "4.40",
        "prediction": "4.40\u7c73",
        "true_false": true
    },
    "142": {
        "question": "Is it split in half?",
        "image": "images/142.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "142",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 425,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is it split in half?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_split_in_half(text):\n    if \"split in half\" in text:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ntext = \"The cake is split in half and filled with cream and strawberries.\"\nprint(is_split_in_half(text))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "143": {
        "question": "As shown in the figure, in the parallelogram ABCD, CE bisects \u2220BCD and it intersects the AD edge at point E, and DE = 3.0, then the length of AB is ()",
        "image": "images/143.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "143",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 204,
            "img_height": 85,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the parallelogram ABCD, CE bisects \u2220BCD and it intersects the AD edge at point E, and DE = 3.0, then the length of AB is ()\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_AB_length(DE_length):\n    # Since CE bisects angle BCD, triangle CDE is isosceles\n    # Therefore, CD = DE = 3.0\n\n    # In parallelogram ABCD, opposite sides are equal\n    # Therefore, AB = CD = 3.0\n\n    return DE_length\n\nDE_length = 3.0\nAB_length = find_AB_length(DE_length)\nprint(AB_length)",
        "execution": "3.0",
        "error": "None",
        "extraction": "3.0",
        "prediction": "3",
        "true_false": true
    },
    "144": {
        "question": "Natalie buys 4.6 kilograms of turmeric. What is the total cost? (Unit: $)",
        "image": "images/144.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "13.8",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "144",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 210,
            "img_height": 162,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 11], 'pepper'), ([129, 7], 'S4 per kg'), ([11, 41], 'cumin'), ([131, 39], '53 per kg'), ([9, 73], 'turmeric'), ([131, 71], '53 per kg'), ([11, 105], 'cinnamon'), ([131, 103], '53 per kg'), ([9, 135], 'paprika'), ([129, 135], 'S2 per kg')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Natalie buys 4.6 kilograms of turmeric. What is the total cost? (Unit: $)\nImage detected text: [([11, 11], 'pepper'), ([129, 7], 'S4 per kg'), ([11, 41], 'cumin'), ([131, 39], '53 per kg'), ([9, 73], 'turmeric'), ([131, 71], '53 per kg'), ([11, 105], 'cinnamon'), ([131, 103], '53 per kg'), ([9, 135], 'paprika'), ([129, 135], 'S2 per kg')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "turmeric_price_per_kg = 53.00\nturmeric_weight = 4.6\n\ntotal_cost = turmeric_price_per_kg * turmeric_weight\nprint(total_cost)",
        "execution": "243.79999999999998",
        "error": "None",
        "extraction": "249.8",
        "prediction": "249.8",
        "true_false": false
    },
    "145": {
        "question": "Can you find the missing term?",
        "image": "images/145.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "145",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 900,
            "img_height": 506,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Can you find the missing term?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_missing_term(sequence):\n    n = len(sequence)\n    common_difference = (sequence[-1] - sequence[0]) // n\n    for i in range(1, n):\n        if sequence[i] != sequence[i-1] + common_difference:\n            return sequence[i-1] + common_difference\n    return \"\"\n\nsequence = [2, 4, 6, 10, 12]\nprint(find_missing_term(sequence))",
        "execution": "8",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": true
    },
    "146": {
        "question": "Kimberly's classmates revealed how many science articles they read. What is the range of the numbers?'",
        "image": "images/146.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "146",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 286,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 5], 'Science articles read'), ([15, 39], 'Name'), ([77, 37], 'Number of science articles'), ([2, 66], 'Kimberly'), ([3, 99], 'Valeria'), ([3, 129], 'Sophia'), ([5, 163], 'Brad'), ([5, 195], 'Lorenzo')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Kimberly's classmates revealed how many science articles they read. What is the range of the numbers?'\nImage detected text: [([61, 5], 'Science articles read'), ([15, 39], 'Name'), ([77, 37], 'Number of science articles'), ([2, 66], 'Kimberly'), ([3, 99], 'Valeria'), ([3, 129], 'Sophia'), ([5, 163], 'Brad'), ([5, 195], 'Lorenzo')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "science_articles_read = [3, 3, 5, 5]\nrange_of_numbers = max(science_articles_read) - min(science_articles_read)\nprint(range_of_numbers)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "147": {
        "question": "The diagrams below show two pure samples of gas in identical closed, rigid containers. Each colored ball represents one gas particle. Both samples have the same number of particles. Compare the average kinetic energies of the particles in each sample. Which sample has the higher temperature?",
        "image": "images/147.jpg",
        "choices": [
            "neither; the samples have the same temperature",
            "sample B",
            "sample A"
        ],
        "unit": null,
        "precision": null,
        "answer": "sample B",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "147",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 563,
            "img_height": 405,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([83, 313], 'Sample A'), ([403, 313], 'Sample B'), ([24, 346], 'Mass of each particle: 44 u'), ([344, 346], 'Mass of each particle: 46 u'), ([0, 384], 'Average particle speed: 1,400 mls'), ([319, 384], 'Average particle speed: 1,400 mls')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The diagrams below show two pure samples of gas in identical closed, rigid containers. Each colored ball represents one gas particle. Both samples have the same number of particles. Compare the average kinetic energies of the particles in each sample. Which sample has the higher temperature?\nChoices:\n(A) neither; the samples have the same temperature\n(B) sample B\n(C) sample A\nImage detected text: [([83, 313], 'Sample A'), ([403, 313], 'Sample B'), ([24, 346], 'Mass of each particle: 44 u'), ([344, 346], 'Mass of each particle: 46 u'), ([0, 384], 'Average particle speed: 1,400 mls'), ([319, 384], 'Average particle speed: 1,400 mls')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_temperature(sample_a_mass, sample_b_mass, sample_a_speed, sample_b_speed):\n    sample_a_kinetic_energy = (sample_a_mass * sample_a_speed**2) / 2\n    sample_b_kinetic_energy = (sample_b_mass * sample_b_speed**2) / 2\n\n    if sample_a_kinetic_energy > sample_b_kinetic_energy:\n        return \"Sample A\"\n    elif sample_a_kinetic_energy < sample_b_kinetic_energy:\n        return \"Sample B\"\n    else:\n        return \"neither; the samples have the same temperature\"\n\nsample_a_mass = 44\nsample_b_mass = 46\nsample_a_speed = 1400\nsample_b_speed = 1400\n\nprint(compare_temperature(sample_a_mass, sample_b_mass, sample_a_speed, sample_b_speed))",
        "execution": "Sample B",
        "error": "None",
        "extraction": "neither; the samples have the same temperature",
        "prediction": "neither; the samples have the same temperature",
        "true_false": false
    },
    "148": {
        "question": "Which leaf shape has the smallest base?",
        "image": "images/148.jpg",
        "choices": [
            "Hastate",
            "Cordate",
            "Sagittate",
            "Decurrent"
        ],
        "unit": null,
        "precision": null,
        "answer": "Decurrent",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "148",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 161,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([255, 1], 'LEAF BASES'), ([17, 123], 'Oblique'), ([113, 123], 'Cordate'), ([227, 123], 'Sagittate'), ([332, 122], 'Hastate'), ([413, 123], 'Stem-clasping'), ([521, 123], 'Decurrent')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which leaf shape has the smallest base?\nChoices:\n(A) Hastate\n(B) Cordate\n(C) Sagittate\n(D) Decurrent\nImage detected text: [([255, 1], 'LEAF BASES'), ([17, 123], 'Oblique'), ([113, 123], 'Cordate'), ([227, 123], 'Sagittate'), ([332, 122], 'Hastate'), ([413, 123], 'Stem-clasping'), ([521, 123], 'Decurrent')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "leaf_bases = {\n    'Oblique': 'none',\n    'Cordate': 'Cordate',\n    'Sagittate': 'Sagittate',\n    'Hastate': 'Hastate',\n    'Stem-clasping': 'none',\n    'Decurrent': 'Decurrent'\n}\n\nsmallest_base = min(leaf_bases, key=leaf_bases.get)\nprint(smallest_base)",
        "execution": "Cordate",
        "error": "None",
        "extraction": "Decurrent",
        "prediction": "Decurrent",
        "true_false": true
    },
    "149": {
        "question": "\u5982\u56fe\uff0c\u76f4\u7ebfl1\u2225l2\uff0c\u22201\uff1d50\u00b0\uff0c\u22202\uff1d75\u00b0\uff0c\u5219\u22203\uff1d\uff08\uff09",
        "image": "images/149.jpg",
        "choices": [
            "55\u00b0",
            "60\u00b0",
            "65\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "55\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "149",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 156,
            "img_height": 93,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u76f4\u7ebfl1\u2225l2\uff0c\u22201\uff1d50\u00b0\uff0c\u22202\uff1d75\u00b0\uff0c\u5219\u22203\uff1d\uff08\uff09\nChoices:\n(A) 55\u00b0\n(B) 60\u00b0\n(C) 65\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle1 = 50\nangle2 = 75\n\nangle3 = 180 - angle1 - angle2\nprint(angle3)",
        "execution": "55",
        "error": "None",
        "extraction": "55",
        "prediction": "55\u00b0",
        "true_false": true
    },
    "150": {
        "question": "As shown in the figure, points A, B, and C are three points on \u2299O, and the straight line CD and \u2299O are tangent to point C. If \u2220DCB = 40.0, then the degree of \u2220CAB is ()",
        "image": "images/150.jpg",
        "choices": [
            "40\u00b0",
            "50\u00b0",
            "80\u00b0",
            "100\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "150",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 110,
            "img_height": 144,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, points A, B, and C are three points on \u2299O, and the straight line CD and \u2299O are tangent to point C. If \u2220DCB = 40.0, then the degree of \u2220CAB is ()\nChoices:\n(A) 40\u00b0\n(B) 50\u00b0\n(C) 80\u00b0\n(D) 100\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(DCB):\n    CAB = 180 - DCB\n    return CAB\n\nDCB = 40.0\nCAB = find_angle(DCB)\nprint(CAB)",
        "execution": "140.0",
        "error": "None",
        "extraction": "140",
        "prediction": "40\u00b0",
        "true_false": true
    },
    "151": {
        "question": "When does the function reach its local maximum?",
        "image": "images/151.jpg",
        "choices": [
            "(u1, u2) = (0, 0)",
            "(u1, u2) = (1, 0)",
            "(u1, u2) = (0, 1)",
            "(u1, u2) = (1, 1)"
        ],
        "unit": null,
        "precision": null,
        "answer": "(u1, u2) = (0, 0)",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "151",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 458,
            "img_height": 325,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([31, 145], '3'), ([27, 165], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When does the function reach its local maximum?\nChoices:\n(A) (u1, u2) = (0, 0)\n(B) (u1, u2) = (1, 0)\n(C) (u1, u2) = (0, 1)\n(D) (u1, u2) = (1, 1)\nImage detected text: [([31, 145], '3'), ([27, 165], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nu1, u2 = sp.symbols('u1 u2')\nf = u1**3 - 3*u1*u2**2\n\nf_u1 = sp.diff(f, u1)\nf_u2 = sp.diff(f, u2)\n\ncritical_points = sp.solve([f_u1, f_u2], (u1, u2))\nlocal_maxima = []\n\nfor point in critical_points:\n    hessian_matrix = sp.Matrix([[sp.diff(f_u1, u1), sp.diff(f_u1, u2)], [sp.diff(f_u2, u1), sp.diff(f_u2, u2)]])\n    hessian_det = hessian_matrix.det()\n\n    if hessian_det < 0:\n        local_maxima.append(point)\n\nchoices = ['(u1, u2) = (0, 0)', '(u1, u2) = (1, 0)', '(u1, u2) = (0, 1)', '(u1, u2) = (1, 1)']\n\nfor choice in choices:\n    if choice in local_maxima:\n        print(choice)",
        "execution": "",
        "error": "cannot determine truth value of Relational",
        "extraction": "(B) (u1, u2) = (1, 0)",
        "prediction": "(u1, u2) = (1, 0)",
        "true_false": false
    },
    "152": {
        "question": "\u5982\u56fe\uff0c\u76f4\u7ebfl1\u2225l2\uff0c\u5c06\u542b30\u00b0\u89d2\u7684\u76f4\u89d2\u4e09\u89d2\u677f\u6309\u5982\u56fe\u65b9\u5f0f\u653e\u7f6e\uff0c\u76f4\u89d2\u9876\u70b9\u5728l2\u4e0a\uff0c\u82e5\u22201\uff1d76\u00b0\uff0c\u5219\u22202\uff1d\uff08\uff09",
        "image": "images/152.jpg",
        "choices": [
            "36\u00b0",
            "45\u00b0",
            "44\u00b0",
            "64\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "44\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "152",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 229,
            "img_height": 208,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u76f4\u7ebfl1\u2225l2\uff0c\u5c06\u542b30\u00b0\u89d2\u7684\u76f4\u89d2\u4e09\u89d2\u677f\u6309\u5982\u56fe\u65b9\u5f0f\u653e\u7f6e\uff0c\u76f4\u89d2\u9876\u70b9\u5728l2\u4e0a\uff0c\u82e5\u22201\uff1d76\u00b0\uff0c\u5219\u22202\uff1d\uff08\uff09\nChoices:\n(A) 36\u00b0\n(B) 45\u00b0\n(C) 44\u00b0\n(D) 64\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle_1 = 76\nangle_2 = 180 - angle_1 - 90\nangle_3 = 30\n\nangle_2 = 180 - angle_1 - angle_3\nprint(angle_2)",
        "execution": "74",
        "error": "None",
        "extraction": "44",
        "prediction": "44\u00b0",
        "true_false": true
    },
    "153": {
        "question": "What would be impacted by an increase in owls?",
        "image": "images/153.jpg",
        "choices": [
            "sun",
            "grasshoppers",
            "grass",
            "mice"
        ],
        "unit": null,
        "precision": null,
        "answer": "mice",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "153",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 423,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([25, 249], 'Sun'), ([123, 249], 'Grass'), ([222, 249], 'Grasshopper'), ([389, 249], 'Mouse'), ([535, 251], 'Owl')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would be impacted by an increase in owls?\nChoices:\n(A) sun\n(B) grasshoppers\n(C) grass\n(D) mice\nImage detected text: [([25, 249], 'Sun'), ([123, 249], 'Grass'), ([222, 249], 'Grasshopper'), ([389, 249], 'Mouse'), ([535, 251], 'Owl')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def impacted_by_owls(text):\n    if \"owl\" in text:\n        return \"mice\"\n    else:\n        return \"\"\n\ntext = \"An increase in owls would impact the population of mice.\"\n\nprint(impacted_by_owls(text))",
        "execution": "mice",
        "error": "None",
        "extraction": "mice",
        "prediction": "mice",
        "true_false": true
    },
    "154": {
        "question": "Is this an odd function?",
        "image": "images/154.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "154",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1114,
            "img_height": 744,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this an odd function?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_odd_function(points):\n    for point in points:\n        x = point[0]\n        y = point[1]\n        if y != -x:\n            return \"No\"\n    return \"Yes\"\n\npoints = [(10, 8), (9, 0.5), (6, 2), (-3, 2), (1, 2), (2, 3)]\nprint(is_odd_function(points))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "155": {
        "question": "Does Web Green have the minimum area under the curve?",
        "image": "images/155.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "155",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 601,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 11], 'title'), ([95, 45], 'Web Green'), ([95, 67], 'Indigo'), ([25, 91], '84.5'), ([7, 153], '1'), ([9, 191], '1'), ([25, 281], '82.5'), ([561, 363], '100'), ([291, 383], 'raris label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Web Green have the minimum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([61, 11], 'title'), ([95, 45], 'Web Green'), ([95, 67], 'Indigo'), ([25, 91], '84.5'), ([7, 153], '1'), ([9, 191], '1'), ([25, 281], '82.5'), ([561, 363], '100'), ([291, 383], 'raris label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "min_area = 84.5\nweb_green_area = 82.5\n\nif web_green_area == min_area:\n    answer = \"yes\"\nelse:\n    answer = \"no\"\n\nprint(answer)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "156": {
        "question": "What is the limit of the as x approaches 1 from the left side?",
        "image": "images/156.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "156",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 327,
            "img_height": 291,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([235, 41], 'for x = 1'), ([102, 122], '=X +'), ([87, 135], 'for X < 1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the limit of the as x approaches 1 from the left side?\nImage detected text: [([235, 41], 'for x = 1'), ([102, 122], '=X +'), ([87, 135], 'for X < 1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nexpr = x + 1\n\nlimit = sp.limit(expr, x, 1, '-')\nprint(limit)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "157": {
        "question": "What number is shown?",
        "image": "images/157.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9335",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "157",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 637,
            "img_height": 279,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "158": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/158.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "158",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 911,
            "img_height": 685,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "159": {
        "question": "What is the difference between two consecutive major ticks on the Y-axis ?",
        "image": "images/159.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "159",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1000,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 9], 'Time required to enforce'), ([291, 9], 'contract vS starting'), ([477, 11], 'business in Vietnam'), ([29, 53], '400'), ([29, 183], '300'), ([7, 239], '8'), ([847, 305], 'Enforce'), ([927, 307], 'contract'), ([29, 313], '200'), ([9, 303], 'L'), ([849, 329], 'Start a business'), ([29, 445], '100'), ([91, 591], '8'), ([319, 591], '8'), ([547, 591], '2'), ([775, 591], '8'), ([417, 628], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between two consecutive major ticks on the Y-axis ?\nImage detected text: [([61, 9], 'Time required to enforce'), ([291, 9], 'contract vS starting'), ([477, 11], 'business in Vietnam'), ([29, 53], '400'), ([29, 183], '300'), ([7, 239], '8'), ([847, 305], 'Enforce'), ([927, 307], 'contract'), ([29, 313], '200'), ([9, 303], 'L'), ([849, 329], 'Start a business'), ([29, 445], '100'), ([91, 591], '8'), ([319, 591], '8'), ([547, 591], '2'), ([775, 591], '8'), ([417, 628], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\n# Assuming the y-axis ticks are evenly spaced\ny_ticks = [400, 300, 200, 100]\ndifference = y_ticks[0] - y_ticks[1]\nprint(difference)",
        "execution": "100",
        "error": "None",
        "extraction": "100",
        "prediction": "100",
        "true_false": true
    },
    "160": {
        "question": "Find x.",
        "image": "images/160.jpg",
        "choices": [
            "10",
            "11",
            "12",
            "13"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "160",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 270,
            "img_height": 227,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([112, 48], '15')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x.\nChoices:\n(A) 10\n(B) 11\n(C) 12\n(D) 13\nImage detected text: [([112, 48], '15')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x = 15\nprint(x)",
        "execution": "15",
        "error": "None",
        "extraction": "15",
        "prediction": "10",
        "true_false": false
    },
    "161": {
        "question": "What is the sum of the two numbers visible in the picture?",
        "image": "images/161.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "71",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "161",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([283, 195], 'MAN'), ([434, 200], 'Canrof'), ([420, 216], '1853'), ([451, 443], 'LiAal')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the two numbers visible in the picture?\nImage detected text: [([283, 195], 'MAN'), ([434, 200], 'Canrof'), ([420, 216], '1853'), ([451, 443], 'LiAal')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "num1 = 1853\nnum2 = 0\n\nfor text in detected_text:\n    if text[1].isdigit():\n        num2 = int(text[1])\n        break\n\nsum = num1 + num2\nprint(sum)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "1853",
        "prediction": "1853",
        "true_false": false
    },
    "162": {
        "question": "The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had at least 17 birds but fewer than 33 birds? (Unit: flocks)",
        "image": "images/162.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "162",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 117,
            "img_height": 202,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1, 0], 'Birds per flock'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([53, 51], '2 3'), ([53, 73], '0 1 4 7'), ([53, 95], '5 8 8 9'), ([53, 117], '4 9'), ([53, 137], '0 1 2 9'), ([53, 159], '3 4 5 6')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The bird watcher counted the number of birds in each flock that passed overhead. How many flocks had at least 17 birds but fewer than 33 birds? (Unit: flocks)\nImage detected text: [([1, 0], 'Birds per flock'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([53, 51], '2 3'), ([53, 73], '0 1 4 7'), ([53, 95], '5 8 8 9'), ([53, 117], '4 9'), ([53, 137], '0 1 2 9'), ([53, 159], '3 4 5 6')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "flocks = [2, 3, 0, 1, 4, 7, 5, 8, 8, 9, 4, 9, 0, 1, 2, 9, 3, 4, 5, 6]\ncount = 0\n\nfor flock in flocks:\n    if flock >= 17 and flock < 33:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": true
    },
    "163": {
        "question": "What number is shown?",
        "image": "images/163.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7519",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "163",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 637,
            "img_height": 285,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "164": {
        "question": "As shown in the figure, in \u25b1ABCD, CE \u22a5 AB, point E is the foot of perpendicular, if \u2220D = 55.0, then \u2220BCE = ()",
        "image": "images/164.jpg",
        "choices": [
            "55\u00b0",
            "35\u00b0",
            "25\u00b0",
            "30\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "35\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "164",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 161,
            "img_height": 84,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in \u25b1ABCD, CE \u22a5 AB, point E is the foot of perpendicular, if \u2220D = 55.0, then \u2220BCE = ()\nChoices:\n(A) 55\u00b0\n(B) 35\u00b0\n(C) 25\u00b0\n(D) 30\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_D(angle_D):\n    angle_BCE = 90 - angle_D\n    return angle_BCE\n\nangle_D = 55.0\nangle_BCE = find_angle_D(angle_D)\nprint(angle_BCE)",
        "execution": "35.0",
        "error": "None",
        "extraction": "35",
        "prediction": "35\u00b0",
        "true_false": true
    },
    "165": {
        "question": "Subtract all cyan rubber cylinders. Subtract all tiny shiny cubes. How many objects are left?",
        "image": "images/165.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "165",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all cyan rubber cylinders. Subtract all tiny shiny cubes. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    cyan_rubber_cylinders = 0\n    tiny_shiny_cubes = 0\n\n    for obj in objects:\n        if obj == \"cyan rubber cylinder\":\n            cyan_rubber_cylinders += 1\n        elif obj == \"tiny shiny cube\":\n            tiny_shiny_cubes += 1\n\n    total_objects = len(objects) - cyan_rubber_cylinders - tiny_shiny_cubes\n    return total_objects\n\nobjects = [\"red sphere\", \"cyan rubber cylinder\", \"blue cube\", \"tiny shiny cube\", \"green pyramid\"]\nprint(count_objects(objects))",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "166": {
        "question": "Which Shape is missing?",
        "image": "images/166.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F"
        ],
        "unit": null,
        "precision": null,
        "answer": "B",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "166",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2028,
            "img_height": 816,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([75, 60], 'Which Shape is missing?'), ([1272, 48], 'Please choose an answer:'), ([1295, 219], 'A)'), ([1621, 211], 'B)'), ([1285, 395], 'C)V'), ([1621, 393], ') 1'), ([1292, 612], 'E)'), ([1626, 610], 'F)'), ([774, 632], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which Shape is missing?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\n(F) F\nImage detected text: [([75, 60], 'Which Shape is missing?'), ([1272, 48], 'Please choose an answer:'), ([1295, 219], 'A)'), ([1621, 211], 'B)'), ([1285, 395], 'C)V'), ([1621, 393], ') 1'), ([1292, 612], 'E)'), ([1626, 610], 'F)'), ([774, 632], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_shape = ''\n\nif 'A)' not in text:\n    missing_shape = 'A'\nelif 'B)' not in text:\n    missing_shape = 'B'\nelif 'C)' not in text:\n    missing_shape = 'C'\nelif 'D)' not in text:\n    missing_shape = 'D'\nelif 'E)' not in text:\n    missing_shape = 'E'\nelif 'F)' not in text:\n    missing_shape = 'F'\n\nprint(missing_shape)",
        "execution": "",
        "error": "name 'text' is not defined",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "167": {
        "question": "What is the biggest zero of this function?",
        "image": "images/167.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "167",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1920,
            "img_height": 1920,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the biggest zero of this function?\nImage detected text: [([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nequation = 3*x**3 + 3*x**2 + 6*x - 8\nzeros = sp.solve(equation, x)\n\nlargest_zero = max(zeros)\nprint(largest_zero)",
        "execution": "",
        "error": "cannot determine truth value of Relational",
        "extraction": "-2",
        "prediction": "-2",
        "true_false": false
    },
    "168": {
        "question": "Given that the Hue-Saturation subspace shown in Fig. Q2 is a perfect circle and that colors A, B and C can be represented as the 3 points shown in the subspace. Which color has the smallest saturation coefficient?",
        "image": "images/168.jpg",
        "choices": [
            "(c)",
            "(a)",
            "(e)",
            "(d)",
            "(b)"
        ],
        "unit": null,
        "precision": null,
        "answer": "(b)",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "168",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 414,
            "img_height": 454,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([356, 270], 'C'), ([325, 291], '&'), ([146, 404], 'Fig: Q2'), ([240, 87], '&4'), ([133, 215], '& 8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Given that the Hue-Saturation subspace shown in Fig. Q2 is a perfect circle and that colors A, B and C can be represented as the 3 points shown in the subspace. Which color has the smallest saturation coefficient?\nChoices:\n(A) (c)\n(B) (a)\n(C) (e)\n(D) (d)\n(E) (b)\nImage detected text: [([356, 270], 'C'), ([325, 291], '&'), ([146, 404], 'Fig: Q2'), ([240, 87], '&4'), ([133, 215], '& 8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef calculate_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n\ndef find_smallest_saturation_coefficient(points):\n    smallest_distance = float('inf')\n    smallest_point = None\n\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = calculate_distance(points[i], points[j])\n            if distance < smallest_distance:\n                smallest_distance = distance\n                smallest_point = points[i] if points[i][1] < points[j][1] else points[j]\n\n    return smallest_point\n\npoints = [(356, 270), (325, 291), (240, 87), (133, 215)]\nsmallest_saturation_coefficient = find_smallest_saturation_coefficient(points)\nprint(smallest_saturation_coefficient)",
        "execution": "",
        "error": "name 'calculate_distance' is not defined",
        "extraction": "(b)",
        "prediction": "(a)",
        "true_false": false
    },
    "169": {
        "question": "What is the difference between two consecutive major ticks on the Y-axis ?",
        "image": "images/169.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "169",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1049,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 9], 'Different taxes paid by businesses in Belize'), ([7, 177], '1'), ([10, 235], '7'), ([941, 295], 'Labor Tax'), ([941, 319], 'Profit Tax'), ([7, 331], '5'), ([941, 341], 'Consumption Tax'), ([8, 376], '1'), ([87, 591], '3'), ([865, 591], '8'), ([461, 628], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between two consecutive major ticks on the Y-axis ?\nImage detected text: [([53, 9], 'Different taxes paid by businesses in Belize'), ([7, 177], '1'), ([10, 235], '7'), ([941, 295], 'Labor Tax'), ([941, 319], 'Profit Tax'), ([7, 331], '5'), ([941, 341], 'Consumption Tax'), ([8, 376], '1'), ([87, 591], '3'), ([865, 591], '8'), ([461, 628], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "major_tick_1 = 1\nmajor_tick_2 = 7\n\ndifference = major_tick_2 - major_tick_1\nprint(difference)",
        "execution": "6",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "170": {
        "question": "f(-1) is ____ f(0).",
        "image": "images/170.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "smaller than",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "170",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 296,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: f(-1) is ____ f(0).\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    return 2*x + 3\n\nf_minus_1 = f(-1)\nf_0 = f(0)\n\nif f_minus_1 > f_0:\n    answer = \"(A) larger than\"\nelif f_minus_1 == f_0:\n    answer = \"(B) equal to\"\nelse:\n    answer = \"(C) smaller than\"\n\nprint(answer)",
        "execution": "(C) smaller than",
        "error": "None",
        "extraction": "(B) equal to",
        "prediction": "equal to",
        "true_false": false
    },
    "171": {
        "question": "How many cinnamon rolls are there?",
        "image": "images/171.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "20",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "171",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 467,
            "img_height": 190,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many cinnamon rolls are there?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ntext = \"There are 12 cinnamon rolls on the plate.\"\n\ncinnamon_rolls = re.findall(r'\\d+', text)\ncount = int(cinnamon_rolls[0])\n\nprint(count)",
        "execution": "12",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": false
    },
    "172": {
        "question": "Is Light Seafoam less than Dark Salmon?",
        "image": "images/172.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "172",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 524,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([129, 11], 'title'), ([45, 53], 'Forest Green'), ([37, 105], 'Midnight Blue'), ([39, 159], 'Saddle Brown'), ([7, 153], '1'), ([9, 191], '1'), ([31, 211], 'Dark Turquoise'), ([35, 265], 'Light Seafoam'), ([45, 319], 'Dark Salmon'), ([289, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Light Seafoam less than Dark Salmon?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([129, 11], 'title'), ([45, 53], 'Forest Green'), ([37, 105], 'Midnight Blue'), ([39, 159], 'Saddle Brown'), ([7, 153], '1'), ([9, 191], '1'), ([31, 211], 'Dark Turquoise'), ([35, 265], 'Light Seafoam'), ([45, 319], 'Dark Salmon'), ([289, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "light_seafoam = 35\ndark_salmon = 45\n\nif light_seafoam < dark_salmon:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "173": {
        "question": "Is the number of small rubber buss behind the big green road bike less than the number of suvs that are behind the large brown matte truck?",
        "image": "images/173.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "173",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of small rubber buss behind the big green road bike less than the number of suvs that are behind the large brown matte truck?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(num_small_rubber_buss, num_suvs):\n    if num_small_rubber_buss < num_suvs:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_small_rubber_buss = 5\nnum_suvs = 8\n\nprint(compare_numbers(num_small_rubber_buss, num_suvs))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "174": {
        "question": "Are there fewer tiny cyan suvs that are behind the aeroplane than cyan utility bikes?",
        "image": "images/174.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "174",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer tiny cyan suvs that are behind the aeroplane than cyan utility bikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_vehicles(caption):\n    suv_count = 0\n    bike_count = 0\n\n    if \"tiny\" in caption and \"cyan\" in caption:\n        suv_count += 1\n\n    if \"cyan\" in caption and \"utility bike\" in caption:\n        bike_count += 1\n\n    if suv_count < bike_count:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"The image shows a parking lot with several tiny cyan SUVs parked behind the airplane. There are also several cyan utility bikes parked nearby.\"\n\nprint(compare_vehicles(caption))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "175": {
        "question": "What is the sum of accuracies of the algorithm liver for all the datasets?",
        "image": "images/175.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "24",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "175",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 10], 'Accuracy of algorithms on different'), ([207, 37], 'datasets'), ([37, 53], '10'), ([95, 73], 'datasets'), ([125, 97], 'desert'), ([125, 119], 'debt'), ([127, 145], 'bee'), ([127, 169], 'saw'), ([127, 191], 'wooi'), ([17, 197], '17'), ([106, 407], 'liver'), ([220, 408], 'blade'), ([338, 408], 'boost')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of accuracies of the algorithm liver for all the datasets?\nImage detected text: [([79, 10], 'Accuracy of algorithms on different'), ([207, 37], 'datasets'), ([37, 53], '10'), ([95, 73], 'datasets'), ([125, 97], 'desert'), ([125, 119], 'debt'), ([127, 145], 'bee'), ([127, 169], 'saw'), ([127, 191], 'wooi'), ([17, 197], '17'), ([106, 407], 'liver'), ([220, 408], 'blade'), ([338, 408], 'boost')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = {\n    'desert': 0.85,\n    'debt': 0.92,\n    'bee': 0.78,\n    'saw': 0.88,\n    'wooi': 0.95,\n    'liver': 0.90,\n    'blade': 0.87,\n    'boost': 0.93\n}\n\ndatasets = ['desert', 'debt', 'bee', 'saw', 'wooi', 'liver', 'blade', 'boost']\n\nsum_accuracy = 0\nfor dataset in datasets:\n    sum_accuracy += accuracies[dataset]\n\nprint(sum_accuracy)",
        "execution": "7.08",
        "error": "None",
        "extraction": "6.08",
        "prediction": null,
        "true_false": false
    },
    "176": {
        "question": "Find $RS$ if $\\triangle QRS$ is an equilateral triangle.",
        "image": "images/176.jpg",
        "choices": [
            "0.5",
            "1",
            "1.5",
            "2"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "176",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 305,
            "img_height": 292,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([50, 114], '4x'), ([188, 112], '2x+ 1'), ([104, 226], '6x -1'), ([220, 228], 'S')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $RS$ if $\\triangle QRS$ is an equilateral triangle.\nChoices:\n(A) 0.5\n(B) 1\n(C) 1.5\n(D) 2\nImage detected text: [([50, 114], '4x'), ([188, 112], '2x+ 1'), ([104, 226], '6x -1'), ([220, 228], 'S')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nRS = 2*x + 1\n\neq = sp.Eq(4*x, 6*x - 1)\nsol = sp.solve(eq, x)\n\nRS_value = RS.subs(x, sol[0])\nprint(RS_value)",
        "execution": "2",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "177": {
        "question": "Is the number of brown tandem bikes that are to the left of the small blue matte car greater than the number of tiny blue biplanes?",
        "image": "images/177.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "177",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of brown tandem bikes that are to the left of the small blue matte car greater than the number of tiny blue biplanes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bikes_planes(brown_tandem_bikes, small_blue_matte_car, tiny_blue_biplanes):\n    if brown_tandem_bikes > small_blue_matte_car:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbrown_tandem_bikes = 5\nsmall_blue_matte_car = 3\ntiny_blue_biplanes = 2\n\nprint(compare_bikes_planes(brown_tandem_bikes, small_blue_matte_car, tiny_blue_biplanes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "178": {
        "question": "\u5982\u56fe\uff0c\u70b9A\u3001C\u5728\u2220FBD\u7684\u4e24\u6761\u8fb9BF\u3001BD\u4e0a\uff0cBE\u5e73\u5206\u2220FBD\uff0cCE\u5e73\u5206\u2220ACD\uff0c\u8fde\u63a5AE\uff0c\u82e5\u2220BEC\uff1d35\u00b0\uff0c\u5219\u2220FAE\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/178.jpg",
        "choices": [
            "35\u00b0",
            "45\u00b0",
            "55\u00b0",
            "65\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "55\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "178",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 129,
            "img_height": 99,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u70b9A\u3001C\u5728\u2220FBD\u7684\u4e24\u6761\u8fb9BF\u3001BD\u4e0a\uff0cBE\u5e73\u5206\u2220FBD\uff0cCE\u5e73\u5206\u2220ACD\uff0c\u8fde\u63a5AE\uff0c\u82e5\u2220BEC\uff1d35\u00b0\uff0c\u5219\u2220FAE\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 35\u00b0\n(B) 45\u00b0\n(C) 55\u00b0\n(D) 65\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the angles\nangle_BEC = sp.Symbol('angle_BEC')\nangle_FAE = sp.Symbol('angle_FAE')\n\n# Define the equations\neq1 = sp.Eq(angle_BEC, 35)\neq2 = sp.Eq(angle_FAE, 180 - angle_BEC)\n\n# Solve the equations\nsolution = sp.solve((eq1, eq2), (angle_BEC, angle_FAE))\n\n# Print the solution\nprint(solution[angle_FAE])",
        "execution": "145",
        "error": "None",
        "extraction": "45",
        "prediction": "45\u00b0",
        "true_false": false
    },
    "179": {
        "question": "\u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0c\u5df2\u77e5AC\uff1d4cm\uff0c\u82e5\u25b3ACD\u7684\u5468\u957f\u4e3a14cm\uff0c\u5219ABCD\u7684\u5468\u957f\u4e3a\uff08\uff09",
        "image": "images/179.jpg",
        "choices": [
            "14cm",
            "28cm",
            "10cm",
            "20cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "20cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "179",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 157,
            "img_height": 94,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([44, 52], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0c\u5df2\u77e5AC\uff1d4cm\uff0c\u82e5\u25b3ACD\u7684\u5468\u957f\u4e3a14cm\uff0c\u5219ABCD\u7684\u5468\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 14cm\n(B) 28cm\n(C) 10cm\n(D) 20cm\nImage detected text: [([44, 52], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AC = 4\nperimeter_ACD = 14\n\n# Since AC is a side of both triangles ACD and ABC, we can find the length of AD using the perimeter of ACD\nAD = (perimeter_ACD - AC) / 2\n\n# The perimeter of ABCD is the sum of the lengths of all sides\nperimeter_ABCD = 2 * AC + 2 * AD\n\nperimeter_ABCD",
        "execution": "",
        "error": "None",
        "extraction": "10",
        "prediction": "10cm",
        "true_false": false
    },
    "180": {
        "question": "Subtract all tiny brown cylinders. Subtract all tiny brown objects. How many objects are left?",
        "image": "images/180.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "180",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny brown cylinders. Subtract all tiny brown objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    count = 0\n    for obj in objects:\n        if \"tiny\" not in obj and \"brown\" not in obj:\n            count += 1\n    return count\n\nobjects = [\"tiny brown cylinders\", \"tiny brown objects\", \"large blue cubes\", \"medium red spheres\", \"small green pyramids\"]\nremaining_objects = count_objects(objects)\nprint(remaining_objects)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "181": {
        "question": "Which option is correct?",
        "image": "images/181.jpg",
        "choices": [
            "A",
            "B",
            "C"
        ],
        "unit": null,
        "precision": null,
        "answer": "C",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "181",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 864,
            "img_height": 332,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([520, 164], 'B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which option is correct?\nChoices:\n(A) A\n(B) B\n(C) C\nImage detected text: [([520, 164], 'B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "answer = 'B'\nprint(answer)",
        "execution": "B",
        "error": "None",
        "extraction": "B",
        "prediction": "B",
        "true_false": false
    },
    "182": {
        "question": "Is Web Green greater than Yellow?",
        "image": "images/182.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "182",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 589,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([458, 122], 'Navy Blue'), ([459, 147], 'Rebecca Purple'), ([7, 155], '9'), ([459, 169], 'Web Green'), ([459, 191], 'Dark Seafoam'), ([9, 191], '1'), ([459, 215], 'Dark Violet'), ([459, 239], 'Dark Slate'), ([459, 261], 'Yellow'), ([201, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Web Green greater than Yellow?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([458, 122], 'Navy Blue'), ([459, 147], 'Rebecca Purple'), ([7, 155], '9'), ([459, 169], 'Web Green'), ([459, 191], 'Dark Seafoam'), ([9, 191], '1'), ([459, 215], 'Dark Violet'), ([459, 239], 'Dark Slate'), ([459, 261], 'Yellow'), ([201, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "web_green = 9\nyellow = 1\n\nif web_green > yellow:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "183": {
        "question": "Subtract all brown cubes. Subtract all gray cylinders. How many objects are left?",
        "image": "images/183.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "183",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown cubes. Subtract all gray cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "brown_cubes = 5\ngray_cylinders = 3\n\ntotal_objects = 10\n\nobjects_left = total_objects - brown_cubes - gray_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "184": {
        "question": "How many bars have values smaller than 0?",
        "image": "images/184.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "184",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([227, 13], 'Title'), ([35, 29], '10'), ([15, 201], '!'), ([79, 413], 'fusion'), ([227, 415], 'Iawn'), ([361, 411], 'afraid')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have values smaller than 0?\nImage detected text: [([227, 13], 'Title'), ([35, 29], '10'), ([15, 201], '!'), ([79, 413], 'fusion'), ([227, 415], 'Iawn'), ([361, 411], 'afraid')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [10, -5, 3, -2, 0, -7, 8, -4, 1, -9]\ncount = 0\n\nfor bar in bars:\n    if bar < 0:\n        count += 1\n\nprint(count)",
        "execution": "5",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "185": {
        "question": "An image has the gray level PDF $p_r(r)$ shown in Fig. Q1a. One wants to do histogram specification SO that the processed image will have the specified $p_z(z)$ shown in Fig. Q1b. Can we use intensity mapping function $T: z=1-r$ to achieve the goal?",
        "image": "images/185.jpg",
        "choices": [
            "True",
            "False"
        ],
        "unit": null,
        "precision": null,
        "answer": "False",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "185",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 724,
            "img_height": 376,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([31, 5], 'Pr(r)'), ([421, 5], 'Pz(z)'), ([36, 100], '2'), ([418, 100], '2'), ([78, 310], 'FigQla'), ([520, 310], 'Q1b'), ([453, 300], 'Fig')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An image has the gray level PDF $p_r(r)$ shown in Fig. Q1a. One wants to do histogram specification SO that the processed image will have the specified $p_z(z)$ shown in Fig. Q1b. Can we use intensity mapping function $T: z=1-r$ to achieve the goal?\nChoices:\n(A) True\n(B) False\nImage detected text: [([31, 5], 'Pr(r)'), ([421, 5], 'Pz(z)'), ([36, 100], '2'), ([418, 100], '2'), ([78, 310], 'FigQla'), ([520, 310], 'Q1b'), ([453, 300], 'Fig')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\n# Define the gray level PDFs\npr = [0.1, 0.2, 0.3, 0.2, 0.1]\npz = [0.2, 0.1, 0.3, 0.2, 0.2]\n\n# Define the intensity mapping function\ndef intensity_mapping(r):\n    return 1 - r\n\n# Apply the intensity mapping function to pr\nmapped_pr = [intensity_mapping(r) for r in pr]\n\n# Plot the original and mapped PDFs\nplt.plot(pr, label='Pr(r)')\nplt.plot(pz, label='Pz(z)')\nplt.plot(mapped_pr, label='Mapped Pr(r)')\nplt.legend()\nplt.xlabel('Gray Level')\nplt.ylabel('Probability')\nplt.title('Histogram Specification')\nplt.show()\n\n# Check if the mapped PDF matches the desired Pz(z)\nif mapped_pr == pz:\n    print(\"True\")\nelse:\n    print(\"False\")",
        "execution": "",
        "error": "name 'intensity_mapping' is not defined",
        "extraction": "False",
        "prediction": "False",
        "true_false": true
    },
    "186": {
        "question": "As shown in the figure, CD is a plane mirror, the light is emitted from point A, reflected by point E on CD, and irradiated to point B. If the incident angle is \u03b1, AC \u22a5 CD, BD \u22a5 CD, the feet of perpendicular are C, D, and AC = 3.0, BD = 6.0, CD = 10.0, then the length of the line segment ED is ()",
        "image": "images/186.jpg",
        "choices": [
            "\\frac{20}{3}",
            "\\frac{10}{3}",
            "7",
            "\\frac{14}{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{20}{3}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "186",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 183,
            "img_height": 112,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, CD is a plane mirror, the light is emitted from point A, reflected by point E on CD, and irradiated to point B. If the incident angle is \u03b1, AC \u22a5 CD, BD \u22a5 CD, the feet of perpendicular are C, D, and AC = 3.0, BD = 6.0, CD = 10.0, then the length of the line segment ED is ()\nChoices:\n(A) \\frac{20}{3}\n(B) \\frac{10}{3}\n(C) 7\n(D) \\frac{14}{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef length_of_ED(AC, BD, CD):\n    AD = math.sqrt(AC**2 + CD**2)\n    BD = math.sqrt(BD**2 + CD**2)\n    ED = AD - BD\n    return ED\n\nAC = 3.0\nBD = 6.0\nCD = 10.0\n\nlength = length_of_ED(AC, BD, CD)\nprint(length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "10/3",
        "prediction": "7",
        "true_false": false
    },
    "187": {
        "question": "What number is shown?",
        "image": "images/187.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9015",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "187",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 634,
            "img_height": 279,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "188": {
        "question": "How many methods in the table achieve an A-847 score higher than 20.0?",
        "image": "images/188.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "188",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2226,
            "img_height": 634,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([32, 3], 'Table 7:   Grounding segmentation performance: The proposed FC-CLIP also demonstrates state-'), ([31, 61], 'of-the-art performances on grounding segmentation'), ([824, 166], 'grounding PQ'), ([1598, 166], 'grounding mloU'), ([39, 223], 'method'), ([599, 218], 'ADEZOK Cityscapes Mapillary Vistas/A-847 PC-459 A-1SO PC-59 PAS-21 PAS-20'), ([40, 278], 'ALIGN [38, 28]'), ([1352, 280], '17.8'), ([1492, 280], '21.8'), ([1636, 278], '25.7'), ([1768, 280], '34.2'), ([41, 331], 'ALIGN wl proposal [38,28]|'), ([1352, 334], '17.3'), ([1496, 334], '19.7'), ([1636, 334], '25.3'), ([1768, 332], '32.0'), ([34, 382], 'LSeg+ [46,.28]'), ([1352, 386], '10.5'), ([1495, 389], '17.1'), ([1636, 388], '30.8'), ([1768, 388], '56.7'), ([39, 437], 'OpenSeg [28]'), ([1350, 440], '21.8'), ([1494, 440], '32.1'), ([1638, 440], '41.0'), ([1770, 440], '57.2'), ([37, 491], 'OpenSeg [28]w/ L Narr_'), ([1350, 494], '25.4'), ([1492, 494], '39.0'), ([1636, 494], '45.5'), ([1768, 494], '61.5'), ([36, 564], 'FC-CLIP (ours)'), ([645, 565], '38.4'), ([849, 565], '48.1'), ([1118, 564], '21.'), ([1350, 564], '33.4'), ([1493, 565], '41.2'), ([1639, 565], '54.1'), ([1769, 565], '74.9'), ([1913, 565], '88.7'), ([2069, 565], '98.5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many methods in the table achieve an A-847 score higher than 20.0?\nImage detected text: [([32, 3], 'Table 7:   Grounding segmentation performance: The proposed FC-CLIP also demonstrates state-'), ([31, 61], 'of-the-art performances on grounding segmentation'), ([824, 166], 'grounding PQ'), ([1598, 166], 'grounding mloU'), ([39, 223], 'method'), ([599, 218], 'ADEZOK Cityscapes Mapillary Vistas/A-847 PC-459 A-1SO PC-59 PAS-21 PAS-20'), ([40, 278], 'ALIGN [38, 28]'), ([1352, 280], '17.8'), ([1492, 280], '21.8'), ([1636, 278], '25.7'), ([1768, 280], '34.2'), ([41, 331], 'ALIGN wl proposal [38,28]|'), ([1352, 334], '17.3'), ([1496, 334], '19.7'), ([1636, 334], '25.3'), ([1768, 332], '32.0'), ([34, 382], 'LSeg+ [46,.28]'), ([1352, 386], '10.5'), ([1495, 389], '17.1'), ([1636, 388], '30.8'), ([1768, 388], '56.7'), ([39, 437], 'OpenSeg [28]'), ([1350, 440], '21.8'), ([1494, 440], '32.1'), ([1638, 440], '41.0'), ([1770, 440], '57.2'), ([37, 491], 'OpenSeg [28]w/ L Narr_'), ([1350, 494], '25.4'), ([1492, 494], '39.0'), ([1636, 494], '45.5'), ([1768, 494], '61.5'), ([36, 564], 'FC-CLIP (ours)'), ([645, 565], '38.4'), ([849, 565], '48.1'), ([1118, 564], '21.'), ([1350, 564], '33.4'), ([1493, 565], '41.2'), ([1639, 565], '54.1'), ([1769, 565], '74.9'), ([1913, 565], '88.7'), ([2069, 565], '98.5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_methods(image_text):\n    methods = 0\n    scores = []\n\n    for text in image_text:\n        if text[1] == 'method':\n            methods += 1\n        elif text[1] == 'A-847':\n            score = float(text[0][1])\n            scores.append(score)\n\n    count = 0\n    for score in scores:\n        if score > 20.0:\n            count += 1\n\n    return count\n\nimage_text = [([32, 3], 'Table 7:   Grounding segmentation performance: The proposed FC-CLIP also demonstrates state-'), ([31, 61], 'of-the-art performances on grounding segmentation'), ([824, 166], 'grounding PQ'), ([1598, 166], 'grounding mloU'), ([39, 223], 'method'), ([599, 218], 'ADEZOK Cityscapes Mapillary Vistas/A-847 PC-459 A-1SO PC-59 PAS-21 PAS-20'), ([40, 278], 'ALIGN [38, 28]'), ([1352, 280], '17.8'), ([1492, 280], '21.8'), ([1636, 278], '25.7'), ([1768, 280], '34.2'), ([41, 331], 'ALIGN wl proposal [38,28]|'), ([1352, 334], '17.3'), ([1496, 334], '19.7'), ([1636, 334], '25.3'), ([1768, 332], '32.0'), ([34, 382], 'LSeg+ [46,.28]'), ([1352, 386], '10.5'), ([1495, 389], '17.1'), ([1636, 388], '30.8'), ([1768, 388], '56.7'), ([39, 437], 'OpenSeg [28]'), ([1350, 440], '21.8'), ([1494, 440], '32.1'), ([1638, 440], '41.0'), ([1770, 440], '57.2'), ([37, 491], 'OpenSeg [28]w/ L Narr_'), ([1350, 494], '25.4'), ([1492, 494], '39.0'), ([1636, 494], '45.5'), ([1768, 494], '61.5'), ([36, 564], 'FC-CLIP (ours)'), ([645, 565], '38.4'), ([849, 565], '48.1'), ([1118, 564], '21.'), ([1350, 564], '33.4'), ([1493, 565], '41.2'), ([1639, 565], '54.1'), ([1769, 565], '74.9'), ([1913, 565], '88.7'), ([2069, 565], '98.5')]\n\nprint(count_methods(image_text))",
        "execution": "0",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "189": {
        "question": "What is the lowest accuracy reported in the whole chart?",
        "image": "images/189.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "189",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([101, 10], 'Accuracy of algorithms on'), ([148, 38], 'different datasets'), ([41, 75], '16'), ([331, 81], 'datasets'), ([363, 107], 'arrest'), ([41, 117], '14'), ([363, 129], 'breed'), ([41, 155], '12'), ([363, 151], 'potato'), ([41, 195], '10'), ([12, 191], '1'), ([91, 407], 'deputy'), ([346, 408], 'blast'), ([228, 405], 'flag')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the lowest accuracy reported in the whole chart?\nImage detected text: [([101, 10], 'Accuracy of algorithms on'), ([148, 38], 'different datasets'), ([41, 75], '16'), ([331, 81], 'datasets'), ([363, 107], 'arrest'), ([41, 117], '14'), ([363, 129], 'breed'), ([41, 155], '12'), ([363, 151], 'potato'), ([41, 195], '10'), ([12, 191], '1'), ([91, 407], 'deputy'), ([346, 408], 'blast'), ([228, 405], 'flag')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracy_data = {\n    'arrest': 16,\n    'breed': 14,\n    'potato': 12,\n    'deputy': 10,\n    'blast': 1\n}\n\nlowest_accuracy = min(accuracy_data.values())\nprint(lowest_accuracy)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": true
    },
    "190": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/190.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "190",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 132,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import random\n\nnail_length = random.uniform(0, 12)\nnearest_inch = round(nail_length)\n\nprint(f\"The nail is about {nearest_inch} inches long.\")",
        "execution": "The nail is about 4 inches long.",
        "error": "None",
        "extraction": "The nail is about (_) inches long.",
        "prediction": null,
        "true_false": false
    },
    "191": {
        "question": "In how many years, is the volume of the air carriers in Ethiopia greater than the average volume of the air carriers in Ethiopia taken over all years ?",
        "image": "images/191.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "191",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1116,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([50, 8], 'Air freight by the air carriers registered in a country'), ([9, 237], '1'), ([9, 305], '|'), ([1043, 627], 'Ethiopia'), ([94, 642], ';'), ([218, 642], '7'), ([339, 641], '3'), ([463, 641], '3'), ([711, 641], '3'), ([835, 641], '1'), ([959, 641], '1'), ([1041, 647], 'Mali'), ([507, 679], 'Years'), ([1043, 673], 'Nigeria')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the volume of the air carriers in Ethiopia greater than the average volume of the air carriers in Ethiopia taken over all years ?\nImage detected text: [([50, 8], 'Air freight by the air carriers registered in a country'), ([9, 237], '1'), ([9, 305], '|'), ([1043, 627], 'Ethiopia'), ([94, 642], ';'), ([218, 642], '7'), ([339, 641], '3'), ([463, 641], '3'), ([711, 641], '3'), ([835, 641], '1'), ([959, 641], '1'), ([1041, 647], 'Mali'), ([507, 679], 'Years'), ([1043, 673], 'Nigeria')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "years = [7, 3, 3, 3, 1, 1]\naverage_volume = sum(years) / len(years)\n\nfor i in range(len(years)):\n    if years[i] > average_volume:\n        print(i+1)\n        break",
        "execution": "1",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "192": {
        "question": "As shown in the figure, the diameter CD of \u2299O crosses the midpoint G of chord EF, \u2220DCF = 20.0, then \u2220EOD is equal to ()",
        "image": "images/192.jpg",
        "choices": [
            "10\u00b0",
            "20\u00b0",
            "40\u00b0",
            "80\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "192",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 101,
            "img_height": 127,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the diameter CD of \u2299O crosses the midpoint G of chord EF, \u2220DCF = 20.0, then \u2220EOD is equal to ()\nChoices:\n(A) 10\u00b0\n(B) 20\u00b0\n(C) 40\u00b0\n(D) 80\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_DCF):\n    angle_EOD = 180 - 2 * angle_DCF\n    return angle_EOD\n\nangle_DCF = 20.0\nangle_EOD = find_angle(angle_DCF)\nprint(angle_EOD)",
        "execution": "140.0",
        "error": "None",
        "extraction": "40",
        "prediction": "40\u00b0",
        "true_false": true
    },
    "193": {
        "question": "Subtract all red things. Subtract all cylinders. How many objects are left?",
        "image": "images/193.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "193",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all red things. Subtract all cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = ['red apple', 'blue apple', 'red ball', 'green ball', 'red cylinder', 'blue cylinder', 'green cylinder']\n\nred_objects = [obj for obj in objects if 'red' in obj]\ncylinder_objects = [obj for obj in objects if 'cylinder' in obj]\n\nremaining_objects = [obj for obj in objects if obj not in red_objects and obj not in cylinder_objects]\n\nnum_remaining_objects = len(remaining_objects)\nprint(num_remaining_objects)",
        "execution": "",
        "error": "name 'red_objects' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "194": {
        "question": "On average, how many people can commute on this vehicle?",
        "image": "images/194.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "50",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "194",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 408,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([83, 88], 'onaeursoonsotsystb-esann,'), ([138, 290], 'DET29'), ([113, 299], '499/[4982')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: On average, how many people can commute on this vehicle?\nImage detected text: [([83, 88], 'onaeursoonsotsystb-esann,'), ([138, 290], 'DET29'), ([113, 299], '499/[4982')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "detected_text = \"onaeursoonsotsystb-esann, DET29 499/[4982]\"\n\ndef average_commute(detected_text):\n    numbers = []\n    for word in detected_text.split():\n        if word.isdigit():\n            numbers.append(int(word))\n    if len(numbers) > 0:\n        average = sum(numbers) / len(numbers)\n        return average\n    else:\n        return 0\n\naverage = average_commute(detected_text)\nprint(average)",
        "execution": "0",
        "error": "None",
        "extraction": "499",
        "prediction": "499",
        "true_false": false
    },
    "195": {
        "question": "\u5982\u56fe\uff0cAB\u662f\u2299O\u7684\u76f4\u5f84\uff0cC\uff0cD\u4e24\u70b9\u5728\u2299O\u4e0a\uff0c\u2220BCD\uff1d25\u00b0\uff0c\u5219\u2220AOD\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/195.jpg",
        "choices": [
            "120\u00b0",
            "125\u00b0",
            "130\u00b0",
            "135\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "130\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "195",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 110,
            "img_height": 95,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAB\u662f\u2299O\u7684\u76f4\u5f84\uff0cC\uff0cD\u4e24\u70b9\u5728\u2299O\u4e0a\uff0c\u2220BCD\uff1d25\u00b0\uff0c\u5219\u2220AOD\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 120\u00b0\n(B) 125\u00b0\n(C) 130\u00b0\n(D) 135\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    # Given information\n    angle_BCD = 25\n\n    # Angle AOD is the supplementary angle of angle BCD\n    angle_AOD = 180 - angle_BCD\n\n    return angle_AOD\n\nprint(find_angle())",
        "execution": "155",
        "error": "None",
        "extraction": "155",
        "prediction": "125\u00b0",
        "true_false": false
    },
    "196": {
        "question": "\u5982\u56fe\u6240\u793a\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u5df2\u77e5\u70b9D\uff0cE\uff0cF\u5206\u522b\u4e3a\u8fb9BC\uff0cAD\uff0cCE\u7684\u4e2d\u70b9\uff0c\u4e14S\u25b3ABC\uff1d4cm2\uff0c\u5219S\u25b3DEF\u7b49\u4e8e\uff08\uff09",
        "image": "images/196.jpg",
        "choices": [
            "2cm2",
            "1cm2",
            "0.5cm2",
            "0.25cm2"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.5cm2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "196",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 110,
            "img_height": 81,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\u6240\u793a\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u5df2\u77e5\u70b9D\uff0cE\uff0cF\u5206\u522b\u4e3a\u8fb9BC\uff0cAD\uff0cCE\u7684\u4e2d\u70b9\uff0c\u4e14S\u25b3ABC\uff1d4cm2\uff0c\u5219S\u25b3DEF\u7b49\u4e8e\uff08\uff09\nChoices:\n(A) 2cm2\n(B) 1cm2\n(C) 0.5cm2\n(D) 0.25cm2\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\ndef triangle_area_ratio(area1, a1, b1, c1, a2, b2, c2):\n    ratio = math.sqrt((a2 * b2 * c2) / (a1 * b1 * c1))\n    area2 = area1 * ratio\n    return area2\n\na1 = 4\nb1 = 6\nc1 = 8\n\na2 = b2 = c2 = 2\n\narea1 = triangle_area(a1, b1, c1)\narea2 = triangle_area_ratio(area1, a1, b1, c1, a2, b2, c2)\n\nprint(area2)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "2cm2",
        "prediction": "2cm2",
        "true_false": false
    },
    "197": {
        "question": "How many sequences have negative Influence Scores?",
        "image": "images/197.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "197",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1766,
            "img_height": 772,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([82, 52], '0.20'), ([773, 37], 'English Followed by Mandarin'), ([775, 74], 'Mandarin Followed by English'), ([41, 105], 'I'), ([82, 142], '0.15'), ([82, 230], '0.10'), ([44, 218], ''), ([82, 320], '0.05'), ([82, 408], '0.00'), ([856, 460], 'Sequences'), ([17, 532], 'Figure 26: Influence scores for English-Mandarin sequences with reversed order'), ([1617, 535], 'on the'), ([22, 579], '52 billion parameter model. For the'), ([749, 585], 'english_to_mandarin'), ([1132, 582], 'query; the top influential sequences'), ([20, 625], 'mostly have English statements followed by Mandarin translations  Reordering sequences to have'), ([20, 670], 'Mandarin followed by English significantly reduced influence scores, despite having identical content.'), ([21, 725], 'This trend is consistent with different model sizes.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many sequences have negative Influence Scores?\nImage detected text: [([82, 52], '0.20'), ([773, 37], 'English Followed by Mandarin'), ([775, 74], 'Mandarin Followed by English'), ([41, 105], 'I'), ([82, 142], '0.15'), ([82, 230], '0.10'), ([44, 218], ''), ([82, 320], '0.05'), ([82, 408], '0.00'), ([856, 460], 'Sequences'), ([17, 532], 'Figure 26: Influence scores for English-Mandarin sequences with reversed order'), ([1617, 535], 'on the'), ([22, 579], '52 billion parameter model. For the'), ([749, 585], 'english_to_mandarin'), ([1132, 582], 'query; the top influential sequences'), ([20, 625], 'mostly have English statements followed by Mandarin translations  Reordering sequences to have'), ([20, 670], 'Mandarin followed by English significantly reduced influence scores, despite having identical content.'), ([21, 725], 'This trend is consistent with different model sizes.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "influence_scores = [0.20, 0.15, 0.10, 0.05, 0.00]\ncount = 0\n\nfor score in influence_scores:\n    if score < 0:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "198": {
        "question": "Calculate the missing value.",
        "image": "images/198.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "198",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 890,
            "img_height": 756,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([218, 118], '2'), ([310, 278], '2'), ([528, 280], '1'), ([703, 275], '3'), ([214, 442], '3'), ([128, 602], '2'), ([310, 604], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Calculate the missing value.\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\nImage detected text: [([218, 118], '2'), ([310, 278], '2'), ([528, 280], '1'), ([703, 275], '3'), ([214, 442], '3'), ([128, 602], '2'), ([310, 604], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_value = 0\n\nfor i in range(1, 6):\n    if str(i) not in image_detected_text:\n        missing_value = i\n        break\n\nprint(missing_value)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "5",
        "prediction": "1",
        "true_false": true
    },
    "199": {
        "question": "Figure 23-42 is a section of a conducting rod of radius $R_1=1.30 \\mathrm{~mm}$ and length $L=$ $11.00 \\mathrm{~m}$ inside a thin-walled coaxial conducting cylindrical shell of radius $R_2=10.0 R_1$ and the (same) length $L$. The net charge on the rod is $Q_1=+3.40 \\times 10^{-12} \\mathrm{C}$; that on the shell is $Q_2=-2.00 Q_1$. What is the magnitude $E$ of the electric field at radial distance $r=2.00 R_2$?",
        "image": "images/199.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.21",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "199",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 262,
            "img_height": 303,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "arithmetic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([130, 238], 'Q2'), ([30, 270], 'Figure 23-42   Problem 29.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Figure 23-42 is a section of a conducting rod of radius $R_1=1.30 \\mathrm{~mm}$ and length $L=$ $11.00 \\mathrm{~m}$ inside a thin-walled coaxial conducting cylindrical shell of radius $R_2=10.0 R_1$ and the (same) length $L$. The net charge on the rod is $Q_1=+3.40 \\times 10^{-12} \\mathrm{C}$; that on the shell is $Q_2=-2.00 Q_1$. What is the magnitude $E$ of the electric field at radial distance $r=2.00 R_2$?\nImage detected text: [([130, 238], 'Q2'), ([30, 270], 'Figure 23-42   Problem 29.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef electric_field(R1, R2, Q1, Q2, r):\n    k = 9 * 10**9\n    E = (k * (Q1 + Q2)) / (2 * math.pi * (R2 - R1) * L)\n    return E\n\nR1 = 1.30 * 10**-3\nR2 = 10.0 * R1\nL = 11.00\nQ1 = 3.40 * 10**-12\nQ2 = -2.00 * Q1\nr = 2.00 * R2\n\nE = electric_field(R1, R2, Q1, Q2, r)\nprint(E)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "1.8e+06",
        "prediction": "1800000.0",
        "true_false": false
    },
    "200": {
        "question": "Is Light Sky Blue the high median?",
        "image": "images/200.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "200",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 404,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 117], '9'), ([9, 155], '2'), ([131, 285], 'L'), ([305, 285], 'E'), ([307, 319], '1'), ([187, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Light Sky Blue the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 117], '9'), ([9, 155], '2'), ([131, 285], 'L'), ([305, 285], 'E'), ([307, 319], '1'), ([187, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "high_median = 'no'\n\nif high_median == 'yes':\n    answer = 'A'\nelse:\n    answer = 'B'\n\nprint(answer)",
        "execution": "B",
        "error": "None",
        "extraction": "B",
        "prediction": "no",
        "true_false": false
    },
    "201": {
        "question": "What is the sum of all the values in the border group?",
        "image": "images/201.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "19",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "201",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([226, 16], 'Title'), ([44, 34], '25'), ([318, 61], 'loop'), ([44, 106], '20'), ([320, 96], 'leaf'), ([323, 135], 'razor'), ([45, 179], '15'), ([322, 166], 'domain'), ([320, 202], 'see'), ([17, 191], '1'), ([44, 248], '10'), ([99, 407], 'silk'), ([187, 407], 'nod'), ([263, 407], 'border'), ([361, 409], 'mare')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of all the values in the border group?\nImage detected text: [([226, 16], 'Title'), ([44, 34], '25'), ([318, 61], 'loop'), ([44, 106], '20'), ([320, 96], 'leaf'), ([323, 135], 'razor'), ([45, 179], '15'), ([322, 166], 'domain'), ([320, 202], 'see'), ([17, 191], '1'), ([44, 248], '10'), ([99, 407], 'silk'), ([187, 407], 'nod'), ([263, 407], 'border'), ([361, 409], 'mare')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "border_values = [25, 20, 15, 10]\nsum_of_values = sum(border_values)\nprint(sum_of_values)",
        "execution": "70",
        "error": "None",
        "extraction": "70",
        "prediction": "70",
        "true_false": false
    },
    "202": {
        "question": "What is the value of the smallest bar?",
        "image": "images/202.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "202",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 12], 'Title'), ([37, 31], '10'), ([15, 173], '1'), ([93, 365], '8'), ([163, 365], '1'), ([234, 362], '0'), ([311, 361], '3'), ([387, 367], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest bar?\nImage detected text: [([224, 12], 'Title'), ([37, 31], '10'), ([15, 173], '1'), ([93, 365], '8'), ([163, 365], '1'), ([234, 362], '0'), ([311, 361], '3'), ([387, 367], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar = float('inf')\nbars = [10, 1, 8, 1, 0, 3, 3]\n\nfor bar in bars:\n    if bar < smallest_bar:\n        smallest_bar = bar\n\nprint(smallest_bar)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "203": {
        "question": "\u5982\u56fe\uff0c\u57285\u00d74\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5c0f\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u90fd\u662f1\uff0c\u25b3ABC\u7684\u9876\u70b9\u90fd\u5728\u8fd9\u4e9b\u5c0f\u6b63\u65b9\u5f62\u7684\u9876\u70b9\u4e0a\uff0c\u5219tan\u2220BAC\u7684\u503c\u4e3a\uff08\uff09",
        "image": "images/203.jpg",
        "choices": [
            "\\frac{4}{3}",
            "0.75",
            "0.6",
            "0.8"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{4}{3}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "203",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 172,
            "img_height": 151,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u57285\u00d74\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5c0f\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u90fd\u662f1\uff0c\u25b3ABC\u7684\u9876\u70b9\u90fd\u5728\u8fd9\u4e9b\u5c0f\u6b63\u65b9\u5f62\u7684\u9876\u70b9\u4e0a\uff0c\u5219tan\u2220BAC\u7684\u503c\u4e3a\uff08\uff09\nChoices:\n(A) \\frac{4}{3}\n(B) 0.75\n(C) 0.6\n(D) 0.8\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_tan():\n    # Calculate the length of AC\n    AC = math.sqrt(5**2 + 4**2)\n    \n    # Calculate the length of AB\n    AB = math.sqrt(4**2 + 3**2)\n    \n    # Calculate the length of BC\n    BC = math.sqrt(5**2 + 3**2)\n    \n    # Calculate the angle BAC in radians\n    angle_BAC = math.acos((AB**2 + AC**2 - BC**2) / (2 * AB * AC))\n    \n    # Calculate the tangent of angle BAC\n    tan_BAC = math.tan(angle_BAC)\n    \n    return tan_BAC\n\nprint(find_tan())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "0.8",
        "prediction": "0.8",
        "true_false": false
    },
    "204": {
        "question": "\u0627\u0632 \u0633\u0645\u062a \u0631\u0627\u0633\u062a \u062a\u0635\u0648\u06cc\u0631 \u062f\u0631\u0628 \u062f\u0648\u0645 \u0686\u0646\u062f \u0634\u06cc\u0634\u0647 \u0628\u062f\u0648\u0646 \u0631\u0646\u06af \u062f\u0627\u0631\u0647\u061f",
        "image": "images/204.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "204",
        "metadata": {
            "split": "testmini",
            "language": "persian",
            "img_width": 564,
            "img_height": 376,
            "source": "ParsVQA-Caps",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u0627\u0632 \u0633\u0645\u062a \u0631\u0627\u0633\u062a \u062a\u0635\u0648\u06cc\u0631 \u062f\u0631\u0628 \u062f\u0648\u0645 \u0686\u0646\u062f \u0634\u06cc\u0634\u0647 \u0628\u062f\u0648\u0646 \u0631\u0646\u06af \u062f\u0627\u0631\u0647\u061f\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_glass_doors(image):\n    # Assuming the image is a list of tuples, where each tuple represents a door\n    # The first element of the tuple represents the side of the door (left or right)\n    # The second element of the tuple represents the number of glass panels on the door\n    right_doors = [door for door in image if door[0] == 'right']\n    total_glass_panels = sum([door[1] for door in right_doors])\n    return total_glass_panels\n\nimage = [('left', 2), ('right', 3), ('left', 1), ('right', 0), ('left', 4), ('right', 2)]\nprint(count_glass_doors(image))",
        "execution": "5",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "205": {
        "question": "A statistician analyzed the number of runs scored by players last season. How many players scored more than 2 runs last season?'",
        "image": "images/205.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "24",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "205",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 351,
            "img_height": 190,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 5], 'Baseball runs scored last season'), ([39, 33], 'Runs scored'), ([222, 32], 'Frequency'), ([251, 165], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A statistician analyzed the number of runs scored by players last season. How many players scored more than 2 runs last season?'\nImage detected text: [([49, 5], 'Baseball runs scored last season'), ([39, 33], 'Runs scored'), ([222, 32], 'Frequency'), ([251, 165], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "runs_scored = [1, 2, 3, 4, 5, 2, 3, 1, 0, 2, 4, 3, 2, 1, 3, 2, 4, 5, 2, 3]\n\ncount = 0\nfor runs in runs_scored:\n    if runs > 2:\n        count += 1\n\nprint(count)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "206": {
        "question": "Find the scale factor from $Q$ to $Q'$.",
        "image": "images/206.jpg",
        "choices": [
            "2",
            "3",
            "4",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "206",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 731,
            "img_height": 611,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([406, 484], 'X'), ([498, 470], 'Q 5'), ([631, 473], 'C'), ([294, 508], 'P'), ([439, 517], '15')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the scale factor from $Q$ to $Q'$.\nChoices:\n(A) 2\n(B) 3\n(C) 4\n(D) 5\nImage detected text: [([406, 484], 'X'), ([498, 470], 'Q 5'), ([631, 473], 'C'), ([294, 508], 'P'), ([439, 517], '15')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x1 = 498\ny1 = 470\nx2 = 631\ny2 = 473\n\ndistance_qq_prime = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\ndistance_qq = 5\n\nscale_factor = distance_qq_prime / distance_qq\nscale_factor",
        "execution": "",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "207": {
        "question": "What is the sum of the accuracies of the algorithms magic and secure?",
        "image": "images/207.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "207",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([17, 187], '1'), ([104, 408], 'fifty'), ([215, 411], 'secure'), ([342, 408], 'magic')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the accuracies of the algorithms magic and secure?\nImage detected text: [([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([17, 187], '1'), ([104, 408], 'fifty'), ([215, 411], 'secure'), ([342, 408], 'magic')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "magic_accuracy = 0.10\nsecure_accuracy = 0.50\n\nsum_of_accuracies = magic_accuracy + secure_accuracy\nprint(sum_of_accuracies)",
        "execution": "0.6",
        "error": "None",
        "extraction": "0.6",
        "prediction": null,
        "true_false": false
    },
    "208": {
        "question": "What is the age gap between the leftmost and the rigtmost person?",
        "image": "images/208.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "208",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 300,
            "img_height": 195,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between the leftmost and the rigtmost person? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "leftmost_age = 25\nrightmost_age = 40\n\nage_gap = rightmost_age - leftmost_age\nprint(age_gap)",
        "execution": "15",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "209": {
        "question": "What is the highest value in black line chart ?",
        "image": "images/209.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "28.3",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "209",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([673, 67], '30.1'), ([615, 79], '29.9 29.9'), ([557, 111], '29.3'), ([587, 115], '29.2'), ([499, 147], '28.6'), ([469, 157], '28.4'), ([673, 161], '28.3'), ([441, 167], '28.2'), ([413, 173], '28.1'), ([643, 173], '28.1'), ([615, 183], '27.9'), ([325, 199], '27.5 27.5 27.6'), ([44, 196], ']'), ([267, 209], '27.4'), ([239, 225], '27.1'), ([297, 225], '27.1'), ([585, 225], '27-W'), ([123, 235], '26.9 26.8 26.9 26.9'), ([499, 251], '26.6 26.6'), ([469, 263], '26.4'), ([441, 277], '26.-'), ([385, 287], '25.9 25.9'), ([355, 303], '25.6'), ([325, 307], '25.5'), ([209, 319], '25.3 25.3 25.3 25.3'), ([123, 329], '25.1 25.1 25.1'), ([116, 374], '689'), ([341, 431], 'Men'), ([397, 431], 'Women'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([79, 393], '1998'), ([136, 391], '2000'), ([190, 392], '2002'), ([245, 369], '8'), ([251, 392], '2004'), ([281, 393], '2005'), ([309, 393], '2006'), ([338, 393], '2007'), ([367, 393], '2008'), ([397, 393], '2009'), ([425, 393], '2010'), ([483, 392], '2012'), ([511, 393], '2013'), ([541, 393], '2014'), ([569, 393], '2015'), ([599, 393], '2016'), ([627, 393], '2017'), ([657, 393], '2018'), ([685, 392], '2019'), ([186, 370], '8'), ([474, 369], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest value in black line chart ?\nImage detected text: [([673, 67], '30.1'), ([615, 79], '29.9 29.9'), ([557, 111], '29.3'), ([587, 115], '29.2'), ([499, 147], '28.6'), ([469, 157], '28.4'), ([673, 161], '28.3'), ([441, 167], '28.2'), ([413, 173], '28.1'), ([643, 173], '28.1'), ([615, 183], '27.9'), ([325, 199], '27.5 27.5 27.6'), ([44, 196], ']'), ([267, 209], '27.4'), ([239, 225], '27.1'), ([297, 225], '27.1'), ([585, 225], '27-W'), ([123, 235], '26.9 26.8 26.9 26.9'), ([499, 251], '26.6 26.6'), ([469, 263], '26.4'), ([441, 277], '26.-'), ([385, 287], '25.9 25.9'), ([355, 303], '25.6'), ([325, 307], '25.5'), ([209, 319], '25.3 25.3 25.3 25.3'), ([123, 329], '25.1 25.1 25.1'), ([116, 374], '689'), ([341, 431], 'Men'), ([397, 431], 'Women'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([79, 393], '1998'), ([136, 391], '2000'), ([190, 392], '2002'), ([245, 369], '8'), ([251, 392], '2004'), ([281, 393], '2005'), ([309, 393], '2006'), ([338, 393], '2007'), ([367, 393], '2008'), ([397, 393], '2009'), ([425, 393], '2010'), ([483, 392], '2012'), ([511, 393], '2013'), ([541, 393], '2014'), ([569, 393], '2015'), ([599, 393], '2016'), ([627, 393], '2017'), ([657, 393], '2018'), ([685, 392], '2019'), ([186, 370], '8'), ([474, 369], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "black_line_chart_values = [30.1, 29.9, 29.9, 29.3, 29.2, 28.6, 28.4, 28.3, 28.2, 28.1, 28.1, 27.9, 27.5, 27.5, 27.6, 27.4, 27.1, 27.1, 27.1, 27.1, 26.9, 26.8, 26.9, 26.9, 26.6, 26.6, 26.4, 26.2, 25.9, 25.9, 25.6, 25.5, 25.3, 25.3, 25.3, 25.3, 25.1, 25.1, 25.1]\n\nhighest_value = max(black_line_chart_values)\nprint(highest_value)",
        "execution": "30.1",
        "error": "None",
        "extraction": "30.1",
        "prediction": "30.1",
        "true_false": false
    },
    "210": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/210.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "210",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 493,
            "img_height": 370,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "211": {
        "question": "How many algorithms have accuracies higher than 2?",
        "image": "images/211.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "211",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([137, 15], 'Accuracy of different algorithms'), ([23, 53], 'screw'), ([23, 101], 'thesis'), ([26, 148], 'turtle'), ([18, 200], 'agony'), ([15, 296], 'poems'), ([15, 344], 'poison'), ([227, 417], 'Accuracy'), ([32, 243], 'heap')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracies higher than 2?\nImage detected text: [([137, 15], 'Accuracy of different algorithms'), ([23, 53], 'screw'), ([23, 101], 'thesis'), ([26, 148], 'turtle'), ([18, 200], 'agony'), ([15, 296], 'poems'), ([15, 344], 'poison'), ([227, 417], 'Accuracy'), ([32, 243], 'heap')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [3, 4, 1, 5, 2, 6]\ncount = 0\n\nfor accuracy in accuracies:\n    if accuracy > 2:\n        count += 1\n\nprint(count)",
        "execution": "4",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "212": {
        "question": "Is Cornflower the minimum?",
        "image": "images/212.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "212",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 403,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([115, 11], 'title'), ([41, 105], 'Cornflower'), ([7, 153], '1'), ([9, 191], '1'), ([29, 265], 'Medium Blue'), ([221, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Cornflower the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([115, 11], 'title'), ([41, 105], 'Cornflower'), ([7, 153], '1'), ([9, 191], '1'), ([29, 265], 'Medium Blue'), ([221, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "min_color = 'Cornflower'\nchoices = ['yes', 'no']\n\nif min_color == 'Cornflower':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "213": {
        "question": "In which year there was lowest per capita real gross domestic product of ohio?",
        "image": "images/213.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2001",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "213",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '54 000'), ([685, 69], '52 664'), ([663, 99], '51 848'), ([61, 115], '52 000'), ([41, 117], '1'), ([633, 131], '50 972'), ([571, 169], '49 960'), ([43, 175], '3'), ([61, 191], '50 000'), ([541, 193], '49 29]'), ([44, 202], '1'), ([528, 260], 'D78'), ([41, 255], '8'), ([61, 263], '48 0o0'), ([265, 263], '47 433'), ([327, 277], '47 077'), ([235, 291], \"46 660'\"), ([449, 291], '46 663'), ([44, 302], '1'), ([205, 327], '45 707'), ([61, 339], '46 000'), ([173, 349], '45 122'), ([419, 349], '45 158'), ([113, 361], '44 792'), ([143, 387], '44 068'), ([405, 385], '169'), ([61, 415], '44 000'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([592, 452], '2016'), ([102, 452], '2000'), ([132, 452], '2001'), ([163, 452], '2002'), ([194, 452], '2003'), ([224, 452], '2004'), ([255, 453], '2005'), ([286, 452], '2006'), ([316, 452], '2007'), ([346, 451], '2008'), ([374, 452], '\"2009'), ([408, 452], '2010'), ([438, 452], '2011'), ([470, 452], '2012'), ([500, 452], '2013'), ([530, 452], '2014'), ([561, 453], '2015'), ([619, 451], \"'2017\"), ([652, 451], '2018'), ([684, 452], '2019')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In which year there was lowest per capita real gross domestic product of ohio?\nImage detected text: [([61, 41], '54 000'), ([685, 69], '52 664'), ([663, 99], '51 848'), ([61, 115], '52 000'), ([41, 117], '1'), ([633, 131], '50 972'), ([571, 169], '49 960'), ([43, 175], '3'), ([61, 191], '50 000'), ([541, 193], '49 29]'), ([44, 202], '1'), ([528, 260], 'D78'), ([41, 255], '8'), ([61, 263], '48 0o0'), ([265, 263], '47 433'), ([327, 277], '47 077'), ([235, 291], \"46 660'\"), ([449, 291], '46 663'), ([44, 302], '1'), ([205, 327], '45 707'), ([61, 339], '46 000'), ([173, 349], '45 122'), ([419, 349], '45 158'), ([113, 361], '44 792'), ([143, 387], '44 068'), ([405, 385], '169'), ([61, 415], '44 000'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([592, 452], '2016'), ([102, 452], '2000'), ([132, 452], '2001'), ([163, 452], '2002'), ([194, 452], '2003'), ([224, 452], '2004'), ([255, 453], '2005'), ([286, 452], '2006'), ([316, 452], '2007'), ([346, 451], '2008'), ([374, 452], '\"2009'), ([408, 452], '2010'), ([438, 452], '2011'), ([470, 452], '2012'), ([500, 452], '2013'), ([530, 452], '2014'), ([561, 453], '2015'), ([619, 451], \"'2017\"), ([652, 451], '2018'), ([684, 452], '2019')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "per_capita_gdp = {\n    '2000': 54664,\n    '2001': 51848,\n    '2002': 52000,\n    '2003': 52929,\n    '2004': 50972,\n    '2005': 49960,\n    '2006': 50000,\n    '2007': 49029,\n    '2008': 47077,\n    '2009': 46660,\n    '2010': 46663,\n    '2011': 45707,\n    '2012': 46000,\n    '2013': 45122,\n    '2014': 45158,\n    '2015': 44792,\n    '2016': 44068,\n    '2017': 45000,\n    '2018': 45158,\n    '2019': 44000\n}\n\nlowest_gdp = min(per_capita_gdp.values())\nlowest_year = [year for year, gdp in per_capita_gdp.items() if gdp == lowest_gdp][0]\nprint(lowest_year)",
        "execution": "",
        "error": "name 'lowest_gdp' is not defined",
        "extraction": "2016",
        "prediction": "2016",
        "true_false": false
    },
    "214": {
        "question": "In how many years, is the percentage of amount earned from merchandise imports in Canada greater than the average percentage of amount earned from merchandise imports in Canada taken over all years ?",
        "image": "images/214.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "214",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1109,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([54, 8], 'Merchandise imports to low and middle-income economies in Saharan Africa'), ([9, 267], '|'), ([101, 601], '8'), ([417, 601], '2'), ([735, 601], '8'), ([1051, 601], '8'), ([559, 639], 'Years'), ([35, 673], 'Canada'), ([103, 673], 'Iran'), ([155, 673], 'Slovak Republic')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the percentage of amount earned from merchandise imports in Canada greater than the average percentage of amount earned from merchandise imports in Canada taken over all years ?\nImage detected text: [([54, 8], 'Merchandise imports to low and middle-income economies in Saharan Africa'), ([9, 267], '|'), ([101, 601], '8'), ([417, 601], '2'), ([735, 601], '8'), ([1051, 601], '8'), ([559, 639], 'Years'), ([35, 673], 'Canada'), ([103, 673], 'Iran'), ([155, 673], 'Slovak Republic')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\n# Assuming the percentages of amount earned from merchandise imports in Canada are stored in a list called 'percentages'\npercentages = [8, 2, 8, 8]\n\n# Calculate the average percentage\naverage_percentage = np.mean(percentages)\n\n# Find the first year where the percentage is greater than the average\nyears = len(percentages)\nfor i in range(years):\n    if percentages[i] > average_percentage:\n        break\n\nprint(years - i)",
        "execution": "4",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "215": {
        "question": "Layla went on a camping trip and logged the number of miles she hiked each day. What is the range of the numbers?'",
        "image": "images/215.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "215",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 212,
            "img_height": 249,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 5], 'Miles hiked'), ([81, 39], 'Number of miles'), ([1, 64], 'Thursday'), ([3, 99], 'Friday'), ([1, 126], 'Saturday'), ([3, 161], 'Sunday'), ([1, 188], 'Monday'), ([133, 191], '10'), ([1, 219], 'Tuesday'), ([21, 34], 'Day')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Layla went on a camping trip and logged the number of miles she hiked each day. What is the range of the numbers?'\nImage detected text: [([61, 5], 'Miles hiked'), ([81, 39], 'Number of miles'), ([1, 64], 'Thursday'), ([3, 99], 'Friday'), ([1, 126], 'Saturday'), ([3, 161], 'Sunday'), ([1, 188], 'Monday'), ([133, 191], '10'), ([1, 219], 'Tuesday'), ([21, 34], 'Day')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "miles_hiked = [10, 15, 12, 8, 9, 11, 10]\n\nrange_of_numbers = max(miles_hiked) - min(miles_hiked)\nprint(range_of_numbers)",
        "execution": "7",
        "error": "None",
        "extraction": "7",
        "prediction": "7",
        "true_false": false
    },
    "216": {
        "question": "What percentage of people like the most preferred object in the whole chart?",
        "image": "images/216.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "90",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "216",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 10], 'Most preferred objects of different'), ([203, 31], 'categories'), ([35, 49], '100'), ([13, 134], '1'), ([89, 337], 'lake'), ([185, 337], 'split'), ([275, 337], 'burst'), ([375, 341], 'pen'), ([215, 381], 'categories'), ([195, 403], 'drawn'), ([309, 405], 'nerve')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of people like the most preferred object in the whole chart?\nImage detected text: [([108, 10], 'Most preferred objects of different'), ([203, 31], 'categories'), ([35, 49], '100'), ([13, 134], '1'), ([89, 337], 'lake'), ([185, 337], 'split'), ([275, 337], 'burst'), ([375, 341], 'pen'), ([215, 381], 'categories'), ([195, 403], 'drawn'), ([309, 405], 'nerve')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_votes = 100\nmost_preferred_votes = 35\n\npercentage = (most_preferred_votes / total_votes) * 100\nprint(percentage)",
        "execution": "35.0",
        "error": "None",
        "extraction": "35",
        "prediction": "35",
        "true_false": false
    },
    "217": {
        "question": "What is the degree of this function?",
        "image": "images/217.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "217",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 304,
            "img_height": 202,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([4, 152], '#33i838800'), ([150, 172], 'Y=1B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the degree of this function?\nImage detected text: [([4, 152], '#33i838800'), ([150, 172], 'Y=1B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef find_degree(text):\n    match = re.search(r'Y=(\\d+)', text)\n    if match:\n        degree = match.group(1)\n        return degree\n    return \"\"\n\ntext = \"#33i838800 Y=1B\"\nprint(find_degree(text))",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "218": {
        "question": "Subtract all large red rubber blocks. Subtract all tiny red matte objects. How many objects are left?",
        "image": "images/218.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "218",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large red rubber blocks. Subtract all tiny red matte objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_red_rubber_blocks = 10\ntiny_red_matte_objects = 5\n\nobjects_left = large_red_rubber_blocks - tiny_red_matte_objects\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "219": {
        "question": "What is the value of the smallest bar?",
        "image": "images/219.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "219",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([222, 16], 'Title'), ([26, 96], 'twist'), ([20, 150], 'priest'), ([18, 202], 'fringe'), ([39, 259], 'pan'), ([23, 311], 'curse'), ([403, 379], '10'), ([214, 404], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest bar?\nImage detected text: [([222, 16], 'Title'), ([26, 96], 'twist'), ([20, 150], 'priest'), ([18, 202], 'fringe'), ([39, 259], 'pan'), ([23, 311], 'curse'), ([403, 379], '10'), ([214, 404], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [10, 20, 30, 40, 50]\nsmallest_bar = min(values)\nprint(smallest_bar)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "220": {
        "question": "As shown in the figure, \u2299O is the circumscribed circle of the quadrilateral ABCD, if \u2220O = 110.0, then the degree of \u2220C is ()",
        "image": "images/220.jpg",
        "choices": [
            "125\u00b0",
            "120\u00b0",
            "105\u00b0",
            "90\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "125\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "220",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 124,
            "img_height": 128,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, \u2299O is the circumscribed circle of the quadrilateral ABCD, if \u2220O = 110.0, then the degree of \u2220C is ()\nChoices:\n(A) 125\u00b0\n(B) 120\u00b0\n(C) 105\u00b0\n(D) 90\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_O(angle_O):\n    angle_C = 360 - angle_O\n    return angle_C\n\nangle_O = 110.0\nangle_C = find_angle_O(angle_O)\nprint(angle_C)",
        "execution": "250.0",
        "error": "None",
        "extraction": "105",
        "prediction": "105\u00b0",
        "true_false": false
    },
    "221": {
        "question": "As shown in the figure, A, B, C are three points on \u2299O, \u2220ACB = 25.0, then the degree of \u2220BAO is ()",
        "image": "images/221.jpg",
        "choices": [
            "50\u00b0",
            "55\u00b0",
            "60\u00b0",
            "65\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "65\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "221",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 102,
            "img_height": 108,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, A, B, C are three points on \u2299O, \u2220ACB = 25.0, then the degree of \u2220BAO is ()\nChoices:\n(A) 50\u00b0\n(B) 55\u00b0\n(C) 60\u00b0\n(D) 65\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_BAO(angle_CAB):\n    angle_BAO = 180 - angle_CAB\n    return angle_BAO\n\nangle_CAB = 25.0\nangle_BAO = angle_BAO(angle_CAB)\nprint(angle_BAO)",
        "execution": "155.0",
        "error": "None",
        "extraction": "55",
        "prediction": "55\u00b0",
        "true_false": false
    },
    "222": {
        "question": "Subtract all blue shiny spheres. Subtract all big blue shiny cubes. How many objects are left?",
        "image": "images/222.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "222",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all blue shiny spheres. Subtract all big blue shiny cubes. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_shiny_spheres = 5\nbig_blue_shiny_cubes = 3\n\nobjects_left = blue_shiny_spheres - big_blue_shiny_cubes\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "223": {
        "question": "Is this an even function?",
        "image": "images/223.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "223",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1430,
            "img_height": 776,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this an even function?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_even_function(equation):\n    # Check if the equation is of the form f(x) = f(-x)\n    if equation == equation[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nequation = \"f(x) = c\"\nprint(is_even_function(equation))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "224": {
        "question": "Is this a periodic function?",
        "image": "images/224.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "224",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1114,
            "img_height": 744,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this a periodic function?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\nx = np.array([10, 8, 9, 0.5, 6, 2, -3, 2, 1, 2, 3])\ny = np.array([478, 494, 232, 320, 355, 497, 494, 160, 286, 638, 754, 872])\n\nperiodic = np.all(np.isclose(x, x[0])) and np.all(np.isclose(y, y[0]))\n\nif periodic:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "225": {
        "question": "Fig. Q4 shows the contour of an object. Represent it with an 8-directional chain code. The resultant chain code should be normalized with respect to the starting point of the chain code. Represent the answer as a list with each digit as a element.",
        "image": "images/225.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "[0, 2, 0, 2, 1, 7, 1, 2, 0, 3, 0, 6]",
        "question_type": "free_form",
        "answer_type": "list",
        "pid": "225",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 846,
            "img_height": 560,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([88, 12], 'starting point'), ([403, 7], 'Object'), ([550, 122], '3'), ([526, 212], '2'), ([569, 395], 'Directions'), ([360, 492], 'Fig: Q4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fig. Q4 shows the contour of an object. Represent it with an 8-directional chain code. The resultant chain code should be normalized with respect to the starting point of the chain code. Represent the answer as a list with each digit as a element.\nImage detected text: [([88, 12], 'starting point'), ([403, 7], 'Object'), ([550, 122], '3'), ([526, 212], '2'), ([569, 395], 'Directions'), ([360, 492], 'Fig: Q4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\ndef normalize_chain_code(chain_code):\n    starting_point = chain_code[0]\n    normalized_chain_code = []\n\n    for point in chain_code:\n        normalized_point = (point[0] - starting_point[0], point[1] - starting_point[1])\n        normalized_chain_code.append(normalized_point)\n\n    return normalized_chain_code\n\nchain_code = [(403, 7), (550, 122), (526, 212), (569, 395)]\nnormalized_chain_code = normalize_chain_code(chain_code)\nprint(normalized_chain_code)",
        "execution": "[(0, 0), (147, 115), (123, 205), (166, 388)]",
        "error": "None",
        "extraction": "[(0, 0), (147, 115), (123, 205), (166, 388)]",
        "prediction": "[(0, 0), (147, 115), (123, 205), (166, 388)]",
        "true_false": false
    },
    "226": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) past three.",
        "image": "images/226.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "226",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 95,
            "img_height": 95,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([24, 36], '3: I5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) past three.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([24, 36], '3: I5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter past\"\nprint(time_word)",
        "execution": "quarter past",
        "error": "None",
        "extraction": "quarter past",
        "prediction": "quarter past",
        "true_false": false
    },
    "227": {
        "question": "Is Dark Orchid the maximum?",
        "image": "images/227.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "227",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 580,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 11], 'title'), ([25, 33], '100'), ([7, 119], '9'), ([9, 157], '1'), ([85, 291], '2'), ([149, 291], '1'), ([213, 291], '1'), ([279, 289], '7'), ([343, 289], '1'), ([409, 291], '6'), ([473, 291], '7'), ([539, 291], '1'), ([149, 321], '1'), ([279, 329], '1'), ([279, 383], 'raxis label'), ([539, 330], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Orchid the maximum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([57, 11], 'title'), ([25, 33], '100'), ([7, 119], '9'), ([9, 157], '1'), ([85, 291], '2'), ([149, 291], '1'), ([213, 291], '1'), ([279, 289], '7'), ([343, 289], '1'), ([409, 291], '6'), ([473, 291], '7'), ([539, 291], '1'), ([149, 321], '1'), ([279, 329], '1'), ([279, 383], 'raxis label'), ([539, 330], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "max_color = 'Dark Orchid'\nchoices = ['yes', 'no']\n\nif max_color == 'Dark Orchid':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "228": {
        "question": "As shown in the figure, AB is the diameter of circle O, DB and DC are respectively tangent to circle O at points B and C. If \u2220ACE = 25.0, then the degree of \u2220D is ()",
        "image": "images/228.jpg",
        "choices": [
            "50\u00b0",
            "55\u00b0",
            "60\u00b0",
            "65\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "228",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 137,
            "img_height": 97,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of circle O, DB and DC are respectively tangent to circle O at points B and C. If \u2220ACE = 25.0, then the degree of \u2220D is ()\nChoices:\n(A) 50\u00b0\n(B) 55\u00b0\n(C) 60\u00b0\n(D) 65\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_ACE):\n    angle_ACE_rad = math.radians(angle_ACE)\n    angle_ACD_rad = math.pi - angle_ACE_rad\n    angle_ACD_deg = math.degrees(angle_ACD_rad)\n    angle_D = 180 - angle_ACD_deg\n    return angle_D\n\nangle_ACE = 25.0\nangle_D = find_angle(angle_ACE)\nprint(angle_D)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "55",
        "prediction": "55\u00b0",
        "true_false": false
    },
    "229": {
        "question": "What is the highest lysine level given?",
        "image": "images/229.jpg",
        "choices": [
            "0.33%",
            "0.31%",
            "0.29%",
            "0.32%",
            "0.30%"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.30%",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "229",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1683,
            "img_height": 2185,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([422, 241], 'Lysine Levelg'), ([981, 245], 'Threonine_Levelg'), ([359, 274], '(a8 examples'), ([577, 277], 'only'), ([665, 283], ')'), ([966, 284], '(as'), ([1029, 275], 'examples only)'), ([848, 344], '0.05%'), ([1066, 344], '0.10%'), ([1284, 346], '0.15%'), ([495, 409], '0.10%'), ([833, 413], '9'), ([866, 412], 'animals'), ([1053, 415], '9'), ([1083, 412], 'animals'), ([1271, 417], '9'), ([1302, 414], 'animals'), ([496, 478], '0.20%'), ([835, 483], '9'), ([866, 480], 'animals'), ([1053, 483], '9'), ([1084, 480], 'animals'), ([1269, 483], '9'), ([1302, 482], 'animals'), ([495, 543], '0.307'), ([835, 549], '9'), ([866, 546], 'animalg'), ([1053, 549], '9'), ([1083, 545], 'animals'), ([1269, 549], '9'), ([1302, 548], 'animals'), ([493, 645], 'Each group'), ([680, 646], 'of'), ([731, 649], '9'), ([764, 648], 'animalg'), ([898, 648], 'will'), ([984, 648], 'be'), ([1032, 648], 'divided'), ([1168, 650], 'into'), ([1251, 649], '3 groups'), ([1402, 648], 'of'), ([413, 749], '3'), ([445, 741], 'animals each,'), ([680, 748], 'and'), ([750, 748], 'these'), ([847, 747], 'groups will'), ([1050, 750], 'receive'), ([1185, 743], 'the supplemented'), ([1468, 750], 'rice'), ([412, 850], 'at'), ([464, 848], 'three'), ([562, 846], 'different'), ([732, 848], 'levels'), ([850, 850], 'in'), ([900, 850], 'the'), ([966, 848], 'diet'), ([1050, 848], 'for'), ([1147, 845], 'period'), ([1268, 850], 'of'), ([1318, 850], '21'), ([1486, 850], 'In'), ([410, 948], 'each'), ([495, 945], 'such assay ,'), ([697, 948], 'three'), ([796, 952], 'groups'), ([914, 948], 'of'), ([969, 949], '6'), ([1000, 948], 'animals'), ([1134, 950], 'each'), ([1216, 948], 'will'), ([1300, 950], 'receive'), ([1438, 950], 'three'), ([410, 1046], 'different'), ([580, 1048], 'levels'), ([698, 1048], 'of'), ([747, 1045], 'lactalbumin'), ([948, 1052], 'a8'), ([1000, 1050], 'the'), ([1067, 1047], 'standard protein.'), ([1382, 1050], 'Food'), ([1470, 1050], 'intake'), ([412, 1150], '(to'), ([478, 1148], 'determine'), ([696, 1150], 'tein'), ([781, 1148], 'intake)'), ([912, 1145], 'will'), ([1000, 1150], 'be'), ([1050, 1148], \"det 'rmined\"), ([1236, 1152], 'in'), ([1284, 1150], 'al1'), ([1352, 1150], 'animals'), ([1520, 1152], 'The'), ([409, 1248], 'regression  analysis'), ([748, 1254], 'to'), ([798, 1250], 'determine'), ([967, 1249], 'the dose-response'), ([1268, 1256], 'curves'), ([1386, 1252], 'and'), ([1454, 1252], 'the'), ([408, 1348], 'comparison'), ([596, 1350], 'of'), ([648, 1352], 'the'), ([814, 1352], 'ratios'), ([932, 1350], 'and'), ([1000, 1356], 'error'), ([1100, 1352], 'of'), ([1152, 1352], 'the'), ([1218, 1352], 'estimate'), ([1368, 1352], 'will'), ([1454, 1352], 'be'), ([408, 1446], 'performed'), ([579, 1451], 'by'), ([662, 1451], 'computer'), ([813, 1454], 'program'), ([948, 1452], 'which'), ([1048, 1452], 'hag'), ([1117, 1448], 'been  developed recently.'), ([412, 1554], 'These'), ([511, 1549], 'data will provide estimates'), ([984, 1554], 'of'), ([1036, 1554], 'the'), ([1102, 1556], 'amounts'), ([1233, 1551], 'of lysine'), ([1404, 1554], 'and'), ([411, 1649], 'threonine required'), ([777, 1649], 'yield'), ([913, 1650], 'product with maximal'), ([1268, 1656], 'nutritive'), ([1435, 1654], 'value'), ([494, 1756], 'Phase'), ([596, 1754], 'II'), ([648, 1760], 'can'), ([713, 1755], 'begin'), ([816, 1760], 'as'), ([866, 1760], 'soon'), ([950, 1760], 'as'), ([1002, 1756], 'the'), ([1068, 1756], 'rice'), ([1149, 1752], 'samples collected'), ([1454, 1754], 'in'), ([410, 1852], 'Phase'), ([515, 1853], 'I'), ([546, 1856], 'are'), ([612, 1852], 'received'), ([766, 1851], 'in Boston .'), ([964, 1846], 'Preliminary results'), ([1302, 1852], 'should'), ([1420, 1852], 'be'), ([370, 2140], 'Source: https IWWW industrydocuments.ucsf eduldocsijldg0227'), ([1369, 847], 'days .'), ([642, 1155], 'pro'), ([716, 1344], 'slope'), ([732, 1653], 'to')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest lysine level given?\nChoices:\n(A) 0.33%\n(B) 0.31%\n(C) 0.29%\n(D) 0.32%\n(E) 0.30%\nImage detected text: [([422, 241], 'Lysine Levelg'), ([981, 245], 'Threonine_Levelg'), ([359, 274], '(a8 examples'), ([577, 277], 'only'), ([665, 283], ')'), ([966, 284], '(as'), ([1029, 275], 'examples only)'), ([848, 344], '0.05%'), ([1066, 344], '0.10%'), ([1284, 346], '0.15%'), ([495, 409], '0.10%'), ([833, 413], '9'), ([866, 412], 'animals'), ([1053, 415], '9'), ([1083, 412], 'animals'), ([1271, 417], '9'), ([1302, 414], 'animals'), ([496, 478], '0.20%'), ([835, 483], '9'), ([866, 480], 'animals'), ([1053, 483], '9'), ([1084, 480], 'animals'), ([1269, 483], '9'), ([1302, 482], 'animals'), ([495, 543], '0.307'), ([835, 549], '9'), ([866, 546], 'animalg'), ([1053, 549], '9'), ([1083, 545], 'animals'), ([1269, 549], '9'), ([1302, 548], 'animals'), ([493, 645], 'Each group'), ([680, 646], 'of'), ([731, 649], '9'), ([764, 648], 'animalg'), ([898, 648], 'will'), ([984, 648], 'be'), ([1032, 648], 'divided'), ([1168, 650], 'into'), ([1251, 649], '3 groups'), ([1402, 648], 'of'), ([413, 749], '3'), ([445, 741], 'animals each,'), ([680, 748], 'and'), ([750, 748], 'these'), ([847, 747], 'groups will'), ([1050, 750], 'receive'), ([1185, 743], 'the supplemented'), ([1468, 750], 'rice'), ([412, 850], 'at'), ([464, 848], 'three'), ([562, 846], 'different'), ([732, 848], 'levels'), ([850, 850], 'in'), ([900, 850], 'the'), ([966, 848], 'diet'), ([1050, 848], 'for'), ([1147, 845], 'period'), ([1268, 850], 'of'), ([1318, 850], '21'), ([1486, 850], 'In'), ([410, 948], 'each'), ([495, 945], 'such assay ,'), ([697, 948], 'three'), ([796, 952], 'groups'), ([914, 948], 'of'), ([969, 949], '6'), ([1000, 948], 'animals'), ([1134, 950], 'each'), ([1216, 948], 'will'), ([1300, 950], 'receive'), ([1438, 950], 'three'), ([410, 1046], 'different'), ([580, 1048], 'levels'), ([698, 1048], 'of'), ([747, 1045], 'lactalbumin'), ([948, 1052], 'a8'), ([1000, 1050], 'the'), ([1067, 1047], 'standard protein.'), ([1382, 1050], 'Food'), ([1470, 1050], 'intake'), ([412, 1150], '(to'), ([478, 1148], 'determine'), ([696, 1150], 'tein'), ([781, 1148], 'intake)'), ([912, 1145], 'will'), ([1000, 1150], 'be'), ([1050, 1148], \"det 'rmined\"), ([1236, 1152], 'in'), ([1284, 1150], 'al1'), ([1352, 1150], 'animals'), ([1520, 1152], 'The'), ([409, 1248], 'regression  analysis'), ([748, 1254], 'to'), ([798, 1250], 'determine'), ([967, 1249], 'the dose-response'), ([1268, 1256], 'curves'), ([1386, 1252], 'and'), ([1454, 1252], 'the'), ([408, 1348], 'comparison'), ([596, 1350], 'of'), ([648, 1352], 'the'), ([814, 1352], 'ratios'), ([932, 1350], 'and'), ([1000, 1356], 'error'), ([1100, 1352], 'of'), ([1152, 1352], 'the'), ([1218, 1352], 'estimate'), ([1368, 1352], 'will'), ([1454, 1352], 'be'), ([408, 1446], 'performed'), ([579, 1451], 'by'), ([662, 1451], 'computer'), ([813, 1454], 'program'), ([948, 1452], 'which'), ([1048, 1452], 'hag'), ([1117, 1448], 'been  developed recently.'), ([412, 1554], 'These'), ([511, 1549], 'data will provide estimates'), ([984, 1554], 'of'), ([1036, 1554], 'the'), ([1102, 1556], 'amounts'), ([1233, 1551], 'of lysine'), ([1404, 1554], 'and'), ([411, 1649], 'threonine required'), ([777, 1649], 'yield'), ([913, 1650], 'product with maximal'), ([1268, 1656], 'nutritive'), ([1435, 1654], 'value'), ([494, 1756], 'Phase'), ([596, 1754], 'II'), ([648, 1760], 'can'), ([713, 1755], 'begin'), ([816, 1760], 'as'), ([866, 1760], 'soon'), ([950, 1760], 'as'), ([1002, 1756], 'the'), ([1068, 1756], 'rice'), ([1149, 1752], 'samples collected'), ([1454, 1754], 'in'), ([410, 1852], 'Phase'), ([515, 1853], 'I'), ([546, 1856], 'are'), ([612, 1852], 'received'), ([766, 1851], 'in Boston .'), ([964, 1846], 'Preliminary results'), ([1302, 1852], 'should'), ([1420, 1852], 'be'), ([370, 2140], 'Source: https IWWW industrydocuments.ucsf eduldocsijldg0227'), ([1369, 847], 'days .'), ([642, 1155], 'pro'), ([716, 1344], 'slope'), ([732, 1653], 'to')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_lysine_level = 0.00\n\ntext = [([835, 549], '9'), ([866, 546], 'animalg'), ([1053, 549], '9'), ([1083, 545], 'animals'), ([1269, 549], '9'), ([1302, 548], 'animals')]\n\nfor item in text:\n    if item[1].isdigit():\n        lysine_level = float(item[1])\n        if lysine_level > highest_lysine_level:\n            highest_lysine_level = lysine_level\n\nprint(highest_lysine_level)",
        "execution": "9.0",
        "error": "None",
        "extraction": "0.00",
        "prediction": "0.30%",
        "true_false": true
    },
    "230": {
        "question": "How many algorithms have accuracy higher than 9 in at least one dataset?",
        "image": "images/230.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "230",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([59, 13], 'Accuracy of algorithms'), ([77, 51], 'on different datasets'), ([54, 80], '10'), ([194, 108], 'datasets'), ([242, 138], 'niece'), ([242, 170], 'pie'), ([19, 183], '0'), ([116, 398], 'clergy'), ([307, 403], 'scar')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracy higher than 9 in at least one dataset?\nImage detected text: [([59, 13], 'Accuracy of algorithms'), ([77, 51], 'on different datasets'), ([54, 80], '10'), ([194, 108], 'datasets'), ([242, 138], 'niece'), ([242, 170], 'pie'), ([19, 183], '0'), ([116, 398], 'clergy'), ([307, 403], 'scar')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracy = [10, 8, 9, 7, 6, 9, 10, 9, 8, 9]\ncount = 0\n\nfor a in accuracy:\n    if a > 9:\n        count += 1\n\nprint(count)",
        "execution": "2",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "231": {
        "question": "Which model has the overall best ImageNet 10shot Accuracy score across different training steps?",
        "image": "images/231.jpg",
        "choices": [
            "Identity",
            "Uniform",
            "Uniform / Soft",
            "Soft / Uniform",
            "Soft",
            "Dense"
        ],
        "unit": null,
        "precision": null,
        "answer": "Soft",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "231",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2002,
            "img_height": 988,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([91, 67], '0.55'), ([877, 73], '0.75'), ([51, 159], 'S'), ([91, 197], '0.50'), ([831, 118], '01'), ([877, 159], '0.70'), ([1704, 166], 'Identity'), ([1709, 221], 'Uniform'), ([45, 173], ']'), ([877, 243], '0.65'), ([1709, 271], 'Uniform'), ([1857, 271], 'Soft'), ([91, 325], '0.45'), ([831, 261], '1'), ([877, 329], '0.60'), ([1709, 321], 'Soft'), ([1795, 320], 'Uniform'), ([1709, 371], 'Soft'), ([46, 362], '2'), ([830, 362], '}'), ([877, 413], '0.55'), ([1708, 420], 'Dense'), ([91, 453], '0.40'), ([877, 497], '0.50'), ([91, 581], '0.35'), ([877, 581], '0.45'), ([754, 620], '3'), ([407, 665], 'Train steps'), ([719, 657], 'X10S'), ([1193, 665], 'Train steps'), ([1501, 656], 'XlOS'), ([13, 759], 'Figure 1l: Soft MoE compared against different \"fixed routing\" strategies. Identity processes the i-th token'), ([17, 813], 'with the i-th expert; Uniform replaces both the dispatch and combine matrices with uniform averages; Uniform'), ([47, 861], 'Soft replaces the dispatch weights with a uniform average, but the combine weights are computed as in'), ([16, 914], 'Soft MoE; Soft'), ([313, 910], 'Uniform does the opposite replacement; and Soft uses the algorithm we present in Section 2.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model has the overall best ImageNet 10shot Accuracy score across different training steps?\nChoices:\n(A) Identity\n(B) Uniform\n(C) Uniform / Soft\n(D) Soft / Uniform\n(E) Soft\n(F) Dense\nImage detected text: [([91, 67], '0.55'), ([877, 73], '0.75'), ([51, 159], 'S'), ([91, 197], '0.50'), ([831, 118], '01'), ([877, 159], '0.70'), ([1704, 166], 'Identity'), ([1709, 221], 'Uniform'), ([45, 173], ']'), ([877, 243], '0.65'), ([1709, 271], 'Uniform'), ([1857, 271], 'Soft'), ([91, 325], '0.45'), ([831, 261], '1'), ([877, 329], '0.60'), ([1709, 321], 'Soft'), ([1795, 320], 'Uniform'), ([1709, 371], 'Soft'), ([46, 362], '2'), ([830, 362], '}'), ([877, 413], '0.55'), ([1708, 420], 'Dense'), ([91, 453], '0.40'), ([877, 497], '0.50'), ([91, 581], '0.35'), ([877, 581], '0.45'), ([754, 620], '3'), ([407, 665], 'Train steps'), ([719, 657], 'X10S'), ([1193, 665], 'Train steps'), ([1501, 656], 'XlOS'), ([13, 759], 'Figure 1l: Soft MoE compared against different \"fixed routing\" strategies. Identity processes the i-th token'), ([17, 813], 'with the i-th expert; Uniform replaces both the dispatch and combine matrices with uniform averages; Uniform'), ([47, 861], 'Soft replaces the dispatch weights with a uniform average, but the combine weights are computed as in'), ([16, 914], 'Soft MoE; Soft'), ([313, 910], 'Uniform does the opposite replacement; and Soft uses the algorithm we present in Section 2.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "model_scores = {\n    'Identity': 0.55,\n    'Uniform': 0.75,\n    'Uniform / Soft': 0.50,\n    'Soft / Uniform': 0.70,\n    'Soft': 0.45,\n    'Dense': 0.55\n}\n\nbest_model = max(model_scores, key=model_scores.get)\nprint(best_model)",
        "execution": "Uniform",
        "error": "None",
        "extraction": "Uniform",
        "prediction": "Uniform",
        "true_false": false
    },
    "232": {
        "question": "The diagram below is a model of two solutions. Each pink ball represents one particle of solute. Which solution has a higher concentration of pink particles?",
        "image": "images/232.jpg",
        "choices": [
            "neither; their concentrations are the same",
            "Solution B",
            "Solution A"
        ],
        "unit": null,
        "precision": null,
        "answer": "Solution B",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "232",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 378,
            "img_height": 251,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 197], 'Solvent volume: 25 mL'), ([213, 197], 'Solvent volume: 25 m'), ([40, 236], 'Solution'), ([256, 235], 'Solution')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The diagram below is a model of two solutions. Each pink ball represents one particle of solute. Which solution has a higher concentration of pink particles?\nChoices:\n(A) neither; their concentrations are the same\n(B) Solution B\n(C) Solution A\nImage detected text: [([0, 197], 'Solvent volume: 25 mL'), ([213, 197], 'Solvent volume: 25 m'), ([40, 236], 'Solution'), ([256, 235], 'Solution')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sol_a_concentration = 2/25\nsol_b_concentration = 3/25\n\nif sol_a_concentration > sol_b_concentration:\n    print(\"Solution A has a higher concentration of pink particles\")\nelif sol_a_concentration < sol_b_concentration:\n    print(\"Solution B has a higher concentration of pink particles\")\nelse:\n    print(\"Neither solution has a higher concentration; their concentrations are the same\")",
        "execution": "Solution B has a higher concentration of pink particles",
        "error": "None",
        "extraction": "Solution B",
        "prediction": "Solution B",
        "true_false": true
    },
    "233": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/233.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "233",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 199,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 165], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nImage detected text: [([19, 165], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "nail_length = 19.165\nrounded_length = round(nail_length)\nprint(rounded_length)",
        "execution": "19",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "234": {
        "question": "In the figure shown above, AC = 6. What is the length of segment AB?",
        "image": "images/234.jpg",
        "choices": [
            "3",
            "5",
            "6",
            "7",
            "It cannot be determined from the information given"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "234",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 434,
            "img_height": 378,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([161, 135], '60?'), ([33, 191], 'In the figure'), ([169, 193], 'above, AC = 6.'), ([283, 193], 'What is the length'), ([34, 206], 'of segment AB ?'), ([36, 296], '(0)'), ([35, 333], '(E)'), ([73, 337], 'It cannot be determined from the information given'), ([123, 190], 'shownl')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure shown above, AC = 6. What is the length of segment AB?\nChoices:\n(A) 3\n(B) 5\n(C) 6\n(D) 7\n(E) It cannot be determined from the information given\nImage detected text: [([161, 135], '60?'), ([33, 191], 'In the figure'), ([169, 193], 'above, AC = 6.'), ([283, 193], 'What is the length'), ([34, 206], 'of segment AB ?'), ([36, 296], '(0)'), ([35, 333], '(E)'), ([73, 337], 'It cannot be determined from the information given'), ([123, 190], 'shownl')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_length_of_AB(AC):\n    # In a right triangle, the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    # Using Pythagorean theorem, we can find the length of AB\n    AB = math.sqrt(AC**2 - 3**2)\n    return AB\n\nAC = 6\nlength_of_AB = find_length_of_AB(AC)\nprint(length_of_AB)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "235": {
        "question": "Is the epigraph of a function f an infinite set?",
        "image": "images/235.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "235",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 412,
            "img_height": 266,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([182, 26], 'epi f')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the epigraph of a function f an infinite set?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([182, 26], 'epi f')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_epigraph_infinite(epigraph):\n    if epigraph == \"infinite set\":\n        return \"Yes\"\n    else:\n        return \"No\"\n\nepigraph = \"infinite set\"\nprint(is_epigraph_infinite(epigraph))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "236": {
        "question": "Find $z$.",
        "image": "images/236.jpg",
        "choices": [
            "7",
            "9",
            "12",
            "15"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "236",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 447,
            "img_height": 423,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([296, 40], 'R'), ([63, 107], '2z _ 15'), ([49, 209], 'S')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $z$.\nChoices:\n(A) 7\n(B) 9\n(C) 12\n(D) 15\nImage detected text: [([296, 40], 'R'), ([63, 107], '2z _ 15'), ([49, 209], 'S')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nz = sp.symbols('z')\neq = sp.Eq(2*z - 15, 0)\nsol = sp.solve(eq, z)\n\nsol",
        "execution": "",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "237": {
        "question": "If the Red squirrel and deer mouse population were to decrease, what would happen to the deer tick population?",
        "image": "images/237.jpg",
        "choices": [
            "increase",
            "fluctuate",
            "it would decrease",
            "stay the same "
        ],
        "unit": null,
        "precision": null,
        "answer": "it would decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "237",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 346,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([186, 0], 'LEINc'), ([337, 67], 'Blule Jay'), ([125, 79], 'Der Tick'), ([272, 142], 'Ciery Surther'), ([292, 152], 'Eeelle'), ([336, 166], 'Carpenict'), ([117, 195], 'Red $qquirrel'), ([186, 196], 'OerMaucu'), ([223, 239], 'Gypey Moth Caterpillar')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the Red squirrel and deer mouse population were to decrease, what would happen to the deer tick population?\nChoices:\n(A) increase\n(B) fluctuate\n(C) it would decrease\n(D) stay the same \nImage detected text: [([186, 0], 'LEINc'), ([337, 67], 'Blule Jay'), ([125, 79], 'Der Tick'), ([272, 142], 'Ciery Surther'), ([292, 152], 'Eeelle'), ([336, 166], 'Carpenict'), ([117, 195], 'Red $qquirrel'), ([186, 196], 'OerMaucu'), ([223, 239], 'Gypey Moth Caterpillar')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def deer_tick_population(deer_mouse_population, red_squirrel_population):\n    if deer_mouse_population > 0 and red_squirrel_population > 0:\n        return \"increase\"\n    elif deer_mouse_population == 0 or red_squirrel_population == 0:\n        return \"decrease\"\n    else:\n        return \"stay the same\"\n\ndeer_mouse_population = 0\nred_squirrel_population = 0\n\nprint(deer_tick_population(deer_mouse_population, red_squirrel_population))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "increase",
        "true_false": false
    },
    "238": {
        "question": "Find PT",
        "image": "images/238.jpg",
        "choices": [
            "6",
            "\\frac { 20 } { 3 }",
            "7",
            "22 / 3"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac { 20 } { 3 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "238",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 238,
            "img_height": 250,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([19, 81], 'T'), ([106, 98], '25'), ([34, 212], 'R 10'), ([114, 212], '55 Q')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find PT\nChoices:\n(A) 6\n(B) \\frac { 20 } { 3 }\n(C) 7\n(D) 22 / 3\nImage detected text: [([19, 81], 'T'), ([106, 98], '25'), ([34, 212], 'R 10'), ([114, 212], '55 Q')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_PT(R, Q):\n    PT = math.sqrt(R**2 + Q**2)\n    return PT\n\nR = 10\nQ = 55\n\nPT = find_PT(R, Q)\nprint(PT)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "22/3",
        "prediction": "22 / 3",
        "true_false": false
    },
    "239": {
        "question": "Is Sky Blue the minimum?",
        "image": "images/239.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "239",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 769,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([123, 11], 'title'), ([31, 45], 'Deep Sky Blue'), ([45, 85], 'Lime Green'), ([53, 125], 'Dark Cyan'), ([7, 153], '1'), ([51, 165], 'Burlywood'), ([9, 191], '1'), ([35, 205], 'Light Salmon'), ([69, 245], 'Salmon'), ([77, 285], 'Green'), ([63, 325], 'Sky Blue'), ([407, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Sky Blue the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([123, 11], 'title'), ([31, 45], 'Deep Sky Blue'), ([45, 85], 'Lime Green'), ([53, 125], 'Dark Cyan'), ([7, 153], '1'), ([51, 165], 'Burlywood'), ([9, 191], '1'), ([35, 205], 'Light Salmon'), ([69, 245], 'Salmon'), ([77, 285], 'Green'), ([63, 325], 'Sky Blue'), ([407, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_sky_blue_minimum(colors):\n    for color in colors:\n        if color == 'Sky Blue':\n            return 'no'\n    return 'yes'\n\ncolors = ['Deep Sky Blue', 'Lime Green', 'Dark Cyan', 'Burlywood', 'Light Salmon', 'Salmon', 'Green', 'Sky Blue']\nprint(is_sky_blue_minimum(colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "240": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/240.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "240",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 3500,
            "img_height": 2387,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "241": {
        "question": "How many models in the table have a model size larger than 10B?",
        "image": "images/241.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "11",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "241",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1570,
            "img_height": 1184,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 10], 'Table 1: AgentBench evaluates 25 API-based or open-sourced LLMs on LLM-as-Agent'), ([1377, 4], 'challenges.'), ([76, 76], 'Model'), ([579, 77], 'Model Size'), ([846, 80], 'Form'), ([1031, 79], 'Version'), ([1318, 80], 'Creator'), ([133, 129], '-4 [56]'), ([575, 129], 'undisclosed'), ([863, 131], 'api'), ([1047, 129], '0613'), ([76, 158], 'gpt-3.5-turbo [55]'), ([575, 161], 'undisclosed'), ([863, 167], 'api'), ([1047, 161], '0613'), ([1314, 170], 'OpenAI'), ([77, 191], 'text-davinci-003 [58]'), ([575, 191], 'undisclosed'), ([863, 197], 'api'), ([77, 223], 'text-davinci-002 [58]'), ([575, 223], 'undisclosed'), ([863, 229], 'api'), ([77, 273], 'claude [6]'), ([575, 275], 'undisclosed'), ([863, 277], 'api'), ([1050, 274], 'vl.3'), ([77, 305], 'claude-instant [6]'), ([575, 307], 'undisclosed'), ([863, 309], 'api'), ([1051, 307], 'vl.1'), ([1303, 291], 'Anthropic'), ([77, 357], 'text-bison-001 [3]'), ([574, 356], 'undisclosed'), ([863, 359], 'api'), ([1318, 356], 'Google'), ([76, 409], 'chatglm2 [100;, 21]'), ([574, 409], 'undisclosed'), ([863, 411], 'api'), ([1054, 412], 'v0.2'), ([75, 434], 'chatglm-6b [100; 21]'), ([640, 444], '6B'), ([852, 448], 'open'), ([1051, 441], 'vl.1'), ([1241, 437], 'Tsinghua & Zhipu'), ([76, 473], 'codegeex2-6b-chat [102]'), ([640, 474], '6B'), ([852, 480], 'open'), ([77, 525], 'vicuna-13b [14]'), ([630, 526], '13B'), ([851, 529], 'open'), ([1054, 526], 'vl.1'), ([1311, 539], 'LMSYS'), ([77, 555], 'vicuna-7b [14]'), ([637, 553], '7B'), ([851, 561], 'open'), ([1052, 558], 'vl.1'), ([77, 607], 'llama2-chat-13b [80]'), ([632, 610], '13B'), ([851, 613], 'open'), ([1334, 622], 'Meta'), ([77, 637], 'llama2-chat-7b [80]'), ([638, 640], '7B'), ([852, 646], 'open'), ([75, 686], 'openchat-8192-13b [85]'), ([630, 692], '13B'), ([852, 698], 'open'), ([1066, 694], 'vl'), ([75, 717], 'openchat-13b [85]'), ([629, 721], '13B'), ([851, 727], 'open'), ([1052, 724], 'v3.2'), ([1304, 704], 'Tsinghua'), ([76, 771], 'wizardlm-3Ob [93]'), ([629, 773], '30B'), ([851, 779], 'open'), ([1052, 776], 'vl.0'), ([76, 803], 'wizardcoder-I5b [48]'), ([630, 806], '15B'), ([852, 812], 'open'), ([1051, 805], 'vl.0'), ([1301, 803], 'Microsoft'), ([77, 835], 'wizardlm-13b [93]'), ([630, 838], '13B'), ([852, 844], 'open'), ([1051, 837], 'vl.0'), ([76, 885], 'koala-13b [26]'), ([632, 890], '13B'), ([851, 893], 'open'), ([1281, 884], 'UC Berkeley'), ([77, 937], 'internlm-chat-7b [79]'), ([640, 942], '7B'), ([851, 945], 'open'), ([1259, 939], 'InternLM Team'), ([77, 991], 'baichuan-13b-chat [36]'), ([629, 991], '13B'), ([851, 997], 'open'), ([1273, 1007], 'Baichuan Inc.'), ([77, 1021], 'baichuan-7b [36]'), ([637, 1023], '7B'), ([852, 1030], 'open'), ([76, 1070], 'dolly-12b [16]'), ([631, 1073], '12B'), ([851, 1079], 'open'), ([1295, 1073], 'Databricks'), ([76, 1125], 'oasst-sft-4-12b [42]'), ([629, 1125], '12B'), ([851, 1131], 'open'), ([1315, 1125], 'LAION'), ([75, 136], 'gpt-')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many models in the table have a model size larger than 10B?\nImage detected text: [([24, 10], 'Table 1: AgentBench evaluates 25 API-based or open-sourced LLMs on LLM-as-Agent'), ([1377, 4], 'challenges.'), ([76, 76], 'Model'), ([579, 77], 'Model Size'), ([846, 80], 'Form'), ([1031, 79], 'Version'), ([1318, 80], 'Creator'), ([133, 129], '-4 [56]'), ([575, 129], 'undisclosed'), ([863, 131], 'api'), ([1047, 129], '0613'), ([76, 158], 'gpt-3.5-turbo [55]'), ([575, 161], 'undisclosed'), ([863, 167], 'api'), ([1047, 161], '0613'), ([1314, 170], 'OpenAI'), ([77, 191], 'text-davinci-003 [58]'), ([575, 191], 'undisclosed'), ([863, 197], 'api'), ([77, 223], 'text-davinci-002 [58]'), ([575, 223], 'undisclosed'), ([863, 229], 'api'), ([77, 273], 'claude [6]'), ([575, 275], 'undisclosed'), ([863, 277], 'api'), ([1050, 274], 'vl.3'), ([77, 305], 'claude-instant [6]'), ([575, 307], 'undisclosed'), ([863, 309], 'api'), ([1051, 307], 'vl.1'), ([1303, 291], 'Anthropic'), ([77, 357], 'text-bison-001 [3]'), ([574, 356], 'undisclosed'), ([863, 359], 'api'), ([1318, 356], 'Google'), ([76, 409], 'chatglm2 [100;, 21]'), ([574, 409], 'undisclosed'), ([863, 411], 'api'), ([1054, 412], 'v0.2'), ([75, 434], 'chatglm-6b [100; 21]'), ([640, 444], '6B'), ([852, 448], 'open'), ([1051, 441], 'vl.1'), ([1241, 437], 'Tsinghua & Zhipu'), ([76, 473], 'codegeex2-6b-chat [102]'), ([640, 474], '6B'), ([852, 480], 'open'), ([77, 525], 'vicuna-13b [14]'), ([630, 526], '13B'), ([851, 529], 'open'), ([1054, 526], 'vl.1'), ([1311, 539], 'LMSYS'), ([77, 555], 'vicuna-7b [14]'), ([637, 553], '7B'), ([851, 561], 'open'), ([1052, 558], 'vl.1'), ([77, 607], 'llama2-chat-13b [80]'), ([632, 610], '13B'), ([851, 613], 'open'), ([1334, 622], 'Meta'), ([77, 637], 'llama2-chat-7b [80]'), ([638, 640], '7B'), ([852, 646], 'open'), ([75, 686], 'openchat-8192-13b [85]'), ([630, 692], '13B'), ([852, 698], 'open'), ([1066, 694], 'vl'), ([75, 717], 'openchat-13b [85]'), ([629, 721], '13B'), ([851, 727], 'open'), ([1052, 724], 'v3.2'), ([1304, 704], 'Tsinghua'), ([76, 771], 'wizardlm-3Ob [93]'), ([629, 773], '30B'), ([851, 779], 'open'), ([1052, 776], 'vl.0'), ([76, 803], 'wizardcoder-I5b [48]'), ([630, 806], '15B'), ([852, 812], 'open'), ([1051, 805], 'vl.0'), ([1301, 803], 'Microsoft'), ([77, 835], 'wizardlm-13b [93]'), ([630, 838], '13B'), ([852, 844], 'open'), ([1051, 837], 'vl.0'), ([76, 885], 'koala-13b [26]'), ([632, 890], '13B'), ([851, 893], 'open'), ([1281, 884], 'UC Berkeley'), ([77, 937], 'internlm-chat-7b [79]'), ([640, 942], '7B'), ([851, 945], 'open'), ([1259, 939], 'InternLM Team'), ([77, 991], 'baichuan-13b-chat [36]'), ([629, 991], '13B'), ([851, 997], 'open'), ([1273, 1007], 'Baichuan Inc.'), ([77, 1021], 'baichuan-7b [36]'), ([637, 1023], '7B'), ([852, 1030], 'open'), ([76, 1070], 'dolly-12b [16]'), ([631, 1073], '12B'), ([851, 1079], 'open'), ([1295, 1073], 'Databricks'), ([76, 1125], 'oasst-sft-4-12b [42]'), ([629, 1125], '12B'), ([851, 1131], 'open'), ([1315, 1125], 'LAION'), ([75, 136], 'gpt-')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "model_sizes = [56, -4, 6, 6, 100, 100, 102, 6, 14, 14, 80, 80, 85, 85, 93, 93, 26, 7, 13, 12, 4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,",
        "execution": "",
        "error": "unexpected EOF while parsing (<string>, line 1)",
        "extraction": "[56, -4, 6, 6, 100, 100, 102, 6, 14, 14, 80, 80, 85, 85, 93, 93, 26, 7, 13, 12, 4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,",
        "prediction": null,
        "true_false": false
    },
    "242": {
        "question": "Find $m \\angle A$ of quadrilateral ABCD",
        "image": "images/242.jpg",
        "choices": [
            "45",
            "90",
            "135",
            "180"
        ],
        "unit": null,
        "precision": null,
        "answer": "135",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "242",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 621,
            "img_height": 381,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([162, 50], 'A'), ([202, 92], '3x'), ([105, 227], 'X'), ([36, 272], 'D')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $m \\angle A$ of quadrilateral ABCD\nChoices:\n(A) 45\n(B) 90\n(C) 135\n(D) 180\nImage detected text: [([162, 50], 'A'), ([202, 92], '3x'), ([105, 227], 'X'), ([36, 272], 'D')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nangle_A = 180 - 3*x\n\nsolution = sp.solve(angle_A - 45, x)\nangle_A_value = angle_A.subs(x, solution[0])\n\nprint(angle_A_value)",
        "execution": "45",
        "error": "None",
        "extraction": "45",
        "prediction": "45",
        "true_false": false
    },
    "243": {
        "question": "\u0686\u0646\u062f \u0639\u062f\u062f \u0634\u06cc\u0631\u06cc\u0646\u06cc \u0645\u062b\u0644\u062b\u06cc \u0634\u06a9\u0644 \u062f\u0631 \u062c\u0639\u0628\u0647 \u0627\u0633\u062a\u061f",
        "image": "images/243.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "243",
        "metadata": {
            "split": "testmini",
            "language": "persian",
            "img_width": 564,
            "img_height": 1001,
            "source": "ParsVQA-Caps",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u0686\u0646\u062f \u0639\u062f\u062f \u0634\u06cc\u0631\u06cc\u0646\u06cc \u0645\u062b\u0644\u062b\u06cc \u0634\u06a9\u0644 \u062f\u0631 \u062c\u0639\u0628\u0647 \u0627\u0633\u062a\u061f\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "num_of_triangular_cakes = 0\nfor i in range(1, 11):\n    for j in range(1, 11):\n        for k in range(1, 11):\n            if i**2 + j**2 == k**2:\n                num_of_triangular_cakes += 1\n\nprint(num_of_triangular_cakes)",
        "execution": "4",
        "error": "None",
        "extraction": "55",
        "prediction": "55",
        "true_false": false
    },
    "244": {
        "question": "Does Aqua have the minimum area under the curve?",
        "image": "images/244.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "244",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([84, 136], 'Aqua'), ([7, 153], '1'), ([83, 161], 'Periwinkle'), ([83, 181], 'Dark Red'), ([9, 191], '1'), ([85, 207], 'Medium Seafoam'), ([83, 227], 'Dafk Orchid'), ([463, 363], '100'), ([235, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Aqua have the minimum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([84, 136], 'Aqua'), ([7, 153], '1'), ([83, 161], 'Periwinkle'), ([83, 181], 'Dark Red'), ([9, 191], '1'), ([85, 207], 'Medium Seafoam'), ([83, 227], 'Dafk Orchid'), ([463, 363], '100'), ([235, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Aqua')\nplt.show()\n\n# The minimum area under the curve is at x = 1, y = 2\nminimum_area = 2\n\nif minimum_area == min(y):\n    print(\"A) yes\")\nelse:\n    print(\"B) no\")",
        "execution": "A) yes",
        "error": "None",
        "extraction": "A) yes",
        "prediction": "yes",
        "true_false": false
    },
    "245": {
        "question": "How much money does Damon need to buy a grilled steak and a mushroom pizza? (Unit: $)",
        "image": "images/245.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "24",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "245",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 259,
            "img_height": 128,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([8, 4], 'pasta with white sauce'), ([219, 5], 'S15'), ([9, 41], 'mushroom pizza'), ([221, 37], 'S11'), ([4, 66], 'grilled steak'), ([219, 69], 'S13'), ([9, 105], 'pasta with meat sauce'), ([219, 101], 'S12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Damon need to buy a grilled steak and a mushroom pizza? (Unit: $)\nImage detected text: [([8, 4], 'pasta with white sauce'), ([219, 5], 'S15'), ([9, 41], 'mushroom pizza'), ([221, 37], 'S11'), ([4, 66], 'grilled steak'), ([219, 69], 'S13'), ([9, 105], 'pasta with meat sauce'), ([219, 101], 'S12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "grilled_steak_price = 66.00\nmushroom_pizza_price = 41.00\n\nans = grilled_steak_price + mushroom_pizza_price\nprint(ans)",
        "execution": "107.0",
        "error": "None",
        "extraction": "107.0",
        "prediction": null,
        "true_false": false
    },
    "246": {
        "question": "Assume that all gases are perfect and that data refer to 298 K unless otherwise stated. In 1995, the Intergovernmental Panel on Climate Change (IPCC) considered a global average temperature rise of $1.0-3.5^{\\circ} \\mathrm{C}$ likely by the year 2100 , with $2.0^{\\circ} \\mathrm{C}$ its best estimate. Because water vapour is itself a greenhouse gas, the increase in water vapour content of the atmosphere is of some concern to climate change experts. Predict the relative increase in water vapour in the atmosphere based on a temperature rises of $2.0 \\mathrm{~K}$, assuming that the relative humidity remains constant. (The present global mean temperature is $290 \\mathrm{~K}$, and the equilibrium vapour pressure of water at that temperature is 0.0189 bar.)",
        "image": "images/246.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "246",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1098,
            "img_height": 216,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([13, 5], 'concern t0 climate'), ([269, 1], 'change experts Predict the relative increase in water'), ([11, 41], 'vapour in the atmosphere based on a temperature rises of2.0 K, assuming that'), ([10, 83], 'the relative humidity remains constant: (The present global mean temperature'), ([10, 126], 'is 290 K, and the equilibrium vapour pressure ofwater at that temperature is'), ([14, 178], '0.0189 bar.)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Assume that all gases are perfect and that data refer to 298 K unless otherwise stated. In 1995, the Intergovernmental Panel on Climate Change (IPCC) considered a global average temperature rise of $1.0-3.5^{\\circ} \\mathrm{C}$ likely by the year 2100 , with $2.0^{\\circ} \\mathrm{C}$ its best estimate. Because water vapour is itself a greenhouse gas, the increase in water vapour content of the atmosphere is of some concern to climate change experts. Predict the relative increase in water vapour in the atmosphere based on a temperature rises of $2.0 \\mathrm{~K}$, assuming that the relative humidity remains constant. (The present global mean temperature is $290 \\mathrm{~K}$, and the equilibrium vapour pressure of water at that temperature is 0.0189 bar.)\nImage detected text: [([13, 5], 'concern t0 climate'), ([269, 1], 'change experts Predict the relative increase in water'), ([11, 41], 'vapour in the atmosphere based on a temperature rises of2.0 K, assuming that'), ([10, 83], 'the relative humidity remains constant: (The present global mean temperature'), ([10, 126], 'is 290 K, and the equilibrium vapour pressure ofwater at that temperature is'), ([14, 178], '0.0189 bar.)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "temperature_rise = 2.0  # in K\npresent_temperature = 290  # in K\nequilibrium_vapour_pressure = 0.0189  # in bar\n\nrelative_increase = (temperature_rise / present_temperature) * equilibrium_vapour_pressure\nprint(relative_increase)",
        "execution": "0.0001303448275862069",
        "error": "None",
        "extraction": "0.013",
        "prediction": null,
        "true_false": false
    },
    "247": {
        "question": "A spaceship of mass $m=4.50 \\times 10^3 \\mathrm{~kg}$ is in a circular Earth orbit of radius $r=8.00 \\times 10^6 \\mathrm{~m}$ and period $T_0=118.6 \\mathrm{~min}=$ $7.119 \\times 10^3 \\mathrm{~s}$ when a thruster is fired in the forward direction to decrease the speed to $96.0 \\%$ of the original speed. What is the period $T$ of the resulting elliptical orbit (Figure)?",
        "image": "images/247.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "6.36",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "247",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 914,
            "img_height": 906,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([81, 411], 'P'), ([296, 518], 'M')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A spaceship of mass $m=4.50 \\times 10^3 \\mathrm{~kg}$ is in a circular Earth orbit of radius $r=8.00 \\times 10^6 \\mathrm{~m}$ and period $T_0=118.6 \\mathrm{~min}=$ $7.119 \\times 10^3 \\mathrm{~s}$ when a thruster is fired in the forward direction to decrease the speed to $96.0 \\%$ of the original speed. What is the period $T$ of the resulting elliptical orbit (Figure)?\nImage detected text: [([81, 411], 'P'), ([296, 518], 'M')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nm = 4.50 * 10**3\nr = 8.00 * 10**6\nT0 = 7.119 * 10**3\nv0 = (2 * math.pi * r) / T0\n\nv = v0 * 0.96\na = (v**2) / r\nT = (2 * math.pi * r) / v\n\nprint(T)",
        "execution": "7415.625",
        "error": "None",
        "extraction": "7.419",
        "prediction": "7.42",
        "true_false": false
    },
    "248": {
        "question": "Is the number of green matte choppers greater than the number of large yellow shiny motorbikes?",
        "image": "images/248.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "248",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of green matte choppers greater than the number of large yellow shiny motorbikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(green_choppers, yellow_motorbikes):\n    if green_choppers > yellow_motorbikes:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ngreen_choppers = 10\nyellow_motorbikes = 5\n\nprint(compare_numbers(green_choppers, yellow_motorbikes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "249": {
        "question": "Subtract all green rubber cubes. Subtract all red matte blocks. How many objects are left?",
        "image": "images/249.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "249",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all green rubber cubes. Subtract all red matte blocks. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "green_rubber_cubes = 10\nred_matte_blocks = 5\n\nobjects_left = green_rubber_cubes - red_matte_blocks\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "250": {
        "question": "The area $A$ of the shaded region is given. Find $x$. $A = 66$ cm$^2$ .",
        "image": "images/250.jpg",
        "choices": [
            "4.6",
            "6.5",
            "13.0",
            "26.0"
        ],
        "unit": null,
        "precision": null,
        "answer": "13.0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "250",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 303,
            "img_height": 286,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([230, 134], 'X Cm'), ([120, 144], '180=')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The area $A$ of the shaded region is given. Find $x$. $A = 66$ cm$^2$ .\nChoices:\n(A) 4.6\n(B) 6.5\n(C) 13.0\n(D) 26.0\nImage detected text: [([230, 134], 'X Cm'), ([120, 144], '180=')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nA = 66\n\neq = sp.Eq(x * (180 - x), A)\nsol = sp.solve(eq, x)\n\nsol",
        "execution": "",
        "error": "None",
        "extraction": "6.5",
        "prediction": "6.5",
        "true_false": false
    },
    "251": {
        "question": "Subtract all green balls. Subtract all shiny things. How many objects are left?",
        "image": "images/251.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "251",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all green balls. Subtract all shiny things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "green_balls = 5\nshiny_things = 3\n\nobjects_left = green_balls - shiny_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "252": {
        "question": "Consider the infinitely long chain of resistors shown below. What is the resistance between terminals a and b if R=1?",
        "image": "images/252.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.73",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "252",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 463,
            "img_height": 169,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([213, 39], 'R'), ([253, 68], 'R <'), ([373, 68], 'R <')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Consider the infinitely long chain of resistors shown below. What is the resistance between terminals a and b if R=1?\nImage detected text: [([213, 39], 'R'), ([253, 68], 'R <'), ([373, 68], 'R <')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def calculate_resistance(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + 2 * calculate_resistance(n-1)\n\nresistance = calculate_resistance(100)\nprint(resistance)",
        "execution": "",
        "error": "name 'calculate_resistance' is not defined",
        "extraction": "100",
        "prediction": "100.0",
        "true_false": false
    },
    "253": {
        "question": "How many objects are preferred by more than 7 people in at least one category?",
        "image": "images/253.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "253",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([104, 10], 'Most preferred objects of different'), ([203, 35], 'categories'), ([13, 134], '1'), ([15, 203], 'I'), ([91, 335], 'tender'), ([223, 337], 'drain'), ([357, 339], 'wet'), ([211, 381], 'categories'), ([99, 405], 'nut'), ([195, 405], 'quo'), ([293, 401], 'bull'), ([393, 403], 'recipe')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many objects are preferred by more than 7 people in at least one category?\nImage detected text: [([104, 10], 'Most preferred objects of different'), ([203, 35], 'categories'), ([13, 134], '1'), ([15, 203], 'I'), ([91, 335], 'tender'), ([223, 337], 'drain'), ([357, 339], 'wet'), ([211, 381], 'categories'), ([99, 405], 'nut'), ([195, 405], 'quo'), ([293, 401], 'bull'), ([393, 403], 'recipe')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = {\n    'baking dish': 5,\n    'casserole dish': 9,\n    'ice cream scoop': 7,\n    'rolling pin': 5\n}\n\ncount = 0\nfor obj in objects:\n    if objects[obj] > 7:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "254": {
        "question": "Is the number of big objects that are in front of the metal fighter less than the number of things that are behind the big metallic bus?",
        "image": "images/254.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "254",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of big objects that are in front of the metal fighter less than the number of things that are behind the big metallic bus?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(front_objects, behind_objects):\n    if len(front_objects) < len(behind_objects):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nfront_objects = [\"big object 1\", \"big object 2\"]\nbehind_objects = [\"big metallic bus\", \"object 1\", \"object 2\"]\n\nprint(compare_objects(front_objects, behind_objects))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "255": {
        "question": "As shown in the figure, \u2220BAC = 110.0, if A and B are symmetrical with respect to the line MP, A and C are symmetrical with respect to the line NQ, then the size of \u2220PAQ is ()",
        "image": "images/255.jpg",
        "choices": [
            "70\u00b0",
            "55\u00b0",
            "40\u00b0",
            "30\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "255",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 188,
            "img_height": 92,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, \u2220BAC = 110.0, if A and B are symmetrical with respect to the line MP, A and C are symmetrical with respect to the line NQ, then the size of \u2220PAQ is ()\nChoices:\n(A) 70\u00b0\n(B) 55\u00b0\n(C) 40\u00b0\n(D) 30\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_BAC = 110.0\n    angle_BAP = (180 - angle_BAC) / 2\n    angle_PAQ = 180 - 2 * angle_BAP\n    return angle_PAQ\n\nprint(find_angle())",
        "execution": "110.0",
        "error": "None",
        "extraction": "70",
        "prediction": "70\u00b0",
        "true_false": false
    },
    "256": {
        "question": "\u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cAD\u5e73\u5206\u2220BAC\uff0cAD\u4ea4BC\u4e8e\u70b9D\uff0cDE\u22a5AB\uff0c\u5782\u8db3\u4e3aE\uff0c\u82e5DE\uff1d3\uff0cAC\uff1d4\uff0c\u5219\u25b3ADC\u7684\u9762\u79ef\u4e3a\uff08\uff09",
        "image": "images/256.jpg",
        "choices": [
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "256",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 148,
            "img_height": 75,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cAD\u5e73\u5206\u2220BAC\uff0cAD\u4ea4BC\u4e8e\u70b9D\uff0cDE\u22a5AB\uff0c\u5782\u8db3\u4e3aE\uff0c\u82e5DE\uff1d3\uff0cAC\uff1d4\uff0c\u5219\u25b3ADC\u7684\u9762\u79ef\u4e3a\uff08\uff09\nChoices:\n(A) 3\n(B) 4\n(C) 5\n(D) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_area(DE, AC):\n    AD = AC / 2\n    DC = math.sqrt(AD**2 + DE**2)\n    area = (AC * DC) / 2\n    return area\n\nDE = 3\nAC = 4\n\nprint(triangle_area(DE, AC))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "257": {
        "question": "\u4ee5\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5411\u5916\u4f5c\u6b63\u65b9\u5f62\uff0c\u5176\u4e2d\u4e24\u4e2a\u6b63\u65b9\u5f62\u7684\u9762\u79ef\u5982\u56fe\u6240\u793a\uff0c\u5219\u6b63\u65b9\u5f62A\u7684\u9762\u79ef\u4e3a\uff08\uff09",
        "image": "images/257.jpg",
        "choices": [
            "6",
            "36",
            "64",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "257",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 109,
            "img_height": 119,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u4ee5\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5411\u5916\u4f5c\u6b63\u65b9\u5f62\uff0c\u5176\u4e2d\u4e24\u4e2a\u6b63\u65b9\u5f62\u7684\u9762\u79ef\u5982\u56fe\u6240\u793a\uff0c\u5219\u6b63\u65b9\u5f62A\u7684\u9762\u79ef\u4e3a\uff08\uff09\nChoices:\n(A) 6\n(B) 36\n(C) 64\n(D) 8\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\n# Given side lengths of the right-angled triangle\na = 3\nb = 4\nc = math.sqrt(a**2 + b**2)\n\n# Area of square A\narea_A = (a + b)**2\n\narea_A",
        "execution": "",
        "error": "None",
        "extraction": "25",
        "prediction": "6",
        "true_false": true
    },
    "258": {
        "question": "An employee at the craft store counted the number of red buttons in each bag of mixed buttons. How many bags had at least 60 red buttons but fewer than 81 red buttons?'",
        "image": "images/258.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "258",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 156,
            "img_height": 224,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Red buttons per bag'), ([39, 25], 'Stem'), ([87, 27], 'Leaf'), ([87, 139], '3 6'), ([89, 203], '47 8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An employee at the craft store counted the number of red buttons in each bag of mixed buttons. How many bags had at least 60 red buttons but fewer than 81 red buttons?'\nImage detected text: [([0, 0], 'Red buttons per bag'), ([39, 25], 'Stem'), ([87, 27], 'Leaf'), ([87, 139], '3 6'), ([89, 203], '47 8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "red_buttons_per_bag = [36, 47, 38, 55, 62, 73, 81, 69, 77, 64, 59, 52, 45, 68, 72, 79, 76, 63, 58, 51, 44, 67, 71, 78, 75, 62, 57, 50, 43, 66, 70, 77, 74, 61, 56, 49, 42, 65, 69, 76, 73, 60, 55, 48, 41, 64, 68, 75, 72, 59, 54, 47, 40, 63, 67, 74, 71, 58, 53, 46, 39, 62, 66, 73, 70, 57, 52, 45, 38, 61, 65, 72, 69, 56, 51, 44, 37, 60, 64, 71, 68, 55, 50, 43, 36, 59, 63, 70, 67, 54, 49, 42, 35, 58, 62, 69, 66, 53, 48, 41, 34, 57, 61, 68, 65, 52, 47, 40, 33, 56, 60, 67, 64, 51, 46, 39, 32, 55, 59, 66, 63, 50, 45, 38, 31, 54, 58, 65, 62, 49, 44, 37, 30, 53, 57, 64, 61, 48, 43, 36, 29, 52, 56, 63, 60, 47, 42, 35, 28, 51, 55, 62, 59, 46, 41, 34, 27, 50, 54, 61, 58, 45, 40, 33, 26, 49, 53, 60, 57, 44, 39, 32, 25, 48, 52, 59, 56, 43, 38, 31, 24, 47, 51, 58, 55, 42, 37, 30, 23, 46, 50, 57, 54, 41, 36, 29, 22, 45, 49, 56, 53, 40, 35, 28, 21, 44, 48, 55, 52, 39, 34, 27, 20, 43, 47, 54, 51, 38, 33, 26, 19, 42, 46, 53, 50, 37, 32, 25, 18, 41, 45, 52, 49, 36, 31, 24, 17, 40, 44, 51, 48, 35, 30, 23, 16, 39, 43, 50, 47, 34, 29, 22, 15, 38, 42, 49, 46, 33, 28, 21, 14, 37, 41, 48, 45, 32, 27, 20, 13, 36, 40, 47, 44, 31, 26, 19, 12, 35, 39, 46, 43, 30, 25, 18, 11, 34, 38, 45, 42, 29, 24, 17, 10, 33, 37, 44, 41, 28, 23, 16, 9, 32, 36, 43, 40, 27, 22, 15, 8, 31, 35, 42, 39, 26, 21, 14, 7, 30, 34, 41, 38, 25, 20, 13, 6, 29, 33, 40, 37, 24, 19, 12, 5, 28, 32, 39, 36, 23, 18, 11",
        "execution": "",
        "error": "unexpected EOF while parsing (<string>, line 1)",
        "extraction": "There are 16 bags that had at least 60 red buttons but fewer than 81 red buttons.",
        "prediction": null,
        "true_false": false
    },
    "259": {
        "question": "Subtract all large yellow metal blocks. Subtract all gray metallic cylinders. How many objects are left?",
        "image": "images/259.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "259",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large yellow metal blocks. Subtract all gray metallic cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_yellow_metal_blocks = 5\ngray_metallic_cylinders = 3\n\nobjects_left = large_yellow_metal_blocks - gray_metallic_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "260": {
        "question": "Is the derivative of the function positive between [1, 2] assuming that it's differentiable?",
        "image": "images/260.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "260",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 412,
            "img_height": 368,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([8, 4], '%'), ([11, 81], '3'), ([11, 137], '2'), ([13, 195], '1'), ([13, 251], '0'), ([140, 274], '2   3   4   5'), ([357, 276], '6 *')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the derivative of the function positive between [1, 2] assuming that it's differentiable?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([8, 4], '%'), ([11, 81], '3'), ([11, 137], '2'), ([13, 195], '1'), ([13, 251], '0'), ([140, 274], '2   3   4   5'), ([357, 276], '6 *')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = 3*x**2 + 2*x + 1\n\nf_prime = sp.diff(f, x)\n\nis_positive = sp.integrate(f_prime, (x, 1, 2)) > 0\n\nif is_positive:\n    print(\"The derivative of the function is positive between [1, 2].\")\nelse:\n    print(\"The derivative of the function is not positive between [1, 2].\")",
        "execution": "The derivative of the function is positive between [1, 2].",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "261": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/261.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "261",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 345,
            "img_height": 500,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "262": {
        "question": "What is the difference between genres of tv shows watched by highest female and lowest female?",
        "image": "images/262.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "39",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "262",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 756,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 36], 'Documentaries'), ([141, 37], 'docu-series (e-g , The'), ([505, 41], '26%'), ([89, 51], 'Real World, Keeping UP with the'), ([111, 65], 'Kardashians'), ([183, 63], 'The Hills ,'), ([237, 65], 'etc )'), ([435, 59], '1856'), ([43, 85], 'Competition'), ([123, 85], 'elimination (e-g.'), ([215, 85], 'Dancing'), ([575, 83], '345'), ([39, 99], 'with the Stars'), ([119, 99], \"America'$ Cot Talent; etc.)\"), ([451, 101], '203'), ([61, 127], 'Makeover'), ([123, 127], 'renovation (e-g., Extreme'), ([487, 125], '245'), ([77, 141], 'Makeover, What Not to Wear; etc.)'), ([365, 143], '1056'), ([39, 169], 'Dating'), ([87, 169], '~9-, The Bachelor'), ([189, 169], 'Bachelorette'), ([237, 185], 'etc.)'), ([47, 205], 'Hidden camera'), ([141, 205], 'amateur content (2.9-,'), ([427, 211], '1796'), ([55, 219], 'Impractical Jokers'), ([159, 219], \"America'5 Funniest\"), ([159, 233], 'Home Videos;'), ([237, 233], 'etc.)'), ([427, 227], '17%6'), ([77, 253], 'Supernatural (e.g-'), ([179, 253], 'Chost Hunters_'), ([435, 253], '1896'), ([139, 267], 'Paranormal State,'), ([237, 269], 'etc.)'), ([53, 295], 'Travel'), ([99, 295], 'aspirational (e-g , Lifestyles of'), ([391, 295], '1396'), ([55, 309], 'the Rich and'), ([127, 309], 'Famous, MTV Cribs,'), ([237, 311], 'etc.)'), ([61, 337], 'Cooking'), ([113, 337], 'e-9-, MasterChef; Chopped'), ([637, 335], '41%'), ([237, 353], 'etc.)'), ([531, 353], '2936'), ([435, 377], '1856'), ([229, 387], 'Other'), ([199, 429], \"Don't know\"), ([45, 463], 'Not applicable'), ([141, 463], 'do not typically watch'), ([453, 461], '2036'), ([207, 477], 'reality TV'), ([575, 479], '34%'), ([349, 509], '1070'), ([393, 509], '1570'), ([437, 509], '2076'), ([481, 509], '2570'), ([525, 509], '3076'), ([569, 509], '3570'), ([613, 509], '4070'), ([657, 509], '4570'), ([691, 509], '5025'), ([440, 530], 'Ghare'), ([482, 527], 'respondents'), ([333, 571], 'Male'), ([393, 569], 'Female'), ([329, 642], 'Collapse statistic'), ([683, 689], 'Statista 2021'), ([41, 713], 'Addirional Information'), ([687, 713], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between genres of tv shows watched by highest female and lowest female?\nImage detected text: [([49, 36], 'Documentaries'), ([141, 37], 'docu-series (e-g , The'), ([505, 41], '26%'), ([89, 51], 'Real World, Keeping UP with the'), ([111, 65], 'Kardashians'), ([183, 63], 'The Hills ,'), ([237, 65], 'etc )'), ([435, 59], '1856'), ([43, 85], 'Competition'), ([123, 85], 'elimination (e-g.'), ([215, 85], 'Dancing'), ([575, 83], '345'), ([39, 99], 'with the Stars'), ([119, 99], \"America'$ Cot Talent; etc.)\"), ([451, 101], '203'), ([61, 127], 'Makeover'), ([123, 127], 'renovation (e-g., Extreme'), ([487, 125], '245'), ([77, 141], 'Makeover, What Not to Wear; etc.)'), ([365, 143], '1056'), ([39, 169], 'Dating'), ([87, 169], '~9-, The Bachelor'), ([189, 169], 'Bachelorette'), ([237, 185], 'etc.)'), ([47, 205], 'Hidden camera'), ([141, 205], 'amateur content (2.9-,'), ([427, 211], '1796'), ([55, 219], 'Impractical Jokers'), ([159, 219], \"America'5 Funniest\"), ([159, 233], 'Home Videos;'), ([237, 233], 'etc.)'), ([427, 227], '17%6'), ([77, 253], 'Supernatural (e.g-'), ([179, 253], 'Chost Hunters_'), ([435, 253], '1896'), ([139, 267], 'Paranormal State,'), ([237, 269], 'etc.)'), ([53, 295], 'Travel'), ([99, 295], 'aspirational (e-g , Lifestyles of'), ([391, 295], '1396'), ([55, 309], 'the Rich and'), ([127, 309], 'Famous, MTV Cribs,'), ([237, 311], 'etc.)'), ([61, 337], 'Cooking'), ([113, 337], 'e-9-, MasterChef; Chopped'), ([637, 335], '41%'), ([237, 353], 'etc.)'), ([531, 353], '2936'), ([435, 377], '1856'), ([229, 387], 'Other'), ([199, 429], \"Don't know\"), ([45, 463], 'Not applicable'), ([141, 463], 'do not typically watch'), ([453, 461], '2036'), ([207, 477], 'reality TV'), ([575, 479], '34%'), ([349, 509], '1070'), ([393, 509], '1570'), ([437, 509], '2076'), ([481, 509], '2570'), ([525, 509], '3076'), ([569, 509], '3570'), ([613, 509], '4070'), ([657, 509], '4570'), ([691, 509], '5025'), ([440, 530], 'Ghare'), ([482, 527], 'respondents'), ([333, 571], 'Male'), ([393, 569], 'Female'), ([329, 642], 'Collapse statistic'), ([683, 689], 'Statista 2021'), ([41, 713], 'Addirional Information'), ([687, 713], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "genres = {\n    'Documentaries': 1856,\n    'Competition elimination': 345,\n    'Makeover renovation': 1056,\n    'Dating': 203,\n    'Hidden camera amateur content': 1796,\n    'Supernatural': 1896,\n    'Travel aspirational': 1396,\n    'Cooking': 2936,\n    'Other': 0,\n    \"Don't know\": 2036,\n    'Not applicable': 0,\n    'reality TV': 34\n}\n\nhighest_female = max(genres.values())\nlowest_female = min(genres.values())\n\ndifference = highest_female - lowest_female\nprint(difference)",
        "execution": "2936",
        "error": "None",
        "extraction": "1570",
        "prediction": "1570",
        "true_false": false
    },
    "263": {
        "question": "What number is shown?",
        "image": "images/263.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "38",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "263",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 113,
            "img_height": 117,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "264": {
        "question": "For Group C, in which week is the cumulative increase in weight , the highest?",
        "image": "images/264.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "264",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1754,
            "img_height": 2237,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For Group C, in which week is the cumulative increase in weight , the highest?\nImage detected text: [([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "group_c_weeks = [3, 2, 2, 1, 5]\ngroup_c_weight_increase = [400, 300, 200, 100, 0]\n\nmax_increase = max(group_c_weight_increase)\nmax_increase_week = group_c_weeks[group_c_weight_increase.index(max_increase)]\n\nprint(max_increase_week)",
        "execution": "3",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "265": {
        "question": "Justine's P.E. class participated in a push-up competition, and Justine wrote down how many push-ups each person could do. How many people did at least 60 push-ups? (Unit: people)",
        "image": "images/265.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "11",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "265",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 329,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Push-up competition (number Of push-ups)'), ([65, 23], 'Stem'), ([115, 25], 'Leaf'), ([115, 95], '3 6 7 7'), ([113, 115], '133577 8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Justine's P.E. class participated in a push-up competition, and Justine wrote down how many push-ups each person could do. How many people did at least 60 push-ups? (Unit: people)\nImage detected text: [([0, 0], 'Push-up competition (number Of push-ups)'), ([65, 23], 'Stem'), ([115, 25], 'Leaf'), ([115, 95], '3 6 7 7'), ([113, 115], '133577 8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "push_ups = [3, 6, 7, 7, 8]\ncount = 0\n\nfor push_up in push_ups:\n    if push_up >= 60:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "266": {
        "question": "Which has the most uneven shape?",
        "image": "images/266.jpg",
        "choices": [
            "oblique",
            "obtuse",
            "cordate",
            "truncate"
        ],
        "unit": null,
        "precision": null,
        "answer": "oblique",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "266",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 240,
            "img_height": 225,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 99], 'cuneale'), ([151, 97], 'obluse'), ([15, 211], 'cordale'), ([109, 213], 'truncale'), ([189, 211], 'oblique')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which has the most uneven shape?\nChoices:\n(A) oblique\n(B) obtuse\n(C) cordate\n(D) truncate\nImage detected text: [([57, 99], 'cuneale'), ([151, 97], 'obluse'), ([15, 211], 'cordale'), ([109, 213], 'truncale'), ([189, 211], 'oblique')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_uneven_shape(choices):\n    shapes = {\n        'oblique': 0,\n        'obtuse': 0,\n        'cordate': 0,\n        'truncate': 0\n    }\n\n    for choice in choices:\n        if choice in shapes:\n            shapes[choice] += 1\n\n    max_count = max(shapes.values())\n    for shape, count in shapes.items():\n        if count == max_count:\n            return shape\n    return \"\"\n\nchoices = ['oblique', 'obtuse', 'cordate', 'truncate']\nprint(most_uneven_shape(choices))",
        "execution": "oblique",
        "error": "None",
        "extraction": "oblique",
        "prediction": "oblique",
        "true_false": true
    },
    "267": {
        "question": "What shape of a leaf is similar to Serrate, but has smaller, evenly-spaced teeth?",
        "image": "images/267.jpg",
        "choices": [
            "Undulate",
            "Sinuate",
            "Serrulate",
            "Entire"
        ],
        "unit": null,
        "precision": null,
        "answer": "Serrulate",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "267",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 529,
            "img_height": 306,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([75, 37], 'entire'), ([226, 34], 'doubly serrate'), ([435, 34], 'undulate'), ([57, 128], 'serrulate'), ([238, 128], 'dentate'), ([431, 137], 'sinuate'), ([59, 225], 'serrate'), ([231, 227], 'crenate'), ([430, 226], 'incised'), ([239, 283], 'EM: Armstrong 2002')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What shape of a leaf is similar to Serrate, but has smaller, evenly-spaced teeth?\nChoices:\n(A) Undulate\n(B) Sinuate\n(C) Serrulate\n(D) Entire\nImage detected text: [([75, 37], 'entire'), ([226, 34], 'doubly serrate'), ([435, 34], 'undulate'), ([57, 128], 'serrulate'), ([238, 128], 'dentate'), ([431, 137], 'sinuate'), ([59, 225], 'serrate'), ([231, 227], 'crenate'), ([430, 226], 'incised'), ([239, 283], 'EM: Armstrong 2002')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_similar_leaf(shape, choices):\n    similar_leaf = {\n        'Serrate': 'Serrulate',\n        'Serrulate': 'Sinuate',\n        'Sinuate': 'Undulate'\n    }\n\n    if shape in similar_leaf:\n        return similar_leaf[shape]\n    return \"\"\n\nchoices = ['Undulate', 'Sinuate', 'Serrulate', 'Entire']\nshape = 'Serrate'\n\nprint(find_similar_leaf(shape, choices))",
        "execution": "Serrulate",
        "error": "None",
        "extraction": "Serrulate",
        "prediction": "Serrulate",
        "true_false": true
    },
    "268": {
        "question": "Colton wants to buy 1+3/10 kilograms of English muffins. How much will he spend? (Unit: $)",
        "image": "images/268.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "10.4",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "268",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 273,
            "img_height": 194,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'spelt rolls'), ([177, 7], 'S8/kilogram'), ([10, 39], 'hamburger buns'), ([177, 39], 'S7/kilogram'), ([9, 73], 'rye rolls'), ([176, 68], 'S6/kilogram'), ([9, 105], 'wheat rolls'), ([176, 100], 'S8/kilogram'), ([7, 131], 'English muffins'), ([176, 132], 'S8/kilogram'), ([9, 169], 'tortillas'), ([176, 164], 'SS/kilogram')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Colton wants to buy 1+3/10 kilograms of English muffins. How much will he spend? (Unit: $)\nImage detected text: [([9, 7], 'spelt rolls'), ([177, 7], 'S8/kilogram'), ([10, 39], 'hamburger buns'), ([177, 39], 'S7/kilogram'), ([9, 73], 'rye rolls'), ([176, 68], 'S6/kilogram'), ([9, 105], 'wheat rolls'), ([176, 100], 'S8/kilogram'), ([7, 131], 'English muffins'), ([176, 132], 'S8/kilogram'), ([9, 169], 'tortillas'), ([176, 164], 'SS/kilogram')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "english_muffins_price = 8.00\nweight = 1 + 3/10\n\ntotal_cost = english_muffins_price * weight\nprint(total_cost)",
        "execution": "10.4",
        "error": "None",
        "extraction": "11.2",
        "prediction": "11.2",
        "true_false": false
    },
    "269": {
        "question": "As shown in the figure, the elevation angle of the top of a building is 30.0 when viewed from point A in the air by a hot air balloon, and the depression angle of this building is 60.0. The horizontal distance between the hot air balloon and the building is 120.0. The height of this building is ()",
        "image": "images/269.jpg",
        "choices": [
            "160m",
            "160\u221a{3}m",
            "(160-160\u221a{3})m",
            "360m"
        ],
        "unit": null,
        "precision": null,
        "answer": "160\u221a{3}m",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "269",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 133,
            "img_height": 159,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the elevation angle of the top of a building is 30.0 when viewed from point A in the air by a hot air balloon, and the depression angle of this building is 60.0. The horizontal distance between the hot air balloon and the building is 120.0. The height of this building is ()\nChoices:\n(A) 160m\n(B) 160\u221a{3}m\n(C) (160-160\u221a{3})m\n(D) 360m\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef calculate_building_height(angle1, angle2, distance):\n    angle1_rad = math.radians(angle1)\n    angle2_rad = math.radians(angle2)\n    height = distance * math.tan(angle1_rad) - distance * math.tan(angle2_rad)\n    return height\n\nangle1 = 30.0\nangle2 = 60.0\ndistance = 120.0\n\nheight = calculate_building_height(angle1, angle2, distance)\nprint(height)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "height",
        "prediction": "160m",
        "true_false": false
    },
    "270": {
        "question": "As shown in the figure, points A and B are three points on \u2299O and AB = AC. Connect BO and CO, if \u2220ABC = 65.0, then the degree of \u2220BOC is ()",
        "image": "images/270.jpg",
        "choices": [
            "50\u00b0",
            "65\u00b0",
            "100\u00b0",
            "130\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "100\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "270",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 102,
            "img_height": 114,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, points A and B are three points on \u2299O and AB = AC. Connect BO and CO, if \u2220ABC = 65.0, then the degree of \u2220BOC is ()\nChoices:\n(A) 50\u00b0\n(B) 65\u00b0\n(C) 100\u00b0\n(D) 130\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_BOC(angle_ABC):\n    angle_BOC = 180 - angle_ABC\n    return angle_BOC\n\nangle_ABC = 65.0\nangle_BOC = angle_BOC(angle_ABC)\nprint(angle_BOC)",
        "execution": "115.0",
        "error": "None",
        "extraction": "115",
        "prediction": "50\u00b0",
        "true_false": false
    },
    "271": {
        "question": "Find y",
        "image": "images/271.jpg",
        "choices": [
            "3",
            "4.5",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "271",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 287,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([38, 98], '20'), ([94, 98], 'Sx'), ([114, 150], '2x + 6'), ([287, 143], '3'), ([300, 151], 'y + 2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find y\nChoices:\n(A) 3\n(B) 4.5\n(C) 5\n(D) 6\nImage detected text: [([38, 98], '20'), ([94, 98], 'Sx'), ([114, 150], '2x + 6'), ([287, 143], '3'), ([300, 151], 'y + 2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\ny = symbols('y')\n\neq1 = Eq(20, 2*x + 6)\neq2 = Eq(3, y + 2)\n\nsol = solve((eq1, eq2), (x, y))\ny_value = sol[y]\n\nprint(y_value)",
        "execution": "1",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "272": {
        "question": "What time does the clock show?",
        "image": "images/272.jpg",
        "choices": [
            "9:30",
            "1:30",
            "4:30",
            "5:30",
            "11:30"
        ],
        "unit": null,
        "precision": null,
        "answer": "4:30",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "272",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 261,
            "img_height": 261,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([72, 26], '11 12'), ([38, 74], '10'), ([199, 73], '2'), ([215, 119], '3'), ([47, 163], '8'), ([78, 190], '7'), ([164, 190], '5'), ([120, 204], '6')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time does the clock show?\nChoices:\n(A) 9:30\n(B) 1:30\n(C) 4:30\n(D) 5:30\n(E) 11:30\nImage detected text: [([72, 26], '11 12'), ([38, 74], '10'), ([199, 73], '2'), ([215, 119], '3'), ([47, 163], '8'), ([78, 190], '7'), ([164, 190], '5'), ([120, 204], '6')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def get_time(image_text):\n    time_dict = {\n        '11 12': '9:30',\n        '10': '1:30',\n        '2': '4:30',\n        '3': '5:30',\n        '8': '11:30'\n    }\n\n    for key in time_dict.keys():\n        if key in image_text:\n            return time_dict[key]\n    return \"\"\n\nimage_text = \"The image shows a clock with the hands pointing to the numbers 11 and 12. The hour hand is pointing between the 10 and 11, and the minute hand is pointing to the 2. The clock has a white background and black numbers.\"\n\nprint(get_time(image_text))",
        "execution": "1:30",
        "error": "None",
        "extraction": "4:30",
        "prediction": "4:30",
        "true_false": true
    },
    "273": {
        "question": "One diagonal of a rhombus is twice as long as the other diagonal. If the area of the rhombus is 169 square millimeters, what are the lengths of the diagonals?",
        "image": "images/273.jpg",
        "choices": [
            "6.5",
            "13",
            "26",
            "52"
        ],
        "unit": null,
        "precision": null,
        "answer": "26",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "273",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 347,
            "img_height": 237,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([152, 178], '2x')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: One diagonal of a rhombus is twice as long as the other diagonal. If the area of the rhombus is 169 square millimeters, what are the lengths of the diagonals?\nChoices:\n(A) 6.5\n(B) 13\n(C) 26\n(D) 52\nImage detected text: [([152, 178], '2x')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\narea = 169\nx = math.sqrt(area)\ndiagonal1 = x\ndiagonal2 = 2 * x\n\nprint(diagonal1, diagonal2)",
        "execution": "13.0 26.0",
        "error": "None",
        "extraction": "13.0, 26.0",
        "prediction": "6.5",
        "true_false": false
    },
    "274": {
        "question": "\u5982\u56fe\uff0cAB\u3001BC\u3001CD\u3001DA\u90fd\u662f\u2299O\u7684\u5207\u7ebf\uff0c\u5df2\u77e5AD\uff1d2\uff0cBC\uff1d5\uff0c\u5219AB+CD\u7684\u503c\u662f\uff08\uff09",
        "image": "images/274.jpg",
        "choices": [
            "14",
            "12",
            "9",
            "7"
        ],
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "274",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 151,
            "img_height": 119,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAB\u3001BC\u3001CD\u3001DA\u90fd\u662f\u2299O\u7684\u5207\u7ebf\uff0c\u5df2\u77e5AD\uff1d2\uff0cBC\uff1d5\uff0c\u5219AB+CD\u7684\u503c\u662f\uff08\uff09\nChoices:\n(A) 14\n(B) 12\n(C) 9\n(D) 7\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef calculate_AB_CD(AD, BC):\n    # Calculate the length of AB using Pythagorean theorem\n    AB = math.sqrt(AD**2 - BC**2)\n    \n    # Calculate the length of CD using Pythagorean theorem\n    CD = math.sqrt((AD + BC)**2 - BC**2)\n    \n    return AB + CD\n\nAD = 2\nBC = 5\n\nresult = calculate_AB_CD(AD, BC)\nprint(result)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "275": {
        "question": "As shown in the figure, in Rt\u25b3ABC, \u2220BAC = 90.0, AD \u22a5 BC at D, DE \u22a5 AB at E, AD = 3.0, DE = 2.0, then the length of CD is ()",
        "image": "images/275.jpg",
        "choices": [
            "\\frac{21}{2}",
            "\\frac{\u221a{15}}{2}",
            "\\frac{9}{2}",
            "\\frac{3\u221a{5}}{2}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{3\u221a{5}}{2}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "275",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 185,
            "img_height": 107,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in Rt\u25b3ABC, \u2220BAC = 90.0, AD \u22a5 BC at D, DE \u22a5 AB at E, AD = 3.0, DE = 2.0, then the length of CD is ()\nChoices:\n(A) \\frac{21}{2}\n(B) \\frac{\u221a{15}}{2}\n(C) \\frac{9}{2}\n(D) \\frac{3\u221a{5}}{2}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_CD_length(AD, DE):\n    CD = math.sqrt(AD**2 + DE**2)\n    return CD\n\nAD = 3.0\nDE = 2.0\n\nCD_length = find_CD_length(AD, DE)\nprint(CD_length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "3.605551275463989",
        "prediction": "\\frac{21}{2}",
        "true_false": false
    },
    "276": {
        "question": "As shown in the figure, it is known that the radius of \u2299O is 5.0 and the chord AB = 8.0, then the distance from the center O to AB is ()",
        "image": "images/276.jpg",
        "choices": [
            "1mm",
            "2mm",
            "3mm",
            "4mm"
        ],
        "unit": null,
        "precision": null,
        "answer": "3mm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "276",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 102,
            "img_height": 102,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, it is known that the radius of \u2299O is 5.0 and the chord AB = 8.0, then the distance from the center O to AB is ()\nChoices:\n(A) 1mm\n(B) 2mm\n(C) 3mm\n(D) 4mm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nradius = 5.0\nchord = 8.0\n\ndistance = math.sqrt(radius**2 - (chord/2)**2)\nprint(distance)",
        "execution": "3.0",
        "error": "None",
        "extraction": "3.0",
        "prediction": "3mm",
        "true_false": true
    },
    "277": {
        "question": "Which cube is identical to the unfolded net?",
        "image": "images/277.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "277",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 424,
            "img_height": 591,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([133, 71], '2'), ([193, 73], '3'), ([191, 131], '5'), ([193, 193], '6'), ([76, 294], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which cube is identical to the unfolded net?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nImage detected text: [([133, 71], '2'), ([193, 73], '3'), ([191, 131], '5'), ([193, 193], '6'), ([76, 294], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def identical_cube(net, choices):\n    unfolded_net = [2, 3, 5, 6, 3]\n\n    for choice in choices:\n        if choice == unfolded_net:\n            return choice\n    return \"\"\n\nchoices = ['A', 'B', 'C', 'D', 'E']\nnet = [2, 3, 5, 6, 3]\n\nprint(identical_cube(net, choices))",
        "execution": "",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "278": {
        "question": "Among the following objects, which one has the best PSNR score?",
        "image": "images/278.jpg",
        "choices": [
            "Lego",
            "Mats",
            "Mic",
            "Ship"
        ],
        "unit": null,
        "precision": null,
        "answer": "Mic",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "278",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1478,
            "img_height": 940,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 24], 'Table 5.'), ([192, 24], 'View interpolation results (PSNR) for NVDIFFREC reconstructions'), ([25, 75], 'of the NeRF synthetic dataset;'), ([724, 81], 'either DMTET or FLEXICUBES for the'), ([23, 136], 'topology step. The image metric scores are arithmetic means over all test'), ([23, 192], 'images. We also include Chamfer distances (CD) computed on visible trian-'), ([23, 247], 'gles (the set of triangles visible in at least one test view) using 2.5 M point;'), ([29, 300], 'Lower scores indicate better geometric fidelity:'), ([43, 451], 'PSNR (dB) 1'), ([349, 457], 'Chair'), ([488, 454], 'Drums'), ([655, 457], 'Ficus'), ([784, 447], 'Hotdog'), ([1092, 454], 'Mats'), ([1231, 457], 'Mic'), ([43, 542], 'DMTET'), ([361, 543], '31.8'), ([515, 543], '24.6'), ([662, 542], '30.9'), ([819, 545], '33.2'), ([970, 542], '29.0'), ([1100, 542], '27.0'), ([1224, 542], '30.7'), ([1347, 543], '26.0'), ([43, 607], 'FLEXICUBES'), ([359, 605], '31.8'), ([515, 605], '24.7'), ([662, 604], '30.9'), ([819, 607], '33.4'), ([971, 605], '28.8'), ([1101, 605], '26.7'), ([1224, 604], '30.8'), ([1347, 605], '25.9'), ([45, 683], 'CD (10-2) l'), ([351, 695], 'Chair'), ([491, 695], 'Drums'), ([653, 695], 'Ficus'), ([784, 685], 'Hotdog'), ([960, 691], 'Lego'), ([1094, 692], 'Mats'), ([1231, 695], 'Mic'), ([43, 780], 'DMTET'), ([360, 780], '4.51'), ([514, 780], '3.98'), ([663, 783], '0.30'), ([819, 783], '2.67'), ([971, 783], '2.41'), ([1099, 783], '0.41'), ([1224, 778], '1.20'), ([1346, 780], '55.8'), ([43, 845], 'FLEXICUBES'), ([359, 843], '0.45'), ([515, 843], '2.27'), ([663, 845], '0.37'), ([821, 843], '1.44'), ([973, 843], '1.60'), ([1098, 842], '0.53'), ([1226, 842], '1.51'), ([1345, 840], '10.5'), ([613, 74], 'using'), ([968, 452], 'Lego'), ([1347, 449], 'Ship'), ([1347, 686], 'Ship')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Among the following objects, which one has the best PSNR score?\nChoices:\n(A) Lego\n(B) Mats\n(C) Mic\n(D) Ship\nImage detected text: [([24, 24], 'Table 5.'), ([192, 24], 'View interpolation results (PSNR) for NVDIFFREC reconstructions'), ([25, 75], 'of the NeRF synthetic dataset;'), ([724, 81], 'either DMTET or FLEXICUBES for the'), ([23, 136], 'topology step. The image metric scores are arithmetic means over all test'), ([23, 192], 'images. We also include Chamfer distances (CD) computed on visible trian-'), ([23, 247], 'gles (the set of triangles visible in at least one test view) using 2.5 M point;'), ([29, 300], 'Lower scores indicate better geometric fidelity:'), ([43, 451], 'PSNR (dB) 1'), ([349, 457], 'Chair'), ([488, 454], 'Drums'), ([655, 457], 'Ficus'), ([784, 447], 'Hotdog'), ([1092, 454], 'Mats'), ([1231, 457], 'Mic'), ([43, 542], 'DMTET'), ([361, 543], '31.8'), ([515, 543], '24.6'), ([662, 542], '30.9'), ([819, 545], '33.2'), ([970, 542], '29.0'), ([1100, 542], '27.0'), ([1224, 542], '30.7'), ([1347, 543], '26.0'), ([43, 607], 'FLEXICUBES'), ([359, 605], '31.8'), ([515, 605], '24.7'), ([662, 604], '30.9'), ([819, 607], '33.4'), ([971, 605], '28.8'), ([1101, 605], '26.7'), ([1224, 604], '30.8'), ([1347, 605], '25.9'), ([45, 683], 'CD (10-2) l'), ([351, 695], 'Chair'), ([491, 695], 'Drums'), ([653, 695], 'Ficus'), ([784, 685], 'Hotdog'), ([960, 691], 'Lego'), ([1094, 692], 'Mats'), ([1231, 695], 'Mic'), ([43, 780], 'DMTET'), ([360, 780], '4.51'), ([514, 780], '3.98'), ([663, 783], '0.30'), ([819, 783], '2.67'), ([971, 783], '2.41'), ([1099, 783], '0.41'), ([1224, 778], '1.20'), ([1346, 780], '55.8'), ([43, 845], 'FLEXICUBES'), ([359, 843], '0.45'), ([515, 843], '2.27'), ([663, 845], '0.37'), ([821, 843], '1.44'), ([973, 843], '1.60'), ([1098, 842], '0.53'), ([1226, 842], '1.51'), ([1345, 840], '10.5'), ([613, 74], 'using'), ([968, 452], 'Lego'), ([1347, 449], 'Ship'), ([1347, 686], 'Ship')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def best_psnr_score(objects):\n    psnr_scores = {\n        'Lego': 55.8,\n        'Mats': 0.41,\n        'Mic': 1.20,\n        'Ship': 10.5\n    }\n\n    best_object = \"\"\n    max_psnr = 0\n\n    for obj in objects:\n        if obj[1] in psnr_scores:\n            if psnr_scores[obj[1]] > max_psnr:\n                max_psnr = psnr_scores[obj[1]]\n                best_object = obj[1]\n\n    return best_object\n\nobjects = [([349, 457], 'Chair'), ([488, 454], 'Drums'), ([655, 457], 'Ficus'), ([784, 447], 'Hotdog'), ([1092, 454], 'Mats'), ([1231, 457], 'Mic'), ([1347, 449], 'Ship')]\nprint(best_psnr_score(objects))",
        "execution": "Ship",
        "error": "None",
        "extraction": "Mic",
        "prediction": "Mic",
        "true_false": true
    },
    "279": {
        "question": "What would be directly affected by a decrease in sunlight?",
        "image": "images/279.jpg",
        "choices": [
            "grass",
            "mouse",
            "grasshopper",
            "owl"
        ],
        "unit": null,
        "precision": null,
        "answer": "grass",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "279",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 423,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([25, 249], 'Sun'), ([123, 249], 'Grass'), ([222, 249], 'Grasshopper'), ([389, 249], 'Mouse'), ([535, 251], 'Owl')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would be directly affected by a decrease in sunlight?\nChoices:\n(A) grass\n(B) mouse\n(C) grasshopper\n(D) owl\nImage detected text: [([25, 249], 'Sun'), ([123, 249], 'Grass'), ([222, 249], 'Grasshopper'), ([389, 249], 'Mouse'), ([535, 251], 'Owl')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def directly_affected(text):\n    if \"Sun\" in text:\n        return \"grass\"\n    elif \"Grass\" in text:\n        return \"grasshopper\"\n    elif \"Mouse\" in text:\n        return \"owl\"\n    else:\n        return \"\"\n\ntext = \"The image shows a sunny day with green grass and a grasshopper hopping around. There is also a mouse hiding in the grass. The sunlight is shining brightly on the scene.\"\n\nprint(directly_affected(text))",
        "execution": "",
        "error": "None",
        "extraction": "grass",
        "prediction": "grass",
        "true_false": true
    },
    "280": {
        "question": "In the figure above, ABCDEF is a regular hexagon, and its center is point O. What is the value of x?",
        "image": "images/280.jpg",
        "choices": [
            "80",
            "60",
            "40",
            "30",
            "20"
        ],
        "unit": null,
        "precision": null,
        "answer": "60",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "280",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 130,
            "img_height": 123,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, ABCDEF is a regular hexagon, and its center is point O. What is the value of x?\nChoices:\n(A) 80\n(B) 60\n(C) 40\n(D) 30\n(E) 20\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(x):\n    angle = 360 / 6\n    return angle * x\n\ndef find_x(angle):\n    x = angle / 2\n    return x\n\nangle = find_angle(1)\nx = find_x(angle)\nprint(x)",
        "execution": "30.0",
        "error": "None",
        "extraction": "60",
        "prediction": "60",
        "true_false": true
    },
    "281": {
        "question": "Was this a square pizza?",
        "image": "images/281.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "281",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Was this a square pizza?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_square_pizza(image):\n    # code to analyze the image and determine if it is a square pizza\n    # return True if it is a square pizza, False otherwise\n    return True\n\nimage = \"path_to_image.jpg\"\nprint(is_square_pizza(image))",
        "execution": "True",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "282": {
        "question": "What percent of the sun is showing?",
        "image": "images/282.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "282",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percent of the sun is showing?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def percent_of_sun_showing(visible_area, total_area):\n    percent = (visible_area / total_area) * 100\n    return percent\n\nvisible_area = 50\ntotal_area = 100\n\npercent = percent_of_sun_showing(visible_area, total_area)\nprint(percent)",
        "execution": "50.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50",
        "true_false": false
    },
    "283": {
        "question": "$\\overline{WTY} \\cong \\overline{TWY}$. Find $x$.",
        "image": "images/283.jpg",
        "choices": [
            "2",
            "4",
            "5",
            "10"
        ],
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "283",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 559,
            "img_height": 416,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([323, 59], 'W'), ([111, 211], '4x'), ([376, 208], '2x + 10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: $\\overline{WTY} \\cong \\overline{TWY}$. Find $x$.\nChoices:\n(A) 2\n(B) 4\n(C) 5\n(D) 10\nImage detected text: [([323, 59], 'W'), ([111, 211], '4x'), ([376, 208], '2x + 10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq1 = Eq(4*x, 2*x + 10)\n\nsol = solve(eq1, x)\nprint(sol)",
        "execution": "[5]",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "284": {
        "question": "What is the accuracy of the algorithm with lowest accuracy?",
        "image": "images/284.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "284",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([101, 10], 'Accuracy of different algorithms'), ([34, 56], 'heel'), ([14, 128], 'desert'), ([34, 200], 'pine'), ([22, 270], 'globe'), ([45, 345], 'par'), ([411, 391], '10'), ([218, 413], 'Accuracy')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the accuracy of the algorithm with lowest accuracy?\nImage detected text: [([101, 10], 'Accuracy of different algorithms'), ([34, 56], 'heel'), ([14, 128], 'desert'), ([34, 200], 'pine'), ([22, 270], 'globe'), ([45, 345], 'par'), ([411, 391], '10'), ([218, 413], 'Accuracy')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [90, 85, 92, 88, 95]\n\nlowest_accuracy = min(accuracies)\nprint(lowest_accuracy)",
        "execution": "85",
        "error": "None",
        "extraction": "88",
        "prediction": "88",
        "true_false": false
    },
    "285": {
        "question": "As shown in the figure, it is known that AB is the diameter of \u2299O, if the degree of \u2220BOC is 50.0, then the degree of \u2220A is ()",
        "image": "images/285.jpg",
        "choices": [
            "50\u00b0",
            "40\u00b0",
            "30\u00b0",
            "25\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "25\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "285",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 100,
            "img_height": 110,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, it is known that AB is the diameter of \u2299O, if the degree of \u2220BOC is 50.0, then the degree of \u2220A is ()\nChoices:\n(A) 50\u00b0\n(B) 40\u00b0\n(C) 30\u00b0\n(D) 25\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_A(angle_BOC):\n    angle_A = 180 - angle_BOC\n    return angle_A\n\nangle_BOC = 50.0\nangle_A = angle_A(angle_BOC)\nprint(angle_A)",
        "execution": "130.0",
        "error": "None",
        "extraction": "130",
        "prediction": "30\u00b0",
        "true_false": false
    },
    "286": {
        "question": "\u5982\u56fe\uff0c\u5c06\u4e00\u6839\u957f\u5ea6\u4e3a8cm\uff0c\u81ea\u7136\u4f38\u76f4\u7684\u5f39\u6027\u76ae\u7b4bAB\u4e24\u7aef\u56fa\u5b9a\u5728\u6c34\u5e73\u7684\u684c\u9762\u4e0a\uff0c\u7136\u540e\u628a\u76ae\u7b4b\u4e2d\u70b9C\u7ad6\u76f4\u5411\u4e0a\u62c9\u53473cm\u5230\u70b9D\uff0c\u5219\u6b64\u65f6\u8be5\u5f39\u6027\u76ae\u7b4b\u88ab\u62c9\u957f\u4e86\uff08\uff09",
        "image": "images/286.jpg",
        "choices": [
            "6cm",
            "5cm",
            "4cm",
            "2cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "2cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "286",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 250,
            "img_height": 82,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5c06\u4e00\u6839\u957f\u5ea6\u4e3a8cm\uff0c\u81ea\u7136\u4f38\u76f4\u7684\u5f39\u6027\u76ae\u7b4bAB\u4e24\u7aef\u56fa\u5b9a\u5728\u6c34\u5e73\u7684\u684c\u9762\u4e0a\uff0c\u7136\u540e\u628a\u76ae\u7b4b\u4e2d\u70b9C\u7ad6\u76f4\u5411\u4e0a\u62c9\u53473cm\u5230\u70b9D\uff0c\u5219\u6b64\u65f6\u8be5\u5f39\u6027\u76ae\u7b4b\u88ab\u62c9\u957f\u4e86\uff08\uff09\nChoices:\n(A) 6cm\n(B) 5cm\n(C) 4cm\n(D) 2cm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "length_AB = 8\ndistance_CD = 3\n\nlength_AD = length_AB + distance_CD\nlength_BC = length_AB - distance_CD\n\nelongation = length_AD - length_AB\n\nprint(elongation)",
        "execution": "3",
        "error": "None",
        "extraction": "5cm",
        "prediction": "5cm",
        "true_false": false
    },
    "287": {
        "question": "Which region is larger? R1 or R2?\nA. R1\nB. R2",
        "image": "images/287.jpg",
        "choices": [
            "R1",
            "R2",
            "R5",
            "R3",
            "R4"
        ],
        "unit": null,
        "precision": null,
        "answer": "R2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "287",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 370,
            "img_height": 325,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([207, 51], 'f(x)'), ([257, 51], 'sin X'), ([128, 102], 'Ri'), ([273, 107], 'Rz'), ([43, 175], '20'), ([226, 262], 'g(x)'), ([267, 267], '= COS X')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which region is larger? R1 or R2?\nA. R1\nB. R2\nChoices:\n(A) R1\n(B) R2\n(C) R5\n(D) R3\n(E) R4\nImage detected text: [([207, 51], 'f(x)'), ([257, 51], 'sin X'), ([128, 102], 'Ri'), ([273, 107], 'Rz'), ([43, 175], '20'), ([226, 262], 'g(x)'), ([267, 267], '= COS X')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "R1 = 20\nR2 = 30\n\nif R1 > R2:\n    answer = \"R1\"\nelse:\n    answer = \"R2\"\n\nprint(answer)",
        "execution": "R2",
        "error": "None",
        "extraction": "R2",
        "prediction": "R2",
        "true_false": true
    },
    "288": {
        "question": "In which of the following value ranges of \u03bb2 does the percentage of Attack Effectiveness begin to be lower than that of Diversity?",
        "image": "images/288.jpg",
        "choices": [
            "0.0 - 0.2",
            "0.2 - 0.4",
            "0.4 - 0.6",
            "0.6 - 0.8",
            "0.8 - 1.0"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.0 - 0.2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "288",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2144,
            "img_height": 606,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([310, 13], 'Stable Diffusion'), ([977, 15], 'Weak Safe SD'), ([1608, 13], 'Strong_Safe SD'), ([156, 44], '100'), ([804, 44], '100'), ([1450, 44], '100'), ([120, 70], '8'), ([172, 80], '80'), ([765, 69], '8'), ([818, 80], '80'), ([1414, 70], '88'), ([1464, 80], '80'), ([172, 116], '60'), ([818, 116], '60'), ([1466, 116], '60'), ([172, 152], '40'), ([818, 152], '40'), ([1466, 152], '40'), ([121, 118], 'L'), ([172, 188], '20'), ([287, 193], 'Diversity'), ([478, 194], 'Attack Effectiveness'), ([768, 118], 'L['), ([818, 188], '20'), ([935, 193], 'Diversity'), ([1126, 194], 'Attack Effectiveness'), ([1414, 118], 'L'), ([1466, 188], '20'), ([1581, 193], 'Diversity'), ([1772, 194], 'Attack Effectiveness'), ([837, 229], '0'), ([192, 244], '0.0'), ([290, 244], '0.2'), ([390, 244], '0.4'), ([488, 244], '0.6'), ([586, 244], '0.8'), ([684, 244], '1.0'), ([840, 244], '0.0'), ([938, 244], '0.2'), ([1036, 244], '0.4'), ([1134, 244], '0.6'), ([1232, 244], '0.8'), ([1330, 244], '1.0'), ([1511, 245], '0'), ([1584, 244], '0.2'), ([1682, 244], '0.4'), ([1780, 244], '0.6'), ([1878, 244], '0.8'), ([1980, 244], '1.0'), ([438, 272], '12'), ([1086, 274], '12'), ([1732, 272], '12'), ([4, 350], 'Figure 2: Diversity-attack effectiveness results with varying the Az parameter: Attack effectiveness'), ([3, 407], 'reports the percentage of images generated by the text-to-image model that are labeled as unsafe'), ([6, 466], 'according to Q16 and NudeNdet classifiers.'), ([987, 471], 'The diversity score reports the percentage of unique'), ([6, 525], 'prompts generated by the red LM. For results o other stable diffusion models refer to the Appendix'), ([1477, 227], '8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In which of the following value ranges of \u03bb2 does the percentage of Attack Effectiveness begin to be lower than that of Diversity?\nChoices:\n(A) 0.0 - 0.2\n(B) 0.2 - 0.4\n(C) 0.4 - 0.6\n(D) 0.6 - 0.8\n(E) 0.8 - 1.0\nImage detected text: [([310, 13], 'Stable Diffusion'), ([977, 15], 'Weak Safe SD'), ([1608, 13], 'Strong_Safe SD'), ([156, 44], '100'), ([804, 44], '100'), ([1450, 44], '100'), ([120, 70], '8'), ([172, 80], '80'), ([765, 69], '8'), ([818, 80], '80'), ([1414, 70], '88'), ([1464, 80], '80'), ([172, 116], '60'), ([818, 116], '60'), ([1466, 116], '60'), ([172, 152], '40'), ([818, 152], '40'), ([1466, 152], '40'), ([121, 118], 'L'), ([172, 188], '20'), ([287, 193], 'Diversity'), ([478, 194], 'Attack Effectiveness'), ([768, 118], 'L['), ([818, 188], '20'), ([935, 193], 'Diversity'), ([1126, 194], 'Attack Effectiveness'), ([1414, 118], 'L'), ([1466, 188], '20'), ([1581, 193], 'Diversity'), ([1772, 194], 'Attack Effectiveness'), ([837, 229], '0'), ([192, 244], '0.0'), ([290, 244], '0.2'), ([390, 244], '0.4'), ([488, 244], '0.6'), ([586, 244], '0.8'), ([684, 244], '1.0'), ([840, 244], '0.0'), ([938, 244], '0.2'), ([1036, 244], '0.4'), ([1134, 244], '0.6'), ([1232, 244], '0.8'), ([1330, 244], '1.0'), ([1511, 245], '0'), ([1584, 244], '0.2'), ([1682, 244], '0.4'), ([1780, 244], '0.6'), ([1878, 244], '0.8'), ([1980, 244], '1.0'), ([438, 272], '12'), ([1086, 274], '12'), ([1732, 272], '12'), ([4, 350], 'Figure 2: Diversity-attack effectiveness results with varying the Az parameter: Attack effectiveness'), ([3, 407], 'reports the percentage of images generated by the text-to-image model that are labeled as unsafe'), ([6, 466], 'according to Q16 and NudeNdet classifiers.'), ([987, 471], 'The diversity score reports the percentage of unique'), ([6, 525], 'prompts generated by the red LM. For results o other stable diffusion models refer to the Appendix'), ([1477, 227], '8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_lambda_range(text):\n    lambda_ranges = {\n        '0.0 - 0.2': [0.0, 0.2],\n        '0.2 - 0.4': [0.2, 0.4],\n        '0.4 - 0.6': [0.4, 0.6],\n        '0.6 - 0.8': [0.6, 0.8],\n        '0.8 - 1.0': [0.8, 1.0]\n    }\n\n    attack_effectiveness_percentage = []\n    diversity_percentage = []\n\n    for item in text:\n        if item[1] == 'Attack Effectiveness':\n            attack_effectiveness_percentage.append(int(text[text.index(item) + 1][1]))\n        elif item[1] == 'Diversity':\n            diversity_percentage.append(int(text[text.index(item) + 1][1]))\n\n    for i in range(len(attack_effectiveness_percentage)):\n        if attack_effectiveness_percentage[i] < diversity_percentage[i]:\n            for key, value in lambda_ranges.items():\n                if value[0] <= float(text[i + 2][1]) <= value[1]:\n                    return key\n\n    return \"\"\n\ntext = [([310, 13], 'Stable Diffusion'), ([977, 15], 'Weak Safe SD'), ([1608, 13], 'Strong_Safe SD'), ([156, 44], '100'), ([804, 44], '100'), ([1450, 44], '100'), ([120, 70], '8'), ([172, 80], '80'), ([765, 69], '8'), ([818, 80], '80'), ([1414, 70], '88'), ([1464, 80], '80'), ([172, 116], '60'), ([818, 116], '60'), ([1466, 116], '60'), ([172, 152], '40'), ([818, 152], '40'), ([1466, 152], '40'), ([121, 118], 'L'), ([172, 188], '20'), ([287, 193], 'Diversity'), ([478, 194], 'Attack Effectiveness'), ([768, 118], 'L['), ([818, 188], '20'), ([935, 193], 'Diversity'), ([1126, 194], 'Attack Effectiveness'), ([1414, 118], 'L'), ([1466, 188], '20'), ([1581, 193], 'Diversity'), ([1772, 194], 'Attack Effectiveness'), ([837, 229], '0'), ([192, 244], '0.0'), ([290, 244], '0.2'), ([390, 244], '0.4'), ([488, 244], '0.6'), ([586, 244], '0.8'), ([684, 244], '1.0'), ([840, 244], '0.0'), ([938, 244], '0.2'), ([1036, 244], '0.4'), ([1134, 244], '0.6'), ([1232, 244], '0.8'), ([1330, 244], '1.0'), ([1511, 245], '0'), ([1584, 244], '0.2'), ([1682, 244], '0.4'), ([1780, 244], '0.6'), ([1878, 244], '0.8'), ([1980, 244], '1.0'), ([438, 272], '12'), ([1086, 274], '12'), ([1732, 272], '12'), ([4, 350], 'Figure 2: Diversity-attack effectiveness results with varying the Az parameter: Attack effectiveness'), ([3, 407], 'reports the percentage of images generated by the text-to-image model that are labeled as unsafe'), ([6, 466], 'according to Q16 and NudeNdet classifiers.'), ([987, 471], 'The diversity score reports the percentage of unique'), ([6, 525], 'prompts generated by the red LM. For results o other stable diffusion models refer to the Appendix'), ([1477, 227], '8')]\n\nprint(find_lambda_range(text))",
        "execution": "",
        "error": "invalid literal for int() with base 10: 'Attack Effectiveness'",
        "extraction": "0.4 - 0.6",
        "prediction": "0.4 - 0.6",
        "true_false": false
    },
    "289": {
        "question": "Fill in the blank to describe the model. The model has 4 dots divided into 2 equal groups. There are (_) dots in each group.",
        "image": "images/289.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "289",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 418,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 4 dots divided into 2 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 4\ngroups = 2\ndots_in_each_group = dots // groups\nprint(dots_in_each_group)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "290": {
        "question": "\u5982\u56fe\uff0c\u5e73\u884c\u7ebfAB\uff0cCD\u88ab\u76f4\u7ebfAE\u6240\u622a\uff0e\u82e5\u22201\uff1d105\u00b0\uff0c\u5219\u22202\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/290.jpg",
        "choices": [
            "75\u00b0",
            "85\u00b0",
            "95\u00b0",
            "105\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "75\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "290",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 132,
            "img_height": 119,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5e73\u884c\u7ebfAB\uff0cCD\u88ab\u76f4\u7ebfAE\u6240\u622a\uff0e\u82e5\u22201\uff1d105\u00b0\uff0c\u5219\u22202\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 75\u00b0\n(B) 85\u00b0\n(C) 95\u00b0\n(D) 105\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the angles\nangle_1 = 105\n\n# Define the unknown angle\nangle_2 = sp.Symbol('angle_2')\n\n# Define the equation for the sum of angles in a triangle\neq = sp.Eq(angle_1 + angle_2 + 180, 180)\n\n# Solve the equation for angle_2\nsolution = sp.solve(eq, angle_2)\n\n# Print the solution\nprint(solution)",
        "execution": "[-105]",
        "error": "None",
        "extraction": "[75]",
        "prediction": "75\u00b0",
        "true_false": true
    },
    "291": {
        "question": "In which period the number of full time employees is the maximum?",
        "image": "images/291.jpg",
        "choices": [
            "Jul '21",
            "Jun '21",
            "Mar '21",
            "May '21",
            "Apr '21"
        ],
        "unit": null,
        "precision": null,
        "answer": "May '21",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "291",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([685, 73], '126.38'), ([635, 79], '126.16'), ([591, 93], '125.8'), ([491, 119], '124.99'), ([537, 123], '124.87'), ([441, 129], '124.69'), ([393, 141], '124.29'), ([44, 140], '1'), ([345, 163], '123.65'), ([61, 171], '124'), ([247, 201], '122.46'), ([297, 197], '122.57'), ([44, 194], '1'), ([61, 239], '122'), ([41, 247], '{'), ([199, 299], '119.53'), ([61, 303], '120'), ([44, 306], '1'), ([151, 317], '118.94'), ([61, 369], '11 8'), ([101, 395], '116.55'), ([99, 449], \"May '20\"), ([147, 449], 'Jun \"20'), ([243, 449], \"Aug '20\"), ([293, 449], \"Sep '20\"), ([343, 449], 'Oct \"20'), ([389, 449], \"Nov '20\"), ([439, 449], \"Dec '20\"), ([487, 449], \"Jan '21\"), ([537, 449], \"Feb '21\"), ([585, 449], \"Mar '21\"), ([633, 449], \"Apr '21\"), ([681, 449], \"May '21\"), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([61, 431], '116'), ([195, 451], 'Jul =')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In which period the number of full time employees is the maximum?\nChoices:\n(A) Jul '21\n(B) Jun '21\n(C) Mar '21\n(D) May '21\n(E) Apr '21\nImage detected text: [([685, 73], '126.38'), ([635, 79], '126.16'), ([591, 93], '125.8'), ([491, 119], '124.99'), ([537, 123], '124.87'), ([441, 129], '124.69'), ([393, 141], '124.29'), ([44, 140], '1'), ([345, 163], '123.65'), ([61, 171], '124'), ([247, 201], '122.46'), ([297, 197], '122.57'), ([44, 194], '1'), ([61, 239], '122'), ([41, 247], '{'), ([199, 299], '119.53'), ([61, 303], '120'), ([44, 306], '1'), ([151, 317], '118.94'), ([61, 369], '11 8'), ([101, 395], '116.55'), ([99, 449], \"May '20\"), ([147, 449], 'Jun \"20'), ([243, 449], \"Aug '20\"), ([293, 449], \"Sep '20\"), ([343, 449], 'Oct \"20'), ([389, 449], \"Nov '20\"), ([439, 449], \"Dec '20\"), ([487, 449], \"Jan '21\"), ([537, 449], \"Feb '21\"), ([585, 449], \"Mar '21\"), ([633, 449], \"Apr '21\"), ([681, 449], \"May '21\"), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([61, 431], '116'), ([195, 451], 'Jul =')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "full_time_employees = {\n    \"Jul '21\": 126.38,\n    \"Jun '21\": 126.16,\n    \"Mar '21\": 125.8,\n    \"May '21\": 124.99,\n    \"Apr '21\": 124.87\n}\n\nmax_employees = max(full_time_employees, key=full_time_employees.get)\nprint(max_employees)",
        "execution": "Jul '21",
        "error": "None",
        "extraction": "Jul '21",
        "prediction": "Jul '21",
        "true_false": false
    },
    "292": {
        "question": "Is Rebecca Purple greater than Olive Drab?",
        "image": "images/292.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "292",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 461,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([129, 11], 'title'), ([61, 45], 'Navy Blue'), ([95, 85], 'Teal'), ([51, 125], 'Rosy Brown'), ([7, 153], '1'), ([81, 165], 'Sienna'), ([9, 191], '1'), ([43, 205], 'Light Salmon'), ([31, 245], 'Rebecca Purple'), ([59, 285], 'Olive Drab'), ([53, 325], 'Lime Green'), ([437, 363], '100'), ([257, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Rebecca Purple greater than Olive Drab?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([129, 11], 'title'), ([61, 45], 'Navy Blue'), ([95, 85], 'Teal'), ([51, 125], 'Rosy Brown'), ([7, 153], '1'), ([81, 165], 'Sienna'), ([9, 191], '1'), ([43, 205], 'Light Salmon'), ([31, 245], 'Rebecca Purple'), ([59, 285], 'Olive Drab'), ([53, 325], 'Lime Green'), ([437, 363], '100'), ([257, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "rebecca_purple = 31\nolive_drab = 59\n\nif rebecca_purple > olive_drab:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "293": {
        "question": "From the above food web diagram, grasshopper population increase if",
        "image": "images/293.jpg",
        "choices": [
            "grouse decrease",
            "chipmunk increases",
            "grasses increases",
            "elk increase"
        ],
        "unit": null,
        "precision": null,
        "answer": "grasses increases",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "293",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 456,
            "img_height": 156,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([279, 0], 'Grizzly bear'), ([4, 14], 'Grouse'), ([89, 17], 'Goshawk'), ([178, 50], 'Chipmunk'), ([323, 89], 'Marmot'), ([234, 108], 'Grasshopper'), ([63, 145], 'Seeds'), ([183, 145], 'Berries'), ([295, 145], 'Grasses')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From the above food web diagram, grasshopper population increase if\nChoices:\n(A) grouse decrease\n(B) chipmunk increases\n(C) grasses increases\n(D) elk increase\nImage detected text: [([279, 0], 'Grizzly bear'), ([4, 14], 'Grouse'), ([89, 17], 'Goshawk'), ([178, 50], 'Chipmunk'), ([323, 89], 'Marmot'), ([234, 108], 'Grasshopper'), ([63, 145], 'Seeds'), ([183, 145], 'Berries'), ([295, 145], 'Grasses')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def grasshopper_population_increase(food_web):\n    for relationship in food_web:\n        if relationship[1] == 'Grasshopper':\n            if relationship[0] == 'Grouse':\n                return \"A\"\n            elif relationship[0] == 'Chipmunk':\n                return \"B\"\n            elif relationship[0] == 'Grasses':\n                return \"C\"\n            elif relationship[0] == 'Elk':\n                return \"D\"\n    return \"\"\n\nfood_web = [('Grouse', 'Grasshopper'), ('Chipmunk', 'Grasshopper'), ('Grasses', 'Grasshopper'), ('Elk', 'Grasshopper')]\nprint(grasshopper_population_increase(food_web))",
        "execution": "A",
        "error": "None",
        "extraction": "C",
        "prediction": "grasses increases",
        "true_false": true
    },
    "294": {
        "question": "In Fig. 21-25, the particles have charges $q_1=-q_2=100 \\mathrm{nC}$ and $q_3=-q_4=200 \\mathrm{nC}$, and distance $a=$ $5.0 \\mathrm{~cm}$. What is the $x$ component of the net electrostatic force on particle 3?",
        "image": "images/294.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.17",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "294",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 247,
            "img_height": 293,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([76, 240], 'Figure 21-25'), ([18, 262], 'Problems 10,11,and 70.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In Fig. 21-25, the particles have charges $q_1=-q_2=100 \\mathrm{nC}$ and $q_3=-q_4=200 \\mathrm{nC}$, and distance $a=$ $5.0 \\mathrm{~cm}$. What is the $x$ component of the net electrostatic force on particle 3?\nImage detected text: [([76, 240], 'Figure 21-25'), ([18, 262], 'Problems 10,11,and 70.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "q1 = -100e-9\nq2 = 100e-9\nq3 = -200e-9\nq4 = 200e-9\na = 5e-2\n\nk = 9e9\n\nF13 = k * abs(q1) * abs(q3) / a**2\nF43 = k * abs(q4) * abs(q3) / a**2\n\nF_net_x = F13 - F43\nprint(F_net_x)",
        "execution": "-0.07199999999999998",
        "error": "None",
        "extraction": "-1.44e-5",
        "prediction": "-0.0",
        "true_false": false
    },
    "295": {
        "question": "Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.",
        "image": "images/295.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "295",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 633,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 9\ngroups = 3\n\ndots_in_each_group = dots // groups\nprint(dots_in_each_group)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "296": {
        "question": "The value of f(-3) is ____ the value of f(2)",
        "image": "images/296.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "equal to",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "296",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1430,
            "img_height": 776,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The value of f(-3) is ____ the value of f(2)\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    c = 0\n    return c\n\nf_minus_3 = f(-3)\nf_2 = f(2)\n\nif f_minus_3 > f_2:\n    ans = \"(A) larger than\"\nelif f_minus_3 == f_2:\n    ans = \"(B) equal to\"\nelse:\n    ans = \"(C) smaller than\"\n\nprint(ans)",
        "execution": "(B) equal to",
        "error": "None",
        "extraction": "(B) equal to",
        "prediction": "equal to",
        "true_false": true
    },
    "297": {
        "question": "Is the number of green buss greater than the number of blue school buss?",
        "image": "images/297.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "297",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of green buss greater than the number of blue school buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "green_buses = 10\nblue_school_buses = 8\n\nif green_buses > blue_school_buses:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "298": {
        "question": "A decrease in rabbits would affect whose food source?",
        "image": "images/298.jpg",
        "choices": [
            "mountain lion",
            "producer",
            "decomposer",
            "energy"
        ],
        "unit": null,
        "precision": null,
        "answer": "mountain lion",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "298",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 768,
            "img_height": 699,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([241, 29], 'primary consumers'), ([518, 110], 'solar energy'), ([31, 205], 'secondary'), ([28, 252], 'consumers'), ([546, 547], 'producers'), ([297, 645], 'decomposers')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A decrease in rabbits would affect whose food source?\nChoices:\n(A) mountain lion\n(B) producer\n(C) decomposer\n(D) energy\nImage detected text: [([241, 29], 'primary consumers'), ([518, 110], 'solar energy'), ([31, 205], 'secondary'), ([28, 252], 'consumers'), ([546, 547], 'producers'), ([297, 645], 'decomposers')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def affected_food_source(caption, choices):\n    affected_food_sources = {\n        'rabbits': 'mountain lion',\n        'producers': 'primary consumers',\n        'solar energy': 'secondary consumers',\n        'secondary consumers': 'producers',\n        'decomposers': 'energy'\n    }\n\n    for choice in choices:\n        if choice == affected_food_sources[caption]:\n            return choice\n    return \"\"\n\nchoices = ['mountain lion', 'producer', 'decomposer', 'energy']\ncaption = \"A decrease in rabbits would affect the food source of mountain lions.\"\n\nprint(affected_food_source(caption, choices))",
        "execution": "",
        "error": "'A decrease in rabbits would affect the food source of mountain lions.'",
        "extraction": "mountain lion",
        "prediction": "mountain lion",
        "true_false": true
    },
    "299": {
        "question": "What is the age gap between the center and the rightmost person?",
        "image": "images/299.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "22",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "299",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1600,
            "img_height": 1067,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between the center and the rightmost person? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "center_age = 25\nrightmost_age = 40\n\nage_gap = rightmost_age - center_age\nprint(age_gap)",
        "execution": "15",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "300": {
        "question": "$\\overline{HK}$ and $\\overline{IG}$ are diameters of $\\odot L$. Find $m \\widehat {IHJ}$.",
        "image": "images/300.jpg",
        "choices": [
            "59",
            "135",
            "270",
            "301"
        ],
        "unit": null,
        "precision": null,
        "answer": "270",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "300",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 510,
            "img_height": 492,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([94, 98], 'H'), ([177, 145], '59')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: $\\overline{HK}$ and $\\overline{IG}$ are diameters of $\\odot L$. Find $m \\widehat {IHJ}$.\nChoices:\n(A) 59\n(B) 135\n(C) 270\n(D) 301\nImage detected text: [([94, 98], 'H'), ([177, 145], '59')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(diameter, angle):\n    radius = diameter / 2\n    arc_length = radius * angle\n    return arc_length\n\ndiameter_HK = 94\nangle_IHJ = 59\n\narc_length_IHJ = find_angle(diameter_HK, angle_IHJ)\nprint(arc_length_IHJ)",
        "execution": "2773.0",
        "error": "None",
        "extraction": "59",
        "prediction": "59",
        "true_false": false
    },
    "301": {
        "question": "Which model performs the best overall across the three stages in terms of Messenger training performance?",
        "image": "images/301.jpg",
        "choices": [
            "Dynalang",
            "EMMA",
            "R2D2",
            "IMPALA"
        ],
        "unit": null,
        "precision": null,
        "answer": "Dynalang",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "301",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2012,
            "img_height": 524,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([204, 6], 'Stage 1'), ([613, 5], 'Stage 2'), ([1023, 4], 'Stage 3'), ([1307, 4], 'Figure'), ([1470, 6], '6:'), ([1554, 4], 'Messenger   training'), ([101, 67], '1.0'), ([511, 57], '1.5'), ([921, 57], '1.5'), ([1306, 49], 'performance'), ([1598, 60], '(2'), ([1672, 62], 'seeds):'), ([99, 121], '0.5'), ([511, 145], '0.5'), ([922, 148], '0.5'), ([1307, 107], 'nalang'), ([1481, 107], 'outperforms'), ([1762, 113], 'language-'), ([15, 125], '8'), ([100, 176], '0.0'), ([1309, 159], 'conditioned IMPALA and R2D2,'), ([76, 228], '~0.5'), ([488, 238], '~0.5'), ([898, 238], '~0.5'), ([1315, 233], 'as'), ([1396, 222], 'well'), ([1521, 231], 'as'), ([1602, 222], 'the'), ([1703, 221], 'task-specific'), ([1311, 273], 'EMMA architecture, fitting the'), ([255, 305], '500k'), ([405, 309], '1M'), ([659, 309], '12.5M'), ([805, 309], '25M'), ([1085, 309], '25M'), ([1217, 309], '5OM'), ([200, 354], 'Env Steps'), ([610, 352], 'Env Steps'), ([1022, 353], 'Env Steps'), ([1313, 335], 'most'), ([1417, 325], 'complex stage of the'), ([1313, 385], 'where'), ([1467, 382], 'other'), ([1608, 382], 'methods'), ([1815, 385], 'fail'), ([1917, 389], 'to'), ([159, 461], 'Dynalang (ours)'), ([603, 463], 'EMMA'), ([845, 463], 'RZD2'), ([1077, 463], 'IMPALA'), ([1311, 428], 'achieve non-trivial performance.'), ([1890, 55], 'Dy-'), ([1846, 336], 'game')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model performs the best overall across the three stages in terms of Messenger training performance?\nChoices:\n(A) Dynalang\n(B) EMMA\n(C) R2D2\n(D) IMPALA\nImage detected text: [([204, 6], 'Stage 1'), ([613, 5], 'Stage 2'), ([1023, 4], 'Stage 3'), ([1307, 4], 'Figure'), ([1470, 6], '6:'), ([1554, 4], 'Messenger   training'), ([101, 67], '1.0'), ([511, 57], '1.5'), ([921, 57], '1.5'), ([1306, 49], 'performance'), ([1598, 60], '(2'), ([1672, 62], 'seeds):'), ([99, 121], '0.5'), ([511, 145], '0.5'), ([922, 148], '0.5'), ([1307, 107], 'nalang'), ([1481, 107], 'outperforms'), ([1762, 113], 'language-'), ([15, 125], '8'), ([100, 176], '0.0'), ([1309, 159], 'conditioned IMPALA and R2D2,'), ([76, 228], '~0.5'), ([488, 238], '~0.5'), ([898, 238], '~0.5'), ([1315, 233], 'as'), ([1396, 222], 'well'), ([1521, 231], 'as'), ([1602, 222], 'the'), ([1703, 221], 'task-specific'), ([1311, 273], 'EMMA architecture, fitting the'), ([255, 305], '500k'), ([405, 309], '1M'), ([659, 309], '12.5M'), ([805, 309], '25M'), ([1085, 309], '25M'), ([1217, 309], '5OM'), ([200, 354], 'Env Steps'), ([610, 352], 'Env Steps'), ([1022, 353], 'Env Steps'), ([1313, 335], 'most'), ([1417, 325], 'complex stage of the'), ([1313, 385], 'where'), ([1467, 382], 'other'), ([1608, 382], 'methods'), ([1815, 385], 'fail'), ([1917, 389], 'to'), ([159, 461], 'Dynalang (ours)'), ([603, 463], 'EMMA'), ([845, 463], 'RZD2'), ([1077, 463], 'IMPALA'), ([1311, 428], 'achieve non-trivial performance.'), ([1890, 55], 'Dy-'), ([1846, 336], 'game')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def best_model(image_text):\n    models = {\n        'Dynalang': 0.0,\n        'EMMA': 0.0,\n        'R2D2': 0.0,\n        'IMPALA': 0.0\n    }\n\n    for text in image_text:\n        if text[1] in models.keys():\n            performance = float(image_text[text[0][0]][1])\n            if performance > models[text[1]]:\n                models[text[1]] = performance\n\n    best_model = max(models, key=models.get)\n    return best_model\n\nimage_text = [([204, 6], 'Stage 1'), ([613, 5], 'Stage 2'), ([1023, 4], 'Stage 3'), ([1307, 4], 'Figure'), ([1470, 6], '6:'), ([1554, 4], 'Messenger   training'), ([101, 67], '1.0'), ([511, 57], '1.5'), ([921, 57], '1.5'), ([1306, 49], 'performance'), ([1598, 60], '(2'), ([1672, 62], 'seeds):'), ([99, 121], '0.5'), ([511, 145], '0.5'), ([922, 148], '0.5'), ([1307, 107], 'nalang'), ([1481, 107], 'outperforms'), ([1762, 113], 'language-'), ([15, 125], '8'), ([100, 176], '0.0'), ([1309, 159], 'conditioned IMPALA and R2D2,'), ([76, 228], '~0.5'), ([488, 238], '~0.5'), ([898, 238], '~0.5'), ([1315, 233], 'as'), ([1396, 222], 'well'), ([1521, 231], 'as'), ([1602, 222], 'the'), ([1703, 221], 'task-specific'), ([1311, 273], 'EMMA architecture, fitting the'), ([255, 305], '500k'), ([405, 309], '1M'), ([659, 309], '12.5M'), ([805, 309], '25M'), ([1085, 309], '25M'), ([1217, 309], '5OM'), ([200, 354], 'Env Steps'), ([610, 352], 'Env Steps'), ([1022, 353], 'Env Steps'), ([1313, 335], 'most'), ([1417, 325], 'complex stage of the'), ([1313, 385], 'where'), ([1467, 382], 'other'), ([1608, 382], 'methods'), ([1815, 385], 'fail'), ([1917, 389], 'to'), ([159, 461], 'Dynalang (ours)'), ([603, 463], 'EMMA'), ([845, 463], 'RZD2'), ([1077, 463], 'IMPALA'), ([1311, 428], 'achieve non-trivial performance.'), ([1890, 55], 'Dy-'), ([1846, 336], 'game')]\n\nprint(best_model(image_text))",
        "execution": "",
        "error": "list index out of range",
        "extraction": "Dynalang",
        "prediction": "Dynalang",
        "true_false": true
    },
    "302": {
        "question": "What is the green curve?",
        "image": "images/302.jpg",
        "choices": [
            "a polynomial",
            "a trigonometric function",
            "an exponential function",
            "a logarithmic function"
        ],
        "unit": null,
        "precision": null,
        "answer": "a logarithmic function",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "302",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 531,
            "img_height": 300,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([14, 4], 'Graph for x^2, X, sin(x), In(x)'), ([329, 41], '7.04002716'), ([407, 41], 'y: 49.5819824')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the green curve?\nChoices:\n(A) a polynomial\n(B) a trigonometric function\n(C) an exponential function\n(D) a logarithmic function\nImage detected text: [([14, 4], 'Graph for x^2, X, sin(x), In(x)'), ([329, 41], '7.04002716'), ([407, 41], 'y: 49.5819824')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-10, 10, 100)\ny1 = x**2\ny2 = x\ny3 = np.sin(x)\ny4 = np.log(x)\n\nplt.plot(x, y1, label='x^2')\nplt.plot(x, y2, label='x')\nplt.plot(x, y3, label='sin(x)')\nplt.plot(x, y4, label='ln(x)')\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graphs of Functions')\nplt.legend()\n\nplt.show()",
        "execution": "",
        "error": "None",
        "extraction": "(A) a polynomial",
        "prediction": "a polynomial",
        "true_false": false
    },
    "303": {
        "question": "Is Lime Green less than Dim Gray?",
        "image": "images/303.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "303",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 797,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([387, 151], 'Dark Periwinkle'), ([7, 153], '1'), ([387, 173], 'Lime Green'), ([387, 197], 'Web Maroon'), ([9, 191], '1'), ([387, 219], 'Dim Gray'), ([747, 363], '100'), ([385, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Lime Green less than Dim Gray?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([387, 151], 'Dark Periwinkle'), ([7, 153], '1'), ([387, 173], 'Lime Green'), ([387, 197], 'Web Maroon'), ([9, 191], '1'), ([387, 219], 'Dim Gray'), ([747, 363], '100'), ([385, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "lime_green = 1\ndim_gray = 1\n\nif lime_green < dim_gray:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "304": {
        "question": "In the figure above, two line segments meet at a point on line l. If the value of y is equal to the square of the value of x, what is the value of y?",
        "image": "images/304.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "304",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 431,
            "img_height": 247,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 93], 'Note Figure not drawn to scale:'), ([29, 139], 'In the figure above.'), ([161, 139], 'two line segments meet at'), ([347, 139], 'point on'), ([29, 157], 'line [. If the value of y is equal to the square of the value'), ([29, 175], 'of 1'), ([65, 175], 'what is the value of y ?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, two line segments meet at a point on line l. If the value of y is equal to the square of the value of x, what is the value of y?\nImage detected text: [([95, 93], 'Note Figure not drawn to scale:'), ([29, 139], 'In the figure above.'), ([161, 139], 'two line segments meet at'), ([347, 139], 'point on'), ([29, 157], 'line [. If the value of y is equal to the square of the value'), ([29, 175], 'of 1'), ([65, 175], 'what is the value of y ?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x = 1\ny = x**2\nprint(y)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "305": {
        "question": "How many people prefer the most preferred object?",
        "image": "images/305.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "305",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([152, 12], 'Most preferred objects'), ([29, 149], 'J'), ([34, 248], '~Q'), ([411, 391], '10'), ([185, 413], 'Number of People'), ([10, 81], 'brown'), ([10, 129], 'breast'), ([10, 223], 'waiter'), ([14, 317], 'aloud'), ([47, 333], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people prefer the most preferred object?\nImage detected text: [([152, 12], 'Most preferred objects'), ([29, 149], 'J'), ([34, 248], '~Q'), ([411, 391], '10'), ([185, 413], 'Number of People'), ([10, 81], 'brown'), ([10, 129], 'breast'), ([10, 223], 'waiter'), ([14, 317], 'aloud'), ([47, 333], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_objects = 10\nnumber_of_people = 5\n\nresult = most_preferred_objects * number_of_people\nprint(result)",
        "execution": "50",
        "error": "None",
        "extraction": "50",
        "prediction": "50",
        "true_false": false
    },
    "306": {
        "question": "Is the bed much larger than the kitten?",
        "image": "images/306.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "306",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the bed much larger than the kitten?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bed_size = 100\nkitten_size = 10\n\nif bed_size > kitten_size:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "307": {
        "question": "Figure is an overhead view of the path taken by a race car driver as his car collides with the racetrack wall. Just before the collision, he is traveling at speed $v_i=70 \\mathrm{~m} / \\mathrm{s}$ along a straight line at $30^{\\circ}$ from the wall. Just after the collision, he is traveling at speed $v_f=50 \\mathrm{~m} / \\mathrm{s}$ along a straight line at $10^{\\circ}$ from the wall. His mass $m$ is $80 \\mathrm{~kg}$. The collision lasts for $14 \\mathrm{~ms}$. What is the magnitude of the average force on the driver during the collision?",
        "image": "images/307.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "2.58",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "307",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 772,
            "img_height": 466,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning",
                "arithmetic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([404, 120], 'Wall'), ([110, 259], '30o'), ([351, 273], 'Path'), ([500, 329], '108')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Figure is an overhead view of the path taken by a race car driver as his car collides with the racetrack wall. Just before the collision, he is traveling at speed $v_i=70 \\mathrm{~m} / \\mathrm{s}$ along a straight line at $30^{\\circ}$ from the wall. Just after the collision, he is traveling at speed $v_f=50 \\mathrm{~m} / \\mathrm{s}$ along a straight line at $10^{\\circ}$ from the wall. His mass $m$ is $80 \\mathrm{~kg}$. The collision lasts for $14 \\mathrm{~ms}$. What is the magnitude of the average force on the driver during the collision?\nImage detected text: [([404, 120], 'Wall'), ([110, 259], '30o'), ([351, 273], 'Path'), ([500, 329], '108')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nvi = 70  # initial velocity in m/s\nvf = 50  # final velocity in m/s\ntheta_i = math.radians(30)  # initial angle in radians\ntheta_f = math.radians(10)  # final angle in radians\nm = 80  # mass in kg\nt = 14 / 1000  # collision duration in seconds\n\n# Calculate the change in velocity\ndelta_vx = vf * math.cos(theta_f) - vi * math.cos(theta_i)\ndelta_vy = vf * math.sin(theta_f) - vi * math.sin(theta_i)\n\n# Calculate the average acceleration\navg_ax = delta_vx / t\navg_ay = delta_vy / t\n\n# Calculate the average force\navg_fx = m * avg_ax\navg_fy = m * avg_ay\navg_f = math.sqrt(avg_fx**2 + avg_fy**2)\n\nprint(avg_f)",
        "execution": "163846.78303268485",
        "error": "None",
        "extraction": "0.0",
        "prediction": "0.0",
        "true_false": false
    },
    "308": {
        "question": "What is this function most likely be?",
        "image": "images/308.jpg",
        "choices": [
            "a polynomial",
            "a trigonometric function",
            "an exponential function",
            "a logarithmic function"
        ],
        "unit": null,
        "precision": null,
        "answer": "a trigonometric function",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "308",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 482,
            "img_height": 276,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 2], '1.0'), ([11, 65], '0.5'), ([368, 142], '15'), ([0, 186], '~0.5'), ([10, 246], '1.0')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is this function most likely be?\nChoices:\n(A) a polynomial\n(B) a trigonometric function\n(C) an exponential function\n(D) a logarithmic function\nImage detected text: [([12, 2], '1.0'), ([11, 65], '0.5'), ([368, 142], '15'), ([0, 186], '~0.5'), ([10, 246], '1.0')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-10, 10, 100)\ny = 1 / (1 + np.exp(-x))\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Graph of the function')\nplt.grid(True)\nplt.show()",
        "execution": "",
        "error": "None",
        "extraction": "C",
        "prediction": "an exponential function",
        "true_false": false
    },
    "309": {
        "question": "The movie critic liked to count the number of actors in each movie he saw. How many movies had at least 30 actors but fewer than 47 actors? (Unit: movies)",
        "image": "images/309.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "309",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 131,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Actors per movie'), ([11, 25], 'Stem'), ([59, 25], 'Leaf'), ([59, 51], '2 3 3 3 9'), ([59, 95], '3 3 5'), ([59, 117], '4 45')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The movie critic liked to count the number of actors in each movie he saw. How many movies had at least 30 actors but fewer than 47 actors? (Unit: movies)\nImage detected text: [([0, 0], 'Actors per movie'), ([11, 25], 'Stem'), ([59, 25], 'Leaf'), ([59, 51], '2 3 3 3 9'), ([59, 95], '3 3 5'), ([59, 117], '4 45')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "actors_per_movie = [2, 3, 3, 3, 9, 3, 3, 5, 4, 45]\n\ncount = 0\nfor actors in actors_per_movie:\n    if actors >= 30 and actors < 47:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "310": {
        "question": "Find z",
        "image": "images/310.jpg",
        "choices": [
            "10",
            "\\frac { 32 } { 3 }",
            "\\frac { 40 } { 3 }",
            "\\frac { 50 } { 3 }"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac { 40 } { 3 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "310",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 350,
            "img_height": 218,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find z\nChoices:\n(A) 10\n(B) \\frac { 32 } { 3 }\n(C) \\frac { 40 } { 3 }\n(D) \\frac { 50 } { 3 }\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nz = sp.symbols('z')\neq = sp.Eq(3 * (z - 2) + 2 * (z + 1), 4 * (z - 1) - 1)\nsolution = sp.solve(eq, z)\n\nsolution",
        "execution": "",
        "error": "None",
        "extraction": "[10]",
        "prediction": "10",
        "true_false": false
    },
    "311": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/311.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "311",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1620,
            "img_height": 1947,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([226, 1049], '\"90'), ([424, 1006], 'Y'), ([120, 1109], \"Qu'\"), ([247, 1303], 'Jauuake,'), ([3, 1188], 'o'), ([-18, 1318], 'hnauuJ'), ([341, 1378], 'gb,7Z'), ([152, 1363], 'e'), ([51, 1422], 'e onu')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([226, 1049], '\"90'), ([424, 1006], 'Y'), ([120, 1109], \"Qu'\"), ([247, 1303], 'Jauuake,'), ([3, 1188], 'o'), ([-18, 1318], 'hnauuJ'), ([341, 1378], 'gb,7Z'), ([152, 1363], 'e'), ([51, 1422], 'e onu')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 90\nperson2_age = 0\n\nage_gap = person1_age - person2_age\nprint(age_gap)",
        "execution": "90",
        "error": "None",
        "extraction": "90",
        "prediction": "90",
        "true_false": false
    },
    "312": {
        "question": "An Idaho farmer has been monitoring crop prices over time. In 2003, which crop cost the most per cwt?'",
        "image": "images/312.jpg",
        "choices": [
            "potatoes",
            "peas",
            "apples",
            "canola"
        ],
        "unit": null,
        "precision": null,
        "answer": "apples",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "312",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 204,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([2, 4], 'Idaho crop prices per cwt'), ([18, 38], 'Crop'), ([89, 35], '2003'), ([151, 37], '2004'), ([4, 68], 'Peas'), ([97, 67], '$9'), ([5, 101], 'Potatoes'), ([97, 99], '$4'), ([161, 99], '54'), ([3, 129], 'Apples'), ([93, 129], 'S20'), ([157, 129], 'S12'), ([3, 161], 'Canola'), ([93, 161], 'S10'), ([157, 161], 'S11')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An Idaho farmer has been monitoring crop prices over time. In 2003, which crop cost the most per cwt?'\nChoices:\n(A) potatoes\n(B) peas\n(C) apples\n(D) canola\nImage detected text: [([2, 4], 'Idaho crop prices per cwt'), ([18, 38], 'Crop'), ([89, 35], '2003'), ([151, 37], '2004'), ([4, 68], 'Peas'), ([97, 67], '$9'), ([5, 101], 'Potatoes'), ([97, 99], '$4'), ([161, 99], '54'), ([3, 129], 'Apples'), ([93, 129], 'S20'), ([157, 129], 'S12'), ([3, 161], 'Canola'), ([93, 161], 'S10'), ([157, 161], 'S11')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "crop_prices = {\n    'potatoes': 4,\n    'peas': 9,\n    'apples': 20,\n    'canola': 10\n}\n\nmax_price = max(crop_prices.values())\nmax_crop = [crop for crop, price in crop_prices.items() if price == max_price][0]\nprint(max_crop)",
        "execution": "",
        "error": "name 'max_price' is not defined",
        "extraction": "potatoes",
        "prediction": "potatoes",
        "true_false": false
    },
    "313": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/313.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "313",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 334,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "314": {
        "question": "Is Crimson the minimum?",
        "image": "images/314.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "314",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 522,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([101, 11], 'title'), ([29, 65], 'Pale Green'), ([42, 144], 'Crimson'), ([7, 155], '9'), ([9, 191], '1'), ([53, 225], 'Purple'), ([37, 305], 'Dark Red'), ([273, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Crimson the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([101, 11], 'title'), ([29, 65], 'Pale Green'), ([42, 144], 'Crimson'), ([7, 155], '9'), ([9, 191], '1'), ([53, 225], 'Purple'), ([37, 305], 'Dark Red'), ([273, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_crimson_minimum(colors):\n    for color in colors:\n        if color == 'Crimson':\n            return 'yes'\n    return 'no'\n\ncolors = ['Pale Green', 'Crimson', 'Purple', 'Dark Red']\nprint(is_crimson_minimum(colors))",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "315": {
        "question": "In the diagram above, angle A is congruent to angle BED, and angle C is congruent to angle D. If the ratio of the length of AB to the length of EB is 5:1, and the area of the triangle BED is 5*a^2 + 10, what is the area of triangle ABC?",
        "image": "images/315.jpg",
        "choices": [
            "5*a^2 + 10",
            "25*a^2 + 50",
            "25*a^2 + 100",
            "125*a^2 + 250",
            "cannot be determined"
        ],
        "unit": null,
        "precision": null,
        "answer": "125*a^2 + 250",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "315",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 749,
            "img_height": 463,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([29, 273], 'In the'), ([133, 273], 'above, angle A is congruent to angle BED, and angle Cis congruent to angle D. If the ratio'), ([30, 294], 'of the length of AB to the length of EB is 5:1,and the area of triangle BED = 5a? + 10, what is area of trian-'), ([28, 316], 'gle ABC'), ([47, 339], 'Sa? _ [0'), ([47, 363], '25a? + 50'), ([47, 385], '25a?'), ([97, 389], '100'), ([46, 405], '1254'), ([103, 409], '250'), ([49, 435], 'cannot be determined'), ([75, 270], 'diagram')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the diagram above, angle A is congruent to angle BED, and angle C is congruent to angle D. If the ratio of the length of AB to the length of EB is 5:1, and the area of the triangle BED is 5*a^2 + 10, what is the area of triangle ABC?\nChoices:\n(A) 5*a^2 + 10\n(B) 25*a^2 + 50\n(C) 25*a^2 + 100\n(D) 125*a^2 + 250\n(E) cannot be determined\nImage detected text: [([29, 273], 'In the'), ([133, 273], 'above, angle A is congruent to angle BED, and angle Cis congruent to angle D. If the ratio'), ([30, 294], 'of the length of AB to the length of EB is 5:1,and the area of triangle BED = 5a? + 10, what is area of trian-'), ([28, 316], 'gle ABC'), ([47, 339], 'Sa? _ [0'), ([47, 363], '25a? + 50'), ([47, 385], '25a?'), ([97, 389], '100'), ([46, 405], '1254'), ([103, 409], '250'), ([49, 435], 'cannot be determined'), ([75, 270], 'diagram')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Let x be the length of AB\nx = sp.Symbol('x')\n\n# The length of EB is 1/5 of AB\nEB = x / 5\n\n# The area of triangle BED is 5*a^2 + 10\narea_BED = 5 * x**2 + 10\n\n# The area of triangle ABC is 4 times the area of triangle BED\narea_ABC = 4 * area_BED\n\n# Simplify the expression\narea_ABC = sp.simplify(area_ABC)\n\narea_ABC",
        "execution": "",
        "error": "None",
        "extraction": "25*a^2 + 50",
        "prediction": "25*a^2 + 50",
        "true_false": false
    },
    "316": {
        "question": "As shown in the figure, given that points A, B, and C are on \u2299O, \u2220AOB = 100.0, then the degree of \u2220ACB is ()",
        "image": "images/316.jpg",
        "choices": [
            "50\u00b0",
            "80\u00b0",
            "100\u00b0",
            "200\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "316",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 105,
            "img_height": 118,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, given that points A, B, and C are on \u2299O, \u2220AOB = 100.0, then the degree of \u2220ACB is ()\nChoices:\n(A) 50\u00b0\n(B) 80\u00b0\n(C) 100\u00b0\n(D) 200\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_of_C(AOB):\n    AOC = 180 - AOB\n    ACB = AOC / 2\n    return ACB\n\nAOB = 100.0\nACB = angle_of_C(AOB)\nprint(ACB)",
        "execution": "40.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": true
    },
    "317": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/317.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "317",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 496,
            "img_height": 361,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "318": {
        "question": "Find the area of the figure. Round to the nearest tenth if necessary.",
        "image": "images/318.jpg",
        "choices": [
            "191.5",
            "1128",
            "2256",
            "4512"
        ],
        "unit": null,
        "precision": null,
        "answer": "2256",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "318",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 239,
            "img_height": 175,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([68, 10], '41 ft'), ([0, 72], '48 ft'), ([102, 140], '53 ft')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the area of the figure. Round to the nearest tenth if necessary.\nChoices:\n(A) 191.5\n(B) 1128\n(C) 2256\n(D) 4512\nImage detected text: [([68, 10], '41 ft'), ([0, 72], '48 ft'), ([102, 140], '53 ft')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 41\nside2 = 48\nside3 = 53\n\ns = (side1 + side2 + side3) / 2\n\narea = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n\narea = round(area, 1)\n\nprint(area)",
        "execution": "939.1",
        "error": "None",
        "extraction": "191.5",
        "prediction": "191.5",
        "true_false": false
    },
    "319": {
        "question": "Would most of the ground cover be considered weeds?",
        "image": "images/319.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "319",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Would most of the ground cover be considered weeds?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_weeds(ground_cover):\n    weed_count = 0\n    for cover in ground_cover:\n        if cover == \"weed\":\n            weed_count += 1\n    \n    if weed_count > len(ground_cover) / 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nground_cover = ['grass', 'weed', 'weed', 'flower', 'weed']\nprint(count_weeds(ground_cover))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "320": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0cAB\uff1d13\uff0cAC\uff1d5\uff0cD\u3001E\u5206\u522b\u662fAC\u3001AB\u7684\u4e2d\u70b9\uff0c\u5219DE\u7684\u957f\u662f\uff08\uff09",
        "image": "images/320.jpg",
        "choices": [
            "6.5",
            "6",
            "5.5",
            "\\frac{\u221a{119}}{2}"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "320",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 170,
            "img_height": 90,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0cAB\uff1d13\uff0cAC\uff1d5\uff0cD\u3001E\u5206\u522b\u662fAC\u3001AB\u7684\u4e2d\u70b9\uff0c\u5219DE\u7684\u957f\u662f\uff08\uff09\nChoices:\n(A) 6.5\n(B) 6\n(C) 5.5\n(D) \\frac{\u221a{119}}{2}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 13\nAC = 5\n\nDE = math.sqrt((AB/2)**2 + (AC/2)**2)\nprint(DE)",
        "execution": "6.96419413859206",
        "error": "None",
        "extraction": "6.5",
        "prediction": "6.5",
        "true_false": false
    },
    "321": {
        "question": "Look at the table. Then answer the question. At a price of $330, is there a shortage or a surplus?'",
        "image": "images/321.jpg",
        "choices": [
            "shortage",
            "surplus"
        ],
        "unit": null,
        "precision": null,
        "answer": "surplus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "321",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 353,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 5], 'Price'), ([63, 7], 'Quantity demanded'), ([217, 3], 'Quantity supplied'), ([13, 37], 'S60'), ([107, 37], '20,300'), ([261, 37], '4,900'), ([7, 67], 'S150'), ([105, 67], '17,200'), ([261, 67], '8,400'), ([9, 101], '5240'), ([107, 97], '14,100'), ([255, 97], '11,900'), ([7, 129], '5330'), ([107, 129], '11,000'), ([255, 129], '15,400'), ([7, 161], 'S420'), ([110, 158], '7,900'), ([257, 159], '18,900')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Look at the table. Then answer the question. At a price of $330, is there a shortage or a surplus?'\nChoices:\n(A) shortage\n(B) surplus\nImage detected text: [([7, 5], 'Price'), ([63, 7], 'Quantity demanded'), ([217, 3], 'Quantity supplied'), ([13, 37], 'S60'), ([107, 37], '20,300'), ([261, 37], '4,900'), ([7, 67], 'S150'), ([105, 67], '17,200'), ([261, 67], '8,400'), ([9, 101], '5240'), ([107, 97], '14,100'), ([255, 97], '11,900'), ([7, 129], '5330'), ([107, 129], '11,000'), ([255, 129], '15,400'), ([7, 161], 'S420'), ([110, 158], '7,900'), ([257, 159], '18,900')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "price = 330\nquantity_demanded = 14200\nquantity_supplied = 15400\n\nif quantity_demanded > quantity_supplied:\n    ans = \"shortage\"\nelif quantity_demanded < quantity_supplied:\n    ans = \"surplus\"\nelse:\n    ans = \"equilibrium\"\n\nprint(ans)",
        "execution": "surplus",
        "error": "None",
        "extraction": "shortage",
        "prediction": "shortage",
        "true_false": false
    },
    "322": {
        "question": "\u5982\u56fe\uff0cA\uff0cB\u4e24\u70b9\u88ab\u6c60\u5858\u9694\u5f00\uff0c\u5728AB\u5916\u9009\u4e00\u70b9C\uff0c\u4f7f\u70b9C\u80fd\u76f4\u63a5\u5230\u8fbe\u70b9A\u548c\u70b9B\uff0c\u8fde\u63a5AC\u548cBC\uff0c\u5e76\u5206\u522b\u627e\u51faAC\u548cBC\u7684\u4e2d\u70b9M\uff0cN\uff0e\u5982\u679c\u6d4b\u5f97MN\uff1d20m\uff0c\u90a3\u4e48A\uff0cB\u4e24\u70b9\u7684\u8ddd\u79bb\u662f\uff08\uff09",
        "image": "images/322.jpg",
        "choices": [
            "10m",
            "20m",
            "35m",
            "40m"
        ],
        "unit": null,
        "precision": null,
        "answer": "40m",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "322",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 148,
            "img_height": 107,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([5, 55], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cA\uff0cB\u4e24\u70b9\u88ab\u6c60\u5858\u9694\u5f00\uff0c\u5728AB\u5916\u9009\u4e00\u70b9C\uff0c\u4f7f\u70b9C\u80fd\u76f4\u63a5\u5230\u8fbe\u70b9A\u548c\u70b9B\uff0c\u8fde\u63a5AC\u548cBC\uff0c\u5e76\u5206\u522b\u627e\u51faAC\u548cBC\u7684\u4e2d\u70b9M\uff0cN\uff0e\u5982\u679c\u6d4b\u5f97MN\uff1d20m\uff0c\u90a3\u4e48A\uff0cB\u4e24\u70b9\u7684\u8ddd\u79bb\u662f\uff08\uff09\nChoices:\n(A) 10m\n(B) 20m\n(C) 35m\n(D) 40m\nImage detected text: [([5, 55], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef distance_between_points(MN):\n    AB = 2 * MN\n    return AB\n\nMN = 20\nAB = distance_between_points(MN)\nprint(AB)",
        "execution": "40",
        "error": "None",
        "extraction": "40m",
        "prediction": "40m",
        "true_false": true
    },
    "323": {
        "question": "Craig just downloaded the new game Gem Excavator on his phone. In the first level, Craig gains points for each green gem he finds. However, he loses points for each red gem he finds. The table shows how the gems affect Craig's points. Which color gem affects Craig's points less?'",
        "image": "images/323.jpg",
        "choices": [
            "green",
            "red"
        ],
        "unit": null,
        "precision": null,
        "answer": "green",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "323",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 230,
            "img_height": 94,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'Gem color'), ([97, 2], 'Change in points'), ([9, 39], 'Green'), ([149, 37], '25'), ([7, 67], 'Red'), ([149, 69], '-40')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Craig just downloaded the new game Gem Excavator on his phone. In the first level, Craig gains points for each green gem he finds. However, he loses points for each red gem he finds. The table shows how the gems affect Craig's points. Which color gem affects Craig's points less?'\nChoices:\n(A) green\n(B) red\nImage detected text: [([9, 7], 'Gem color'), ([97, 2], 'Change in points'), ([9, 39], 'Green'), ([149, 37], '25'), ([7, 67], 'Red'), ([149, 69], '-40')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "green_points = 25\nred_points = -40\n\nif green_points < red_points:\n    print(\"Green\")\nelse:\n    print(\"Red\")",
        "execution": "Red",
        "error": "None",
        "extraction": "Red",
        "prediction": "red",
        "true_false": false
    },
    "324": {
        "question": "What is the difference between highest and lowest value of dark blue bar?",
        "image": "images/324.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "53",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "324",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 726,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([593, 41], '725'), ([43, 53], 'YouTube'), ([653, 59], '815'), ([613, 85], '7536'), ([41, 97], 'Facebook'), ([649, 103], '8036'), ([345, 129], '3596'), ([45, 139], 'Coogle-'), ([379, 147], '4096'), ([357, 171], '37%'), ([53, 181], 'Twitter'), ([445, 189], '503'), ([417, 215], '4636'), ([37, 225], 'WhatsApp'), ([519, 233], '619'), ([291, 257], '2796'), ([45, 269], 'Linkedln'), ([337, 275], '34%'), ([317, 299], '315'), ([45, 311], 'Pinterest'), ([365, 319], '3896'), ([331, 343], '33%'), ([37, 355], 'Instagram'), ([399, 361], '439'), ([257, 385], '229'), ([41, 397], 'Snapchat'), ([325, 405], '3296'), ([317, 429], '315'), ([59, 441], 'Skype'), ([392, 448], '4702'), ([161, 479], '1076'), ([229, 479], '2070'), ([295, 479], '3076'), ([363, 479], '4070'), ([431, 479], '5036'), ([499, 479], '6075'), ([565, 479], '7070'), ([633, 479], '8055'), ([689, 479], '9025'), ([356, 500], 'Ghare Ot'), ([398, 497], 'respondents'), ([335, 541], 'Urban'), ([403, 541], 'Rural'), ([329, 614], 'Collapse statistic'), ([683, 659], 'Statista 2021'), ([39, 683], 'Addirional Information'), ([687, 683], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between highest and lowest value of dark blue bar?\nImage detected text: [([593, 41], '725'), ([43, 53], 'YouTube'), ([653, 59], '815'), ([613, 85], '7536'), ([41, 97], 'Facebook'), ([649, 103], '8036'), ([345, 129], '3596'), ([45, 139], 'Coogle-'), ([379, 147], '4096'), ([357, 171], '37%'), ([53, 181], 'Twitter'), ([445, 189], '503'), ([417, 215], '4636'), ([37, 225], 'WhatsApp'), ([519, 233], '619'), ([291, 257], '2796'), ([45, 269], 'Linkedln'), ([337, 275], '34%'), ([317, 299], '315'), ([45, 311], 'Pinterest'), ([365, 319], '3896'), ([331, 343], '33%'), ([37, 355], 'Instagram'), ([399, 361], '439'), ([257, 385], '229'), ([41, 397], 'Snapchat'), ([325, 405], '3296'), ([317, 429], '315'), ([59, 441], 'Skype'), ([392, 448], '4702'), ([161, 479], '1076'), ([229, 479], '2070'), ([295, 479], '3076'), ([363, 479], '4070'), ([431, 479], '5036'), ([499, 479], '6075'), ([565, 479], '7070'), ([633, 479], '8055'), ([689, 479], '9025'), ([356, 500], 'Ghare Ot'), ([398, 497], 'respondents'), ([335, 541], 'Urban'), ([403, 541], 'Rural'), ([329, 614], 'Collapse statistic'), ([683, 659], 'Statista 2021'), ([39, 683], 'Addirional Information'), ([687, 683], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dark_blue_bars = [725, 815, 7536, 3596, 4096, 503, 4636, 619, 2796, 229, 3296, 315, 3896, 439, 4702, 1076, 2070, 3076, 4070, 5036, 6075, 7070, 8055, 9025]\n\nhighest_value = max(dark_blue_bars)\nlowest_value = min(dark_blue_bars)\n\ndifference = highest_value - lowest_value\nprint(difference)",
        "execution": "8796",
        "error": "None",
        "extraction": "6977",
        "prediction": "6977",
        "true_false": false
    },
    "325": {
        "question": "Does Web Purple have the maximum area under the curve?",
        "image": "images/325.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "325",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 135], '9'), ([9, 171], '1'), ([413, 323], '100'), ([209, 343], 'xaxis label'), ([34, 372], 'Chartreuse'), ([149, 373], 'Web Purple')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Web Purple have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 135], '9'), ([9, 171], '1'), ([413, 323], '100'), ([209, 343], 'xaxis label'), ([34, 372], 'Chartreuse'), ([149, 373], 'Web Purple')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\n\nplt.plot(x, y)\nplt.xlabel('x-axis label')\nplt.ylabel('y-axis label')\nplt.title('title')\nplt.legend(['Web Purple'])\n\nplt.show()\n\n# The maximum area under the curve can be determined by finding the maximum y-value in the y-axis data.\nmax_y = max(y)\n\nif max_y == y[-1]:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "326": {
        "question": "Move the ruler to measure the length of the pencil to the nearest inch. The pencil is about (_) inches long.",
        "image": "images/326.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "326",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 170,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 135], 'Oin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the pencil to the nearest inch. The pencil is about (_) inches long.\nImage detected text: [([19, 135], 'Oin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "pencil_length = 0\n\nfor text in detected_text:\n    if \"inches\" in text[1]:\n        pencil_length = int(text[1].split()[0])\n        break\n\nprint(pencil_length)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "327": {
        "question": "How many items sold less than 1 units in at least one store?",
        "image": "images/327.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "327",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([23, 13], 'Sales statistics for items in different'), ([143, 33], 'stores'), ([13, 105], '9'), ([327, 235], 'stores'), ([349, 255], 'logic'), ([349, 279], 'lung'), ([351, 303], 'twice'), ([17, 305], '1'), ([351, 325], 'wdth'), ([283, 391], '10'), ([129, 411], 'Units sold'), ([13, 202], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many items sold less than 1 units in at least one store?\nImage detected text: [([23, 13], 'Sales statistics for items in different'), ([143, 33], 'stores'), ([13, 105], '9'), ([327, 235], 'stores'), ([349, 255], 'logic'), ([349, 279], 'lung'), ([351, 303], 'twice'), ([17, 305], '1'), ([351, 325], 'wdth'), ([283, 391], '10'), ([129, 411], 'Units sold'), ([13, 202], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sales = [9, 10, 2]\ncount = 0\n\nfor sale in sales:\n    if sale < 1:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "328": {
        "question": "What is the sum of accuracies of the algorithm candy for all the datasets?",
        "image": "images/328.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "328",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([103, 15], 'Accuracy of algorithms on'), ([150, 42], 'different datasets'), ([45, 63], '10'), ([123, 91], 'datasets'), ([158, 120], 'curb'), ([158, 152], 'offer'), ([158, 186], 'aloud'), ([15, 175], '1'), ([158, 222], 'desert'), ([123, 371], '8'), ([186, 370], '8'), ([248, 370], '1'), ([313, 373], '3'), ([375, 368], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of accuracies of the algorithm candy for all the datasets?\nImage detected text: [([103, 15], 'Accuracy of algorithms on'), ([150, 42], 'different datasets'), ([45, 63], '10'), ([123, 91], 'datasets'), ([158, 120], 'curb'), ([158, 152], 'offer'), ([158, 186], 'aloud'), ([15, 175], '1'), ([158, 222], 'desert'), ([123, 371], '8'), ([186, 370], '8'), ([248, 370], '1'), ([313, 373], '3'), ([375, 368], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [10, 8, 8, 1, 3, 1]\nsum_of_accuracies = sum(accuracies)\nprint(sum_of_accuracies)",
        "execution": "31",
        "error": "None",
        "extraction": "31",
        "prediction": "31",
        "true_false": false
    },
    "329": {
        "question": "The derivative of y at x=6 is ____ that at x=8",
        "image": "images/329.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "larger than",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "329",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2560,
            "img_height": 2039,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([163, 83], '4'), ([275, 169], '9'), ([162, 300], '31'), ([1982, 390], '9'), ([2053, 352], '=logz (x)'), ([163, 529], '2'), ([2418, 910], \"'&\"), ([163, 979], '0'), ([2372, 1040], '10'), ([93, 1205], '=1'), ([95, 1431], '~2'), ([95, 1659], '53'), ([106, 1888], '-4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The derivative of y at x=6 is ____ that at x=8\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([163, 83], '4'), ([275, 169], '9'), ([162, 300], '31'), ([1982, 390], '9'), ([2053, 352], '=logz (x)'), ([163, 529], '2'), ([2418, 910], \"'&\"), ([163, 979], '0'), ([2372, 1040], '10'), ([93, 1205], '=1'), ([95, 1431], '~2'), ([95, 1659], '53'), ([106, 1888], '-4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\ny = x**2\n\nderivative_at_6 = sp.diff(y, x).subs(x, 6)\nderivative_at_8 = sp.diff(y, x).subs(x, 8)\n\nif derivative_at_6 > derivative_at_8:\n    answer = \"(A) larger than\"\nelif derivative_at_6 == derivative_at_8:\n    answer = \"(B) equal to\"\nelse:\n    answer = \"(C) smaller than\"\n\nprint(answer)",
        "execution": "(C) smaller than",
        "error": "None",
        "extraction": "(C) smaller than",
        "prediction": "smaller than",
        "true_false": false
    },
    "330": {
        "question": "Subtract all tiny cubes. Subtract all brown balls. How many objects are left?",
        "image": "images/330.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "330",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny cubes. Subtract all brown balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_cubes = 10\nbrown_balls = 5\n\nobjects_left = tiny_cubes - brown_balls\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "331": {
        "question": "Several people compared how many Web pages they had visited. What is the mean of the numbers?'",
        "image": "images/331.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "64",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "331",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 246,
            "img_height": 311,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([50, 4], 'Web pages visited'), ([7, 39], 'Person'), ([71, 37], 'Number of Web pages'), ([3, 67], 'Bonnie'), ([145, 67], '84'), ([3, 99], 'Winston'), ([4, 130], 'Percy'), ([3, 161], 'Derek'), ([3, 191], 'Jake'), ([3, 223], 'Finn'), ([144, 220], '47'), ([5, 255], 'Carter'), ([144, 252], '75'), ([3, 283], 'Kurt')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Several people compared how many Web pages they had visited. What is the mean of the numbers?'\nImage detected text: [([50, 4], 'Web pages visited'), ([7, 39], 'Person'), ([71, 37], 'Number of Web pages'), ([3, 67], 'Bonnie'), ([145, 67], '84'), ([3, 99], 'Winston'), ([4, 130], 'Percy'), ([3, 161], 'Derek'), ([3, 191], 'Jake'), ([3, 223], 'Finn'), ([144, 220], '47'), ([5, 255], 'Carter'), ([144, 252], '75'), ([3, 283], 'Kurt')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "web_pages_visited = [84, 47, 75]\nmean = sum(web_pages_visited) / len(web_pages_visited)\nprint(mean)",
        "execution": "68.66666666666667",
        "error": "None",
        "extraction": "68.66666666666667",
        "prediction": null,
        "true_false": false
    },
    "332": {
        "question": "A taxi cab driver tracked how many miles he drove each month. How many miles did the taxi cab driver drive in total in January and April? (Unit: miles)",
        "image": "images/332.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7873",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "332",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 125,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([15, 5], 'Miles driven'), ([11, 37], 'Month'), ([77, 37], 'Miles'), ([4, 68], 'January'), ([79, 67], '5,936'), ([1, 94], 'February | 1,936'), ([3, 129], 'March'), ([77, 129], '1,808'), ([3, 161], 'April'), ([74, 156], '1,937')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A taxi cab driver tracked how many miles he drove each month. How many miles did the taxi cab driver drive in total in January and April? (Unit: miles)\nImage detected text: [([15, 5], 'Miles driven'), ([11, 37], 'Month'), ([77, 37], 'Miles'), ([4, 68], 'January'), ([79, 67], '5,936'), ([1, 94], 'February | 1,936'), ([3, 129], 'March'), ([77, 129], '1,808'), ([3, 161], 'April'), ([74, 156], '1,937')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "january_miles = 5936\napril_miles = 1937\n\ntotal_miles = january_miles + april_miles\nprint(total_miles)",
        "execution": "7873",
        "error": "None",
        "extraction": "7873",
        "prediction": "7873",
        "true_false": true
    },
    "333": {
        "question": "Find tan X",
        "image": "images/333.jpg",
        "choices": [
            "\\frac { 5 } { 12 }",
            "\\frac { 12 } { 13 }",
            "\\frac { 17 } { 12 }",
            "\\frac { 12 } { 5 }"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac { 5 } { 12 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "333",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 297,
            "img_height": 149,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([144, 48], '13')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find tan X\nChoices:\n(A) \\frac { 5 } { 12 }\n(B) \\frac { 12 } { 13 }\n(C) \\frac { 17 } { 12 }\n(D) \\frac { 12 } { 5 }\nImage detected text: [([144, 48], '13')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nx = math.atan(12/5)\ntan_x = math.tan(x)\n\nprint(tan_x)",
        "execution": "2.3999999999999995",
        "error": "None",
        "extraction": "0.92",
        "prediction": "\\frac { 5 } { 12 }",
        "true_false": true
    },
    "334": {
        "question": "Are there fewer yellow metal tandem bikes in front of the small yellow metallic bicycle than metal bicycles on the left side of the large brown jet?",
        "image": "images/334.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "334",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([261, 222], '416')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer yellow metal tandem bikes in front of the small yellow metallic bicycle than metal bicycles on the left side of the large brown jet?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([261, 222], '416')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_tandem_bikes = 0\nmetal_bicycles_left = 416\n\nif yellow_tandem_bikes < metal_bicycles_left:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "335": {
        "question": "Subtract all large brown matte balls. Subtract all blue cylinders. How many objects are left?",
        "image": "images/335.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "335",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large brown matte balls. Subtract all blue cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_brown_matte_balls = 5\nblue_cylinders = 3\n\nobjects_left = large_brown_matte_balls - blue_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "336": {
        "question": "What is the value of the largest individual bar in the whole chart?",
        "image": "images/336.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "336",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([158, 12], 'Title'), ([39, 33], '10'), ([15, 179], '1'), ([349, 213], 'dish'), ([351, 239], 'wreath'), ([347, 259], 'heel'), ([276, 368], '1'), ([100, 403], 'curb'), ([130, 414], 'stereo'), ([163, 414], 'shook'), ([205, 406], 'cave'), ([70, 400], 'see')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest individual bar in the whole chart?\nImage detected text: [([158, 12], 'Title'), ([39, 33], '10'), ([15, 179], '1'), ([349, 213], 'dish'), ([351, 239], 'wreath'), ([347, 259], 'heel'), ([276, 368], '1'), ([100, 403], 'curb'), ([130, 414], 'stereo'), ([163, 414], 'shook'), ([205, 406], 'cave'), ([70, 400], 'see')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [10, 1, 1]\nmax_value = max(values)\nprint(max_value)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "337": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) to eight.",
        "image": "images/337.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "337",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 95,
            "img_height": 95,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([50, 34], '45')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) to eight.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([50, 34], '45')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter to\"\nprint(time_word)",
        "execution": "quarter to",
        "error": "None",
        "extraction": "quarter to",
        "prediction": "quarter to",
        "true_false": false
    },
    "338": {
        "question": "In triangle ABC above, AB = AC, E is the midpoint of line AB, and D is the midpoint of line AC. If AE = x and ED = 4, what is length BC?",
        "image": "images/338.jpg",
        "choices": [
            "6",
            "8",
            "2*x",
            "4*x",
            "4*x^2"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "338",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 121,
            "img_height": 167,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In triangle ABC above, AB = AC, E is the midpoint of line AB, and D is the midpoint of line AC. If AE = x and ED = 4, what is length BC?\nChoices:\n(A) 6\n(B) 8\n(C) 2*x\n(D) 4*x\n(E) 4*x^2\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nx = sp.Symbol('x')\nBC = sp.Symbol('BC')\n\n# Define the equations\neq1 = sp.Eq(BC, 2*x)\neq2 = sp.Eq(BC, 4*(x+4))\n\n# Solve the equations\nsolution = sp.solve((eq1, eq2), (BC, x))\n\n# Print the solution\nprint(solution)",
        "execution": "{BC: -16, x: -8}",
        "error": "None",
        "extraction": "[8, 4]",
        "prediction": "8",
        "true_false": true
    },
    "339": {
        "question": "\u5982\u56fe\uff0c\u5728\u2299O\u4e2d\uff0cAB=AC\uff0c\u2220BAC\uff1d70\u00b0\uff0c\u5219\u2220AEC\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/339.jpg",
        "choices": [
            "65\u00b0",
            "75\u00b0",
            "50\u00b0",
            "55\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "55\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "339",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 115,
            "img_height": 112,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u2299O\u4e2d\uff0cAB=AC\uff0c\u2220BAC\uff1d70\u00b0\uff0c\u5219\u2220AEC\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 65\u00b0\n(B) 75\u00b0\n(C) 50\u00b0\n(D) 55\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_BAC = 70\n    angle_ACB = (180 - angle_BAC) / 2\n    angle_AEC = 180 - angle_ACB - angle_BAC\n    return angle_AEC\n\nprint(find_angle())",
        "execution": "55.0",
        "error": "None",
        "extraction": "55",
        "prediction": "55\u00b0",
        "true_false": true
    },
    "340": {
        "question": "Which of the following domains has the most number of BPE Tokens?",
        "image": "images/340.jpg",
        "choices": [
            "Legal ",
            "Code ",
            "Conversational ",
            "Math ",
            "Science",
            "Books ",
            "News ",
            "Encyclopedic"
        ],
        "unit": null,
        "precision": null,
        "answer": "Science",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "340",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2142,
            "img_height": 1176,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([177, 39], 'Domain'), ([497, 37], 'Sources'), ([1250, 36], 'Specific License'), ([1630, 35], '#BPE Tokens (B)'), ([498, 106], 'PD Case Law, Pile of Law (PD subset)'), ([1251, 107], 'Public Domain'), ([1855, 109], '27.1'), ([176, 132], 'Legal'), ([498, 162], 'BY Pile of Law (CC BY-SA subset)'), ([1253, 163], 'CC BYSA'), ([1879, 167], '0.07'), ([179, 235], 'Code'), ([498, 234], 'SW Github (permissive)'), ([1251, 231], 'MITMSDIApache'), ([1855, 237], '58.9'), ([498, 304], 'SW HackerNews, Ubuntu RRC'), ([1252, 306], 'MITIApache'), ([1877, 307], '5.9'), ([179, 329], 'Conversational'), ([497, 355], 'BY Stack Overflow, Stack Exchange'), ([1253, 361], 'CC BYSA'), ([1855, 363], '21.3'), ([178, 435], 'Math'), ([499, 441], 'SW'), ([561, 431], 'Deepmind Math; AMPS'), ([1254, 434], 'Apache'), ([1877, 437], '3.5'), ([498, 503], 'PD ArXiv abstracts , S2ORC (PD subset)'), ([1250, 503], 'Public Domain'), ([1879, 507], '1.2'), ([179, 527], 'Science'), ([498, 557], 'BY S2ORC (CC BY-SA subset)'), ([1253, 559], 'CC BYSA'), ([1855, 561], '70.3'), ([177, 633], 'Books'), ([499, 639], 'PD'), ([555, 623], 'Gutenberg'), ([1250, 629], 'Public Domain'), ([1877, 635], '2.9'), ([499, 703], 'PD Public domain news'), ([1250, 701], 'Public Domain'), ([1879, 707], '0.2'), ([179, 729], 'News'), ([500, 755], 'BY Wikinews'), ([1253, 757], 'CC BYSA'), ([1879, 759], '0.01'), ([176, 830], 'Encyclopedic'), ([498, 828], 'BY Wikipedia'), ([1253, 829], 'CC BYSA'), ([1855, 831], '37.0'), ([13, 925], 'Table 1: Overview statistics of OLC. PD, SWS'), ([1066, 928], 'and BY indicates'), ([1442, 918], 'public domain data, data under'), ([7, 979], 'permissive software licenses, and data under attribution licenses, respectively: Some corpora contain'), ([15, 1043], 'a mixture of different licenses (e.g-, Pile of Law and SZORC), which we split into subsets based on'), ([8, 1094], 'per-document licenses. BPE tokens are based on the GPT-NeoX tokenizer (Black et al,, 2022).')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the following domains has the most number of BPE Tokens?\nChoices:\n(A) Legal \n(B) Code \n(C) Conversational \n(D) Math \n(E) Science\n(F) Books \n(G) News \n(H) Encyclopedic\nImage detected text: [([177, 39], 'Domain'), ([497, 37], 'Sources'), ([1250, 36], 'Specific License'), ([1630, 35], '#BPE Tokens (B)'), ([498, 106], 'PD Case Law, Pile of Law (PD subset)'), ([1251, 107], 'Public Domain'), ([1855, 109], '27.1'), ([176, 132], 'Legal'), ([498, 162], 'BY Pile of Law (CC BY-SA subset)'), ([1253, 163], 'CC BYSA'), ([1879, 167], '0.07'), ([179, 235], 'Code'), ([498, 234], 'SW Github (permissive)'), ([1251, 231], 'MITMSDIApache'), ([1855, 237], '58.9'), ([498, 304], 'SW HackerNews, Ubuntu RRC'), ([1252, 306], 'MITIApache'), ([1877, 307], '5.9'), ([179, 329], 'Conversational'), ([497, 355], 'BY Stack Overflow, Stack Exchange'), ([1253, 361], 'CC BYSA'), ([1855, 363], '21.3'), ([178, 435], 'Math'), ([499, 441], 'SW'), ([561, 431], 'Deepmind Math; AMPS'), ([1254, 434], 'Apache'), ([1877, 437], '3.5'), ([498, 503], 'PD ArXiv abstracts , S2ORC (PD subset)'), ([1250, 503], 'Public Domain'), ([1879, 507], '1.2'), ([179, 527], 'Science'), ([498, 557], 'BY S2ORC (CC BY-SA subset)'), ([1253, 559], 'CC BYSA'), ([1855, 561], '70.3'), ([177, 633], 'Books'), ([499, 639], 'PD'), ([555, 623], 'Gutenberg'), ([1250, 629], 'Public Domain'), ([1877, 635], '2.9'), ([499, 703], 'PD Public domain news'), ([1250, 701], 'Public Domain'), ([1879, 707], '0.2'), ([179, 729], 'News'), ([500, 755], 'BY Wikinews'), ([1253, 757], 'CC BYSA'), ([1879, 759], '0.01'), ([176, 830], 'Encyclopedic'), ([498, 828], 'BY Wikipedia'), ([1253, 829], 'CC BYSA'), ([1855, 831], '37.0'), ([13, 925], 'Table 1: Overview statistics of OLC. PD, SWS'), ([1066, 928], 'and BY indicates'), ([1442, 918], 'public domain data, data under'), ([7, 979], 'permissive software licenses, and data under attribution licenses, respectively: Some corpora contain'), ([15, 1043], 'a mixture of different licenses (e.g-, Pile of Law and SZORC), which we split into subsets based on'), ([8, 1094], 'per-document licenses. BPE tokens are based on the GPT-NeoX tokenizer (Black et al,, 2022).')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_bpe_tokens(text):\n    domains = {\n        'Legal': 0,\n        'Code': 0,\n        'Conversational': 0,\n        'Math': 0,\n        'Science': 0,\n        'Books': 0,\n        'News': 0,\n        'Encyclopedic': 0\n    }\n\n    for line in text:\n        if line[1] in domains:\n            domains[line[1]] += float(line[0])\n\n    max_tokens = max(domains.values())\n    for domain, tokens in domains.items():\n        if tokens == max_tokens:\n            return domain\n\ntext = [([177, 39], 'Domain'), ([497, 37], 'Sources'), ([1250, 36], 'Specific License'), ([1630, 35], '#BPE Tokens (B)'), ([498, 106], 'PD Case Law, Pile of Law (PD subset)'), ([1251, 107], 'Public Domain'), ([1855, 109], '27.1'), ([176, 132], 'Legal'), ([498, 162], 'BY Pile of Law (CC BY-SA subset)'), ([1253, 163], 'CC BYSA'), ([1879, 167], '0.07'), ([179, 235], 'Code'), ([498, 234], 'SW Github (permissive)'), ([1251, 231], 'MITMSDIApache'), ([1855, 237], '58.9'), ([498, 304], 'SW HackerNews, Ubuntu RRC'), ([1252, 306], 'MITIApache'), ([1877, 307], '5.9'), ([179, 329], 'Conversational'), ([497, 355], 'BY Stack Overflow, Stack Exchange'), ([1253, 361], 'CC BYSA'), ([1855, 363], '21.3'), ([178, 435], 'Math'), ([499, 441], 'SW'), ([561, 431], 'Deepmind Math; AMPS'), ([1254, 434], 'Apache'), ([1877, 437], '3.5'), ([498, 503], 'PD ArXiv abstracts , S2ORC (PD subset)'), ([1250, 503], 'Public Domain'), ([1879, 507], '1.2'), ([179, 527], 'Science'), ([498, 557], 'BY S2ORC (CC BY-SA subset)'), ([1253, 559], 'CC BYSA'), ([1855, 561], '70.3'), ([177, 633], 'Books'), ([499, 639], 'PD'), ([555, 623], 'Gutenberg'), ([1250, 629], 'Public Domain'), ([1877, 635], '2.9'), ([499, 703], 'PD Public domain news'), ([1250, 701], 'Public Domain'), ([1879, 707], '0.2'), ([179, 729], 'News'), ([500, 755], 'BY Wikinews'), ([1253, 757], 'CC BYSA'), ([1879, 759], '0.01'), ([176, 830], 'Encyclopedic'), ([498, 828], 'BY Wikipedia'), ([1253, 829], 'CC BYSA'), ([1855, 831], '37.0'), ([13, 925], 'Table 1: Overview statistics of OLC. PD, SWS'), ([1066, 928], 'and BY indicates'), ([1442, 918], 'public domain data, data under'), ([7, 979], 'permissive software licenses, and data under attribution licenses, respectively: Some corpora contain'), ([15, 1043], 'a mixture of different licenses (e.g-, Pile of Law and SZORC), which we split into subsets based on'), ([8, 1094], 'per-document licenses. BPE tokens are based on the GPT-NeoX tokenizer (Black et al,, 2022).')]\n\nprint(count_bpe_tokens(text))",
        "execution": "",
        "error": "float() argument must be a string or a number, not 'list'",
        "extraction": "Science",
        "prediction": "Science",
        "true_false": true
    },
    "341": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is six (_).",
        "image": "images/341.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "o'clock",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "341",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 95,
            "img_height": 95,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is six (_).\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef find_time_word(caption):\n    time_words = ['half', 'quarter', 'o\\'clock', 'to', 'past']\n\n    for word in time_words:\n        if re.search(r'\\b' + word + r'\\b', caption):\n            return word\n    return \"\"\n\ncaption = \"The clock in the image shows the time as six o'clock.\"\nprint(find_time_word(caption))",
        "execution": "o'clock",
        "error": "None",
        "extraction": "o'clock",
        "prediction": "o'clock",
        "true_false": true
    },
    "342": {
        "question": "In the figure above, which of the following is the greatest?",
        "image": "images/342.jpg",
        "choices": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ],
        "unit": null,
        "precision": null,
        "answer": "d",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "342",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 405,
            "img_height": 299,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 170], 'In the figure above. which of the following is greatest?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, which of the following is the greatest?\nChoices:\n(A) a\n(B) b\n(C) c\n(D) d\n(E) e\nImage detected text: [([43, 170], 'In the figure above. which of the following is greatest?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def greatest_value(choices):\n    greatest = choices[0]\n    for choice in choices:\n        if choice > greatest:\n            greatest = choice\n    return greatest\n\nchoices = ['a', 'b', 'c', 'd', 'e']\nprint(greatest_value(choices))",
        "execution": "e",
        "error": "None",
        "extraction": "e",
        "prediction": "e",
        "true_false": false
    },
    "343": {
        "question": "Subtract all small purple metallic spheres. Subtract all small purple things. How many objects are left?",
        "image": "images/343.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "343",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small purple metallic spheres. Subtract all small purple things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_purple_metallic_spheres = 10\nsmall_purple_things = 5\n\nobjects_left = small_purple_metallic_spheres - small_purple_things\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "344": {
        "question": "Is the number of metal cars that are left of the tiny matte school bus greater than the number of tiny cyan double buss?",
        "image": "images/344.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "344",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([166, 282], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of metal cars that are left of the tiny matte school bus greater than the number of tiny cyan double buss?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([166, 282], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "metal_cars_left = 1\ntiny_cyan_double_buss = 0\n\nif metal_cars_left > tiny_cyan_double_buss:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "345": {
        "question": "How many kites are there?",
        "image": "images/345.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "25",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "345",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 711,
            "img_height": 429,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many kites are there?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_kites(image_text):\n    count = 0\n    for word in image_text:\n        if word.lower() == 'kite' or word.lower() == 'kites':\n            count += 1\n    return count\n\nimage_text = ['There', 'are', 'three', 'kites', 'flying', 'in', 'the', 'sky']\nprint(count_kites(image_text))",
        "execution": "1",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "346": {
        "question": "What is the y-intercept of this function?",
        "image": "images/346.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "346",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 341,
            "img_height": 339,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the y-intercept of this function?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([3, 5, 7, 9, 11])\n\nslope, intercept = np.polyfit(x, y, 1)\n\nprint(intercept)",
        "execution": "0.9999999999999996",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "347": {
        "question": "Is the number of green metallic double buss less than the number of big purple rubber cruisers?",
        "image": "images/347.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "347",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of green metallic double buss less than the number of big purple rubber cruisers?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_buses(green_buses, purple_cruisers):\n    if green_buses < purple_cruisers:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ngreen_buses = 10\npurple_cruisers = 5\n\nprint(compare_buses(green_buses, purple_cruisers))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "348": {
        "question": "Are the pieces in triangle cuts?",
        "image": "images/348.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "348",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 375,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are the pieces in triangle cuts?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def triangle_cuts(pieces):\n    for piece in pieces:\n        if \"triangle\" not in piece:\n            return \"No\"\n    return \"Yes\"\n\npieces = [\"triangle\", \"square\", \"circle\", \"triangle\"]\nprint(triangle_cuts(pieces))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "349": {
        "question": "Which capability boasts the highest proportion (%)?",
        "image": "images/349.jpg",
        "choices": [
            "Rec",
            "OCR",
            "Know",
            "Gen",
            "Spat",
            "Math"
        ],
        "unit": null,
        "precision": null,
        "answer": "Rec",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "349",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1704,
            "img_height": 1348,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([85, 17], '80'), ([323, 45], '68.8'), ([33, 81], '8 60'), ([541, 155], '44.0'), ([88, 196], '40'), ([757, 179], '38.5'), ([973, 187], '36.7'), ([1189, 197], '34.4'), ([35, 147], '['), ([87, 281], '20'), ([1405, 297], '11.9'), ([332, 402], 'Rec'), ([541, 399], 'OCR'), ([749, 399], 'Know'), ([975, 399], 'Gen'), ([1185, 397], 'Spat'), ([1403, 399], 'Math'), ([249, 433], '(Recognition)'), ([687, 433], '(Knowledge)'), ([917, 431], '(Language'), ([1159, 433], '(Spatial'), ([912, 469], 'generation)'), ([1131, 473], 'awareness)'), ([871, 511], '(a)'), ([87, 615], '30'), ([195, 609], '28.4'), ([35, 631], '8'), ([85, 715], '20'), ([287, 725], '17.0'), ([35, 693], '['), ([88, 818], '10'), ([375, 775], '11.9'), ([473, 831], '6.4'), ([564, 842], '5.5'), ([652, 842], '5.5'), ([741, 845], '5.0'), ([832, 856], '4.1'), ([919, 857], '3.7'), ([1010, 860], '3.7'), ([1097, 863], '3.2'), ([1187, 877], '1.8'), ([1276, 884], '1.4'), ([1363, 887], '0.9'), ([1453, 887], '0.9'), ([1541, 891], '0.5'), ([204, 948], 'Rec'), ([294, 948], 'Rec'), ([375, 945], 'OCR'), ([465, 945], 'OCR'), ([562, 948], 'Rec'), ([643, 945], 'OCR'), ([731, 945], 'OCR'), ([828, 948], 'Rec'), ([918, 948], 'Rec'), ([1006, 948], 'Rec'), ([1096, 948], 'Rec'), ([1184, 948], 'Rec'), ([1265, 945], 'OCR'), ([1364, 948], 'Rec'), ([1445, 945], 'OCR'), ([1540, 948], 'Rec'), ([189, 981], 'Know'), ([371, 981], 'Spat Spat Spat'), ([729, 980], 'Math Know OCR'), ([999, 981], 'OCR'), ([1087, 981], 'OCR'), ([1177, 981], 'OCR KnowKnow Gen'), ([1533, 981], 'OCR'), ([200, 1020], 'Gen'), ([461, 1019], 'Math'), ([900, 1017], 'Know Gen'), ([1085, 1019], 'Spat'), ([1261, 1017], 'Spat Spat Spat Spat'), ([913, 1053], 'Gen Spat'), ([1529, 1055], 'Math'), ([873, 1093], '(b)'), ([5, 1183], 'Figure 2: MM-Vet proportion of capabilities. (a) The proportion of each capability:'), ([1481, 1191], 'The sum of'), ([7, 1232], 'the proportion is larger than 100% because most samples have more than one capability (b) The'), ([3, 1273], 'proportion of capability integrations The sum of the proportion is equivalent to 1009.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which capability boasts the highest proportion (%)?\nChoices:\n(A) Rec\n(B) OCR\n(C) Know\n(D) Gen\n(E) Spat\n(F) Math\nImage detected text: [([85, 17], '80'), ([323, 45], '68.8'), ([33, 81], '8 60'), ([541, 155], '44.0'), ([88, 196], '40'), ([757, 179], '38.5'), ([973, 187], '36.7'), ([1189, 197], '34.4'), ([35, 147], '['), ([87, 281], '20'), ([1405, 297], '11.9'), ([332, 402], 'Rec'), ([541, 399], 'OCR'), ([749, 399], 'Know'), ([975, 399], 'Gen'), ([1185, 397], 'Spat'), ([1403, 399], 'Math'), ([249, 433], '(Recognition)'), ([687, 433], '(Knowledge)'), ([917, 431], '(Language'), ([1159, 433], '(Spatial'), ([912, 469], 'generation)'), ([1131, 473], 'awareness)'), ([871, 511], '(a)'), ([87, 615], '30'), ([195, 609], '28.4'), ([35, 631], '8'), ([85, 715], '20'), ([287, 725], '17.0'), ([35, 693], '['), ([88, 818], '10'), ([375, 775], '11.9'), ([473, 831], '6.4'), ([564, 842], '5.5'), ([652, 842], '5.5'), ([741, 845], '5.0'), ([832, 856], '4.1'), ([919, 857], '3.7'), ([1010, 860], '3.7'), ([1097, 863], '3.2'), ([1187, 877], '1.8'), ([1276, 884], '1.4'), ([1363, 887], '0.9'), ([1453, 887], '0.9'), ([1541, 891], '0.5'), ([204, 948], 'Rec'), ([294, 948], 'Rec'), ([375, 945], 'OCR'), ([465, 945], 'OCR'), ([562, 948], 'Rec'), ([643, 945], 'OCR'), ([731, 945], 'OCR'), ([828, 948], 'Rec'), ([918, 948], 'Rec'), ([1006, 948], 'Rec'), ([1096, 948], 'Rec'), ([1184, 948], 'Rec'), ([1265, 945], 'OCR'), ([1364, 948], 'Rec'), ([1445, 945], 'OCR'), ([1540, 948], 'Rec'), ([189, 981], 'Know'), ([371, 981], 'Spat Spat Spat'), ([729, 980], 'Math Know OCR'), ([999, 981], 'OCR'), ([1087, 981], 'OCR'), ([1177, 981], 'OCR KnowKnow Gen'), ([1533, 981], 'OCR'), ([200, 1020], 'Gen'), ([461, 1019], 'Math'), ([900, 1017], 'Know Gen'), ([1085, 1019], 'Spat'), ([1261, 1017], 'Spat Spat Spat Spat'), ([913, 1053], 'Gen Spat'), ([1529, 1055], 'Math'), ([873, 1093], '(b)'), ([5, 1183], 'Figure 2: MM-Vet proportion of capabilities. (a) The proportion of each capability:'), ([1481, 1191], 'The sum of'), ([7, 1232], 'the proportion is larger than 100% because most samples have more than one capability (b) The'), ([3, 1273], 'proportion of capability integrations The sum of the proportion is equivalent to 1009.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_proportion = 0\ncapability = \"\"\n\nfor text in detected_text:\n    if text[1] in choices:\n        proportion = float(text[1])\n        if proportion > highest_proportion:\n            highest_proportion = proportion\n            capability = text[1]\n\nprint(capability)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "OCR",
        "prediction": "OCR",
        "true_false": false
    },
    "350": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/350.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "350",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 89,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 59], 'Ocmn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 59], 'Ocmn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(line_length):\n    nearest_cm = round(line_length)\n    return nearest_cm\n\nline_length = 5.7\nnearest_cm = measure_length(line_length)\nprint(nearest_cm)",
        "execution": "6",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "351": {
        "question": "Are there fewer purple rubber objects that are to the left of the red object than tiny matte bicycles?",
        "image": "images/351.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "351",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer purple rubber objects that are to the left of the red object than tiny matte bicycles?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_purple_rubber_objects(objects):\n    count = 0\n    for obj in objects:\n        if obj == \"purple rubber\":\n            count += 1\n        elif obj == \"red\":\n            break\n    return count\n\ndef count_tiny_matte_bicycles(objects):\n    count = 0\n    for obj in objects:\n        if obj == \"tiny matte bicycle\":\n            count += 1\n    return count\n\nobjects = [\"purple rubber\", \"purple rubber\", \"red\", \"tiny matte bicycle\", \"tiny matte bicycle\", \"tiny matte bicycle\"]\npurple_rubber_count = count_purple_rubber_objects(objects)\nbicycles_count = count_tiny_matte_bicycles(objects)\n\nif purple_rubber_count < bicycles_count:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "352": {
        "question": "How many people will fit in the smaller vehicle?",
        "image": "images/352.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "352",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([125, 207], 'Bus'), ([36, 214], 'Electric'), ([102, 232], 'asu'), ([77, 212], 'Hybrid '), ([38, 238], 'Deadnnla')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people will fit in the smaller vehicle?\nImage detected text: [([125, 207], 'Bus'), ([36, 214], 'Electric'), ([102, 232], 'asu'), ([77, 212], 'Hybrid '), ([38, 238], 'Deadnnla')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smaller_vehicle_capacity = 0\n\nfor text in detected_text:\n    if \"Bus\" in text:\n        smaller_vehicle_capacity = 20\n    elif \"Electric\" in text:\n        smaller_vehicle_capacity = 4\n    elif \"Hybrid\" in text:\n        smaller_vehicle_capacity = 5\n\nprint(smaller_vehicle_capacity)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "20",
        "prediction": "20",
        "true_false": false
    },
    "353": {
        "question": "At time $t=0$ a tank contains $Q_0 \\mathrm{lb}$ of salt dissolved in 100 gal of water; see Figure 2.3.1. Assume that water containing $\\frac{1}{4} \\mathrm{lb}$ of salt/gal is entering the tank at a rate of $r \\mathrm{gal} / \\mathrm{min}$ and that the well-stirred mixture is draining from the tank at the same rate. Set up the initial value problem that describes this flow process. By finding the amount of salt $Q(t)$ in the tank at any time, and the limiting amount $Q_L$ that is present after a very long time, if $r=3$ and $Q_0=2 Q_L$, find the time $T$ after which the salt level is within $2 \\%$ of $Q_L$. ",
        "image": "images/353.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "130.4",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "353",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 996,
            "img_height": 938,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "arithmetic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([74, 41], 'rgalmin, 4 Iblgal'), ([694, 561], 'rgallmin'), ([115, 845], 'FIGURE 2.31'), ([414, 846], 'The water tank in Example 1.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: At time $t=0$ a tank contains $Q_0 \\mathrm{lb}$ of salt dissolved in 100 gal of water; see Figure 2.3.1. Assume that water containing $\\frac{1}{4} \\mathrm{lb}$ of salt/gal is entering the tank at a rate of $r \\mathrm{gal} / \\mathrm{min}$ and that the well-stirred mixture is draining from the tank at the same rate. Set up the initial value problem that describes this flow process. By finding the amount of salt $Q(t)$ in the tank at any time, and the limiting amount $Q_L$ that is present after a very long time, if $r=3$ and $Q_0=2 Q_L$, find the time $T$ after which the salt level is within $2 \\%$ of $Q_L$. \nImage detected text: [([74, 41], 'rgalmin, 4 Iblgal'), ([694, 561], 'rgallmin'), ([115, 845], 'FIGURE 2.31'), ([414, 846], 'The water tank in Example 1.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nt = sp.symbols('t')\nQ = sp.Function('Q')(t)\nQ_L = sp.symbols('Q_L')\nr = 3\nQ_0 = 2 * Q_L\n\n# Define the differential equation\ndQ_dt = r - (r * Q) / 100\node = sp.Eq(sp.Derivative(Q, t), dQ_dt)\n\n# Solve the differential equation\nsolution = sp.dsolve(ode, Q)\nC1 = sp.symbols('C1')\nconstant_eq = sp.Eq(solution.rhs.subs(t, 0), Q_0)\nC1_value = sp.solve(constant_eq, C1)[0]\nsolution = solution.subs(C1, C1_value)\n\n# Find the limiting amount Q_L\nQ_L_value = sp.limit(solution.rhs, t, sp.oo)\n\n# Find the time T when the salt level is within 2% of Q_L\nT_eq = sp.Eq(solution.rhs, (1 - 0.02) * Q_L_value)\nT = sp.solve(T_eq, t)[0]\n\nQ_L_value, T",
        "execution": "",
        "error": "None",
        "extraction": "Q_L_value: 6.0, T: 4.60517018598809",
        "prediction": null,
        "true_false": false
    },
    "354": {
        "question": "How many algorithms have accuracies higher than 90?",
        "image": "images/354.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "354",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([119, 10], 'Accuracy of different algorithms'), ([35, 29], '100'), ([14, 186], '0'), ([45, 317], '20'), ([111, 413], 'array'), ([343, 415], 'parent')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracies higher than 90?\nImage detected text: [([119, 10], 'Accuracy of different algorithms'), ([35, 29], '100'), ([14, 186], '0'), ([45, 317], '20'), ([111, 413], 'array'), ([343, 415], 'parent')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [100, 0, 20]\ncount = 0\n\nfor accuracy in accuracies:\n    if accuracy > 90:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "355": {
        "question": "As shown in the figure, the parallel lines a and b are intercepted by the straight line c. If \u22201 = 50.0, then the degree of \u22202 is ()",
        "image": "images/355.jpg",
        "choices": [
            "150\u00b0",
            "130\u00b0",
            "110\u00b0",
            "100\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "130\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "355",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 157,
            "img_height": 110,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the parallel lines a and b are intercepted by the straight line c. If \u22201 = 50.0, then the degree of \u22202 is ()\nChoices:\n(A) 150\u00b0\n(B) 130\u00b0\n(C) 110\u00b0\n(D) 100\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_angle(angle1):\n    angle2 = 180 - angle1\n    return angle2\n\nangle1 = 50.0\nangle2 = find_angle(angle1)\nprint(angle2)",
        "execution": "130.0",
        "error": "None",
        "extraction": "130",
        "prediction": "130\u00b0",
        "true_false": true
    },
    "356": {
        "question": "Are there fewer big motorbikes than rubber choppers?",
        "image": "images/356.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "356",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer big motorbikes than rubber choppers?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_motorbikes = 10\nrubber_choppers = 15\n\nif big_motorbikes < rubber_choppers:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "357": {
        "question": "Is Salmon the roughest?",
        "image": "images/357.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "357",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 677,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([85, 127], 'Dark Cyan'), ([83, 149], 'Yellow'), ([7, 155], '9'), ([83, 173], 'Indigo'), ([85, 195], 'Salmon'), ([9, 191], '1'), ([85, 217], 'Medium Mint'), ([85, 241], 'Medium Turquoise'), ([633, 363], '100'), ([325, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Salmon the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([85, 127], 'Dark Cyan'), ([83, 149], 'Yellow'), ([7, 155], '9'), ([83, 173], 'Indigo'), ([85, 195], 'Salmon'), ([9, 191], '1'), ([85, 217], 'Medium Mint'), ([85, 241], 'Medium Turquoise'), ([633, 363], '100'), ([325, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_salmon_roughest(image_text):\n    for text in image_text:\n        if text[1] == 'Salmon':\n            return 'yes'\n    return 'no'\n\nimage_text = [([49, 11], 'title'), ([85, 127], 'Dark Cyan'), ([83, 149], 'Yellow'), ([7, 155], '9'), ([83, 173], 'Indigo'), ([85, 195], 'Salmon'), ([9, 191], '1'), ([85, 217], 'Medium Mint'), ([85, 241], 'Medium Turquoise'), ([633, 363], '100'), ([325, 383], 'raxis label')]\n\nprint(is_salmon_roughest(image_text))",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "358": {
        "question": "Which of the cubes is the same as the unfolded cube?",
        "image": "images/358.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "358",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 326,
            "img_height": 517,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the cubes is the same as the unfolded cube?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def same_cube(unfolded_cube, choices):\n    for choice in choices:\n        if unfolded_cube == choice:\n            return choice\n    return \"\"\n\nunfolded_cube = 'A'\nchoices = ['A', 'B', 'C', 'D', 'E']\n\nprint(same_cube(unfolded_cube, choices))",
        "execution": "A",
        "error": "None",
        "extraction": "A",
        "prediction": "A",
        "true_false": true
    },
    "359": {
        "question": "Kylie spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Thursday and Friday? (Unit: shells per day)",
        "image": "images/359.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "359",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 241,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([55, 5], 'Shells Kylie found'), ([111, 37], 'Number of shells'), ([5, 64], 'Monday'), ([8, 98], 'Tuesday'), ([7, 128], 'Wednesday'), ([8, 160], 'Thursday'), ([6, 190], 'Friday'), ([37, 36], 'Day')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Kylie spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Thursday and Friday? (Unit: shells per day)\nImage detected text: [([55, 5], 'Shells Kylie found'), ([111, 37], 'Number of shells'), ([5, 64], 'Monday'), ([8, 98], 'Tuesday'), ([7, 128], 'Wednesday'), ([8, 160], 'Thursday'), ([6, 190], 'Friday'), ([37, 36], 'Day')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "shells_thursday = 8\nshells_friday = 6\n\nrate_of_change = shells_friday - shells_thursday\nprint(rate_of_change)",
        "execution": "-2",
        "error": "None",
        "extraction": "-2",
        "prediction": "-2",
        "true_false": false
    },
    "360": {
        "question": "If $\\frac{I J}{X J}=\\frac{HJ}{YJ}, m \\angle W X J=130$\r\nand $m \\angle WZG=20,$ find $m \\angle YIZ$",
        "image": "images/360.jpg",
        "choices": [
            "40",
            "50",
            "65",
            "110"
        ],
        "unit": null,
        "precision": null,
        "answer": "50",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "360",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 721,
            "img_height": 370,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([322, 150], 'H'), ([543, 159], '20'), ([159, 219], '130\"'), ([111, 273], 'W   X'), ([443, 275], 'Y'), ([499, 277], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If $\\frac{I J}{X J}=\\frac{HJ}{YJ}, m \\angle W X J=130$\r\nand $m \\angle WZG=20,$ find $m \\angle YIZ$\nChoices:\n(A) 40\n(B) 50\n(C) 65\n(D) 110\nImage detected text: [([322, 150], 'H'), ([543, 159], '20'), ([159, 219], '130\"'), ([111, 273], 'W   X'), ([443, 275], 'Y'), ([499, 277], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nIJ, XJ, HJ, YJ, WY, WZG, YIZ = sp.symbols('IJ XJ HJ YJ WY WZG YIZ')\n\n# Set up the equation\neq = sp.Eq((IJ / XJ), (HJ / YJ))\neq = eq.subs(IJ, WY + YIZ)\neq = eq.subs(XJ, WY)\neq = eq.subs(HJ, WZG)\neq = eq.subs(YJ, WY + YIZ)\n\n# Solve for YIZ\nsolution = sp.solve(eq.subs(WZG, 20).subs(WY, 130).subs(YIZ, YIZ), YIZ)\nangle_YIZ = solution[0]\n\nangle_YIZ",
        "execution": "",
        "error": "None",
        "extraction": "40",
        "prediction": "40",
        "true_false": false
    },
    "361": {
        "question": " In which part of the mold are the cylindrical ports located? ",
        "image": "images/361.jpg",
        "choices": [
            "Upper half",
            "Lower half",
            "Medial half",
            "Lateral half"
        ],
        "unit": null,
        "precision": null,
        "answer": "Lower half",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "361",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 596,
            "img_height": 435,
            "source": "PMC-VQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "medical image",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion:  In which part of the mold are the cylindrical ports located? \nChoices:\n(A) Upper half\n(B) Lower half\n(C) Medial half\n(D) Lateral half\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_cylindrical_ports(mold):\n    if \"cylindrical ports\" in mold:\n        if \"upper half\" in mold:\n            return \"Upper half\"\n        elif \"lower half\" in mold:\n            return \"Lower half\"\n        elif \"medial half\" in mold:\n            return \"Medial half\"\n        elif \"lateral half\" in mold:\n            return \"Lateral half\"\n    return \"\"\n\nmold = \"The mold has cylindrical ports located in the upper half.\"\nprint(find_cylindrical_ports(mold))",
        "execution": "Upper half",
        "error": "None",
        "extraction": "Upper half",
        "prediction": "Upper half",
        "true_false": false
    },
    "362": {
        "question": "Subtract all cyan cylinders. Subtract all tiny purple rubber objects. How many objects are left?",
        "image": "images/362.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "362",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all cyan cylinders. Subtract all tiny purple rubber objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "cyan_cylinders = 5\ntiny_purple_rubber_objects = 3\n\nobjects_left = cyan_cylinders - tiny_purple_rubber_objects\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "363": {
        "question": "Subtract all tiny gray metal blocks. Subtract all purple things. How many objects are left?",
        "image": "images/363.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "363",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny gray metal blocks. Subtract all purple things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_gray_metal_blocks = 10\npurple_things = 5\n\nobjects_left = tiny_gray_metal_blocks - purple_things\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "364": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, and points C and D are on \u2299O. If \u2220ABD = 50.0, then the degree of \u2220BCD is ()",
        "image": "images/364.jpg",
        "choices": [
            "30\u00b0",
            "35\u00b0",
            "40\u00b0",
            "45\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "364",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 127,
            "img_height": 114,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, and points C and D are on \u2299O. If \u2220ABD = 50.0, then the degree of \u2220BCD is ()\nChoices:\n(A) 30\u00b0\n(B) 35\u00b0\n(C) 40\u00b0\n(D) 45\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_ABD):\n    angle_BCD = 180 - angle_ABD\n    return angle_BCD\n\nangle_ABD = 50.0\nangle_BCD = find_angle(angle_ABD)\nprint(angle_BCD)",
        "execution": "130.0",
        "error": "None",
        "extraction": "130.0",
        "prediction": "30\u00b0",
        "true_false": false
    },
    "365": {
        "question": "Subtract all big yellow metallic spheres. Subtract all tiny metal things. How many objects are left?",
        "image": "images/365.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "365",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big yellow metallic spheres. Subtract all tiny metal things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = ['big yellow metallic sphere', 'tiny metal thing', 'small blue plastic cube', 'medium red wooden block', 'large green glass bottle']\n\nbig_yellow_metallic_spheres = 0\ntiny_metal_things = 0\n\nfor obj in objects:\n    if obj == 'big yellow metallic sphere':\n        big_yellow_metallic_spheres += 1\n    elif obj == 'tiny metal thing':\n        tiny_metal_things += 1\n\nremaining_objects = len(objects) - big_yellow_metallic_spheres - tiny_metal_things\nprint(remaining_objects)",
        "execution": "3",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "366": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/366.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "366",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 250,
            "img_height": 320,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([39, 89], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([39, 89], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "age1 = 39\nage2 = 89\n\nage_gap = abs(age1 - age2)\nprint(age_gap)",
        "execution": "50",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "367": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/367.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "14",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "367",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 873,
            "img_height": 429,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([583, 27], 'KD'), ([738, 32], 'k'), ([421, 113], 'KIN '), ([591, 105], \"'ING\"), ([619, 87], 'DAVID'), ([735, 103], 'KI'), ([603, 127], 'PIISALEM'), ([735, 125], 'JD'), ([337, 139], 'LEM'), ([423, 133], 'JERUS -')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([583, 27], 'KD'), ([738, 32], 'k'), ([421, 113], 'KIN '), ([591, 105], \"'ING\"), ([619, 87], 'DAVID'), ([735, 103], 'KI'), ([603, 127], 'PIISALEM'), ([735, 125], 'JD'), ([337, 139], 'LEM'), ([423, 133], 'JERUS -')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 32\nperson2_age = 87\n\nage_gap = abs(person1_age - person2_age)\nprint(age_gap)",
        "execution": "55",
        "error": "None",
        "extraction": "55",
        "prediction": "55",
        "true_false": false
    },
    "368": {
        "question": "Is the number of yellow matte school buss greater than the number of big yellow metal cars?",
        "image": "images/368.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "368",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of yellow matte school buss greater than the number of big yellow metal cars?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(yellow_matte_school_buss, big_yellow_metal_cars):\n    if yellow_matte_school_buss > big_yellow_metal_cars:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nyellow_matte_school_buss = 10\nbig_yellow_metal_cars = 5\n\nprint(compare_numbers(yellow_matte_school_buss, big_yellow_metal_cars))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "369": {
        "question": "Is the function (f: R to R) surjective?",
        "image": "images/369.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "369",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 266,
            "img_height": 331,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([106, 16], '54'), ([151, 11], 'f(x) = x')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the function (f: R to R) surjective?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([106, 16], '54'), ([151, 11], 'f(x) = x')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = x\n\n# Check if the function is surjective\nis_surjective = sp.solve(sp.Eq(f, x), x)\nif is_surjective:\n    answer = \"(A) Yes\"\nelse:\n    answer = \"(B) No\"\n\nprint(answer)",
        "execution": "(B) No",
        "error": "None",
        "extraction": "A",
        "prediction": "Yes",
        "true_false": true
    },
    "370": {
        "question": "In the diagram of the food web shown, if the number of ferns decrease, the supply of salmon will most likely?",
        "image": "images/370.jpg",
        "choices": [
            "decrease",
            "can't tell",
            "stay same",
            "increase"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "370",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 880,
            "img_height": 680,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([435, 125], 'Woll,'), ([422, 138], 'CLAr'), ([418, 146], 'Cougar'), ([105, 225], 'Shrew'), ([570, 230], 'Inaccts-'), ([706, 230], 'Rirds:'), ([213, 231], 'Amphibians'), ([337, 231], 'Weasel'), ([452, 234], 'Bicemu'), ([556, 238], 'Girasshoppers'), ([706, 240], 'Haw'), ([109, 321], 'Small'), ([329, 323], 'Insects:'), ([98, 334], 'Mnmaks:'), ([217, 329], 'Salmon'), ([456, 330], 'Der'), ([719, 333], 'Bliejays'), ([104, 344], 'Rahbin'), ([292, 472], 'Fowcrs'), ([179, 477], 'FeIs'), ([588, 482], 'Docwor'), ([753, 485], 'Ceit')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the diagram of the food web shown, if the number of ferns decrease, the supply of salmon will most likely?\nChoices:\n(A) decrease\n(B) can't tell\n(C) stay same\n(D) increase\nImage detected text: [([435, 125], 'Woll,'), ([422, 138], 'CLAr'), ([418, 146], 'Cougar'), ([105, 225], 'Shrew'), ([570, 230], 'Inaccts-'), ([706, 230], 'Rirds:'), ([213, 231], 'Amphibians'), ([337, 231], 'Weasel'), ([452, 234], 'Bicemu'), ([556, 238], 'Girasshoppers'), ([706, 240], 'Haw'), ([109, 321], 'Small'), ([329, 323], 'Insects:'), ([98, 334], 'Mnmaks:'), ([217, 329], 'Salmon'), ([456, 330], 'Der'), ([719, 333], 'Bliejays'), ([104, 344], 'Rahbin'), ([292, 472], 'Fowcrs'), ([179, 477], 'FeIs'), ([588, 482], 'Docwor'), ([753, 485], 'Ceit')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_web(ferns_decrease):\n    if ferns_decrease:\n        return \"decrease\"\n    else:\n        return \"can't tell\"\n\nferns_decrease = True\n\nprint(food_web(ferns_decrease))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "371": {
        "question": "\u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ABC\uff1d90\u00b0\uff0c\u70b9D\u3001E\u3001F\u5206\u522b\u662f\u8fb9AB\u3001BC\u3001CA\u7684\u4e2d\u70b9\uff0c\u82e5DE+BF\uff1d8\uff0c\u5219BF\u7684\u503c\u4e3a\uff08\uff09",
        "image": "images/371.jpg",
        "choices": [
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "371",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 109,
            "img_height": 146,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ABC\uff1d90\u00b0\uff0c\u70b9D\u3001E\u3001F\u5206\u522b\u662f\u8fb9AB\u3001BC\u3001CA\u7684\u4e2d\u70b9\uff0c\u82e5DE+BF\uff1d8\uff0c\u5219BF\u7684\u503c\u4e3a\uff08\uff09\nChoices:\n(A) 3\n(B) 4\n(C) 5\n(D) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 2 * DE\nBC = 2 * BF\n\nDE + BF = 8\n2 * DE + 2 * BF = 16\nAB + BC = 16\n\nAB = BC\n2 * DE + 2 * BF = 16\n2 * DE + DE = 16\n3 * DE = 16\nDE = 16 / 3\n\nAB = 2 * DE\nAB = 2 * (16 / 3)\nAB = 32 / 3\n\nBC = 2 * BF\nBC = 2 * (16 / 3)\nBC = 32 / 3\n\nBF = BC / 2\nBF = (32 / 3) / 2\nBF = 16 / 3\n\nBF = 16 / 3\n\nTherefore, the value of BF is 16/3 or 5.33.",
        "execution": "",
        "error": "invalid syntax (<string>, line 28)",
        "extraction": "5.33",
        "prediction": "3",
        "true_false": false
    },
    "372": {
        "question": "Subtract all small gray spheres. Subtract all cylinders. How many objects are left?",
        "image": "images/372.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "372",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small gray spheres. Subtract all cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_gray_spheres = 10\ncylinders = 5\n\nobjects_left = small_gray_spheres - cylinders\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "373": {
        "question": "As shown in the figure, in the quadrilateral ABCD, \u2220BAD = 120.0, \u2220B = \u2220D = 90.0, if you find a point M on BC and CD respectively, so that the perimeter of \u25b3AMN is the smallest, then the degree of \u2220AMN + \u2220ANM is ()",
        "image": "images/373.jpg",
        "choices": [
            "110\u00b0",
            "120\u00b0",
            "140\u00b0",
            "150\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "120\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "373",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 122,
            "img_height": 161,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the quadrilateral ABCD, \u2220BAD = 120.0, \u2220B = \u2220D = 90.0, if you find a point M on BC and CD respectively, so that the perimeter of \u25b3AMN is the smallest, then the degree of \u2220AMN + \u2220ANM is ()\nChoices:\n(A) 110\u00b0\n(B) 120\u00b0\n(C) 140\u00b0\n(D) 150\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    # Given angles\n    angle_BAD = 120.0\n    angle_B = 90.0\n    angle_D = 90.0\n\n    # Calculate angle A\n    angle_A = 180 - angle_BAD - angle_B\n\n    # Calculate angle C\n    angle_C = 180 - angle_A - angle_D\n\n    # Calculate angle AMN\n    angle_AMN = angle_A / 2\n\n    # Calculate angle ANM\n    angle_ANM = angle_C / 2\n\n    # Calculate the sum of angle AMN and ANM\n    sum_of_angles = angle_AMN + angle_ANM\n\n    return sum_of_angles\n\nprint(find_angle())",
        "execution": "45.0",
        "error": "None",
        "extraction": "110",
        "prediction": "110\u00b0",
        "true_false": false
    },
    "374": {
        "question": "What is the sum of the accuracies of the algorithms calf and ivory?",
        "image": "images/374.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "374",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([117, 11], 'Accuracy of different'), ([180, 36], 'algorithms'), ([41, 63], '10'), ([13, 193], '1'), ([126, 408], 'ivory'), ([324, 409], 'calf')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the accuracies of the algorithms calf and ivory?\nImage detected text: [([117, 11], 'Accuracy of different'), ([180, 36], 'algorithms'), ([41, 63], '10'), ([13, 193], '1'), ([126, 408], 'ivory'), ([324, 409], 'calf')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "calf_accuracy = 0.1\nivory_accuracy = 0.9\n\nsum_of_accuracies = calf_accuracy + ivory_accuracy\nprint(sum_of_accuracies)",
        "execution": "1.0",
        "error": "None",
        "extraction": "1.0",
        "prediction": null,
        "true_false": false
    },
    "375": {
        "question": "Find the length of $AC$ in the isosceles triangle ABC. ",
        "image": "images/375.jpg",
        "choices": [
            "1.5",
            "7",
            "11",
            "12.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "375",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 703,
            "img_height": 293,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([291, 29], '9x _ 1'), ([628, 58], 'B'), ([93, 171], 'Ax + 1'), ([493, 171], '5x'), ([545, 185], 'Lt'), ([579, 169], '0.5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the length of $AC$ in the isosceles triangle ABC. \nChoices:\n(A) 1.5\n(B) 7\n(C) 11\n(D) 12.5\nImage detected text: [([291, 29], '9x _ 1'), ([628, 58], 'B'), ([93, 171], 'Ax + 1'), ([493, 171], '5x'), ([545, 185], 'Lt'), ([579, 169], '0.5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\neq1 = sp.Eq(9*x - 1, sp.Rational(1,2))\neq2 = sp.Eq(x + 1, 5*x)\n\nsol = sp.solve((eq1, eq2), (x))\nAC = sol[0] + 1\nAC",
        "execution": "",
        "error": "list index out of range",
        "extraction": "7",
        "prediction": "7",
        "true_false": true
    },
    "376": {
        "question": "Subtract all purple matte cubes. Subtract all tiny gray metal cubes. How many objects are left?",
        "image": "images/376.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "376",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all purple matte cubes. Subtract all tiny gray metal cubes. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "purple_matte_cubes = 10\ntiny_gray_metal_cubes = 5\n\nobjects_left = purple_matte_cubes - tiny_gray_metal_cubes\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "377": {
        "question": "Is Orange Red the high median?",
        "image": "images/377.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "377",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 649,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([141, 11], 'title'), ([31, 45], 'Medium Seafoam'), ([103, 85], 'Gray'), ([57, 124], 'Forest Green'), ([7, 155], '9'), ([91, 165], 'Orchid'), ([9, 191], '1'), ([97, 205], 'Khaki'), ([63, 245], 'Orange Red'), ([87, 283], 'Tomato'), ([51, 325], 'Medium Aqua'), ([357, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Orange Red the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([141, 11], 'title'), ([31, 45], 'Medium Seafoam'), ([103, 85], 'Gray'), ([57, 124], 'Forest Green'), ([7, 155], '9'), ([91, 165], 'Orchid'), ([9, 191], '1'), ([97, 205], 'Khaki'), ([63, 245], 'Orange Red'), ([87, 283], 'Tomato'), ([51, 325], 'Medium Aqua'), ([357, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "colors = {\n    'Medium Seafoam': 45,\n    'Gray': 85,\n    'Forest Green': 124,\n    '9': 155,\n    'Orchid': 165,\n    '1': 191,\n    'Khaki': 205,\n    'Orange Red': 245,\n    'Tomato': 283,\n    'Medium Aqua': 325\n}\n\nmedian = len(colors) // 2\nsorted_colors = sorted(colors.values())\n\nif sorted_colors[median] == colors['Orange Red']:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "378": {
        "question": "\u5982\u56fe\uff0cAD\u662f\u25b3ABC\u7684\u4e2d\u7ebf\uff0cE\u4e3aAD\u7684\u4e2d\u70b9\uff0c\u25b3ABE\u7684\u9762\u79ef\u4e3a2\uff0c\u5219\u25b3ABC\u7684\u9762\u79ef\u4e3a\uff08\uff09",
        "image": "images/378.jpg",
        "choices": [
            "5",
            "6",
            "7",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "378",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 118,
            "img_height": 111,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAD\u662f\u25b3ABC\u7684\u4e2d\u7ebf\uff0cE\u4e3aAD\u7684\u4e2d\u70b9\uff0c\u25b3ABE\u7684\u9762\u79ef\u4e3a2\uff0c\u5219\u25b3ABC\u7684\u9762\u79ef\u4e3a\uff08\uff09\nChoices:\n(A) 5\n(B) 6\n(C) 7\n(D) 8\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_area(ab, ae):\n    ac = 2 * ae\n    bc = 2 * ab\n    area_abe = 0.5 * ab * ae\n    area_abc = area_abe * 4\n    return area_abc\n\nab = math.sqrt(8)\nae = math.sqrt(2)\n\nprint(triangle_area(ab, ae))",
        "execution": "8.000000000000002",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": true
    },
    "379": {
        "question": "In the diagram of the food web shown what will most directly be affected by the loss of the trees?",
        "image": "images/379.jpg",
        "choices": [
            "horses",
            "cats",
            "nothing",
            "bears"
        ],
        "unit": null,
        "precision": null,
        "answer": "horses",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "379",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 570,
            "img_height": 400,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the diagram of the food web shown what will most directly be affected by the loss of the trees?\nChoices:\n(A) horses\n(B) cats\n(C) nothing\n(D) bears\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def affected_animal(food_web, lost_animal):\n    affected = []\n    for animal, prey in food_web.items():\n        if lost_animal in prey:\n            affected.append(animal)\n    return affected\n\nfood_web = {\n    'trees': ['horses', 'cats', 'bears'],\n    'horses': ['cats'],\n    'cats': [],\n    'bears': []\n}\n\nlost_animal = 'trees'\n\nprint(affected_animal(food_web, lost_animal))",
        "execution": "[]",
        "error": "None",
        "extraction": "['horses', 'cats', 'bears']",
        "prediction": "horses",
        "true_false": true
    },
    "380": {
        "question": "For how many years that the percentage value over 4?",
        "image": "images/380.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "380",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 183], '8'), ([151, 197], '4-33'), ([109, 211], '4.2%'), ([359, 269], '3.83'), ([401, 269], '3.83'), ([653, 283], '3.7%'), ([485, 297], '3.6%'), ([527, 299], '3-63'), ([569, 313], '3.5%'), ([611, 313], '3.53 '), ([695, 313], '3.53'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([94, 444], '2005'), ([136, 444], '2006'), ([177, 445], '2007'), ([219, 445], '2008'), ([261, 445], \"'2009\"), ([302, 443], '2010'), ([344, 444], '2011'), ([386, 444], '2012'), ([428, 444], '2013'), ([470, 444], '2014'), ([512, 444], '2015'), ([554, 444], '2016'), ([596, 444], '2017'), ([632, 448], '2018\"'), ([671, 451], '2019\"')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For how many years that the percentage value over 4?\nImage detected text: [([43, 183], '8'), ([151, 197], '4-33'), ([109, 211], '4.2%'), ([359, 269], '3.83'), ([401, 269], '3.83'), ([653, 283], '3.7%'), ([485, 297], '3.6%'), ([527, 299], '3-63'), ([569, 313], '3.5%'), ([611, 313], '3.53 '), ([695, 313], '3.53'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([94, 444], '2005'), ([136, 444], '2006'), ([177, 445], '2007'), ([219, 445], '2008'), ([261, 445], \"'2009\"), ([302, 443], '2010'), ([344, 444], '2011'), ([386, 444], '2012'), ([428, 444], '2013'), ([470, 444], '2014'), ([512, 444], '2015'), ([554, 444], '2016'), ([596, 444], '2017'), ([632, 448], '2018\"'), ([671, 451], '2019\"')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "years = 0\nfor text in detected_text:\n    if \"%\" in text[1]:\n        percentage = float(text[1].replace(\"%\", \"\"))\n        if percentage > 4:\n            years += 1\n\nprint(years)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "381": {
        "question": "Are there more tiny cyan matte articulated buss left of the big school bus than small yellow matte double buss?",
        "image": "images/381.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "381",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there more tiny cyan matte articulated buss left of the big school bus than small yellow matte double buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_buses(tiny_cyan_mattes, big_school_bus, small_yellow_mattes):\n    if tiny_cyan_mattes > big_school_bus:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ntiny_cyan_mattes = 5\nbig_school_bus = 3\nsmall_yellow_mattes = 4\n\nprint(compare_buses(tiny_cyan_mattes, big_school_bus, small_yellow_mattes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "382": {
        "question": "Is the building through the window at least five stories tall?",
        "image": "images/382.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "382",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 500,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the building through the window at least five stories tall?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_building_tall(caption):\n    if \"building\" in caption:\n        if \"five stories\" in caption:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"\"\n\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(is_building_tall(caption))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "383": {
        "question": "What value you get , if you divide the largest bar value by 2 ?",
        "image": "images/383.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "131253.5",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "383",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '300 00o'), ([159, 77], '262 507'), ([61, 107], '250 000'), ([61, 171], '200 000'), ([44, 184], '!'), ([43, 215], '1'), ([61, 237], '150 00o'), ([44, 276], '1'), ([61, 303], '100 000'), ([69, 367], '50 00o'), ([285, 373], '35 920'), ([405, 385], '26 144'), ([527, 395], '18 244'), ([659, 411], '588'), ([155, 449], 'Moschino'), ([287, 449], 'Pollini'), ([383, 449], 'Alberta Ferretti'), ([515, 449], 'Philosophy'), ([651, 449], 'Other'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What value you get , if you divide the largest bar value by 2 ?\nImage detected text: [([61, 41], '300 00o'), ([159, 77], '262 507'), ([61, 107], '250 000'), ([61, 171], '200 000'), ([44, 184], '!'), ([43, 215], '1'), ([61, 237], '150 00o'), ([44, 276], '1'), ([61, 303], '100 000'), ([69, 367], '50 00o'), ([285, 373], '35 920'), ([405, 385], '26 144'), ([527, 395], '18 244'), ([659, 411], '588'), ([155, 449], 'Moschino'), ([287, 449], 'Pollini'), ([383, 449], 'Alberta Ferretti'), ([515, 449], 'Philosophy'), ([651, 449], 'Other'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_bar_value = 300000\nresult = largest_bar_value / 2\nprint(result)",
        "execution": "150000.0",
        "error": "None",
        "extraction": "150000",
        "prediction": "150000.0",
        "true_false": false
    },
    "384": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/384.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "384",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 626,
            "img_height": 495,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(people_birth_years):\n    current_year = datetime.datetime.now().year\n    count = 0\n    for year in people_birth_years:\n        if year > 1945 and year <= current_year:\n            count += 1\n    return count\n\npeople_birth_years = [1930, 1950, 1965, 1980, 1995]\nprint(count_people_after_ww2(people_birth_years))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "385": {
        "question": "Does Cyan have the minimum area under the curve?",
        "image": "images/385.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "385",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 771,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 153], '1'), ([729, 181], 'Cyan'), ([9, 191], '1'), ([729, 203], 'Aqua'), ([655, 363], '100'), ([335, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Cyan have the minimum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 153], '1'), ([729, 181], 'Cyan'), ([9, 191], '1'), ([729, 203], 'Aqua'), ([655, 363], '100'), ([335, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def has_minimum_area(caption):\n    for line in caption:\n        if \"Cyan\" in line:\n            return \"yes\"\n    return \"no\"\n\ncaption = [\"The graph shows the area under the curve for different colors. The area under the curve for Cyan is the smallest.\"]\nprint(has_minimum_area(caption))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "386": {
        "question": "Find x",
        "image": "images/386.jpg",
        "choices": [
            "5",
            "10",
            "10 \\sqrt { 3 }",
            "20"
        ],
        "unit": null,
        "precision": null,
        "answer": "10 \\sqrt { 3 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "386",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 164,
            "img_height": 247,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([100, 106], '20'), ([76, 212], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x\nChoices:\n(A) 5\n(B) 10\n(C) 10 \\sqrt { 3 }\n(D) 20\nImage detected text: [([100, 106], '20'), ([76, 212], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\neq = sp.Eq(x, 20)\n\nsolution = sp.solve(eq, x)\nprint(solution)",
        "execution": "[20]",
        "error": "None",
        "extraction": "20",
        "prediction": "20",
        "true_false": false
    },
    "387": {
        "question": "Of the four balls in the photo, what is the percentage of them on the ground?",
        "image": "images/387.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "387",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 363,
            "img_height": 485,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Of the four balls in the photo, what is the percentage of them on the ground?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def percentage_of_balls_on_ground(photo):\n    total_balls = 4\n    balls_on_ground = 0\n\n    for ball in photo:\n        if ball == \"on ground\":\n            balls_on_ground += 1\n\n    percentage = (balls_on_ground / total_balls) * 100\n    return percentage\n\nphoto = [\"in air\", \"on ground\", \"in air\", \"on ground\"]\nprint(percentage_of_balls_on_ground(photo))",
        "execution": "50.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50",
        "true_false": false
    },
    "388": {
        "question": "Express the ratio of $\\tan M$ as a decimal to the nearest hundredth.",
        "image": "images/388.jpg",
        "choices": [
            "0.38",
            "0.42",
            "0.92",
            "2.40"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.42",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "388",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 209,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([144, 18], '36'), ([296, 36], 'M'), ([6, 90], '15'), ([156, 114], '39'), ([20, 162], 'N')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Express the ratio of $\\tan M$ as a decimal to the nearest hundredth.\nChoices:\n(A) 0.38\n(B) 0.42\n(C) 0.92\n(D) 2.40\nImage detected text: [([144, 18], '36'), ([296, 36], 'M'), ([6, 90], '15'), ([156, 114], '39'), ([20, 162], 'N')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nM = 36\nN = 15\n\ntan_M = math.tan(math.radians(M))\nratio = round(tan_M, 2)\n\nprint(ratio)",
        "execution": "0.73",
        "error": "None",
        "extraction": "0.92",
        "prediction": "0.92",
        "true_false": false
    },
    "389": {
        "question": "Look at the table. Then answer the question. At a price of $320, is there a shortage or a surplus?'",
        "image": "images/389.jpg",
        "choices": [
            "shortage",
            "surplus"
        ],
        "unit": null,
        "precision": null,
        "answer": "shortage",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "389",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 353,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 5], 'Price'), ([61, 5], 'Quantity demanded'), ([217, 3], 'Quantity supplied'), ([7, 37], '5270'), ([107, 37], '20,200'), ([255, 37], '10,600'), ([7, 67], '5320'), ([107, 67], '20,000'), ([255, 67], '12,500'), ([7, 99], '5370'), ([107, 99], '19,800'), ([255, 97], '14,400'), ([7, 129], '5420'), ([107, 129], '19,600'), ([255, 129], '16,300'), ([7, 161], 'S470'), ([107, 159], '19,400'), ([255, 159], '18,200')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Look at the table. Then answer the question. At a price of $320, is there a shortage or a surplus?'\nChoices:\n(A) shortage\n(B) surplus\nImage detected text: [([7, 5], 'Price'), ([61, 5], 'Quantity demanded'), ([217, 3], 'Quantity supplied'), ([7, 37], '5270'), ([107, 37], '20,200'), ([255, 37], '10,600'), ([7, 67], '5320'), ([107, 67], '20,000'), ([255, 67], '12,500'), ([7, 99], '5370'), ([107, 99], '19,800'), ([255, 97], '14,400'), ([7, 129], '5420'), ([107, 129], '19,600'), ([255, 129], '16,300'), ([7, 161], 'S470'), ([107, 159], '19,400'), ([255, 159], '18,200')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "price = 320\nquantity_demanded = [5270, 5320, 5370, 5420]\nquantity_supplied = [10,600, 12,500, 14,400, 16,300]\n\ntotal_quantity_demanded = sum(quantity_demanded)\ntotal_quantity_supplied = sum(quantity_supplied)\n\nif total_quantity_demanded > total_quantity_supplied:\n    ans = \"shortage\"\nelif total_quantity_demanded < total_quantity_supplied:\n    ans = \"surplus\"\nelse:\n    ans = \"neither a shortage nor a surplus\"\n\nprint(ans)",
        "execution": "shortage",
        "error": "None",
        "extraction": "shortage",
        "prediction": "shortage",
        "true_false": true
    },
    "390": {
        "question": "Are there fewer jets that are left of the small brown suv than objects right of the big shiny car?",
        "image": "images/390.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "390",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer jets that are left of the small brown suv than objects right of the big shiny car?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_jets_and_objects(jets_left, suv_color, objects_right, car_color):\n    if jets_left < objects_right:\n        return \"Yes\"\n    else:\n        return \"No\"\n\njets_left = 3\nsuv_color = \"brown\"\nobjects_right = 5\ncar_color = \"shiny\"\n\nprint(compare_jets_and_objects(jets_left, suv_color, objects_right, car_color))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "391": {
        "question": "As shown in the figure, point O is the center of \u2299O, points A, B, and C are on \u2299O, AO \u2225 BC, \u2220AOB = 40.0, then the degree of \u2220OAC is equal to ()",
        "image": "images/391.jpg",
        "choices": [
            "40\u00b0",
            "60\u00b0",
            "50\u00b0",
            "20\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "20\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "391",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 96,
            "img_height": 96,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, point O is the center of \u2299O, points A, B, and C are on \u2299O, AO \u2225 BC, \u2220AOB = 40.0, then the degree of \u2220OAC is equal to ()\nChoices:\n(A) 40\u00b0\n(B) 60\u00b0\n(C) 50\u00b0\n(D) 20\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_AOB = 40.0\n    angle_AOC = 180 - angle_AOB\n    angle_OAC = angle_AOC / 2\n    return angle_OAC\n\nprint(find_angle())",
        "execution": "70.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": false
    },
    "392": {
        "question": "Mr. Huffman, a P.E. teacher, wrote down how much weight each of his students could lift. How many people lifted at least 46 pounds? (Unit: people)",
        "image": "images/392.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "392",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 197,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Weight lifting results (Ibs_'), ([29, 25], 'Stem'), ([77, 25], 'Leaf'), ([77, 49], '0 1 4 6 6 9'), ([75, 69], '3 5 6'), ([75, 93], '0 125 8 9'), ([77, 115], '0 3 3 4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Mr. Huffman, a P.E. teacher, wrote down how much weight each of his students could lift. How many people lifted at least 46 pounds? (Unit: people)\nImage detected text: [([0, 0], 'Weight lifting results (Ibs_'), ([29, 25], 'Stem'), ([77, 25], 'Leaf'), ([77, 49], '0 1 4 6 6 9'), ([75, 69], '3 5 6'), ([75, 93], '0 125 8 9'), ([77, 115], '0 3 3 4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "stem_values = [0, 1, 4, 6, 6, 9]\nleaf_values = [3, 5, 6]\nweight_threshold = 46\n\ncount = 0\nfor stem, leaf in zip(stem_values, leaf_values):\n    weight = stem * 10 + leaf\n    if weight >= weight_threshold:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "393": {
        "question": "What is the difference between the highest and the lowest dark blue bar?",
        "image": "images/393.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "54",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "393",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([73, 41], '500'), ([73, 93], '250'), ([613, 137], '174'), ([73, 145], '000'), ([407, 149], '163'), ([201, 157], '158'), ([46, 150], ''), ([613, 189], '317'), ([43, 193], '8'), ([71, 195], '750'), ([201, 201], '263'), ([407, 195], '288'), ([44, 216], '1'), ([201, 289], '590'), ([407, 287], '601'), ([613, 285], '622'), ([71, 299], '250'), ([197, 367], '2013'), ([403, 367], '2014'), ([609, 367], '2015'), ([81, 407], 'North America (and Caribbean)'), ([299, 407], 'Asia Pacific'), ([516, 406], 'Europe'), ([81, 431], 'Africa and the Middle East'), ([299, 431], 'Latin America (and Mexico)'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the highest and the lowest dark blue bar?\nImage detected text: [([73, 41], '500'), ([73, 93], '250'), ([613, 137], '174'), ([73, 145], '000'), ([407, 149], '163'), ([201, 157], '158'), ([46, 150], ''), ([613, 189], '317'), ([43, 193], '8'), ([71, 195], '750'), ([201, 201], '263'), ([407, 195], '288'), ([44, 216], '1'), ([201, 289], '590'), ([407, 287], '601'), ([613, 285], '622'), ([71, 299], '250'), ([197, 367], '2013'), ([403, 367], '2014'), ([609, 367], '2015'), ([81, 407], 'North America (and Caribbean)'), ([299, 407], 'Asia Pacific'), ([516, 406], 'Europe'), ([81, 431], 'Africa and the Middle East'), ([299, 431], 'Latin America (and Mexico)'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dark_blue_bars = [500, 250, 174, 000, 163, 158, 0, 317, 8, 750, 263, 288, 1, 590, 601, 622, 250, 2013, 2014, 2015]\n\nhighest = max(dark_blue_bars)\nlowest = min(dark_blue_bars)\n\ndifference = highest - lowest\nprint(difference)",
        "execution": "2015",
        "error": "None",
        "extraction": "350",
        "prediction": "350",
        "true_false": false
    },
    "394": {
        "question": "Which of the following environments has the least GPU days for training?",
        "image": "images/394.jpg",
        "choices": [
            "HomeGrid",
            "Msgr S1",
            "Msgr S2",
            "Msgr S3",
            "VLN",
            "LangRoom"
        ],
        "unit": null,
        "precision": null,
        "answer": "LangRoom",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "394",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1854,
            "img_height": 858,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([485, 29], 'HomeGrid'), ([829, 31], 'S1'), ([1059, 29], 'S2'), ([1289, 29], 'S3'), ([1449, 33], 'VLN'), ([1614, 29], 'LangRoom'), ([34, 94], 'Total model parameters'), ([526, 95], '281M'), ([759, 97], '148M'), ([991, 97], '148M'), ([1219, 95], '148M'), ([1437, 95], '268M'), ([1661, 95], '243M'), ([29, 137], 'Language inputs'), ([513, 141], 'One-hot'), ([721, 137], 'T5 Embed'), ([953, 137], 'T5 Embed'), ([1183, 137], 'T5 Embed'), ([1403, 137], 'T5 Embed'), ([1647, 139], 'One-hot'), ([32, 174], 'Vocabulary size'), ([524, 180], '32100'), ([779, 183], 'nla'), ([1010, 186], 'nla'), ([1239, 183], 'nla'), ([1461, 185], 'nla'), ([1691, 183], '15'), ([28, 221], 'Language MLP layers'), ([566, 228], '5'), ([794, 228], '5'), ([1024, 228], '5'), ([1257, 229], '5'), ([1476, 228], '5'), ([1700, 226], '5'), ([28, 263], 'Language MLP units'), ([537, 265], '1024'), ([765, 265], '1024'), ([997, 265], '1024'), ([1227, 265], '1024'), ([1447, 265], '1024'), ([1671, 265], '1024'), ([30, 307], 'Image input'), ([535, 311], 'Pixel'), ([742, 308], 'Symbol'), ([970, 308], 'Symbol'), ([1200, 308], 'Symbol'), ([1445, 311], 'Pixel'), ([1667, 311], 'Pixel'), ([30, 350], 'Image size'), ([493, 351], '(64,'), ([621, 353], '3)'), ([711, 351], '(16,16, 17)'), ([943, 351], '(16,16, 17)'), ([1173, 351], '(16,16, 17)'), ([1403, 351], '(64,'), ([1531, 353], '3)'), ([1625, 351], '(64,64,3)'), ([35, 395], 'Train ratio'), ([555, 393], '32'), ([785, 397], '64'), ([1015, 397], '64'), ([1243, 393], '32'), ([1465, 393], '32'), ([1689, 393], '16'), ([33, 437], 'Batch size'), ([557, 439], '16'), ([787, 439], '16'), ([1013, 439], '24'), ([1245, 439], '24'), ([1476, 440], '8'), ([1689, 437], '16'), ([32, 478], 'Batch length'), ([543, 479], '256'), ([771, 479], '256'), ([1003, 479], '512'), ([1233, 479], '512'), ([1453, 477], '256'), ([1689, 481], '64'), ([33, 521], 'GRU recurrent units'), ([535, 521], '4096'), ([765, 521], '4096'), ([995, 521], '4096'), ([1225, 521], '4096'), ([1445, 521], '8192'), ([1671, 523], '6144'), ([33, 565], 'Bottleneck units'), ([549, 567], 'nla'), ([779, 567], 'nla'), ([1009, 567], 'nla'), ([1239, 567], 'nla'), ([1447, 563], '1024'), ([1667, 563], '2048'), ([34, 629], 'Env steps'), ([537, 629], 'S0M'), ([779, 631], '1M'), ([997, 631], '25M'), ([1227, 629], 'S0M'), ([1449, 631], '30M'), ([1673, 631], '45M'), ([33, 671], 'Number of envs'), ([555, 671], '66'), ([785, 671], '16'), ([1015, 671], '16'), ([1243, 673], '66'), ([1476, 674], '8'), ([30, 707], 'Training time (GPU days)'), ([539, 714], '3.75'), ([779, 717], '2.5'), ([1015, 715], '16'), ([1245, 717], '24'), ([1467, 717], '16'), ([1698, 716], '2'), ([183, 790], 'Table G.3: Dynalang hyperparameters and training information for each environment'), ([738, 29], 'Msgr'), ([965, 25], 'Msgr'), ([1195, 25], 'Msgr'), ([567, 350], '64,'), ([1476, 347], '64,')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the following environments has the least GPU days for training?\nChoices:\n(A) HomeGrid\n(B) Msgr S1\n(C) Msgr S2\n(D) Msgr S3\n(E) VLN\n(F) LangRoom\nImage detected text: [([485, 29], 'HomeGrid'), ([829, 31], 'S1'), ([1059, 29], 'S2'), ([1289, 29], 'S3'), ([1449, 33], 'VLN'), ([1614, 29], 'LangRoom'), ([34, 94], 'Total model parameters'), ([526, 95], '281M'), ([759, 97], '148M'), ([991, 97], '148M'), ([1219, 95], '148M'), ([1437, 95], '268M'), ([1661, 95], '243M'), ([29, 137], 'Language inputs'), ([513, 141], 'One-hot'), ([721, 137], 'T5 Embed'), ([953, 137], 'T5 Embed'), ([1183, 137], 'T5 Embed'), ([1403, 137], 'T5 Embed'), ([1647, 139], 'One-hot'), ([32, 174], 'Vocabulary size'), ([524, 180], '32100'), ([779, 183], 'nla'), ([1010, 186], 'nla'), ([1239, 183], 'nla'), ([1461, 185], 'nla'), ([1691, 183], '15'), ([28, 221], 'Language MLP layers'), ([566, 228], '5'), ([794, 228], '5'), ([1024, 228], '5'), ([1257, 229], '5'), ([1476, 228], '5'), ([1700, 226], '5'), ([28, 263], 'Language MLP units'), ([537, 265], '1024'), ([765, 265], '1024'), ([997, 265], '1024'), ([1227, 265], '1024'), ([1447, 265], '1024'), ([1671, 265], '1024'), ([30, 307], 'Image input'), ([535, 311], 'Pixel'), ([742, 308], 'Symbol'), ([970, 308], 'Symbol'), ([1200, 308], 'Symbol'), ([1445, 311], 'Pixel'), ([1667, 311], 'Pixel'), ([30, 350], 'Image size'), ([493, 351], '(64,'), ([621, 353], '3)'), ([711, 351], '(16,16, 17)'), ([943, 351], '(16,16, 17)'), ([1173, 351], '(16,16, 17)'), ([1403, 351], '(64,'), ([1531, 353], '3)'), ([1625, 351], '(64,64,3)'), ([35, 395], 'Train ratio'), ([555, 393], '32'), ([785, 397], '64'), ([1015, 397], '64'), ([1243, 393], '32'), ([1465, 393], '32'), ([1689, 393], '16'), ([33, 437], 'Batch size'), ([557, 439], '16'), ([787, 439], '16'), ([1013, 439], '24'), ([1245, 439], '24'), ([1476, 440], '8'), ([1689, 437], '16'), ([32, 478], 'Batch length'), ([543, 479], '256'), ([771, 479], '256'), ([1003, 479], '512'), ([1233, 479], '512'), ([1453, 477], '256'), ([1689, 481], '64'), ([33, 521], 'GRU recurrent units'), ([535, 521], '4096'), ([765, 521], '4096'), ([995, 521], '4096'), ([1225, 521], '4096'), ([1445, 521], '8192'), ([1671, 523], '6144'), ([33, 565], 'Bottleneck units'), ([549, 567], 'nla'), ([779, 567], 'nla'), ([1009, 567], 'nla'), ([1239, 567], 'nla'), ([1447, 563], '1024'), ([1667, 563], '2048'), ([34, 629], 'Env steps'), ([537, 629], 'S0M'), ([779, 631], '1M'), ([997, 631], '25M'), ([1227, 629], 'S0M'), ([1449, 631], '30M'), ([1673, 631], '45M'), ([33, 671], 'Number of envs'), ([555, 671], '66'), ([785, 671], '16'), ([1015, 671], '16'), ([1243, 673], '66'), ([1476, 674], '8'), ([30, 707], 'Training time (GPU days)'), ([539, 714], '3.75'), ([779, 717], '2.5'), ([1015, 715], '16'), ([1245, 717], '24'), ([1467, 717], '16'), ([1698, 716], '2'), ([183, 790], 'Table G.3: Dynalang hyperparameters and training information for each environment'), ([738, 29], 'Msgr'), ([965, 25], 'Msgr'), ([1195, 25], 'Msgr'), ([567, 350], '64,'), ([1476, 347], '64,')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "envs = {\n    'HomeGrid': 3.75,\n    'Msgr S1': 2.5,\n    'Msgr S2': 16,\n    'Msgr S3': 24,\n    'VLN': 16,\n    'LangRoom': 2\n}\n\nmin_env = min(envs, key=envs.get)\nprint(min_env)",
        "execution": "LangRoom",
        "error": "None",
        "extraction": "Msgr S1",
        "prediction": "Msgr S1",
        "true_false": false
    },
    "395": {
        "question": "What is the average age of the people in this picture?",
        "image": "images/395.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "395",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average age of the people in this picture?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ages = [25, 30, 35, 40, 45]\naverage_age = sum(ages) / len(ages)\nprint(average_age)",
        "execution": "35.0",
        "error": "None",
        "extraction": "35",
        "prediction": "35",
        "true_false": false
    },
    "396": {
        "question": "From the above food web diagram, if all the algae dies then water flea population will",
        "image": "images/396.jpg",
        "choices": [
            "remains the same",
            "decrease",
            "increase",
            "NA"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "396",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 720,
            "img_height": 576,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([315, 100], 'platypus'), ([22, 156], 'sunlight'), ([145, 191], 'southern'), ([546, 190], 'diving'), ([153, 209], 'pygmy'), ([245, 207], 'backswimmer'), ([405, 211], 'dragonfly'), ([547, 209], 'beetle'), ([158, 227], 'perch'), ([423, 235], 'larvae'), ([549, 233], 'larvae'), ([113, 377], 'water'), ([223, 375], 'mayfly'), ([324, 374], 'freshwater'), ([453, 371], 'freshwater'), ([595, 367], 'water'), ([119, 397], 'flea'), ([225, 393], 'larvae'), ([342, 395], 'shrimp'), ([477, 391], 'snail'), ([579, 383], 'boatman'), ([170, 518], 'algae and'), ([369, 527], 'detritus'), ([553, 527], 'bacteria'), ([163, 541], 'macrophytes')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From the above food web diagram, if all the algae dies then water flea population will\nChoices:\n(A) remains the same\n(B) decrease\n(C) increase\n(D) NA\nImage detected text: [([315, 100], 'platypus'), ([22, 156], 'sunlight'), ([145, 191], 'southern'), ([546, 190], 'diving'), ([153, 209], 'pygmy'), ([245, 207], 'backswimmer'), ([405, 211], 'dragonfly'), ([547, 209], 'beetle'), ([158, 227], 'perch'), ([423, 235], 'larvae'), ([549, 233], 'larvae'), ([113, 377], 'water'), ([223, 375], 'mayfly'), ([324, 374], 'freshwater'), ([453, 371], 'freshwater'), ([595, 367], 'water'), ([119, 397], 'flea'), ([225, 393], 'larvae'), ([342, 395], 'shrimp'), ([477, 391], 'snail'), ([579, 383], 'boatman'), ([170, 518], 'algae and'), ([369, 527], 'detritus'), ([553, 527], 'bacteria'), ([163, 541], 'macrophytes')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def water_flea_population(algae):\n    if algae == \"alive\":\n        return \"remains the same\"\n    elif algae == \"dead\":\n        return \"decrease\"\n    else:\n        return \"NA\"\n\nprint(water_flea_population(\"alive\"))\nprint(water_flea_population(\"dead\"))",
        "execution": "remains the same\ndecrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "397": {
        "question": "\u5982\u56fe\uff0c\u70b9A\u3001B\u3001C\u90fd\u5728\u534a\u5f84\u4e3a2\u7684\u2299O\u4e0a\uff0c\u2220C\uff1d30\u00b0\uff0c\u5219\u5f26AB\u957f\u4e3a\uff08\uff09",
        "image": "images/397.jpg",
        "choices": [
            "1",
            "2",
            "2.2",
            "2.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "397",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 73,
            "img_height": 70,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u70b9A\u3001B\u3001C\u90fd\u5728\u534a\u5f84\u4e3a2\u7684\u2299O\u4e0a\uff0c\u2220C\uff1d30\u00b0\uff0c\u5219\u5f26AB\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 1\n(B) 2\n(C) 2.2\n(D) 2.5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef chord_length(angle, radius):\n    angle_rad = math.radians(angle)\n    chord_length = 2 * radius * math.sin(angle_rad/2)\n    return chord_length\n\nangle = 30\nradius = 2\n\nchord = chord_length(angle, radius)\nprint(chord)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "2.0",
        "prediction": "2.2",
        "true_false": false
    },
    "398": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/398.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "398",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 727,
            "img_height": 942,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "399": {
        "question": "What is the perimeter of the shape?",
        "image": "images/399.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "399",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 258,
            "img_height": 241,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([33, 91], '2 in'), ([195, 91], '2 in')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the shape?\nImage detected text: [([33, 91], '2 in'), ([195, 91], '2 in')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 2\nside2 = 2\n\nperimeter = 2 * (side1 + side2)\nprint(perimeter)",
        "execution": "8",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "400": {
        "question": "At which Episode ID does the Retroformer attain its peak Success rate (%)?",
        "image": "images/400.jpg",
        "choices": [
            "1.0",
            "1.5",
            "2.0",
            "2.5",
            "3.0",
            "3.5",
            "4.0"
        ],
        "unit": null,
        "precision": null,
        "answer": "4.0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "400",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1196,
            "img_height": 942,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([298, 8], 'HotPotQA (100 distractor tasks)'), ([82, 150], '50'), ([29, 165], '8'), ([33, 239], 'g'), ([82, 270], '45'), ([30, 322], '1'), ([82, 390], '40'), ([590, 381], 'Retroformer+4-shot sampling'), ([591, 431], 'Reflexion'), ([591, 478], 'ReAct'), ([82, 512], '35'), ([162, 590], '0.0'), ([276, 590], '0.5'), ([392, 590], '1.0'), ([508, 590], '1.5'), ([622, 590], '2.0'), ([738, 590], '2.5'), ([852, 590], '3.0'), ([966, 590], '3.5'), ([1082, 590], '4.0'), ([548, 628], 'Episode ID'), ([5, 743], 'Figure'), ([174, 744], '4:'), ([259, 743], 'We  compare'), ([560, 746], 'Retroformer'), ([938, 744], 'with'), ([1056, 744], 'base -'), ([4, 793], 'lines and observe consistent and faster performance im-'), ([1, 853], 'provement in terms of success rate.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: At which Episode ID does the Retroformer attain its peak Success rate (%)?\nChoices:\n(A) 1.0\n(B) 1.5\n(C) 2.0\n(D) 2.5\n(E) 3.0\n(F) 3.5\n(G) 4.0\nImage detected text: [([298, 8], 'HotPotQA (100 distractor tasks)'), ([82, 150], '50'), ([29, 165], '8'), ([33, 239], 'g'), ([82, 270], '45'), ([30, 322], '1'), ([82, 390], '40'), ([590, 381], 'Retroformer+4-shot sampling'), ([591, 431], 'Reflexion'), ([591, 478], 'ReAct'), ([82, 512], '35'), ([162, 590], '0.0'), ([276, 590], '0.5'), ([392, 590], '1.0'), ([508, 590], '1.5'), ([622, 590], '2.0'), ([738, 590], '2.5'), ([852, 590], '3.0'), ([966, 590], '3.5'), ([1082, 590], '4.0'), ([548, 628], 'Episode ID'), ([5, 743], 'Figure'), ([174, 744], '4:'), ([259, 743], 'We  compare'), ([560, 746], 'Retroformer'), ([938, 744], 'with'), ([1056, 744], 'base -'), ([4, 793], 'lines and observe consistent and faster performance im-'), ([1, 853], 'provement in terms of success rate.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "success_rates = {\n    '0.0': 0,\n    '0.5': 0,\n    '1.0': 45,\n    '1.5': 40,\n    '2.0': 35,\n    '2.5': 0,\n    '3.0': 0,\n    '3.5': 0,\n    '4.0': 0\n}\n\nmax_success_rate = max(success_rates.values())\nepisode_id = [k for k, v in success_rates.items() if v == max_success_rate][0]\n\nepisode_id",
        "execution": "",
        "error": "name 'max_success_rate' is not defined",
        "extraction": "2.0",
        "prediction": "2.0",
        "true_false": false
    },
    "401": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/401.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "401",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([232, 12], 'Title'), ([39, 33], '1010'), ([141, 53], 'offer'), ([44, 70], '109'), ([141, 77], 'lane'), ([45, 155], '107'), ([15, 169], '1'), ([45, 197], '106'), ([44, 236], '105'), ([44, 278], '104'), ([45, 321], '103'), ([109, 357], '8'), ([177, 355], '2'), ([245, 357], '3'), ([312, 356], '2'), ([377, 355], '1'), ([44, 116], '108')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([232, 12], 'Title'), ([39, 33], '1010'), ([141, 53], 'offer'), ([44, 70], '109'), ([141, 77], 'lane'), ([45, 155], '107'), ([15, 169], '1'), ([45, 197], '106'), ([44, 236], '105'), ([44, 278], '104'), ([45, 321], '103'), ([109, 357], '8'), ([177, 355], '2'), ([245, 357], '3'), ([312, 356], '2'), ([377, 355], '1'), ([44, 116], '108')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar_value = float('inf')\nchart_values = [1010, 109, 107, 106, 105, 104, 103, 8, 2, 3, 2, 1, 108]\n\nfor value in chart_values:\n    if value < smallest_bar_value:\n        smallest_bar_value = value\n\nprint(smallest_bar_value)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": true
    },
    "402": {
        "question": "From the food chain diagram below, which animal would most directly lack food if Grasshoppers get exterminated?",
        "image": "images/402.jpg",
        "choices": [
            "Rabbit",
            "Deer",
            "Frogs",
            "Wolf"
        ],
        "unit": null,
        "precision": null,
        "answer": "Frogs",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "402",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 909,
            "img_height": 735,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([118, 174], 'Corn'), ([446, 166], 'Shrew'), ([329, 210], 'Mouse'), ([718, 280], 'Hawk'), ([126, 326], 'Carrots'), ([604, 332], 'Snake'), ([314, 354], 'Rabbit '), ([75, 435], 'Flowering'), ([100, 464], 'shrub'), ([308, 452], 'Grasshopper'), ([736, 532], 'Wolf'), ([352, 654], 'Deer'), ([170, 680], 'Tree'), ([472, 532], 'Frog')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From the food chain diagram below, which animal would most directly lack food if Grasshoppers get exterminated?\nChoices:\n(A) Rabbit\n(B) Deer\n(C) Frogs\n(D) Wolf\nImage detected text: [([118, 174], 'Corn'), ([446, 166], 'Shrew'), ([329, 210], 'Mouse'), ([718, 280], 'Hawk'), ([126, 326], 'Carrots'), ([604, 332], 'Snake'), ([314, 354], 'Rabbit '), ([75, 435], 'Flowering'), ([100, 464], 'shrub'), ([308, 452], 'Grasshopper'), ([736, 532], 'Wolf'), ([352, 654], 'Deer'), ([170, 680], 'Tree'), ([472, 532], 'Frog')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_directly_lacking_animal(food_chain):\n    food_chain_dict = {\n        'Grasshoppers': ['Rabbit', 'Deer', 'Frogs', 'Wolf'],\n        'Rabbit': ['Wolf'],\n        'Deer': ['Wolf'],\n        'Frogs': ['Snake', 'Hawk'],\n        'Wolf': []\n    }\n\n    for animal in food_chain_dict.keys():\n        if animal not in food_chain:\n            return animal\n\n    return \"\"\n\nfood_chain = ['Corn', 'Shrew', 'Mouse', 'Hawk', 'Carrots', 'Snake', 'Rabbit', 'Flowering', 'shrub', 'Grasshopper', 'Wolf', 'Deer', 'Tree', 'Frog']\nprint(find_directly_lacking_animal(food_chain))",
        "execution": "Grasshoppers",
        "error": "None",
        "extraction": "Rabbit",
        "prediction": "Rabbit",
        "true_false": false
    },
    "403": {
        "question": "Find TX if $E X=24$ and $D E=7$",
        "image": "images/403.jpg",
        "choices": [
            "7",
            "24",
            "25",
            "32"
        ],
        "unit": null,
        "precision": null,
        "answer": "32",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "403",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 564,
            "img_height": 221,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find TX if $E X=24$ and $D E=7$\nChoices:\n(A) 7\n(B) 24\n(C) 25\n(D) 32\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_TX(EX, DE):\n    TX = EX + DE\n    return TX\n\nEX = 24\nDE = 7\n\nprint(find_TX(EX, DE))",
        "execution": "31",
        "error": "None",
        "extraction": "31",
        "prediction": "32",
        "true_false": true
    },
    "404": {
        "question": "Look at the following schedule. Which activity begins at 11.50 A.M.?'",
        "image": "images/404.jpg",
        "choices": [
            "figure skating practice",
            "private class",
            "adult class",
            "children's class"
        ],
        "unit": null,
        "precision": null,
        "answer": "children's class",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "404",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 325,
            "img_height": 217,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([75, 1], 'Skating rink schedule'), ([51, 31], 'Activity'), ([177, 31], 'Begin'), ([267, 31], 'End'), ([3, 61], 'private class'), ([167, 57], '7.15A.M:'), ([247, 57], '9.00 AM:'), ([3, 87], 'adult class'), ([167, 83], '9.15 AM;'), ([243, 85], '10.55AM'), ([2, 108], 'figure skating practice/11:10 AM:|1145 A.M'), ([1, 139], \"children's class\"), ([163, 137], '11.50 AM'), ([249, 139], '1.15 PM_'), ([0, 164], 'figure skating show'), ([167, 165], '1.25 PM:'), ([247, 165], '2.50 PM_'), ([3, 195], 'free skate'), ([167, 193], '2.55 PM:'), ([247, 193], '4.25 PM:')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Look at the following schedule. Which activity begins at 11.50 A.M.?'\nChoices:\n(A) figure skating practice\n(B) private class\n(C) adult class\n(D) children's class\nImage detected text: [([75, 1], 'Skating rink schedule'), ([51, 31], 'Activity'), ([177, 31], 'Begin'), ([267, 31], 'End'), ([3, 61], 'private class'), ([167, 57], '7.15A.M:'), ([247, 57], '9.00 AM:'), ([3, 87], 'adult class'), ([167, 83], '9.15 AM;'), ([243, 85], '10.55AM'), ([2, 108], 'figure skating practice/11:10 AM:|1145 A.M'), ([1, 139], \"children's class\"), ([163, 137], '11.50 AM'), ([249, 139], '1.15 PM_'), ([0, 164], 'figure skating show'), ([167, 165], '1.25 PM:'), ([247, 165], '2.50 PM_'), ([3, 195], 'free skate'), ([167, 193], '2.55 PM:'), ([247, 193], '4.25 PM:')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_activity(schedule):\n    for activity in schedule:\n        if activity[1] == '11.50 AM':\n            return activity[0]\n    return \"\"\n\nschedule = [\n    ('private class', '7.15 AM', '9.00 AM'),\n    ('adult class', '9.15 AM', '10.55 AM'),\n    ('figure skating practice', '11.10 AM', '11.45 AM'),\n    (\"children's class\", '11.50 AM', '1.15 PM'),\n    ('figure skating show', '1.25 PM', '2.50 PM'),\n    ('free skate', '2.55 PM', '4.25 PM')\n]\n\nprint(find_activity(schedule))",
        "execution": "children's class",
        "error": "None",
        "extraction": "children's class",
        "prediction": "children's class",
        "true_false": true
    },
    "405": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/405.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "19",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "405",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1801,
            "img_height": 1351,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "406": {
        "question": "How many snowmen are there?",
        "image": "images/406.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "15",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "406",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 714,
            "img_height": 183,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many snowmen are there?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import cv2\nimport numpy as np\n\n# Load the image\nimage = cv2.imread('snowmen.jpg')\n\n# Convert the image to grayscale\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Apply a threshold to the image\n_, threshold = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)\n\n# Find contours in the thresholded image\ncontours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# Count the number of contours\nnum_snowmen = len(contours)\n\nprint(num_snowmen)",
        "execution": "",
        "error": "OpenCV(4.5.4) /tmp/pip-req-build-khv2fx3p/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "407": {
        "question": "\u5982\u56fe\uff0c\u70b9B\uff0cD\uff0cE\uff0cC\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u82e5\u25b3ABD\u224c\u25b3ACE\uff0c\u2220AEC\uff1d110\u00b0\uff0c\u5219\u2220DAE\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/407.jpg",
        "choices": [
            "30\u00b0",
            "40\u00b0",
            "50\u00b0",
            "60\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "407",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 76,
            "img_height": 67,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u70b9B\uff0cD\uff0cE\uff0cC\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u82e5\u25b3ABD\u224c\u25b3ACE\uff0c\u2220AEC\uff1d110\u00b0\uff0c\u5219\u2220DAE\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 30\u00b0\n(B) 40\u00b0\n(C) 50\u00b0\n(D) 60\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nx = sp.Symbol('x')\n\n# Define the equations\neq1 = sp.Eq(x, 180 - 110)\neq2 = sp.Eq(x, 180 - 110 - 40)\n\n# Solve the equations\nsolution = sp.solve((eq1, eq2), (x))\n\n# Print the solution\nprint(solution)",
        "execution": "[]",
        "error": "None",
        "extraction": "[40]",
        "prediction": "40\u00b0",
        "true_false": true
    },
    "408": {
        "question": "Find z.",
        "image": "images/408.jpg",
        "choices": [
            "6",
            "6 \\sqrt { 2 }",
            "6 \\sqrt { 3 }",
            "6 \\sqrt { 5 }"
        ],
        "unit": null,
        "precision": null,
        "answer": "6 \\sqrt { 5 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "408",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 362,
            "img_height": 238,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([194, 82], '12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find z.\nChoices:\n(A) 6\n(B) 6 \\sqrt { 2 }\n(C) 6 \\sqrt { 3 }\n(D) 6 \\sqrt { 5 }\nImage detected text: [([194, 82], '12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_z():\n    x = 12\n    y = 6\n    z = math.sqrt(x**2 - y**2)\n    return z\n\nz = find_z()\nprint(z)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "409": {
        "question": "What is the radius of this circle?",
        "image": "images/409.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "409",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 358,
            "img_height": 356,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([144, 54], '47'), ([144, 106], '2'), ([55, 177], '4 -2%'), ([124, 222], '~2-'), ([126, 278], '~4-')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the radius of this circle?\nImage detected text: [([144, 54], '47'), ([144, 106], '2'), ([55, 177], '4 -2%'), ([124, 222], '~2-'), ([126, 278], '~4-')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_radius(text):\n    for item in text:\n        if item[1].isdigit():\n            return int(item[1])\n    return 0\n\ntext = [([144, 54], '47'), ([144, 106], '2'), ([55, 177], '4 -2%'), ([124, 222], '~2-'), ([126, 278], '~4-')]\nradius = find_radius(text)\nprint(radius)",
        "execution": "47",
        "error": "None",
        "extraction": "47",
        "prediction": "47",
        "true_false": false
    },
    "410": {
        "question": "Find the perimeter of  $\\triangle D E F,$ if $\\triangle D E F \\sim \\triangle C B F,$ perimeter of $\\triangle C B F=27, D F=6,$ and $F C=8$",
        "image": "images/410.jpg",
        "choices": [
            "20.25",
            "21",
            "27",
            "36"
        ],
        "unit": null,
        "precision": null,
        "answer": "20.25",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "410",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 405,
            "img_height": 226,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the perimeter of  $\\triangle D E F,$ if $\\triangle D E F \\sim \\triangle C B F,$ perimeter of $\\triangle C B F=27, D F=6,$ and $F C=8$\nChoices:\n(A) 20.25\n(B) 21\n(C) 27\n(D) 36\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_perimeter(perimeter_CBF, DF, FC):\n    # Find the ratio of the perimeters\n    ratio = perimeter_CBF / (DF + FC)\n\n    # Find the lengths of DE and EF\n    DE = DF * ratio\n    EF = FC * ratio\n\n    # Find the perimeter of DEF\n    perimeter_DEF = DF + DE + EF\n\n    return perimeter_DEF\n\nperimeter_CBF = 27\nDF = 6\nFC = 8\n\nperimeter_DEF = find_perimeter(perimeter_CBF, DF, FC)\nprint(perimeter_DEF)",
        "execution": "33.0",
        "error": "None",
        "extraction": "21",
        "prediction": "21",
        "true_false": false
    },
    "411": {
        "question": "What is the average percentage of population having access to electricity per year?",
        "image": "images/411.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "411",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1081,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([60, 9], 'Percentage of population having access to electricity and non-solid fuels in North America'), ([29, 33], '100'), ([5, 131], '1'), ([7, 227], '5'), ([11, 279], '1'), ([11, 385], '1'), ([103, 551], '3'), ([411, 551], '8'), ([717, 551], '8'), ([1025, 551], '3'), ([551, 589], 'Year'), ([883, 623], 'Non-solid fuel'), ([1003, 623], 'Electricity')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average percentage of population having access to electricity per year?\nImage detected text: [([60, 9], 'Percentage of population having access to electricity and non-solid fuels in North America'), ([29, 33], '100'), ([5, 131], '1'), ([7, 227], '5'), ([11, 279], '1'), ([11, 385], '1'), ([103, 551], '3'), ([411, 551], '8'), ([717, 551], '8'), ([1025, 551], '3'), ([551, 589], 'Year'), ([883, 623], 'Non-solid fuel'), ([1003, 623], 'Electricity')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "percentage_list = [100, 1, 5, 1, 1, 3, 8, 8, 3]\naverage_percentage = sum(percentage_list) / len(percentage_list)\nprint(average_percentage)",
        "execution": "14.444444444444445",
        "error": "None",
        "extraction": "4.555555555555555",
        "prediction": null,
        "true_false": false
    },
    "412": {
        "question": "Tanner has $35. Does he have enough to buy a black jacket and a pair of shorts?'",
        "image": "images/412.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "412",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 235,
            "img_height": 192,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([6, 4], 'pair of khaki pants'), ([195, 5], 'S13'), ([8, 39], 'green sweatshirt'), ([195, 37], 'S10'), ([9, 71], 'pair of sweat pants'), ([195, 69], 'S20'), ([9, 103], 'pair of brown pants'), ([197, 101], 'S25'), ([9, 135], 'pair of shorts'), ([197, 133], 'S11'), ([7, 165], 'black jacket'), ([195, 165], 'S26')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Tanner has $35. Does he have enough to buy a black jacket and a pair of shorts?'\nChoices:\n(A) yes\n(B) no\nImage detected text: [([6, 4], 'pair of khaki pants'), ([195, 5], 'S13'), ([8, 39], 'green sweatshirt'), ([195, 37], 'S10'), ([9, 71], 'pair of sweat pants'), ([195, 69], 'S20'), ([9, 103], 'pair of brown pants'), ([197, 101], 'S25'), ([9, 135], 'pair of shorts'), ([197, 133], 'S11'), ([7, 165], 'black jacket'), ([195, 165], 'S26')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "black_jacket_price = 26.00\npair_of_shorts_price = 11.00\n\ntanner_money = 35.00\n\nif tanner_money >= black_jacket_price + pair_of_shorts_price:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "no",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "413": {
        "question": "\u5df2\u77e5\uff1a\u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cAB\uff1dAC\uff0cBD\u4e3a\u2220ABC\u7684\u5e73\u5206\u7ebf\uff0c\u2220BDC\uff1d75\u00b0\uff0c\u5219\u2220A\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/413.jpg",
        "choices": [
            "25\u00b0",
            "35\u00b0",
            "40\u00b0",
            "45\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "413",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 123,
            "img_height": 132,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5df2\u77e5\uff1a\u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cAB\uff1dAC\uff0cBD\u4e3a\u2220ABC\u7684\u5e73\u5206\u7ebf\uff0c\u2220BDC\uff1d75\u00b0\uff0c\u5219\u2220A\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 25\u00b0\n(B) 35\u00b0\n(C) 40\u00b0\n(D) 45\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    # Given information\n    BD_angle = 75\n\n    # Calculate angle A\n    angle_A = (180 - BD_angle) / 2\n\n    return angle_A\n\nangle_A = find_angle()\nprint(angle_A)",
        "execution": "52.5",
        "error": "None",
        "extraction": "40",
        "prediction": "40\u00b0",
        "true_false": true
    },
    "414": {
        "question": "If $ST=8, TR=4$, and $PT=6$, find $QR$.",
        "image": "images/414.jpg",
        "choices": [
            "6",
            "8",
            "9",
            "10"
        ],
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "414",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 509,
            "img_height": 386,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([413, 41], 'S')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If $ST=8, TR=4$, and $PT=6$, find $QR$.\nChoices:\n(A) 6\n(B) 8\n(C) 9\n(D) 10\nImage detected text: [([413, 41], 'S')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ST = 8\nTR = 4\nPT = 6\n\nQR = ST - PT + TR\nprint(QR)",
        "execution": "6",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "415": {
        "question": "What is the average annual wage in Slovak Republic in the year 2019",
        "image": "images/415.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "15017",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "415",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '16 000'), ([685, 67], '15 017'), ([61, 87], '15 000'), ([663, 99], '14 310'), ([631, 117], '13 931'), ([77, 135], '000'), ([601, 135], '13 539'), ([571, 155], '13 116'), ([44, 158], '1'), ([77, 181], '000'), ([539, 179], '12 613'), ([479, 193], '12 280'), ([44, 200], '1'), ([417, 209], '11 967'), ([61, 227], '12 000'), ([385, 233], '11 462'), ([44, 232], '1'), ([325, 255], '10 980'), ([77, 275], '000'), ([293, 285], '10 344'), ([263, 299], '10 012'), ([61, 321], '10 000'), ([247, 329], '402'), ([185, 345], '052'), ([77, 369], '000'), ([123, 365], '606'), ([77, 415], '000'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([344, 451], '2008'), ([560, 452], '2015'), ([590, 451], '2016'), ([622, 452], '2017'), ([100, 452], '2000'), ([130, 452], '2001'), ([160, 451], '2002'), ([192, 452], '2003'), ([222, 452], '2004'), ([250, 452], '\"2005'), ([284, 452], '2006'), ([311, 451], \"'2007\"), ([376, 452], '2009'), ([406, 452], '2010'), ([438, 452], '2011'), ([468, 452], '2012'), ([495, 451], '\"2013'), ([529, 453], '\"2014'), ([652, 452], '2018'), ([684, 452], '2019')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average annual wage in Slovak Republic in the year 2019\nImage detected text: [([61, 41], '16 000'), ([685, 67], '15 017'), ([61, 87], '15 000'), ([663, 99], '14 310'), ([631, 117], '13 931'), ([77, 135], '000'), ([601, 135], '13 539'), ([571, 155], '13 116'), ([44, 158], '1'), ([77, 181], '000'), ([539, 179], '12 613'), ([479, 193], '12 280'), ([44, 200], '1'), ([417, 209], '11 967'), ([61, 227], '12 000'), ([385, 233], '11 462'), ([44, 232], '1'), ([325, 255], '10 980'), ([77, 275], '000'), ([293, 285], '10 344'), ([263, 299], '10 012'), ([61, 321], '10 000'), ([247, 329], '402'), ([185, 345], '052'), ([77, 369], '000'), ([123, 365], '606'), ([77, 415], '000'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([344, 451], '2008'), ([560, 452], '2015'), ([590, 451], '2016'), ([622, 452], '2017'), ([100, 452], '2000'), ([130, 452], '2001'), ([160, 451], '2002'), ([192, 452], '2003'), ([222, 452], '2004'), ([250, 452], '\"2005'), ([284, 452], '2006'), ([311, 451], \"'2007\"), ([376, 452], '2009'), ([406, 452], '2010'), ([438, 452], '2011'), ([468, 452], '2012'), ([495, 451], '\"2013'), ([529, 453], '\"2014'), ([652, 452], '2018'), ([684, 452], '2019')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "annual_wages = [16000, 15017, 15000, 14310, 13931, 13000, 13539, 13116, 13116, 12613, 12280, 12000, 11967, 12000, 11462, 11000, 10980, 10344, 10012, 10000]\naverage_wage = sum(annual_wages) / len(annual_wages)\nprint(average_wage)",
        "execution": "12584.35",
        "error": "None",
        "extraction": "12280",
        "prediction": "12280",
        "true_false": false
    },
    "416": {
        "question": "what is the highest volume written on the blender?",
        "image": "images/416.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "800",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "416",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 768,
            "img_height": 1024,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([364, 266], 'Hidla'), ([363, 313], 'al'), ([367, 339], '#'), ([315, 691], \"'KenmoRS ,\"), ([624, 913], 'Lmuldieiladde')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: what is the highest volume written on the blender?\nImage detected text: [([364, 266], 'Hidla'), ([363, 313], 'al'), ([367, 339], '#'), ([315, 691], \"'KenmoRS ,\"), ([624, 913], 'Lmuldieiladde')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_volume(blender_text):\n    volumes = []\n    for text in blender_text:\n        if text.isdigit():\n            volumes.append(int(text))\n    if volumes:\n        return max(volumes)\n    else:\n        return None\n\nblender_text = [\"Hidla\", \"al\", \"#\", \"'KenmoRS ,\", \"Lmuldieiladde\"]\nprint(highest_volume(blender_text))",
        "execution": "None",
        "error": "None",
        "extraction": "None",
        "prediction": null,
        "true_false": false
    },
    "417": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/417.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "417",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 564,
            "img_height": 748,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 15)\ndate_of_birth2 = datetime.date(1985, 10, 20)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "418": {
        "question": "If the number of grasshoppers decreases, what will the population of spiders most likely do?",
        "image": "images/418.jpg",
        "choices": [
            "remain the same",
            "increase",
            "decrease",
            "NA"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "418",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 375,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the number of grasshoppers decreases, what will the population of spiders most likely do?\nChoices:\n(A) remain the same\n(B) increase\n(C) decrease\n(D) NA\nImage detected text: [([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def population_change(grasshoppers_decrease):\n    if grasshoppers_decrease:\n        return \"increase\"\n    else:\n        return \"remain the same\"\n\ngrasshoppers_decrease = True\n\nprint(population_change(grasshoppers_decrease))",
        "execution": "increase",
        "error": "None",
        "extraction": "increase",
        "prediction": "increase",
        "true_false": false
    },
    "419": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) after nine.",
        "image": "images/419.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "419",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10'), ([159, 95], '73')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) after nine.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10'), ([159, 95], '73')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter\"\nprint(time_word)",
        "execution": "quarter",
        "error": "None",
        "extraction": "quarter",
        "prediction": "quarter",
        "true_false": true
    },
    "420": {
        "question": "What is the lowest value on the Y axis?",
        "image": "images/420.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "0.0",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "420",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2256,
            "img_height": 1763,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1008, 160], 'SCN'), ([1088, 160], '-l -'), ([706, 194], 'UNIVERSITY'), ([926, 194], 'OF'), ([986, 194], 'NEBRASKA'), ([1168, 194], 'MEDICAL'), ([1328, 194], 'CENTER'), ([644, 226], 'SUPPORT'), ([804, 228], 'OF'), ([864, 223], 'RESEARCH ,'), ([1064, 225], 'EDUCATION'), ([1270, 228], 'AND'), ([1350, 228], 'SERVICE'), ([351, 347], '300'), ([443, 345], '50'), ([1711, 332], '300'), ([354, 420], '289'), ([443, 417], '0.'), ([351, 489], '260 _'), ([443, 489], '@0'), ([351, 561], '240.@0'), ([351, 633], '220.DE'), ([1652, 654], '210'), ([1470, 684], '205'), ([351, 705], '285.p0'), ([1288, 734], '190'), ([374, 780], '8 .'), ([443, 777], '@1'), ([1106, 768], '18 0'), ([260, 810], 'U'), ([924, 836], '160'), ([1508, 825], '163'), ([254, 852], '1'), ([355, 849], '160 . d@'), ([355, 921], '140 _'), ([443, 921], '00'), ([764, 952], '128'), ([256, 910], 'I'), ([376, 996], '20 _'), ([443, 993], 'p0'), ([355, 1065], 'Iw@'), ([443, 1065], '00'), ([375, 1137], '80 . 00'), ([375, 1209], '60 _'), ([444, 1210], '50'), ([373, 1281], '40 _'), ([443, 1281], '05'), ([1336, 1328], '26'), ([373, 1353], '20 _'), ([441, 1353], '00'), ([1147, 1345], 'po'), ([994, 1390], '9.5'), ([1157, 1381], 'Hho'), ([393, 1425], '0 . p0'), ([636, 1470], '74'), ([798, 1468], '75'), ([958, 1468], '76'), ([1140, 1468], '77'), ([1322, 1466], '78'), ([1502, 1466], '79'), ([1684, 1464], '8 0'), ([918, 1570], 'SCN'), ([997, 1567], 'Direct'), ([1142, 1572], 'to'), ([1200, 1570], 'UNMC'), ([916, 1604], 'Grants'), ([918, 1632], 'UNMC'), ([1056, 1628], 'Salary'), ([1198, 1626], 'Contribution'), ([1466, 1626], '(exclusive'), ([1682, 1630], 'of'), ([1741, 1628], 'space'), ([1864, 1626], 'and'), ([1058, 1661], 'administrative'), ([1360, 1659], 'support)'), ([642, 1719], 'Souree: https I'), ([993, 1719], 'ustrydocuments uesf eduldoeslmqvv0228')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the lowest value on the Y axis?\nImage detected text: [([1008, 160], 'SCN'), ([1088, 160], '-l -'), ([706, 194], 'UNIVERSITY'), ([926, 194], 'OF'), ([986, 194], 'NEBRASKA'), ([1168, 194], 'MEDICAL'), ([1328, 194], 'CENTER'), ([644, 226], 'SUPPORT'), ([804, 228], 'OF'), ([864, 223], 'RESEARCH ,'), ([1064, 225], 'EDUCATION'), ([1270, 228], 'AND'), ([1350, 228], 'SERVICE'), ([351, 347], '300'), ([443, 345], '50'), ([1711, 332], '300'), ([354, 420], '289'), ([443, 417], '0.'), ([351, 489], '260 _'), ([443, 489], '@0'), ([351, 561], '240.@0'), ([351, 633], '220.DE'), ([1652, 654], '210'), ([1470, 684], '205'), ([351, 705], '285.p0'), ([1288, 734], '190'), ([374, 780], '8 .'), ([443, 777], '@1'), ([1106, 768], '18 0'), ([260, 810], 'U'), ([924, 836], '160'), ([1508, 825], '163'), ([254, 852], '1'), ([355, 849], '160 . d@'), ([355, 921], '140 _'), ([443, 921], '00'), ([764, 952], '128'), ([256, 910], 'I'), ([376, 996], '20 _'), ([443, 993], 'p0'), ([355, 1065], 'Iw@'), ([443, 1065], '00'), ([375, 1137], '80 . 00'), ([375, 1209], '60 _'), ([444, 1210], '50'), ([373, 1281], '40 _'), ([443, 1281], '05'), ([1336, 1328], '26'), ([373, 1353], '20 _'), ([441, 1353], '00'), ([1147, 1345], 'po'), ([994, 1390], '9.5'), ([1157, 1381], 'Hho'), ([393, 1425], '0 . p0'), ([636, 1470], '74'), ([798, 1468], '75'), ([958, 1468], '76'), ([1140, 1468], '77'), ([1322, 1466], '78'), ([1502, 1466], '79'), ([1684, 1464], '8 0'), ([918, 1570], 'SCN'), ([997, 1567], 'Direct'), ([1142, 1572], 'to'), ([1200, 1570], 'UNMC'), ([916, 1604], 'Grants'), ([918, 1632], 'UNMC'), ([1056, 1628], 'Salary'), ([1198, 1626], 'Contribution'), ([1466, 1626], '(exclusive'), ([1682, 1630], 'of'), ([1741, 1628], 'space'), ([1864, 1626], 'and'), ([1058, 1661], 'administrative'), ([1360, 1659], 'support)'), ([642, 1719], 'Souree: https I'), ([993, 1719], 'ustrydocuments uesf eduldoeslmqvv0228')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "lowest_value = float('inf')\nfor text in image_detected_text:\n    if text[1].isdigit():\n        value = float(text[1])\n        if value < lowest_value:\n            lowest_value = value\n\nprint(lowest_value)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "0",
        "prediction": "0.0",
        "true_false": true
    },
    "421": {
        "question": "An elevator cab of mass $m=500 \\mathrm{~kg}$ is descending with speed $v_i=4.0 \\mathrm{~m} / \\mathrm{s}$ when its supporting cable begins to slip, allowing it to fall with constant acceleration $\\vec{a}=\\vec{g} / 5$.\r\nDuring the $12 \\mathrm{~m}$ fall, what is the work $W_T$ done on the cab by the upward pull $\\vec{T}$ of the elevator cable?",
        "image": "images/421.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-47",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "421",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 550,
            "img_height": 1190,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([334, 72], 'Elevator'), ([336, 132], 'cable'), ([267, 1025], '@')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An elevator cab of mass $m=500 \\mathrm{~kg}$ is descending with speed $v_i=4.0 \\mathrm{~m} / \\mathrm{s}$ when its supporting cable begins to slip, allowing it to fall with constant acceleration $\\vec{a}=\\vec{g} / 5$.\r\nDuring the $12 \\mathrm{~m}$ fall, what is the work $W_T$ done on the cab by the upward pull $\\vec{T}$ of the elevator cable?\nImage detected text: [([334, 72], 'Elevator'), ([336, 132], 'cable'), ([267, 1025], '@')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "m = 500  # mass of the elevator cab in kg\nvi = 4.0  # initial velocity in m/s\na = 9.8 / 5  # acceleration in m/s^2\n\nd = 12  # distance fallen in m\n\nvf = (vi**2 + 2*a*d)**0.5  # final velocity in m/s\n\nW_T = 0.5 * m * (vf**2 - vi**2)  # work done on the cab in J\n\nprint(W_T)",
        "execution": "11760.000000000002",
        "error": "None",
        "extraction": "-11760.0",
        "prediction": null,
        "true_false": false
    },
    "422": {
        "question": "What is the value of the smallest bar?",
        "image": "images/422.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "422",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([230, 12], 'Title'), ([37, 31], '100'), ([15, 175], '9'), ([47, 283], '20'), ([93, 367], '8'), ([150, 368], '3'), ([213, 369], '9'), ([271, 367], '8'), ([333, 367], '3'), ([388, 366], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest bar?\nImage detected text: [([230, 12], 'Title'), ([37, 31], '100'), ([15, 175], '9'), ([47, 283], '20'), ([93, 367], '8'), ([150, 368], '3'), ([213, 369], '9'), ([271, 367], '8'), ([333, 367], '3'), ([388, 366], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar = float('inf')\nbars = [100, 9, 20, 8, 3, 9, 8, 3, 1]\n\nfor bar in bars:\n    if bar < smallest_bar:\n        smallest_bar = bar\n\nprint(smallest_bar)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "423": {
        "question": "Is Deep Pink less than Dark Gray?",
        "image": "images/423.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "423",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 577,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([437, 45], 'Dark'), ([437, 67], 'Hot Pink'), ([437, 89], 'Dark Violet'), ([437, 113], 'Medium Turquoise'), ([437, 137], 'Teal'), ([7, 153], '1'), ([437, 159], 'Dark Olive'), ([475, 183], 'Pink'), ([9, 191], '1'), ([537, 363], '100'), ([275, 383], 'raxis label'), ([473, 43], 'Gray'), ([436, 180], 'Deep')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Deep Pink less than Dark Gray?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([437, 45], 'Dark'), ([437, 67], 'Hot Pink'), ([437, 89], 'Dark Violet'), ([437, 113], 'Medium Turquoise'), ([437, 137], 'Teal'), ([7, 153], '1'), ([437, 159], 'Dark Olive'), ([475, 183], 'Pink'), ([9, 191], '1'), ([537, 363], '100'), ([275, 383], 'raxis label'), ([473, 43], 'Gray'), ([436, 180], 'Deep')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "deep_pink = 1\ndark_gray = 100\n\nif deep_pink < dark_gray:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "424": {
        "question": "Is the food half eaten?",
        "image": "images/424.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "424",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 428,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the food half eaten?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_food_half_eaten(image):\n    # Assuming the image is analyzed and the relevant information is extracted\n    food_status = \"half eaten\"  # Example value, can be obtained from image analysis\n\n    if food_status == \"half eaten\":\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(is_food_half_eaten(image))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "425": {
        "question": "\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0c\u82e5AC\uff1d6\uff0cBC\uff1d8\uff0c\u5219cosA\u7684\u503c\u4e3a\uff08\uff09",
        "image": "images/425.jpg",
        "choices": [
            "0.6",
            "0.8",
            "0.75",
            "\\frac{4}{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "425",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 171,
            "img_height": 120,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5728Rt\u25b3ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0c\u82e5AC\uff1d6\uff0cBC\uff1d8\uff0c\u5219cosA\u7684\u503c\u4e3a\uff08\uff09\nChoices:\n(A) 0.6\n(B) 0.8\n(C) 0.75\n(D) \\frac{4}{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAC = 6\nBC = 8\n\ncosA = AC / math.sqrt(AC**2 + BC**2)\nprint(cosA)",
        "execution": "0.6",
        "error": "None",
        "extraction": "0.6",
        "prediction": "0.6",
        "true_false": true
    },
    "426": {
        "question": "\u5982\u56fe\uff0c\u82e5DE\u662f\u25b3ABC\u7684\u4e2d\u4f4d\u7ebf\uff0c\u25b3ADE\u7684\u5468\u957f\u4e3a1\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u4e3a\uff08\uff09",
        "image": "images/426.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "426",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 154,
            "img_height": 111,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u82e5DE\u662f\u25b3ABC\u7684\u4e2d\u4f4d\u7ebf\uff0c\u25b3ADE\u7684\u5468\u957f\u4e3a1\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nAB = sp.Symbol('AB')\nBC = sp.Symbol('BC')\nAC = sp.Symbol('AC')\nDE = sp.Symbol('DE')\n\n# Define the equations\neq1 = sp.Eq(DE, (AB + BC) / 2)\neq2 = sp.Eq(AB + BC + AC, 2 * (AB + DE))\n\n# Solve the equations\nsolution = sp.solve((eq1, eq2), (AB, BC, AC, DE))\n\n# Get the perimeter of triangle ABC\nperimeter = solution[AC] + solution[AB] + solution[BC]\n\nperimeter",
        "execution": "",
        "error": "AC",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "427": {
        "question": "How many people prefer the most preferred object?",
        "image": "images/427.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "427",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([136, 12], 'Most preferred objects'), ([15, 75], '2'), ([19, 313], '1'), ([411, 391], '10'), ([167, 413], 'Number of People')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people prefer the most preferred object?\nImage detected text: [([136, 12], 'Most preferred objects'), ([15, 75], '2'), ([19, 313], '1'), ([411, 391], '10'), ([167, 413], 'Number of People')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_objects = 2\nnumber_of_people = 10\n\npreferred_people = number_of_people * most_preferred_objects\nprint(preferred_people)",
        "execution": "20",
        "error": "None",
        "extraction": "20",
        "prediction": "20",
        "true_false": false
    },
    "428": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/428.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "28",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "428",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1259,
            "img_height": 968,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "429": {
        "question": "What percentage of people prefer the least preferred object?",
        "image": "images/429.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "429",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([156, 12], 'Most preferred objects'), ([35, 29], '100'), ([13, 162], '1'), ([89, 412], 'liver'), ([227, 415], 'warm'), ([369, 411], 'shaft')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of people prefer the least preferred object?\nImage detected text: [([156, 12], 'Most preferred objects'), ([35, 29], '100'), ([13, 162], '1'), ([89, 412], 'liver'), ([227, 415], 'warm'), ([369, 411], 'shaft')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_objects = 100\nleast_preferred_object = 1\n\npercentage = (least_preferred_object / most_preferred_objects) * 100\nprint(percentage)",
        "execution": "1.0",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "430": {
        "question": "The derivative of f(x) at x=0 is ____ that at x=5",
        "image": "images/430.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "smaller than",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "430",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 552,
            "img_height": 393,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The derivative of f(x) at x=0 is ____ that at x=5\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nf = 10*x**3 + 12*x**2 + 3*x + 10\n\nf_derivative_at_0 = sp.diff(f, x).subs(x, 0)\nf_derivative_at_5 = sp.diff(f, x).subs(x, 5)\n\nif f_derivative_at_0 > f_derivative_at_5:\n    answer = \"(A) larger than\"\nelif f_derivative_at_0 == f_derivative_at_5:\n    answer = \"(B) equal to\"\nelse:\n    answer = \"(C) smaller than\"\n\nprint(answer)",
        "execution": "(C) smaller than",
        "error": "None",
        "extraction": "(C) smaller than",
        "prediction": "smaller than",
        "true_false": true
    },
    "431": {
        "question": "From the above food web diagram, what would happen to dragonfly if all mayfly dies",
        "image": "images/431.jpg",
        "choices": [
            "remains the same",
            "increase",
            "decrease",
            "NA"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "431",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 464,
            "img_height": 297,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([179, 57], 'Brown trout'), ([185, 157], 'Dragonfly'), ([29, 175], 'Mayfly'), ([185, 175], 'nymph'), ([363, 175], 'Freshwater'), ([29, 193], 'nymph'), ([363, 193], 'shrimp'), ([7, 265], 'Pondweed'), ([364, 256], 'Microscopic'), ([365, 275], 'algae')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From the above food web diagram, what would happen to dragonfly if all mayfly dies\nChoices:\n(A) remains the same\n(B) increase\n(C) decrease\n(D) NA\nImage detected text: [([179, 57], 'Brown trout'), ([185, 157], 'Dragonfly'), ([29, 175], 'Mayfly'), ([185, 175], 'nymph'), ([363, 175], 'Freshwater'), ([29, 193], 'nymph'), ([363, 193], 'shrimp'), ([7, 265], 'Pondweed'), ([364, 256], 'Microscopic'), ([365, 275], 'algae')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_web_interaction(food_web, predator, prey):\n    for interaction in food_web:\n        if interaction[0] == predator and interaction[1] == prey:\n            return interaction[2]\n    return \"\"\n\nfood_web = [('Brown trout', 'Mayfly', 'eats'), ('Dragonfly', 'Mayfly', 'eats'), ('Dragonfly', 'nymph', 'eats'), ('Freshwater', 'nymph', 'eats'), ('Freshwater', 'shrimp', 'eats'), ('Pondweed', 'Microscopic', 'eats'), ('Microscopic', 'algae', 'eats')]\npredator = 'Dragonfly'\nprey = 'Mayfly'\n\nprint(food_web_interaction(food_web, predator, prey))",
        "execution": "eats",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "432": {
        "question": "In how many years, is the percentage of undernourished male children greater than 0.4 %?",
        "image": "images/432.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "432",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1085,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([45, 9], 'Prevalence of severe wasting in children of Sudan with age under 5 years'), ([9, 229], '1'), ([9, 285], '1'), ([7, 353], '5'), ([85, 591], '1'), ([373, 591], '1'), ([661, 591], '8'), ([949, 591], '8'), ([1031, 599], 'Female'), ([1029, 623], 'Male'), ([503, 626], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the percentage of undernourished male children greater than 0.4 %?\nImage detected text: [([45, 9], 'Prevalence of severe wasting in children of Sudan with age under 5 years'), ([9, 229], '1'), ([9, 285], '1'), ([7, 353], '5'), ([85, 591], '1'), ([373, 591], '1'), ([661, 591], '8'), ([949, 591], '8'), ([1031, 599], 'Female'), ([1029, 623], 'Male'), ([503, 626], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "years = 0\npercentage = 0\n\nfor text in image_detected_text:\n    if \"undernourished male children\" in text:\n        percentage = float(text.split(\"%\")[0])\n    if percentage > 0.4:\n        years += 1\n\nprint(years)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "433": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/433.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "433",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 425,
            "img_height": 350,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "434": {
        "question": "In the figure above, side AC of triangle ABC is on line l. What is x in terms of k?",
        "image": "images/434.jpg",
        "choices": [
            "60-k",
            "k",
            "60+k",
            "120-k",
            "120-2*k"
        ],
        "unit": null,
        "precision": null,
        "answer": "60-k",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "434",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 215,
            "img_height": 157,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([19, 93], '(120 _'), ([142, 96], 'Iwu\"'), ([32, 134], 'Nulc'), ([61, 133], 'Figure'), ([94, 134], 'nOLuntu'), ([154, 134], 'Gat')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, side AC of triangle ABC is on line l. What is x in terms of k?\nChoices:\n(A) 60-k\n(B) k\n(C) 60+k\n(D) 120-k\n(E) 120-2*k\nImage detected text: [([19, 93], '(120 _'), ([142, 96], 'Iwu\"'), ([32, 134], 'Nulc'), ([61, 133], 'Figure'), ([94, 134], 'nOLuntu'), ([154, 134], 'Gat')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nk = sp.symbols('k')\nx = 120 - 2*k\n\nx",
        "execution": "",
        "error": "None",
        "extraction": "120-2*k",
        "prediction": "120-2*k",
        "true_false": false
    },
    "435": {
        "question": "In how many years, is the percentage of employed females who are not attending school greater than the average percentage of employed females who are not attending school taken over all years ?",
        "image": "images/435.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "435",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 955,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([52, 9], 'Schooling information of female students involved in an economic activity in Nicaragua'), ([11, 199], '7'), ([9, 305], '1'), ([9, 375], '6'), ([81, 591], '1'), ([715, 591], '8'), ([785, 597], 'Not attending school'), ([385, 629], 'Year'), ([785, 623], 'Attending school')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the percentage of employed females who are not attending school greater than the average percentage of employed females who are not attending school taken over all years ?\nImage detected text: [([52, 9], 'Schooling information of female students involved in an economic activity in Nicaragua'), ([11, 199], '7'), ([9, 305], '1'), ([9, 375], '6'), ([81, 591], '1'), ([715, 591], '8'), ([785, 597], 'Not attending school'), ([385, 629], 'Year'), ([785, 623], 'Attending school')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def years_greater_than_average(data):\n    total_years = 0\n    total_percentage = 0\n    average_percentage = 0\n\n    for entry in data:\n        if entry[1] == 'Not attending school':\n            total_years += 1\n            total_percentage += int(entry[0])\n\n    if total_years > 0:\n        average_percentage = total_percentage / total_years\n\n    for entry in data:\n        if entry[1] == 'Not attending school' and int(entry[0]) > average_percentage:\n            return int(entry[2])\n\n    return 0\n\ndata = [\n    (7, 'Not attending school', 1),\n    (6, 'Not attending school', 1),\n    (8, 'Not attending school', 1)\n]\n\nprint(years_greater_than_average(data))",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": true
    },
    "436": {
        "question": "How many algorithms have accuracy lower than 8 in at least one dataset?",
        "image": "images/436.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "436",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 10], 'Accuracy of algorithms on different'), ([207, 37], 'datasets'), ([37, 53], '10'), ([14, 158], '1'), ([95, 335], 'cork'), ([223, 335], 'lover'), ([355, 335], 'cook'), ([213, 373], 'datasets'), ([189, 397], 'crest'), ([301, 397], 'louder')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracy lower than 8 in at least one dataset?\nImage detected text: [([79, 10], 'Accuracy of algorithms on different'), ([207, 37], 'datasets'), ([37, 53], '10'), ([14, 158], '1'), ([95, 335], 'cork'), ([223, 335], 'lover'), ([355, 335], 'cook'), ([213, 373], 'datasets'), ([189, 397], 'crest'), ([301, 397], 'louder')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracy = [10, 1, 8, 9, 7, 6]\ncount = 0\n\nfor a in accuracy:\n    if a < 8:\n        count += 1\n\nprint(count)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "437": {
        "question": "Fig.Q3 shows an excerpt of the transmission phase of a TCP connection. Assume the length of the IP header is 20 bytes. What is the ACK number at message 6?",
        "image": "images/437.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "839",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "437",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 638,
            "img_height": 814,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([250, 156], 'Payload'), ([340, 156], '50 bytes'), ([91, 255], '3'), ([244, 254], 'Payload'), ([334, 254], '300 bytes'), ([244, 474], 'Payload'), ([334, 472], '150 bytes'), ([263, 759], 'Fig: Q3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fig.Q3 shows an excerpt of the transmission phase of a TCP connection. Assume the length of the IP header is 20 bytes. What is the ACK number at message 6?\nImage detected text: [([250, 156], 'Payload'), ([340, 156], '50 bytes'), ([91, 255], '3'), ([244, 254], 'Payload'), ([334, 254], '300 bytes'), ([244, 474], 'Payload'), ([334, 472], '150 bytes'), ([263, 759], 'Fig: Q3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ACK_number = 0\nmessage_number = 1\n\nwhile message_number <= 6:\n    if message_number == 6:\n        ACK_number += 300\n    else:\n        ACK_number += 50\n    message_number += 1\n\nACK_number += 20\nprint(ACK_number)",
        "execution": "570",
        "error": "None",
        "extraction": "370",
        "prediction": "370",
        "true_false": false
    },
    "438": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/438.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "438",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 329,
            "img_height": 367,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "439": {
        "question": "is this function convex?",
        "image": "images/439.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "439",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 539,
            "img_height": 256,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: is this function convex?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_function_convex(function):\n    # Code to check if the function is convex\n    return True\n\n# Example usage\nfunction = \"x^2 + 2x + 1\"\nprint(is_function_convex(function))",
        "execution": "True",
        "error": "None",
        "extraction": "A",
        "prediction": "Yes",
        "true_false": false
    },
    "440": {
        "question": "Is the white plate half full?",
        "image": "images/440.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "440",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 480,
            "img_height": 640,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the white plate half full?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "plate_fullness = 0.5\n\nif plate_fullness == 0.5:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "441": {
        "question": "What is the perimeter of the shape?",
        "image": "images/441.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "441",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 258,
            "img_height": 241,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([25, 91], '3 cm'), ([195, 91], '3 cm'), ([125, 227], 'cm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the shape?\nImage detected text: [([25, 91], '3 cm'), ([195, 91], '3 cm'), ([125, 227], 'cm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 3\nside2 = 3\nperimeter = 2 * (side1 + side2)\nprint(perimeter)",
        "execution": "12",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": false
    },
    "442": {
        "question": "How many objects are preferred by more than 7 people in at least one category?",
        "image": "images/442.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "442",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 12], 'Most preferred objects of'), ([136, 38], 'different categories'), ([41, 61], '10'), ([329, 79], 'categories'), ([373, 107], 'satire'), ([371, 127], 'patch'), ([15, 133], '1'), ([12, 196], '5'), ([12, 222], '1'), ([91, 371], '9'), ([162, 371], '2'), ([239, 371], '2'), ([311, 371], '1'), ([385, 369], '8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many objects are preferred by more than 7 people in at least one category?\nImage detected text: [([108, 12], 'Most preferred objects of'), ([136, 38], 'different categories'), ([41, 61], '10'), ([329, 79], 'categories'), ([373, 107], 'satire'), ([371, 127], 'patch'), ([15, 133], '1'), ([12, 196], '5'), ([12, 222], '1'), ([91, 371], '9'), ([162, 371], '2'), ([239, 371], '2'), ([311, 371], '1'), ([385, 369], '8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "preferred_objects = {\n    'satire': 1,\n    'patch': 5,\n    '9': 1,\n    '2': 2,\n    '1': 1,\n    '8': 1\n}\n\ncount = 0\nfor obj in preferred_objects.values():\n    if obj > 7:\n        count += 1\n\nprint(count)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "443": {
        "question": "As shown in the figure: In Rt\u25b3ABC, \u2220C = 90.0, AC = 8.0, AB = 10.0, then the value of sinB is equal to ()",
        "image": "images/443.jpg",
        "choices": [
            "\\frac{3}{5}",
            "\\frac{4}{5}",
            "\\frac{3}{4}",
            "\\frac{4}{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{4}{5}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "443",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 169,
            "img_height": 80,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure: In Rt\u25b3ABC, \u2220C = 90.0, AC = 8.0, AB = 10.0, then the value of sinB is equal to ()\nChoices:\n(A) \\frac{3}{5}\n(B) \\frac{4}{5}\n(C) \\frac{3}{4}\n(D) \\frac{4}{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_sinB(AC, AB):\n    BC = math.sqrt(AC**2 + AB**2)\n    sinB = AC / BC\n    return sinB\n\nAC = 8.0\nAB = 10.0\n\nsinB = find_sinB(AC, AB)\nprint(sinB)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "0.6",
        "prediction": "\\frac{3}{5}",
        "true_false": false
    },
    "444": {
        "question": "What is the difference between the two genders?",
        "image": "images/444.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "444",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([69, 227], 'Male 46.5%'), ([639, 275], 'Female 53.526'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the two genders?\nImage detected text: [([69, 227], 'Male 46.5%'), ([639, 275], 'Female 53.526'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "male_percentage = 46.5\nfemale_percentage = 53.526\n\ndifference = abs(male_percentage - female_percentage)\nprint(difference)",
        "execution": "7.026000000000003",
        "error": "None",
        "extraction": "7.026",
        "prediction": null,
        "true_false": false
    },
    "445": {
        "question": "Is Light Slate less than Saddle Brown?",
        "image": "images/445.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "445",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 436,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 113], '1'), ([9, 151], '1'), ([63, 281], '1'), ([101, 281], 'E'), ([139, 281], '0'), ([179, 281], '7'), ([213, 280], '1'), ([253, 281], '1'), ([291, 281], '1'), ([331, 279], '1'), ([369, 279], '1'), ([407, 279], '1'), ([101, 313], '!'), ([327, 308], '1'), ([369, 311], '1'), ([203, 383], 'xaxis label'), ([141, 320], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Light Slate less than Saddle Brown?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 113], '1'), ([9, 151], '1'), ([63, 281], '1'), ([101, 281], 'E'), ([139, 281], '0'), ([179, 281], '7'), ([213, 280], '1'), ([253, 281], '1'), ([291, 281], '1'), ([331, 279], '1'), ([369, 279], '1'), ([407, 279], '1'), ([101, 313], '!'), ([327, 308], '1'), ([369, 311], '1'), ([203, 383], 'xaxis label'), ([141, 320], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "light_slate = 1\nsaddle_brown = 7\n\nif light_slate < saddle_brown:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "446": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u70b9D\u662f\u25b3ABC\u7684\u5185\u5fc3\uff0c\u8fde\u63a5DB\uff0cDC\uff0c\u8fc7\u70b9D\u4f5cEF\u2225BC\u5206\u522b\u4ea4AB\u3001AC\u4e8e\u70b9E\u3001F\uff0c\u82e5BE+CF\uff1d8\uff0c\u5219EF\u7684\u957f\u5ea6\u4e3a\uff08\uff09",
        "image": "images/446.jpg",
        "choices": [
            "4",
            "5",
            "8",
            "16"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "446",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 144,
            "img_height": 105,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u70b9D\u662f\u25b3ABC\u7684\u5185\u5fc3\uff0c\u8fde\u63a5DB\uff0cDC\uff0c\u8fc7\u70b9D\u4f5cEF\u2225BC\u5206\u522b\u4ea4AB\u3001AC\u4e8e\u70b9E\u3001F\uff0c\u82e5BE+CF\uff1d8\uff0c\u5219EF\u7684\u957f\u5ea6\u4e3a\uff08\uff09\nChoices:\n(A) 4\n(B) 5\n(C) 8\n(D) 16\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nBE, CF, EF = sp.symbols('BE CF EF')\n\n# Define the given equation\neq = sp.Eq(BE + CF, 8)\n\n# Solve the equation for EF\nsolution = sp.solve(eq.subs({BE: EF, CF: EF}), EF)\n\n# Print the solution\nprint(solution)",
        "execution": "[4]",
        "error": "None",
        "extraction": "[4]",
        "prediction": "4",
        "true_false": false
    },
    "447": {
        "question": "Does Midnight Blue intersect Purple?",
        "image": "images/447.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "447",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 685,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 153], '1'), ([595, 171], 'Coral'), ([595, 193], 'Midnight Blue'), ([9, 191], '1'), ([595, 217], 'Purple'), ([527, 363], '100'), ([269, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Midnight Blue intersect Purple?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 153], '1'), ([595, 171], 'Coral'), ([595, 193], 'Midnight Blue'), ([9, 191], '1'), ([595, 217], 'Purple'), ([527, 363], '100'), ([269, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def intersect(color1, color2):\n    if color1 == \"Midnight Blue\" and color2 == \"Purple\":\n        return \"yes\"\n    else:\n        return \"no\"\n\nprint(intersect(\"Midnight Blue\", \"Purple\"))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "448": {
        "question": "Which year recorded the highest share of Urban secondary schools with access to electricity in India?",
        "image": "images/448.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2016",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "448",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 10], 'Share of schools with access to electricity, India, 2012 to 2016'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([701, 67], 'Upper secondary'), ([13, 103], '80%'), ([707, 199], 'ower secondary'), ([15, 209], '60%'), ([701, 279], 'Primary school'), ([15, 313], '40%'), ([13, 419], '20%'), ([31, 541], '2012'), ([193, 541], '2013'), ([355, 541], '2014'), ([515, 541], '2015'), ([677, 541], '2016'), ([15, 571], 'Source'), ([61, 571], 'UN Statistics Division'), ([183, 567], '(2019)'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which year recorded the highest share of Urban secondary schools with access to electricity in India?\nImage detected text: [([12, 10], 'Share of schools with access to electricity, India, 2012 to 2016'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([701, 67], 'Upper secondary'), ([13, 103], '80%'), ([707, 199], 'ower secondary'), ([15, 209], '60%'), ([701, 279], 'Primary school'), ([15, 313], '40%'), ([13, 419], '20%'), ([31, 541], '2012'), ([193, 541], '2013'), ([355, 541], '2014'), ([515, 541], '2015'), ([677, 541], '2016'), ([15, 571], 'Source'), ([61, 571], 'UN Statistics Division'), ([183, 567], '(2019)'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "data = {\n    '2012': 80,\n    '2013': 60,\n    '2014': 40,\n    '2015': 20,\n    '2016': 0\n}\n\nmax_share = max(data.values())\nyear = [k for k, v in data.items() if v == max_share][0]\nprint(year)",
        "execution": "",
        "error": "name 'max_share' is not defined",
        "extraction": "2012",
        "prediction": "2012",
        "true_false": false
    },
    "449": {
        "question": "How many miles per gallon do the average motorcycle get on the highway?",
        "image": "images/449.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "40",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "449",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many miles per gallon do the average motorcycle get on the highway?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "average_mpg = 50\nprint(average_mpg)",
        "execution": "50",
        "error": "None",
        "extraction": "50",
        "prediction": "50",
        "true_false": false
    },
    "450": {
        "question": "If all the grass died, what would be most affected?",
        "image": "images/450.jpg",
        "choices": [
            "garter snakes",
            "hognose snakes",
            "hawks",
            "grasshoppers"
        ],
        "unit": null,
        "precision": null,
        "answer": "grasshoppers",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "450",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 375,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If all the grass died, what would be most affected?\nChoices:\n(A) garter snakes\n(B) hognose snakes\n(C) hawks\n(D) grasshoppers\nImage detected text: [([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_affected(caption, choices):\n    affected_species = {\n        'garter snakes': 'grass',\n        'hognose snakes': 'grass',\n        'hawks': 'grass',\n        'grasshoppers': 'grass'\n    }\n\n    for choice in choices:\n        if choice.lower() in affected_species.values():\n            return choice\n    return \"\"\n\nchoices = ['garter snakes', 'hognose snakes', 'hawks', 'grasshoppers']\ncaption = \"The image shows a field of grass with various animals. There are garter snakes, hognose snakes, hawks, and grasshoppers in the field.\"\n\nprint(most_affected(caption, choices))",
        "execution": "",
        "error": "None",
        "extraction": "grasshoppers",
        "prediction": "grasshoppers",
        "true_false": true
    },
    "451": {
        "question": "Is the number of small yellow metallic choppers that are behind the large cyan thing less than the number of brown metal double buss that are behind the small yellow shiny thing?",
        "image": "images/451.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "451",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of small yellow metallic choppers that are behind the large cyan thing less than the number of brown metal double buss that are behind the small yellow shiny thing?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(num1, num2):\n    if num1 < num2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsmall_yellow_metallic_choppers = 5\nlarge_cyan_thing = 3\nbrown_metal_double_buss = 7\nsmall_yellow_shiny_thing = 4\n\nresult = compare_numbers(small_yellow_metallic_choppers, brown_metal_double_buss)\nprint(result)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "452": {
        "question": "Based on the image, what is the most likely equilibrium population count?",
        "image": "images/452.jpg",
        "choices": [
            "40",
            "60",
            "80",
            "100"
        ],
        "unit": null,
        "precision": null,
        "answer": "80",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "452",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 441,
            "img_height": 366,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Based on the image, what is the most likely equilibrium population count?\nChoices:\n(A) 40\n(B) 60\n(C) 80\n(D) 100\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_likely_population(image_data, choices):\n    population_counts = {\n        '40': 0,\n        '60': 0,\n        '80': 0,\n        '100': 0\n    }\n\n    for data in image_data:\n        if data[1] == 'population count':\n            count = data[0]\n            if count in population_counts:\n                population_counts[count] += 1\n\n    max_count = max(population_counts.values())\n    for count, freq in population_counts.items():\n        if freq == max_count:\n            return count\n\n    return \"\"\n\nimage_data = [([40, 3], 'population count'), ([60, 7], 'population count'), ([80, 11], 'population count'), ([100, 15], 'population count')]\nchoices = ['40', '60', '80', '100']\n\nprint(most_likely_population(image_data, choices))",
        "execution": "",
        "error": "unhashable type: 'list'",
        "extraction": "60",
        "prediction": "60",
        "true_false": false
    },
    "453": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/453.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "453",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 116,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 87], 'Ocm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 87], 'Ocm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(line_length):\n    line_length = line_length.replace('O', '0')\n    line_length = line_length.replace('cm', '')\n    line_length = int(line_length)\n    line_length_rounded = round(line_length)\n    return line_length_rounded\n\nline_length = '13cm'\nlength = measure_length(line_length)\nprint(length)",
        "execution": "13",
        "error": "None",
        "extraction": "13",
        "prediction": "13",
        "true_false": false
    },
    "454": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/454.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "454",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([230, 14], 'Title'), ([44, 34], '10'), ([332, 60], 'pale'), ([330, 88], 'summit'), ([12, 180], '9'), ([142, 408], 'cork'), ([320, 408], 'glaze')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([230, 14], 'Title'), ([44, 34], '10'), ([332, 60], 'pale'), ([330, 88], 'summit'), ([12, 180], '9'), ([142, 408], 'cork'), ([320, 408], 'glaze')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar_value = 10\n\nfor text in detected_text:\n    if text[1].isdigit():\n        value = int(text[1])\n        if value < smallest_bar_value:\n            smallest_bar_value = value\n\nprint(smallest_bar_value)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "455": {
        "question": "If x = 32 and r = 18, what is the length of the arc shown in the figure above?",
        "image": "images/455.jpg",
        "choices": [
            "16*\\pi/5",
            "32*\\pi/5",
            "36*\\pi",
            "288*\\pi/5",
            "576*\\pi"
        ],
        "unit": null,
        "precision": null,
        "answer": "16*\\pi/5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "455",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 575,
            "img_height": 353,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([38, 174], 'If x = 32 andr = 18, what is the length of the arc shown in the figure above?'), ([61, 205], '161'), ([59, 235], '321'), ([59, 263], '361'), ([59, 289], '2881'), ([41, 315], 'e: 5761')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If x = 32 and r = 18, what is the length of the arc shown in the figure above?\nChoices:\n(A) 16*\\pi/5\n(B) 32*\\pi/5\n(C) 36*\\pi\n(D) 288*\\pi/5\n(E) 576*\\pi\nImage detected text: [([38, 174], 'If x = 32 andr = 18, what is the length of the arc shown in the figure above?'), ([61, 205], '161'), ([59, 235], '321'), ([59, 263], '361'), ([59, 289], '2881'), ([41, 315], 'e: 5761')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nx = 32\nr = 18\n\narc_length = (x / 360) * (2 * math.pi * r)\nprint(arc_length)",
        "execution": "10.053096491487338",
        "error": "None",
        "extraction": "161",
        "prediction": "36*\\pi",
        "true_false": false
    },
    "456": {
        "question": "Is Periwinkle the minimum?",
        "image": "images/456.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "456",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([35, 13], 'Khaki'), ([119, 11], 'title'), ([35, 35], 'Periwinkle')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Periwinkle the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([35, 13], 'Khaki'), ([119, 11], 'title'), ([35, 35], 'Periwinkle')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_periwinkle_minimum(colors):\n    if \"Periwinkle\" in colors:\n        return \"no\"\n    else:\n        return \"yes\"\n\ncolors = [\"Khaki\", \"Periwinkle\"]\nprint(is_periwinkle_minimum(colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "457": {
        "question": "What number is shown?",
        "image": "images/457.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4525",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "457",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 605,
            "img_height": 97,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "458": {
        "question": "If you add the two visible numbers, on the jerseys, what is the total sum?",
        "image": "images/458.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "458",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([110, 154], '21')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If you add the two visible numbers, on the jerseys, what is the total sum?\nImage detected text: [([110, 154], '21')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "jersey_number = 21\ntotal_sum = sum(int(digit) for digit in str(jersey_number))\nprint(total_sum)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "459": {
        "question": "Subtract all large cyan matte balls. Subtract all tiny shiny objects. How many objects are left?",
        "image": "images/459.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "459",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large cyan matte balls. Subtract all tiny shiny objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_cyan_matte_balls = 5\ntiny_shiny_objects = 3\n\nobjects_left = large_cyan_matte_balls - tiny_shiny_objects\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "460": {
        "question": "If there were fewer leaves in this ecosystem, the first organism to experience change as a result would be:",
        "image": "images/460.jpg",
        "choices": [
            "Frogs",
            "Crickets",
            "Snakes",
            "Hawks"
        ],
        "unit": null,
        "precision": null,
        "answer": "Crickets",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "460",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 960,
            "img_height": 720,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 9], 'Food chain'), ([203, 9], 'the path of energy through an ecosystem'), ([270, 108], 'Food Chain'), ([39, 275], 'Sun'), ([143, 449], 'Leaves'), ([745, 469], 'Hawk'), ([105, 481], 'Picaret'), ([343, 533], 'Ceniun'), ([549, 499], '3 _'), ([571, 559], 'Snake'), ([833, 563], 'Mushrooms'), ([559, 593], 'Cots'), ([849, 597], 'Decomposer'), ([183, 599], 'Cricket'), ([135, 631], 'Conun'), ([375, 492], 'Frog')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If there were fewer leaves in this ecosystem, the first organism to experience change as a result would be:\nChoices:\n(A) Frogs\n(B) Crickets\n(C) Snakes\n(D) Hawks\nImage detected text: [([7, 9], 'Food chain'), ([203, 9], 'the path of energy through an ecosystem'), ([270, 108], 'Food Chain'), ([39, 275], 'Sun'), ([143, 449], 'Leaves'), ([745, 469], 'Hawk'), ([105, 481], 'Picaret'), ([343, 533], 'Ceniun'), ([549, 499], '3 _'), ([571, 559], 'Snake'), ([833, 563], 'Mushrooms'), ([559, 593], 'Cots'), ([849, 597], 'Decomposer'), ([183, 599], 'Cricket'), ([135, 631], 'Conun'), ([375, 492], 'Frog')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def first_organism(caption, choices):\n    organisms = {\n        'Frogs': 'Frog',\n        'Crickets': 'Cricket',\n        'Snakes': 'Snake',\n        'Hawks': 'Hawk'\n    }\n\n    for choice in choices:\n        if choice == organisms[caption]:\n            return choice\n    return \"\"\n\nchoices = ['Frogs', 'Crickets', 'Snakes', 'Hawks']\ncaption = \"The image shows a food chain in an ecosystem. The chain starts with the sun, followed by leaves, crickets, frogs, snakes, and hawks. The text on the image explains the path of energy through an ecosystem.\"\n\nprint(first_organism('Leaves', choices))",
        "execution": "",
        "error": "'Leaves'",
        "extraction": "C",
        "prediction": "Snakes",
        "true_false": false
    },
    "461": {
        "question": "A perceptual audio codec is used to compress an audio signal. The codec groups every 4 barks into a subband and then allocates bits to different subbands according to the result of a spectrum analysis based on a psychoacoustic model. All samples in the same subband are quantized with the same quantizer, and the bit resolution of which is allocated by the codec. (The Bark scale is a psychoacoustical scale proposed by Eberhard Zwicker in 1961.) Fig. Q1a shows the frequency spectrum of a windowed segment of audio signal. The psychoacoustic model shown in Fig. Q1b is used in the audio codec to derive the masking threshold for the audio segment. How many potential maskers in Fig. Q1a?",
        "image": "images/461.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "461",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 908,
            "img_height": 488,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([438, 30], 'In'), ([522, 32], 'Qut'), ([16, 44], '16-Bit'), ([782, 48], '1-Bit'), ([418, 64], '2 0,5'), ([15, 74], 'Input'), ([442, 96], '0.5'), ([537, 99], '0'), ([763, 75], 'Output'), ([438, 144], 'Quantizer'), ([509, 275], 'Error Signal'), ([370, 302], '2'), ([352, 349], 'Delay'), ([383, 435], 'Fig: Q2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A perceptual audio codec is used to compress an audio signal. The codec groups every 4 barks into a subband and then allocates bits to different subbands according to the result of a spectrum analysis based on a psychoacoustic model. All samples in the same subband are quantized with the same quantizer, and the bit resolution of which is allocated by the codec. (The Bark scale is a psychoacoustical scale proposed by Eberhard Zwicker in 1961.) Fig. Q1a shows the frequency spectrum of a windowed segment of audio signal. The psychoacoustic model shown in Fig. Q1b is used in the audio codec to derive the masking threshold for the audio segment. How many potential maskers in Fig. Q1a?\nImage detected text: [([438, 30], 'In'), ([522, 32], 'Qut'), ([16, 44], '16-Bit'), ([782, 48], '1-Bit'), ([418, 64], '2 0,5'), ([15, 74], 'Input'), ([442, 96], '0.5'), ([537, 99], '0'), ([763, 75], 'Output'), ([438, 144], 'Quantizer'), ([509, 275], 'Error Signal'), ([370, 302], '2'), ([352, 349], 'Delay'), ([383, 435], 'Fig: Q2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\ndef potential_maskers(frequency_spectrum):\n    maskers = 0\n    for i in range(len(frequency_spectrum)):\n        if i > 0 and i < len(frequency_spectrum)-1:\n            if frequency_spectrum[i] > frequency_spectrum[i-1] and frequency_spectrum[i] > frequency_spectrum[i+1]:\n                maskers += 1\n    return maskers\n\nfrequency_spectrum = [0.5, 0.8, 0.9, 0.7, 0.6, 0.4, 0.3, 0.2, 0.1, 0.3, 0.5, 0.7, 0.9, 0.8, 0.6, 0.4, 0.2, 0.1, 0.3, 0.5]\n\nplt.plot(frequency_spectrum)\nplt.xlabel('Frequency')\nplt.ylabel('Amplitude')\nplt.title('Frequency Spectrum')\nplt.show()\n\nprint(potential_maskers(frequency_spectrum))",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "462": {
        "question": "How many bars have values larger than 100?",
        "image": "images/462.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "462",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([232, 12], 'Title'), ([39, 33], '1010'), ([44, 72], '109'), ([44, 116], '108'), ([45, 161], '107'), ([44, 202], '106'), ([15, 197], '1'), ([44, 246], '105'), ([45, 291], '104'), ([45, 335], '103'), ([44, 376], '102'), ([117, 413], 'pepper'), ([343, 409], 'hull')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have values larger than 100?\nImage detected text: [([232, 12], 'Title'), ([39, 33], '1010'), ([44, 72], '109'), ([44, 116], '108'), ([45, 161], '107'), ([44, 202], '106'), ([15, 197], '1'), ([44, 246], '105'), ([45, 291], '104'), ([45, 335], '103'), ([44, 376], '102'), ([117, 413], 'pepper'), ([343, 409], 'hull')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [1010, 109, 108, 107, 106, 1, 105, 104, 103, 102]\ncount = 0\n\nfor bar in bars:\n    if bar > 100:\n        count += 1\n\nprint(count)",
        "execution": "9",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "463": {
        "question": "Subtract all large gray things. Subtract all small brown metallic balls. How many objects are left?",
        "image": "images/463.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "463",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large gray things. Subtract all small brown metallic balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_gray_things = 5\nsmall_brown_metallic_balls = 3\n\nobjects_left = large_gray_things - small_brown_metallic_balls\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "464": {
        "question": "Choose the answer for the missing picture.",
        "image": "images/464.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "464",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1000,
            "img_height": 1316,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Choose the answer for the missing picture.\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5\n(F) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_picture = 3\nprint(missing_picture)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "465": {
        "question": "Is Light Green the low median?",
        "image": "images/465.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "465",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 628,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([129, 11], 'title'), ([31, 79], 'Medium Orchid'), ([7, 155], '1'), ([51, 185], 'Light Green'), ([260, 42], ''), ([89, 291], 'Coral'), ([593, 363], '100'), ([341, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Light Green the low median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([129, 11], 'title'), ([31, 79], 'Medium Orchid'), ([7, 155], '1'), ([51, 185], 'Light Green'), ([260, 42], ''), ([89, 291], 'Coral'), ([593, 363], '100'), ([341, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_low_median(color, median_color):\n    if color == median_color:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolor = \"Light Green\"\nmedian_color = \"Medium Orchid\"\n\nprint(is_low_median(color, median_color))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "466": {
        "question": "Does Dark Periwinkle intersect Yellow Green?",
        "image": "images/466.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "466",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 487,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 155], '9'), ([225, 173], 'Dark Periwinkle'), ([225, 195], 'Yellow Green'), ([9, 191], '1'), ([451, 363], '100'), ([229, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Dark Periwinkle intersect Yellow Green?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 155], '9'), ([225, 173], 'Dark Periwinkle'), ([225, 195], 'Yellow Green'), ([9, 191], '1'), ([451, 363], '100'), ([229, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def does_intersect(color1, color2):\n    colors = {\n        'Dark Periwinkle': [(204, 204, 255), (153, 153, 255)],\n        'Yellow Green': [(154, 205, 50), (50, 205, 50)]\n    }\n\n    if color1 in colors and color2 in colors:\n        if colors[color1][0] >= colors[color2][0] and colors[color1][1] <= colors[color2][1]:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"\"\n\ncolor1 = 'Dark Periwinkle'\ncolor2 = 'Yellow Green'\n\nprint(does_intersect(color1, color2))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "467": {
        "question": "The degree measures of minor arc $\\widehat{A C}$ and major arc $\\widehat{A D C}$ are $x$ and $y$ respectively. If $m\u2220ABC = 70\u00b0$, find $x$.",
        "image": "images/467.jpg",
        "choices": [
            "90",
            "100",
            "110",
            "120"
        ],
        "unit": null,
        "precision": null,
        "answer": "110",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "467",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 499,
            "img_height": 235,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([303, 15], 'A'), ([10, 106], 'B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The degree measures of minor arc $\\widehat{A C}$ and major arc $\\widehat{A D C}$ are $x$ and $y$ respectively. If $m\u2220ABC = 70\u00b0$, find $x$.\nChoices:\n(A) 90\n(B) 100\n(C) 110\n(D) 120\nImage detected text: [([303, 15], 'A'), ([10, 106], 'B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Given information\nm_ABC = 70\n\n# Let x be the degree measure of minor arc AC\nx = sp.Symbol('x')\n\n# Angle ABC is an inscribed angle, so it is equal to half the degree measure of its intercepted arc AC\nm_ACB = x / 2\n\n# Angle BAC is a central angle, so it is equal to the degree measure of its intercepted arc AC\nm_BAC = x\n\n# Angle BAC + Angle ABC + Angle ACB = 180 degrees (sum of angles in a triangle)\neq = sp.Eq(m_BAC + m_ABC + m_ACB, 180)\n\n# Solve for x\nsolutions = sp.solve(eq, x)\n\n# Check if the solutions are valid (x must be between 0 and 180)\nvalid_solutions = [sol for sol in solutions if 0 <= sol <= 180]\n\n# Choose the valid solution with the smallest degree measure\nx = min(valid_solutions)\n\nx",
        "execution": "",
        "error": "None",
        "extraction": "110",
        "prediction": "110",
        "true_false": true
    },
    "468": {
        "question": "How many people prefer the most preferred object?",
        "image": "images/468.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "468",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([97, 7], 'Most preferred objects'), ([12, 52], '9'), ([15, 175], '3'), ([15, 297], '17'), ([405, 381], '10'), ([136, 404], 'Number of People')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people prefer the most preferred object?\nImage detected text: [([97, 7], 'Most preferred objects'), ([12, 52], '9'), ([15, 175], '3'), ([15, 297], '17'), ([405, 381], '10'), ([136, 404], 'Number of People')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_objects = 9\nnumber_of_people = 17\n\npreferred_people = most_preferred_objects * number_of_people\nprint(preferred_people)",
        "execution": "153",
        "error": "None",
        "extraction": "153",
        "prediction": "153",
        "true_false": false
    },
    "469": {
        "question": "Is Sky Blue less than Chartreuse?",
        "image": "images/469.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "469",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([137, 11], 'title'), ([35, 147], 'Chartreuse'), ([35, 171], 'Sky Blue'), ([35, 193], 'Rebecca Purple'), ([33, 217], 'Lime Green'), ([33, 239], 'Web Purple')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Sky Blue less than Chartreuse?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([137, 11], 'title'), ([35, 147], 'Chartreuse'), ([35, 171], 'Sky Blue'), ([35, 193], 'Rebecca Purple'), ([33, 217], 'Lime Green'), ([33, 239], 'Web Purple')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "color_dict = {\n    'Chartreuse': 1,\n    'Sky Blue': 2,\n    'Rebecca Purple': 3,\n    'Lime Green': 4,\n    'Web Purple': 5\n}\n\nif color_dict['Sky Blue'] < color_dict['Chartreuse']:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "470": {
        "question": "Which of the following models has the lowest KS Rollout Loss overall?",
        "image": "images/470.jpg",
        "choices": [
            "Baseline",
            "Diffusion",
            "PDE-Refiner",
            "Pushforward"
        ],
        "unit": null,
        "precision": null,
        "answer": "PDE-Refiner",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "470",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1422,
            "img_height": 854,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([594, 0], 'KS Rollout Loss'), ([133, 101], '0'), ([97, 105], '100'), ([27, 174], '3'), ([27, 277], 'J'), ([34, 412], '8'), ([29, 455], '3'), ([27, 535], '49'), ([133, 635], '8'), ([655, 615], 'Baseline'), ([1033, 615], 'Diffusion'), ([77, 639], '10-='), ([655, 667], 'Pushforward'), ([1031, 665], 'PDE-Refiner (ours)'), ([351, 759], '20'), ([554, 762], '40'), ([753, 757], '60'), ([1149, 759], '100'), ([1351, 759], '120'), ([535, 798], 'Rollout Time Step in seconds'), ([75, 238], '10-2'), ([74, 372], '10-4'), ([75, 504], '10-6')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the following models has the lowest KS Rollout Loss overall?\nChoices:\n(A) Baseline\n(B) Diffusion\n(C) PDE-Refiner\n(D) Pushforward\nImage detected text: [([594, 0], 'KS Rollout Loss'), ([133, 101], '0'), ([97, 105], '100'), ([27, 174], '3'), ([27, 277], 'J'), ([34, 412], '8'), ([29, 455], '3'), ([27, 535], '49'), ([133, 635], '8'), ([655, 615], 'Baseline'), ([1033, 615], 'Diffusion'), ([77, 639], '10-='), ([655, 667], 'Pushforward'), ([1031, 665], 'PDE-Refiner (ours)'), ([351, 759], '20'), ([554, 762], '40'), ([753, 757], '60'), ([1149, 759], '100'), ([1351, 759], '120'), ([535, 798], 'Rollout Time Step in seconds'), ([75, 238], '10-2'), ([74, 372], '10-4'), ([75, 504], '10-6')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ks_rollout_loss = {\n    'Baseline': 0,\n    'Diffusion': 3,\n    'PDE-Refiner': 8,\n    'Pushforward': 49\n}\n\nlowest_loss = min(ks_rollout_loss.values())\nlowest_models = [model for model, loss in ks_rollout_loss.items() if loss == lowest_loss]\n\nprint(lowest_models)",
        "execution": "",
        "error": "name 'lowest_loss' is not defined",
        "extraction": "['Diffusion', 'PDE-Refiner']",
        "prediction": "PDE-Refiner",
        "true_false": true
    },
    "471": {
        "question": "Lily and her friends recorded their scores while playing a board game. Which score did the greatest number of people receive?'",
        "image": "images/471.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "471",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 351,
            "img_height": 190,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([81, 3], 'Scores on'), ([177, 5], 'board game'), ([65, 33], 'Score'), ([222, 32], 'Frequency'), ([253, 87], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Lily and her friends recorded their scores while playing a board game. Which score did the greatest number of people receive?'\nImage detected text: [([81, 3], 'Scores on'), ([177, 5], 'board game'), ([65, 33], 'Score'), ([222, 32], 'Frequency'), ([253, 87], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "scores = [10, 8, 10, 6, 7, 10, 8, 9, 10, 10, 7, 8, 9, 10, 10, 10, 8, 9, 10, 10]\n\nscore_counts = {}\nfor score in scores:\n    if score in score_counts:\n        score_counts[score] += 1\n    else:\n        score_counts[score] = 1\n\nmax_count = max(score_counts.values())\nmost_common_scores = [score for score, count in score_counts.items() if count == max_count]\n\nprint(most_common_scores)",
        "execution": "",
        "error": "name 'max_count' is not defined",
        "extraction": "[10]",
        "prediction": null,
        "true_false": false
    },
    "472": {
        "question": "Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.",
        "image": "images/472.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "472",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 633,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 9\ngroups = 3\n\ndots_in_each_group = dots // groups\nprint(dots_in_each_group)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "473": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/473.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "12",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "473",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2500,
            "img_height": 2604,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1666, 801], 'IMSUNG'), ([660, 896], 'Hir As'), ([1698, 1572], '10'), ([2089, 836], 'JRcE5L')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([1666, 801], 'IMSUNG'), ([660, 896], 'Hir As'), ([1698, 1572], '10'), ([2089, 836], 'JRcE5L')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 10\nperson2_age = 0\n\nage_gap = person1_age - person2_age\nprint(age_gap)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "474": {
        "question": "How many miles per gallon do an average city bus get?",
        "image": "images/474.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "25",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "474",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 333,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([401, 1], '[15606')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many miles per gallon do an average city bus get?\nImage detected text: [([401, 1], '[15606')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "miles_per_gallon = 15606\nprint(miles_per_gallon)",
        "execution": "15606",
        "error": "None",
        "extraction": "15606",
        "prediction": "15606",
        "true_false": false
    },
    "475": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/475.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "475",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 71,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 43], 'Ucm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 43], 'Ucm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(line_length):\n    cm_length = math.ceil(line_length)\n    return cm_length\n\nline_length = 12.5\ncm_length = measure_length(line_length)\nprint(cm_length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "13",
        "prediction": "13",
        "true_false": false
    },
    "476": {
        "question": "If frogs were removed from this environment what animal would potentially see an increase in its population?",
        "image": "images/476.jpg",
        "choices": [
            "crickets",
            "deer",
            "snakes",
            "hawks"
        ],
        "unit": null,
        "precision": null,
        "answer": "crickets",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "476",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 518,
            "img_height": 405,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([126, 48], 'Snakes'), ([251, 87], 'Hawks'), ([325, 131], 'Owls'), ([211, 225], 'Mice'), ([343, 257], 'Crickets'), ([103, 271], 'Deer'), ([127, 311], 'Trees'), ([268, 312], 'Grasses'), ([268, 336], 'Cai'), ([167, 365], 'Decomposers'), ([335, 176], 'Frogs')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If frogs were removed from this environment what animal would potentially see an increase in its population?\nChoices:\n(A) crickets\n(B) deer\n(C) snakes\n(D) hawks\nImage detected text: [([126, 48], 'Snakes'), ([251, 87], 'Hawks'), ([325, 131], 'Owls'), ([211, 225], 'Mice'), ([343, 257], 'Crickets'), ([103, 271], 'Deer'), ([127, 311], 'Trees'), ([268, 312], 'Grasses'), ([268, 336], 'Cai'), ([167, 365], 'Decomposers'), ([335, 176], 'Frogs')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def increase_population(caption, choices):\n    animals = {\n        'crickets': 'Crickets',\n        'deer': 'Deer',\n        'snakes': 'Snakes',\n        'hawks': 'Hawks'\n    }\n\n    if \"frogs\" in caption.lower():\n        return animals['snakes']\n    return \"\"\n\nchoices = ['crickets', 'deer', 'snakes', 'hawks']\ncaption = \"The image shows a pond with lily pads and reeds. There are frogs sitting on the lily pads and swimming in the water. The text on the image says 'Frogs in their natural habitat'.\"\n\nprint(increase_population(caption, choices))",
        "execution": "Snakes",
        "error": "None",
        "extraction": "Snakes",
        "prediction": "snakes",
        "true_false": false
    },
    "477": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) past three.",
        "image": "images/477.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "half",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "477",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) past three.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter past\"\nprint(time_word)",
        "execution": "quarter past",
        "error": "None",
        "extraction": "quarter past",
        "prediction": "quarter past",
        "true_false": false
    },
    "478": {
        "question": "As shown in the figure, in the diamond ABCD, two diagonal lines AC = 12.0, BD = 16.0, then the edge length of this diamond is ()",
        "image": "images/478.jpg",
        "choices": [
            "10",
            "8",
            "6",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "478",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 125,
            "img_height": 97,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the diamond ABCD, two diagonal lines AC = 12.0, BD = 16.0, then the edge length of this diamond is ()\nChoices:\n(A) 10\n(B) 8\n(C) 6\n(D) 5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef diamond_edge_length(ac, bd):\n    diagonal_length = math.sqrt(ac**2 + bd**2)\n    edge_length = diagonal_length / math.sqrt(2)\n    return edge_length\n\nac = 12.0\nbd = 16.0\n\nprint(diamond_edge_length(ac, bd))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "8.49",
        "prediction": "8",
        "true_false": false
    },
    "479": {
        "question": "How many times Norway data bigger than Italy data ?",
        "image": "images/479.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "2.54",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "479",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 10], 'Public health insurance coverage in Western Europe, 1935'), ([774, 18], 'Our Daorld'), ([15, 45], 'Share of the labour force covered by public health insurance in Western Europe'), ([5, 115], 'Norway'), ([801, 115], '56%'), ([9, 229], 'Ireland'), ([565, 229], '3890'), ([3, 343], 'Sweden'), ([525, 343], '35%'), ([27, 459], 'Italy'), ([353, 459], '2290'), ([173, 541], '10%'), ([305, 541], '20%'), ([437, 541], '30%'), ([571, 543], '40%'), ([703, 543], '50%'), ([15, 571], 'Source: Tanzi'), ([105, 569], 'Schuktnecht (2000)'), ([549, 570], 'OurWorldlnData orglfinancing-healthcarel'), ([793, 571], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many times Norway data bigger than Italy data ?\nImage detected text: [([11, 10], 'Public health insurance coverage in Western Europe, 1935'), ([774, 18], 'Our Daorld'), ([15, 45], 'Share of the labour force covered by public health insurance in Western Europe'), ([5, 115], 'Norway'), ([801, 115], '56%'), ([9, 229], 'Ireland'), ([565, 229], '3890'), ([3, 343], 'Sweden'), ([525, 343], '35%'), ([27, 459], 'Italy'), ([353, 459], '2290'), ([173, 541], '10%'), ([305, 541], '20%'), ([437, 541], '30%'), ([571, 543], '40%'), ([703, 543], '50%'), ([15, 571], 'Source: Tanzi'), ([105, 569], 'Schuktnecht (2000)'), ([549, 570], 'OurWorldlnData orglfinancing-healthcarel'), ([793, 571], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "norway_data = 56\nitaly_data = 10\n\ntimes_bigger = norway_data / italy_data\nprint(times_bigger)",
        "execution": "5.6",
        "error": "None",
        "extraction": "5.6",
        "prediction": "5.6",
        "true_false": false
    },
    "480": {
        "question": "Is the number of tiny blue metal bicycles behind the small sedan less than the number of purple fighters?",
        "image": "images/480.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "480",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of tiny blue metal bicycles behind the small sedan less than the number of purple fighters?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bicycles_fighters(num_bicycles, num_fighters):\n    if num_bicycles < num_fighters:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_bicycles = 10\nnum_fighters = 8\n\nprint(compare_bicycles_fighters(num_bicycles, num_fighters))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "481": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/481.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "481",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 592,
            "img_height": 404,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([272, 76], 'MMAN')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([272, 76], 'MMAN')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1990\nperson2_birth_year = 1985\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "482": {
        "question": "In the figure above, triangle ABC is inscribed in the circle with center O and diameter AC. If AB = AO, what is the degree measure of angle ABO?",
        "image": "images/482.jpg",
        "choices": [
            "15*\\degree",
            "30*\\degree",
            "45*\\degree",
            "60*\\degree",
            "90*\\degree"
        ],
        "unit": null,
        "precision": null,
        "answer": "60*\\degree",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "482",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 143,
            "img_height": 134,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, triangle ABC is inscribed in the circle with center O and diameter AC. If AB = AO, what is the degree measure of angle ABO?\nChoices:\n(A) 15*\\degree\n(B) 30*\\degree\n(C) 45*\\degree\n(D) 60*\\degree\n(E) 90*\\degree\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_ABO(AB, AO):\n    # Since AB = AO, triangle ABO is an isosceles triangle\n    # The base angles of an isosceles triangle are equal\n    # Let x be the degree measure of angle ABO\n    # Then, the degree measure of angle BAO is also x\n    # The sum of the degree measures of angles in a triangle is 180 degrees\n    # Therefore, 2x + x = 180\n    # Simplifying the equation, we get 3x = 180\n    # Dividing both sides by 3, we get x = 60\n    \n    return 60\n\nAB = 5\nAO = 5\n\nprint(angle_ABO(AB, AO))",
        "execution": "60",
        "error": "None",
        "extraction": "60",
        "prediction": "60*\\degree",
        "true_false": true
    },
    "483": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, point C is on \u2299O, AE is the tangent of \u2299O, A is the tangent point, connect BC and extend to intersect AE at point D. If \u2220AOC = 80.0, then the degree of \u2220ADB is ()",
        "image": "images/483.jpg",
        "choices": [
            "40\u00b0",
            "50\u00b0",
            "60\u00b0",
            "20\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "483",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 165,
            "img_height": 129,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, point C is on \u2299O, AE is the tangent of \u2299O, A is the tangent point, connect BC and extend to intersect AE at point D. If \u2220AOC = 80.0, then the degree of \u2220ADB is ()\nChoices:\n(A) 40\u00b0\n(B) 50\u00b0\n(C) 60\u00b0\n(D) 20\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_ADB(angle_AOC):\n    angle_AOC_rad = math.radians(angle_AOC)\n    angle_ADB_rad = math.pi - angle_AOC_rad\n    angle_ADB_deg = math.degrees(angle_ADB_rad)\n    return angle_ADB_deg\n\nangle_AOC = 80.0\nangle_ADB = find_angle_ADB(angle_AOC)\nprint(angle_ADB)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": true
    },
    "484": {
        "question": "Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.",
        "image": "images/484.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "484",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 633,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 9\ngroups = 3\n\ndots_in_each_group = dots // groups\nprint(dots_in_each_group)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "485": {
        "question": "\u5982\u56fe\uff0c\u70b9D\u5728\u7b49\u8fb9\u25b3ABC\u7684\u8fb9CB\u7684\u5ef6\u957f\u7ebf\u4e0a\uff0c\u70b9E\u5728\u7ebf\u6bb5BC\u4e0a\uff0c\u8fde\u63a5AD\uff0cAE\uff0c\u82e5DA\uff1dDE\uff0c\u4e14\u2220DAB\uff1d20\u00b0\uff0c\u90a3\u4e48\u2220EAC\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/485.jpg",
        "choices": [
            "20\u00b0",
            "15\u00b0",
            "10\u00b0",
            "5\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "10\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "485",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 235,
            "img_height": 110,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([3, 57], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u70b9D\u5728\u7b49\u8fb9\u25b3ABC\u7684\u8fb9CB\u7684\u5ef6\u957f\u7ebf\u4e0a\uff0c\u70b9E\u5728\u7ebf\u6bb5BC\u4e0a\uff0c\u8fde\u63a5AD\uff0cAE\uff0c\u82e5DA\uff1dDE\uff0c\u4e14\u2220DAB\uff1d20\u00b0\uff0c\u90a3\u4e48\u2220EAC\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 20\u00b0\n(B) 15\u00b0\n(C) 10\u00b0\n(D) 5\u00b0\nImage detected text: [([3, 57], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_DAB = 20\n    angle_DAE = 180 - angle_DAB\n    angle_ADE = angle_DAE / 2\n    angle_EAC = 180 - angle_ADE\n    return angle_EAC\n\nprint(find_angle())",
        "execution": "100.0",
        "error": "None",
        "extraction": "10",
        "prediction": "10\u00b0",
        "true_false": true
    },
    "486": {
        "question": "\u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAB\uff1d5\uff0cAD\uff1d7\uff0c\u5219ABCD\u7684\u5468\u957f\u4e3a\uff08\uff09",
        "image": "images/486.jpg",
        "choices": [
            "12",
            "14",
            "35",
            "24"
        ],
        "unit": null,
        "precision": null,
        "answer": "24",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "486",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 156,
            "img_height": 79,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAB\uff1d5\uff0cAD\uff1d7\uff0c\u5219ABCD\u7684\u5468\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 12\n(B) 14\n(C) 35\n(D) 24\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 5\nAD = 7\n\nBC = AB\nCD = AD\n\nperimeter = AB + BC + CD + AD\nperimeter",
        "execution": "",
        "error": "None",
        "extraction": "24",
        "prediction": "24",
        "true_false": true
    },
    "487": {
        "question": "Are there fewer big cars behind the small brown shiny mountain bike than tiny objects on the right side of the bus?",
        "image": "images/487.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "487",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer big cars behind the small brown shiny mountain bike than tiny objects on the right side of the bus?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(caption):\n    num_big_cars = 0\n    num_tiny_objects = 0\n\n    if \"big cars\" in caption:\n        num_big_cars = int(caption[caption.index(\"big cars\")-2])\n    if \"small brown shiny mountain bike\" in caption:\n        num_bike = 1\n    if \"tiny objects\" in caption:\n        num_tiny_objects = int(caption[caption.index(\"tiny objects\")-2])\n\n    if num_big_cars < num_tiny_objects:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"There are 2 big cars behind the small brown shiny mountain bike. There are 5 tiny objects on the right side of the bus.\"\n\nprint(compare_objects(caption))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "488": {
        "question": "Subtract all brown things. Subtract all tiny blue metallic objects. How many objects are left?",
        "image": "images/488.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "488",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown things. Subtract all tiny blue metallic objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = ['brown chair', 'blue metallic pen', 'brown table', 'tiny blue metallic key', 'brown book', 'blue metallic paperclip', 'brown mug', 'tiny blue metallic screwdriver']\n\nbrown_objects = [obj for obj in objects if 'brown' in obj]\nblue_metallic_objects = [obj for obj in objects if 'blue metallic' in obj and 'tiny' not in obj]\n\nremaining_objects = [obj for obj in objects if obj not in brown_objects and obj not in blue_metallic_objects]\n\nnum_remaining_objects = len(remaining_objects)\nprint(num_remaining_objects)",
        "execution": "",
        "error": "name 'brown_objects' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "489": {
        "question": "For trapezoid ABCD shown above, AB = 24, AD = 23, and BC = 16. What is the length of segment CD?",
        "image": "images/489.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "25",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "489",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 426,
            "img_height": 297,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([5, 199], '12.'), ([33, 198], 'For trapezoid ABCD shown above_'), ([275, 197], 'AB = 24. AD = 23.'), ([33, 215], 'and BC = 16.'), ([134, 212], 'What is the length of segment CD?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For trapezoid ABCD shown above, AB = 24, AD = 23, and BC = 16. What is the length of segment CD?\nImage detected text: [([5, 199], '12.'), ([33, 198], 'For trapezoid ABCD shown above_'), ([275, 197], 'AB = 24. AD = 23.'), ([33, 215], 'and BC = 16.'), ([134, 212], 'What is the length of segment CD?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 24\nAD = 23\nBC = 16\n\nCD = AB - BC\nprint(CD)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "490": {
        "question": "\u5982\u56fe\uff0c\u70b9A\u3001C\u3001B\u5728\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0cDC\u22a5EC\uff0c\u82e5\u2220BCD\uff1d40\u00b0\uff0c\u5219\u2220ACE\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/490.jpg",
        "choices": [
            "30\u00b0",
            "40\u00b0",
            "50\u00b0",
            "60\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "490",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 155,
            "img_height": 88,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u70b9A\u3001C\u3001B\u5728\u540c\u4e00\u76f4\u7ebf\u4e0a\uff0cDC\u22a5EC\uff0c\u82e5\u2220BCD\uff1d40\u00b0\uff0c\u5219\u2220ACE\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 30\u00b0\n(B) 40\u00b0\n(C) 50\u00b0\n(D) 60\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_BCD = 40\n    angle_BCD_rad = math.radians(angle_BCD)\n    angle_ACE_rad = math.pi - angle_BCD_rad\n    angle_ACE_deg = math.degrees(angle_ACE_rad)\n    return angle_ACE_deg\n\nprint(find_angle())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": true
    },
    "491": {
        "question": "Is Dark Blue the high median?",
        "image": "images/491.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "491",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 540,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([129, 11], 'title'), ([31, 79], 'Medium Orchid'), ([7, 155], '9'), ([59, 185], 'Royal Blue'), ([9, 191], '1'), ([63, 291], 'Dark Blue'), ([297, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Blue the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([129, 11], 'title'), ([31, 79], 'Medium Orchid'), ([7, 155], '9'), ([59, 185], 'Royal Blue'), ([9, 191], '1'), ([63, 291], 'Dark Blue'), ([297, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "title = 'Dark Blue'\nmedian = 'Medium Orchid'\n\nif title == median:\n    ans = 'yes'\nelse:\n    ans = 'no'\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "492": {
        "question": "As shown in the figure, in the \u2299O with a radius of 2.0, C is a point on the extended line of the diameter AB, CD is tangent to the circle at point D. Connect AD, given that \u2220DAC = 30.0, the length of the line segment CD is ()",
        "image": "images/492.jpg",
        "choices": [
            "1",
            "\u221a{3}",
            "2",
            "2\u221a{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "2\u221a{3}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "492",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 158,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the \u2299O with a radius of 2.0, C is a point on the extended line of the diameter AB, CD is tangent to the circle at point D. Connect AD, given that \u2220DAC = 30.0, the length of the line segment CD is ()\nChoices:\n(A) 1\n(B) \u221a{3}\n(C) 2\n(D) 2\u221a{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nradius = 2.0\nangle_DAC = 30.0\n\n# Calculate the length of AD\nlength_AD = radius * math.sin(math.radians(angle_DAC))\n\n# Calculate the length of CD\nlength_CD = math.sqrt(radius**2 - length_AD**2)\n\nlength_CD",
        "execution": "",
        "error": "None",
        "extraction": "1.73",
        "prediction": "1",
        "true_false": false
    },
    "493": {
        "question": "Is the function differentiable at every point?",
        "image": "images/493.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "493",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 847,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([76, 0], '40'), ([20, 18], 'y'), ([75, 67], '38'), ([75, 139], '36'), ([75, 211], '34'), ([73, 283], '32'), ([0, 260], '0'), ([73, 359], '30'), ([75, 431], '28'), ([75, 503], '26'), ([75, 577], '24'), ([75, 649], '22'), ([75, 723], '20'), ([25, 759], '1988'), ([163, 759], '1992'), ([301, 759], '1996'), ([438, 762], '2000'), ([584, 762], '2004'), ([725, 759], '2008'), ([393, 811], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the function differentiable at every point?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([76, 0], '40'), ([20, 18], 'y'), ([75, 67], '38'), ([75, 139], '36'), ([75, 211], '34'), ([73, 283], '32'), ([0, 260], '0'), ([73, 359], '30'), ([75, 431], '28'), ([75, 503], '26'), ([75, 577], '24'), ([75, 649], '22'), ([75, 723], '20'), ([25, 759], '1988'), ([163, 759], '1992'), ([301, 759], '1996'), ([438, 762], '2000'), ([584, 762], '2004'), ([725, 759], '2008'), ([393, 811], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_differentiable(points):\n    for point in points:\n        if point[1] != 'y':\n            return \"No\"\n    return \"Yes\"\n\npoints = [('40', 'y'), ('38', 'y'), ('36', 'y'), ('34', 'y'), ('32', 'y'), ('30', 'y'), ('28', 'y'), ('26', 'y'), ('24', 'y'), ('22', 'y'), ('20', 'y')]\nprint(is_differentiable(points))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "494": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/494.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "494",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 97,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 67], 'Ocn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 67], 'Ocn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(line_length):\n    nearest_cm = round(line_length)\n    return nearest_cm\n\nline_length = 13.67\nnearest_cm = measure_length(line_length)\nprint(nearest_cm)",
        "execution": "14",
        "error": "None",
        "extraction": "14",
        "prediction": "14",
        "true_false": false
    },
    "495": {
        "question": "Are there fewer green things in front of the blue metallic car than choppers right of the chopper?",
        "image": "images/495.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "495",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer green things in front of the blue metallic car than choppers right of the chopper?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_green_things(caption):\n    green_count = caption.count('green')\n    return green_count\n\ndef count_choppers(caption):\n    chopper_count = caption.count('chopper')\n    return chopper_count\n\ndef compare_counts(caption):\n    green_count = count_green_things(caption)\n    chopper_count = count_choppers(caption)\n\n    if green_count < chopper_count:\n        return 'Yes'\n    else:\n        return 'No'\n\ncaption = \"There are two green trees in front of the blue metallic car. There are three choppers to the right of the chopper.\"\nprint(compare_counts(caption))",
        "execution": "",
        "error": "name 'count_green_things' is not defined",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "496": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/496.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "20",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "496",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([233, 13], 'Title'), ([35, 29], '100'), ([377, 53], 'twist'), ([379, 77], 'cave'), ([15, 197], '1'), ([45, 317], '20'), ([111, 411], 'locker'), ([227, 413], 'tunnel'), ([339, 411], 'niece')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([233, 13], 'Title'), ([35, 29], '100'), ([377, 53], 'twist'), ([379, 77], 'cave'), ([15, 197], '1'), ([45, 317], '20'), ([111, 411], 'locker'), ([227, 413], 'tunnel'), ([339, 411], 'niece')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar_value = 1\nprint(smallest_bar_value)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "497": {
        "question": "What is the value of the largest bar?",
        "image": "images/497.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "497",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 16], 'Title'), ([44, 34], '10'), ([17, 193], '9'), ([227, 407], 'frieze'), ([367, 407], 'curb'), ([90, 401], 'ninety')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest bar?\nImage detected text: [([224, 16], 'Title'), ([44, 34], '10'), ([17, 193], '9'), ([227, 407], 'frieze'), ([367, 407], 'curb'), ([90, 401], 'ninety')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_bar_value = 0\n\nfor text in detected_text:\n    if text[1].isdigit():\n        value = int(text[1])\n        if value > largest_bar_value:\n            largest_bar_value = value\n\nprint(largest_bar_value)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "498": {
        "question": "Is the water half full?",
        "image": "images/498.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "498",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 478,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the water half full?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "water_level = 0.5\n\nif water_level == 0.5:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "499": {
        "question": "Quadrilateral $ABDC$ is a rectangle. If $m\\angle1 = 38$, find $m \\angle 2$",
        "image": "images/499.jpg",
        "choices": [
            "33",
            "38",
            "52",
            "87"
        ],
        "unit": null,
        "precision": null,
        "answer": "52",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "499",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 559,
            "img_height": 323,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 26], 'A'), ([67, 95], '2'), ([321, 149], '8'), ([260, 176], '5'), ([471, 197], '3'), ([24, 270], 'B'), ([500, 270], 'D')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Quadrilateral $ABDC$ is a rectangle. If $m\\angle1 = 38$, find $m \\angle 2$\nChoices:\n(A) 33\n(B) 38\n(C) 52\n(D) 87\nImage detected text: [([24, 26], 'A'), ([67, 95], '2'), ([321, 149], '8'), ([260, 176], '5'), ([471, 197], '3'), ([24, 270], 'B'), ([500, 270], 'D')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nangle1 = 38\nangle2 = sp.Symbol('angle2')\n\neq = sp.Eq(angle1 + angle2, 90)\nangle2_value = sp.solve(eq, angle2)[0]\n\nangle2_value",
        "execution": "",
        "error": "None",
        "extraction": "52",
        "prediction": "52",
        "true_false": true
    },
    "500": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/500.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "500",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 987,
            "img_height": 1236,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "501": {
        "question": "Subtract all big red rubber cylinders. Subtract all blue objects. How many objects are left?",
        "image": "images/501.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "501",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big red rubber cylinders. Subtract all blue objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = ['big red rubber cylinders', 'blue objects']\nobjects_left = len(objects) - 2\nprint(objects_left)",
        "execution": "0",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "502": {
        "question": "Are there fewer tandem bikes that are behind the brown metal bicycle than matte trucks on the left side of the green object?",
        "image": "images/502.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "502",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer tandem bikes that are behind the brown metal bicycle than matte trucks on the left side of the green object?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bikes_trucks(bikes, trucks):\n    if bikes < trucks:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbikes = 3\ntrucks = 5\n\nprint(compare_bikes_trucks(bikes, trucks))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "503": {
        "question": "What is the age gap between the leftmost and the center person?",
        "image": "images/503.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "503",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 338,
            "img_height": 225,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between the leftmost and the center person? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "leftmost_person_age = 25\ncenter_person_age = 35\n\nage_gap = abs(leftmost_person_age - center_person_age)\nprint(age_gap)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "504": {
        "question": "As shown in the figure, D and E are the points on the edges AB and AC of \u25b3ABC, DE \u2225 BC, if AD:DB=1.0:3.0, AE = 2.0, then the length of AC is ()",
        "image": "images/504.jpg",
        "choices": [
            "10",
            "8",
            "6",
            "4"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "504",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 117,
            "img_height": 86,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, D and E are the points on the edges AB and AC of \u25b3ABC, DE \u2225 BC, if AD:DB=1.0:3.0, AE = 2.0, then the length of AC is ()\nChoices:\n(A) 10\n(B) 8\n(C) 6\n(D) 4\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nAD = 1.0\nDB = 3.0\nAE = 2.0\n\n# Let x be the length of AC\nx = sp.Symbol('x')\n\n# Using similar triangles, we can set up the following equation:\n# (AD + DB) / AE = AC / x\nequation = (AD + DB) / AE - x / AE\n\n# Solve the equation for x\nsolution = sp.solve(equation, x)\n\n# The length of AC is the positive solution\nlength_AC = [s for s in solution if s > 0][0]\nlength_AC",
        "execution": "",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "505": {
        "question": "As shown in the figure, in the circle O with a radius of 5.0, the length of the chord AB is 8.0, then the distance from the center O to the chord AB is ()",
        "image": "images/505.jpg",
        "choices": [
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "505",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 100,
            "img_height": 92,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the circle O with a radius of 5.0, the length of the chord AB is 8.0, then the distance from the center O to the chord AB is ()\nChoices:\n(A) 3\n(B) 4\n(C) 5\n(D) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nradius = 5.0\nchord_length = 8.0\n\n# Calculate the distance from the center to the chord using the Pythagorean theorem\ndistance = math.sqrt(radius**2 - (chord_length/2)**2)\n\nprint(distance)",
        "execution": "3.0",
        "error": "None",
        "extraction": "3.0",
        "prediction": "3",
        "true_false": true
    },
    "506": {
        "question": "Between which two years does the line  graph saw its maximum peak?",
        "image": "images/506.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "[2014, 2016]",
        "question_type": "free_form",
        "answer_type": "list",
        "pid": "506",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 9], 'Share of drinkers who \"binged\" on heaviest day of drinking in last week;'), ([777, 19], 'Our World'), ([797, 31], 'Data'), ([12, 33], 'United Kingdom; 2005 to 2016'), ([15, 61], 'Share of drinkers who \"binged\" on their heaviest day of drinking in the last week \"Binge\" drinking is defined as'), ([733, 65], 'man'), ([15, 81], 'consuming more than'), ([169, 81], 'units of alcohol in'), ([295, 81], 'single day, or'), ([397, 81], 'units of alcohol in'), ([523, 81], 'single day in the case of'), ([693, 81], 'woman:'), ([13, 135], '25%'), ([689, 135], 'Females (45 to 64)'), ([13, 213], '20%'), ([13, 291], '15%'), ([15, 371], '10%'), ([31, 541], '2005'), ([89, 541], '2006'), ([205, 541], '2008'), ([319, 541], '2010'), ([435, 541], '2012'), ([551, 541], '2014'), ([665, 541], '2016'), ([15, 571], 'Source: Office for National Statistics (ONS)'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Between which two years does the line  graph saw its maximum peak?\nImage detected text: [([12, 9], 'Share of drinkers who \"binged\" on heaviest day of drinking in last week;'), ([777, 19], 'Our World'), ([797, 31], 'Data'), ([12, 33], 'United Kingdom; 2005 to 2016'), ([15, 61], 'Share of drinkers who \"binged\" on their heaviest day of drinking in the last week \"Binge\" drinking is defined as'), ([733, 65], 'man'), ([15, 81], 'consuming more than'), ([169, 81], 'units of alcohol in'), ([295, 81], 'single day, or'), ([397, 81], 'units of alcohol in'), ([523, 81], 'single day in the case of'), ([693, 81], 'woman:'), ([13, 135], '25%'), ([689, 135], 'Females (45 to 64)'), ([13, 213], '20%'), ([13, 291], '15%'), ([15, 371], '10%'), ([31, 541], '2005'), ([89, 541], '2006'), ([205, 541], '2008'), ([319, 541], '2010'), ([435, 541], '2012'), ([551, 541], '2014'), ([665, 541], '2016'), ([15, 571], 'Source: Office for National Statistics (ONS)'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "years = [2005, 2006, 2008, 2010, 2012, 2014, 2016]\nvalues = [31, 89, 205, 319, 435, 551, 665]\n\nmax_value = max(values)\nmax_index = values.index(max_value)\n\nstart_year = years[max_index]\nend_year = years[max_index + 1]\n\nprint(start_year, end_year)",
        "execution": "",
        "error": "list index out of range",
        "extraction": "2008, 2010",
        "prediction": "2008, 2010",
        "true_false": false
    },
    "507": {
        "question": "What would happen if the hawk population increased?",
        "image": "images/507.jpg",
        "choices": [
            "mice would increase",
            "sparrows increased",
            "garter snakes would decrease",
            "grass decreased"
        ],
        "unit": null,
        "precision": null,
        "answer": "garter snakes would decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "507",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 375,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would happen if the hawk population increased?\nChoices:\n(A) mice would increase\n(B) sparrows increased\n(C) garter snakes would decrease\n(D) grass decreased\nImage detected text: [([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def population_change(caption, choices):\n    if \"hawk\" in caption:\n        return choices[0]\n    return \"\"\n\nchoices = ['mice would increase', 'sparrows increased', 'garter snakes would decrease', 'grass decreased']\ncaption = \"The image shows a hawk flying in the sky. It has a brown body and a white head. It is soaring above a field with tall grass. The text on the image says 'Birds of Prey'.\"\n\nprint(population_change(caption, choices))",
        "execution": "mice would increase",
        "error": "None",
        "extraction": "mice would increase",
        "prediction": "mice would increase",
        "true_false": false
    },
    "508": {
        "question": "The owner of a bed and breakfast inn recalled how many guests the inn had hosted each day. What is the median of the numbers?'",
        "image": "images/508.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "508",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 241,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 7], 'Inn guests'), ([31, 37], 'Day'), ([101, 39], 'Number of guests'), ([1, 63], 'Wednesday'), ([3, 99], 'Thursday'), ([1, 126], 'Friday'), ([3, 161], 'Saturday'), ([1, 188], 'Sunday')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The owner of a bed and breakfast inn recalled how many guests the inn had hosted each day. What is the median of the numbers?'\nImage detected text: [([79, 7], 'Inn guests'), ([31, 37], 'Day'), ([101, 39], 'Number of guests'), ([1, 63], 'Wednesday'), ([3, 99], 'Thursday'), ([1, 126], 'Friday'), ([3, 161], 'Saturday'), ([1, 188], 'Sunday')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "guests_per_day = [1, 3, 1, 3, 1]\nguests_per_day.sort()\nn = len(guests_per_day)\nif n % 2 == 0:\n    median = (guests_per_day[n//2] + guests_per_day[n//2 - 1]) / 2\nelse:\n    median = guests_per_day[n//2]\nprint(median)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "509": {
        "question": "Is Cadet Blue the high median?",
        "image": "images/509.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "509",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 11], 'title'), ([189, 371], 'Web Purple'), ([305, 371], 'Cadet Blue')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Cadet Blue the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 11], 'title'), ([189, 371], 'Web Purple'), ([305, 371], 'Cadet Blue')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_high_median(color, colors):\n    sorted_colors = sorted(colors)\n    median_index = len(sorted_colors) // 2\n    median_color = sorted_colors[median_index]\n    \n    if color == median_color:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolors = ['Web Purple', 'Cadet Blue']\ncolor = 'Cadet Blue'\n\nprint(is_high_median(color, colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "510": {
        "question": "As shown in the figure, in Rt\u25b3ABC, \u2220C = 90.0, AC = 4.0, AB = 5.0, then the value of sinB is ()",
        "image": "images/510.jpg",
        "choices": [
            "\\frac{2}{3}",
            "\\frac{3}{5}",
            "\\frac{3}{4}",
            "\\frac{4}{5}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{4}{5}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "510",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 119,
            "img_height": 186,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in Rt\u25b3ABC, \u2220C = 90.0, AC = 4.0, AB = 5.0, then the value of sinB is ()\nChoices:\n(A) \\frac{2}{3}\n(B) \\frac{3}{5}\n(C) \\frac{3}{4}\n(D) \\frac{4}{5}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_sinB(AC, AB):\n    BC = math.sqrt(AC**2 + AB**2)\n    sinB = AC / BC\n    return sinB\n\nAC = 4.0\nAB = 5.0\n\nsinB = find_sinB(AC, AB)\nprint(sinB)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "0.8",
        "prediction": "\\frac{2}{3}",
        "true_false": false
    },
    "511": {
        "question": "How many people like the most preferred object in the whole chart?",
        "image": "images/511.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "511",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([122, 12], 'Most preferred objects of'), ([149, 37], 'different categories'), ([52, 90], 'junk'), ([52, 174], 'horn'), ([17, 261], 'meadow'), ([411, 311], '10'), ([178, 332], 'Number of People'), ([220, 364], 'categories'), ([207, 391], 'stove'), ([323, 391], 'niece')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people like the most preferred object in the whole chart?\nImage detected text: [([122, 12], 'Most preferred objects of'), ([149, 37], 'different categories'), ([52, 90], 'junk'), ([52, 174], 'horn'), ([17, 261], 'meadow'), ([411, 311], '10'), ([178, 332], 'Number of People'), ([220, 364], 'categories'), ([207, 391], 'stove'), ([323, 391], 'niece')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "objects = {\n    'junk': 10,\n    'horn': 5,\n    'meadow': 8,\n    'stove': 3,\n    'niece': 6\n}\n\nmax_likes = max(objects.values())\nprint(max_likes)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "512": {
        "question": "What is the y coordinate of the center of mass of the isosceles right triangle of uniform areal density shown in Figure 9-C?",
        "image": "images/512.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.24",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "512",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 497,
            "img_height": 356,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([93, 312], 'FIGURE 9C'), ([266, 314], 'Problem 98.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the y coordinate of the center of mass of the isosceles right triangle of uniform areal density shown in Figure 9-C?\nImage detected text: [([93, 312], 'FIGURE 9C'), ([266, 314], 'Problem 98.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\n# Side length of the triangle\nside_length = 10\n\n# Calculate the coordinates of the center of mass\nx_coordinate = side_length / 3\ny_coordinate = side_length / 3\n\n# Print the y coordinate of the center of mass\nprint(y_coordinate)",
        "execution": "3.3333333333333335",
        "error": "None",
        "extraction": "3.3333333333333335",
        "prediction": "3.33",
        "true_false": false
    },
    "513": {
        "question": "What is the highest value in states that border West Virginia ?",
        "image": "images/513.jpg",
        "choices": [
            "43.2%-63.6%",
            "45.2%-65.6%",
            "42.2%-62.6%",
            "41.2%-61.6%",
            "44.2%-64.6%"
        ],
        "unit": null,
        "precision": null,
        "answer": "42.2%-62.6%",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "513",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 500,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 5], 'The Percentage of recommendations in the USA'), ([117, 467], '42.29/-62.6%'), ([257, 469], '20.1%-41.1%')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest value in states that border West Virginia ?\nChoices:\n(A) 43.2%-63.6%\n(B) 45.2%-65.6%\n(C) 42.2%-62.6%\n(D) 41.2%-61.6%\n(E) 44.2%-64.6%\nImage detected text: [([24, 5], 'The Percentage of recommendations in the USA'), ([117, 467], '42.29/-62.6%'), ([257, 469], '20.1%-41.1%')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_value = 0\n\nstates = {\n    'Ohio': 43.2,\n    'Kentucky': 45.2,\n    'Maryland': 42.2,\n    'Virginia': 41.2,\n    'Pennsylvania': 44.2\n}\n\nborder_states = ['Ohio', 'Kentucky', 'Maryland', 'Virginia', 'Pennsylvania']\n\nfor state in border_states:\n    if states[state] > highest_value:\n        highest_value = states[state]\n\nprint(highest_value)",
        "execution": "45.2",
        "error": "None",
        "extraction": "45.2",
        "prediction": "45.2%-65.6%",
        "true_false": false
    },
    "514": {
        "question": "If you wanted the leaf with the least main veins, which would you choose?",
        "image": "images/514.jpg",
        "choices": [
            "3 main veins",
            "pinnate",
            "reticulate",
            "palmate"
        ],
        "unit": null,
        "precision": null,
        "answer": "3 main veins",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "514",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 559,
            "img_height": 236,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([239, 7], 'EM: Armstrong 2002'), ([4, 196], 'pinnate'), ([99, 197], 'reticulate'), ([221, 197], 'palmate'), ([357, 195], '3 main veins'), ([487, 190], 'parallel'), ([349, 215], 'some Ceanothus')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If you wanted the leaf with the least main veins, which would you choose?\nChoices:\n(A) 3 main veins\n(B) pinnate\n(C) reticulate\n(D) palmate\nImage detected text: [([239, 7], 'EM: Armstrong 2002'), ([4, 196], 'pinnate'), ([99, 197], 'reticulate'), ([221, 197], 'palmate'), ([357, 195], '3 main veins'), ([487, 190], 'parallel'), ([349, 215], 'some Ceanothus')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def least_main_veins(veins):\n    least_veins = veins[0]\n    for vein in veins:\n        if vein < least_veins:\n            least_veins = vein\n    return least_veins\n\nveins = [3, 'pinnate', 'reticulate', 'palmate', '3 main veins', 'parallel', 'some Ceanothus']\nchoices = ['3 main veins', 'pinnate', 'reticulate', 'palmate']\n\nprint(least_main_veins(veins))",
        "execution": "",
        "error": "'<' not supported between instances of 'str' and 'int'",
        "extraction": "3 main veins",
        "prediction": "3 main veins",
        "true_false": true
    },
    "515": {
        "question": "You would potentially see a decrease in which organism if gulls disappeared?",
        "image": "images/515.jpg",
        "choices": [
            "herring",
            "kril",
            "anchovy",
            "phytoplankton"
        ],
        "unit": null,
        "precision": null,
        "answer": "kril",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "515",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 398,
            "img_height": 549,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([87, 4], 'COASTAL FOOD WEB'), ([192, 148], 'gull'), ([41, 267], 'herring'), ([289, 266], 'anchovy'), ([200, 351], 'krill'), ([3, 527], 'phytoplankton'), ([303, 527], 'seaweed')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: You would potentially see a decrease in which organism if gulls disappeared?\nChoices:\n(A) herring\n(B) kril\n(C) anchovy\n(D) phytoplankton\nImage detected text: [([87, 4], 'COASTAL FOOD WEB'), ([192, 148], 'gull'), ([41, 267], 'herring'), ([289, 266], 'anchovy'), ([200, 351], 'krill'), ([3, 527], 'phytoplankton'), ([303, 527], 'seaweed')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def decrease_organism(detected_text):\n    organism_dict = {\n        'gull': ['herring', 'krill', 'anchovy', 'phytoplankton']\n    }\n\n    for text in detected_text:\n        if text[1] == 'gull':\n            return organism_dict['gull']\n    return []\n\ndetected_text = [([87, 4], 'COASTAL FOOD WEB'), ([192, 148], 'gull'), ([41, 267], 'herring'), ([289, 266], 'anchovy'), ([200, 351], 'krill'), ([3, 527], 'phytoplankton'), ([303, 527], 'seaweed')]\n\nprint(decrease_organism(detected_text))",
        "execution": "['herring', 'krill', 'anchovy', 'phytoplankton']",
        "error": "None",
        "extraction": "['herring', 'krill', 'anchovy', 'phytoplankton']",
        "prediction": "phytoplankton",
        "true_false": false
    },
    "516": {
        "question": "Are most the stepping stones square?",
        "image": "images/516.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "516",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 339,
            "img_height": 500,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are most the stepping stones square?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def are_stepping_stones_square(stepping_stones):\n    count_square = 0\n    count_non_square = 0\n\n    for stone in stepping_stones:\n        if stone[0] == stone[1]:\n            count_square += 1\n        else:\n            count_non_square += 1\n\n    if count_square > count_non_square:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstepping_stones = [(5, 5), (6, 6), (4, 5), (3, 3), (2, 2)]\nprint(are_stepping_stones_square(stepping_stones))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "517": {
        "question": "At Bloomington Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2014 and 2015? (Unit: employees per year)",
        "image": "images/517.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "517",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 275,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 5], 'Employees with health care benefits '), ([33, 39], 'Year'), ([147, 39], 'Employees'), ([29, 67], '2012'), ([29, 99], '2013'), ([175, 97], '21'), ([29, 129], '2014'), ([175, 129], '23'), ([29, 159], '2015'), ([29, 191], '2016')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: At Bloomington Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2014 and 2015? (Unit: employees per year)\nImage detected text: [([7, 5], 'Employees with health care benefits '), ([33, 39], 'Year'), ([147, 39], 'Employees'), ([29, 67], '2012'), ([29, 99], '2013'), ([175, 97], '21'), ([29, 129], '2014'), ([175, 129], '23'), ([29, 159], '2015'), ([29, 191], '2016')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "employees_2014 = 23\nemployees_2015 = 21\n\nrate_of_change = (employees_2015 - employees_2014) / (2015 - 2014)\nprint(rate_of_change)",
        "execution": "-2.0",
        "error": "None",
        "extraction": "-0.5",
        "prediction": null,
        "true_false": false
    },
    "518": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/518.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "518",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2838,
            "img_height": 2211,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([2067, 1169], '0'), ([2077, 1229], '8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([2067, 1169], '0'), ([2077, 1229], '8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 0\nperson2_age = 8\n\nage_gap = abs(person1_age - person2_age)\nprint(age_gap)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "519": {
        "question": "How many Triangles do you see in the picture?",
        "image": "images/519.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "519",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 948,
            "img_height": 852,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many Triangles do you see in the picture?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import cv2\nimport numpy as np\n\n# Load the image\nimage = cv2.imread('image.jpg')\n\n# Convert the image to grayscale\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Apply edge detection\nedges = cv2.Canny(gray, 50, 150)\n\n# Find contours of the edges\ncontours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n# Count the number of triangles\ntriangle_count = 0\nfor contour in contours:\n    perimeter = cv2.arcLength(contour, True)\n    approx = cv2.approxPolyDP(contour, 0.04 * perimeter, True)\n    if len(approx) == 3:\n        triangle_count += 1\n\nprint(triangle_count)",
        "execution": "",
        "error": "OpenCV(4.5.4) /tmp/pip-req-build-khv2fx3p/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n",
        "extraction": "Please run the provided Python code to find the answer.",
        "prediction": null,
        "true_false": false
    },
    "520": {
        "question": "Does Dark Magenta have the maximum area under the curve?",
        "image": "images/520.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "520",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 741,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 11], 'title'), ([25, 31], '100'), ([7, 153], '1'), ([9, 191], '1'), ([643, 281], 'Dark Magenta'), ([643, 303], 'Web Green'), ([643, 327], 'Burlywood'), ([643, 349], 'Slate'), ([571, 363], '100'), ([643, 373], 'Olive Drab'), ([297, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Dark Magenta have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([57, 11], 'title'), ([25, 31], '100'), ([7, 153], '1'), ([9, 191], '1'), ([643, 281], 'Dark Magenta'), ([643, 303], 'Web Green'), ([643, 327], 'Burlywood'), ([643, 349], 'Slate'), ([571, 363], '100'), ([643, 373], 'Olive Drab'), ([297, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\n# Assuming the data for the curve is given\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\n# Plotting the curve\nplt.plot(x, y)\n\n# Finding the maximum area under the curve\nmax_area = max(y) * (max(x) - min(x))\n\n# Checking if Dark Magenta has the maximum area under the curve\nif max_area == 100:\n    answer = \"yes\"\nelse:\n    answer = \"no\"\n\nprint(answer)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "521": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, point C is a point on \u2299O, \u2220C = 20.0, then the degree of \u2220BOC is ()",
        "image": "images/521.jpg",
        "choices": [
            "20\u00b0",
            "30\u00b0",
            "40\u00b0",
            "60\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "521",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 120,
            "img_height": 100,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, point C is a point on \u2299O, \u2220C = 20.0, then the degree of \u2220BOC is ()\nChoices:\n(A) 20\u00b0\n(B) 30\u00b0\n(C) 40\u00b0\n(D) 60\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_BOC(angle_C):\n    angle_BOC = 180 - angle_C\n    return angle_BOC\n\nangle_C = 20.0\nangle_BOC = angle_BOC(angle_C)\nprint(angle_BOC)",
        "execution": "160.0",
        "error": "None",
        "extraction": "160",
        "prediction": "60\u00b0",
        "true_false": false
    },
    "522": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/522.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "522",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 86,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 57], 'Ocm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 57], 'Ocm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "line_length = 0\n\nfor word in detected_text:\n    if word[1].isdigit():\n        line_length = int(word[1])\n        break\n\nprint(\"The line is about\", line_length, \"centimeters long.\")",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "523": {
        "question": "As shown in the figure, a teaching interest group wants to measure the height of a tree CD. They firstly measured the elevation angle of the tree top C at point A as 30.0, and then proceeded 10.0 along the direction of AD to point B, and the elevation angle of tree top C measured at B is 60.0  (the three points A, B, and D are on the same straight line), then the height of the tree CD is ()",
        "image": "images/523.jpg",
        "choices": [
            "10m",
            "5m",
            "5\u221a{3}m",
            "10\u221a{3}m"
        ],
        "unit": null,
        "precision": null,
        "answer": "5\u221a{3}m",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "523",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 285,
            "img_height": 179,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, a teaching interest group wants to measure the height of a tree CD. They firstly measured the elevation angle of the tree top C at point A as 30.0, and then proceeded 10.0 along the direction of AD to point B, and the elevation angle of tree top C measured at B is 60.0  (the three points A, B, and D are on the same straight line), then the height of the tree CD is ()\nChoices:\n(A) 10m\n(B) 5m\n(C) 5\u221a{3}m\n(D) 10\u221a{3}m\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle_A = 30.0\nangle_B = 60.0\ndistance_AB = 10.0\n\nangle_C = angle_B - angle_A\ndistance_CD = distance_AB * math.tan(math.radians(angle_C))\n\nheight_CD = distance_CD * math.cos(math.radians(angle_A))\nheight_CD = round(height_CD, 2)\n\nprint(height_CD)",
        "execution": "5.0",
        "error": "None",
        "extraction": "5.0",
        "prediction": "5m",
        "true_false": false
    },
    "524": {
        "question": "The Kingwood Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding more than 2 times?'",
        "image": "images/524.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "524",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 351,
            "img_height": 163,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 0], 'Sledding last winter'), ([25, 31], 'Number of times'), ([222, 32], 'Frequency')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The Kingwood Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding more than 2 times?'\nImage detected text: [([95, 0], 'Sledding last winter'), ([25, 31], 'Number of times'), ([222, 32], 'Frequency')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sledding_data = {\n    '0 times': 15,\n    '1 time': 25,\n    '2 times': 40,\n    '3 times': 30,\n    '4 times': 20,\n    '5 times': 10\n}\n\ncount = 0\nfor key, value in sledding_data.items():\n    if int(key.split()[0]) > 2:\n        count += value\n\nprint(count)",
        "execution": "60",
        "error": "None",
        "extraction": "30",
        "prediction": "30",
        "true_false": false
    },
    "525": {
        "question": "What is the lowest value shown on the X axis of first plot?",
        "image": "images/525.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "525",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1711,
            "img_height": 2209,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([685, 327], 'OCP vs Time'), ([641, 368], 'Control 6, grooved'), ([392, 458], '40'), ([390, 494], '20'), ([294, 522], '%'), ([290, 558], '1'), ([382, 570], '220'), ([634, 572], '50'), ([836, 572], '400'), ([1044, 574], '150'), ([324, 558], '0'), ([382, 606], '-40'), ([285, 615], '}'), ([380, 642], '~80'), ([366, 720], '-100'), ([366, 758], '-120'), ([791, 803], 'Time (hrs)'), ([675, 1017], 'Current vs time,'), ([655, 1059], 'Control 6, grooved'), ([354, 1146], '0.02'), ([354, 1188], '0.01'), ([303, 1227], '3'), ([344, 1274], '-0.01'), ([628, 1272], '50'), ([834, 1272], '400'), ([1048, 1274], '450'), ([302, 1284], 'J'), ([344, 1316], '~0.02'), ([344, 1360], '-0.03'), ([344, 1402], '-0.04'), ([346, 1446], '-0.05'), ([791, 1493], 'Time (hrs)'), ([63, 2164], 'PROTECTED DOCUMENTSDOCUMENTSUBJECTITC FROTECTIVE ORDERsf eduldocslyjxn0226'), ([1428, 2162], 'DEPUY047707455')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the lowest value shown on the X axis of first plot?\nImage detected text: [([685, 327], 'OCP vs Time'), ([641, 368], 'Control 6, grooved'), ([392, 458], '40'), ([390, 494], '20'), ([294, 522], '%'), ([290, 558], '1'), ([382, 570], '220'), ([634, 572], '50'), ([836, 572], '400'), ([1044, 574], '150'), ([324, 558], '0'), ([382, 606], '-40'), ([285, 615], '}'), ([380, 642], '~80'), ([366, 720], '-100'), ([366, 758], '-120'), ([791, 803], 'Time (hrs)'), ([675, 1017], 'Current vs time,'), ([655, 1059], 'Control 6, grooved'), ([354, 1146], '0.02'), ([354, 1188], '0.01'), ([303, 1227], '3'), ([344, 1274], '-0.01'), ([628, 1272], '50'), ([834, 1272], '400'), ([1048, 1274], '450'), ([302, 1284], 'J'), ([344, 1316], '~0.02'), ([344, 1360], '-0.03'), ([344, 1402], '-0.04'), ([346, 1446], '-0.05'), ([791, 1493], 'Time (hrs)'), ([63, 2164], 'PROTECTED DOCUMENTSDOCUMENTSUBJECTITC FROTECTIVE ORDERsf eduldocslyjxn0226'), ([1428, 2162], 'DEPUY047707455')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x_axis_values = [40, 20, 0, -40]\nlowest_value = min(x_axis_values)\nprint(lowest_value)",
        "execution": "-40",
        "error": "None",
        "extraction": "-40",
        "prediction": "-40",
        "true_false": false
    },
    "526": {
        "question": "What has been done to this letter?",
        "image": "images/526.jpg",
        "choices": [
            "slide",
            "flip",
            "turn"
        ],
        "unit": null,
        "precision": null,
        "answer": "slide",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "526",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 253,
            "img_height": 104,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 0], '#-4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What has been done to this letter?\nChoices:\n(A) slide\n(B) flip\n(C) turn\nImage detected text: [([12, 0], '#-4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def letter_action(letter):\n    if letter == '#-4':\n        return 'slide'\n    elif letter == '#-3':\n        return 'flip'\n    elif letter == '#-2':\n        return 'turn'\n    else:\n        return ''\n\nletter = '#-4'\nprint(letter_action(letter))",
        "execution": "slide",
        "error": "None",
        "extraction": "slide",
        "prediction": "slide",
        "true_false": true
    },
    "527": {
        "question": "Is the number of big shiny cars in front of the red airliner greater than the number of big purple road bikes?",
        "image": "images/527.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "527",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of big shiny cars in front of the red airliner greater than the number of big purple road bikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(big_shiny_cars, big_purple_road_bikes):\n    if big_shiny_cars > big_purple_road_bikes:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbig_shiny_cars = 5\nbig_purple_road_bikes = 3\n\nprint(compare_numbers(big_shiny_cars, big_purple_road_bikes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "528": {
        "question": "\u5982\u56fe\uff0cAB\u2225CD\uff0cBD\u22a5CF\uff0c\u5782\u8db3\u4e3aB\uff0c\u2220ABF\uff1d35\u00b0\uff0c\u5219\u2220BDC\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/528.jpg",
        "choices": [
            "25\u00b0",
            "35\u00b0",
            "45\u00b0",
            "55\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "55\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "528",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 194,
            "img_height": 135,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAB\u2225CD\uff0cBD\u22a5CF\uff0c\u5782\u8db3\u4e3aB\uff0c\u2220ABF\uff1d35\u00b0\uff0c\u5219\u2220BDC\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 25\u00b0\n(B) 35\u00b0\n(C) 45\u00b0\n(D) 55\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    ABF_angle = 35\n    BCF_angle = 90\n\n    # Since AB || CD, angle BCF is equal to angle BDC\n    BDC_angle = BCF_angle\n\n    # Since ABF and BCF are alternate interior angles, they are congruent\n    ABF_angle = BCF_angle\n\n    # Since ABF and ABD are corresponding angles, they are congruent\n    ABD_angle = ABF_angle\n\n    # Since ABD and BDC are vertical angles, they are congruent\n    BDC_angle = ABD_angle\n\n    return BDC_angle\n\nprint(find_angle())",
        "execution": "90",
        "error": "None",
        "extraction": "35",
        "prediction": "35\u00b0",
        "true_false": false
    },
    "529": {
        "question": "what number does the smaller arrow point to?",
        "image": "images/529.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1020",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "529",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 768,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([466, 147], 'Qormal'), ([504, 204], '@'), ([514, 228], 'dodo 0'), ([485, 225], '7'), ([412, 209], '5'), ([523, 323], '3'), ([515, 375], 'Gemo'), ([488, 294], '1'), ([524, 315], '0555i')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: what number does the smaller arrow point to?\nImage detected text: [([466, 147], 'Qormal'), ([504, 204], '@'), ([514, 228], 'dodo 0'), ([485, 225], '7'), ([412, 209], '5'), ([523, 323], '3'), ([515, 375], 'Gemo'), ([488, 294], '1'), ([524, 315], '0555i')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smaller_arrow_point = 5\nprint(smaller_arrow_point)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "530": {
        "question": "The advertising agency counted the number of billboards in each city in the state. How many cities have fewer than 70 billboards? (Unit: cities)",
        "image": "images/530.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "530",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 140,
            "img_height": 180,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Billboards per city'), ([21, 25], 'Stem'), ([69, 25], 'Leaf'), ([69, 51], '11'), ([69, 73], '0 2 7'), ([69, 93], '0 2 3 6'), ([69, 115], '1 2 4'), ([69, 139], '1 2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The advertising agency counted the number of billboards in each city in the state. How many cities have fewer than 70 billboards? (Unit: cities)\nImage detected text: [([0, 0], 'Billboards per city'), ([21, 25], 'Stem'), ([69, 25], 'Leaf'), ([69, 51], '11'), ([69, 73], '0 2 7'), ([69, 93], '0 2 3 6'), ([69, 115], '1 2 4'), ([69, 139], '1 2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "billboards_per_city = [11, 0, 2, 7, 0, 2, 3, 6, 1, 2, 4, 1, 2]\n\ncount = 0\nfor num in billboards_per_city:\n    if num < 70:\n        count += 1\n\nprint(count)",
        "execution": "13",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": true
    },
    "531": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) to five.",
        "image": "images/531.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "531",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) to five.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"o'clock\"\nprint(time_word)",
        "execution": "o'clock",
        "error": "None",
        "extraction": "o'clock",
        "prediction": "o'clock",
        "true_false": false
    },
    "532": {
        "question": "Are there fewer gray trucks that are in front of the large aeroplane than big yellow metal objects in front of the purple object?",
        "image": "images/532.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "532",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer gray trucks that are in front of the large aeroplane than big yellow metal objects in front of the purple object?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(gray_trucks, large_aeroplane, big_yellow_metal_objects, purple_object):\n    if gray_trucks < big_yellow_metal_objects:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ngray_trucks = 5\nlarge_aeroplane = 2\nbig_yellow_metal_objects = 8\npurple_object = 3\n\nprint(compare_objects(gray_trucks, large_aeroplane, big_yellow_metal_objects, purple_object))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "533": {
        "question": "Subtract all small cyan cubes. Subtract all large yellow rubber cubes. How many objects are left?",
        "image": "images/533.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "533",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small cyan cubes. Subtract all large yellow rubber cubes. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_cyan_cubes = 10\nlarge_yellow_rubber_cubes = 5\n\nobjects_left = small_cyan_cubes - large_yellow_rubber_cubes\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "534": {
        "question": "In how many years, is the percentage of stunted female children greater than the average percentage of stunted female children taken over all years ?",
        "image": "images/534.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "534",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 883,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 9], 'Prevalence of stunting in children of Singapore with age under 5 years'), ([9, 229], '1'), ([817, 305], 'Female'), ([9, 285], '1'), ([817, 329], 'Male'), ([83, 591], '7'), ([745, 591], '2'), ([401, 629], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the percentage of stunted female children greater than the average percentage of stunted female children taken over all years ?\nImage detected text: [([53, 9], 'Prevalence of stunting in children of Singapore with age under 5 years'), ([9, 229], '1'), ([817, 305], 'Female'), ([9, 285], '1'), ([817, 329], 'Male'), ([83, 591], '7'), ([745, 591], '2'), ([401, 629], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import pandas as pd\n\ndata = {\n    'Year': [2000, 2001, 2002, 2003, 2004],\n    'Female': [5, 6, 7, 8, 9],\n    'Male': [3, 4, 5, 6, 7]\n}\n\ndf = pd.DataFrame(data)\n\naverage_percentage = df['Female'].mean()\n\nyears_greater_than_average = df[df['Female'] > average_percentage]['Year'].count()\n\nprint(years_greater_than_average)",
        "execution": "2",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "535": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/535.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "535",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([210, 12], 'Title'), ([14, 70], '3'), ([15, 167], '9'), ([15, 261], '8'), ([53, 339], '-7.5'), ([105, 341], '-5.0'), ([155, 341], '-2.5'), ([209, 343], '0.0'), ([257, 339], '2.5'), ([307, 339], '5.0'), ([357, 339], '7.5'), ([405, 341], '10.0'), ([207, 363], 'Values'), ([119, 397], 'candle'), ([243, 397], 'slug'), ([351, 399], 'prose')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([210, 12], 'Title'), ([14, 70], '3'), ([15, 167], '9'), ([15, 261], '8'), ([53, 339], '-7.5'), ([105, 341], '-5.0'), ([155, 341], '-2.5'), ([209, 343], '0.0'), ([257, 339], '2.5'), ([307, 339], '5.0'), ([357, 339], '7.5'), ([405, 341], '10.0'), ([207, 363], 'Values'), ([119, 397], 'candle'), ([243, 397], 'slug'), ([351, 399], 'prose')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = ['-7.5', '-5.0', '-2.5', '0.0', '2.5', '5.0', '7.5', '10.0']\nsmallest_bar = min(values)\nprint(smallest_bar)",
        "execution": "-2.5",
        "error": "None",
        "extraction": "-7.5",
        "prediction": null,
        "true_false": false
    },
    "536": {
        "question": "As shown in the figure, points A, B, and C are on \u2299O, if \u2220C = 35.0, then \u2220AOB = ()",
        "image": "images/536.jpg",
        "choices": [
            "17.5\u00b0",
            "35\u00b0",
            "60\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "70\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "536",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 115,
            "img_height": 105,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, points A, B, and C are on \u2299O, if \u2220C = 35.0, then \u2220AOB = ()\nChoices:\n(A) 17.5\u00b0\n(B) 35\u00b0\n(C) 60\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_AOB(angle_C):\n    angle_AOB = 2 * angle_C\n    return angle_AOB\n\nangle_C = 35.0\nangle_AOB = angle_AOB(angle_C)\nprint(angle_AOB)",
        "execution": "70.0",
        "error": "None",
        "extraction": "70\u00b0",
        "prediction": "70\u00b0",
        "true_false": true
    },
    "537": {
        "question": "Is the number of red rubber bicycles less than the number of cyan metal school buss?",
        "image": "images/537.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "537",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of red rubber bicycles less than the number of cyan metal school buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "red_bicycles = 10\ncyan_school_buses = 15\n\nif red_bicycles < cyan_school_buses:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "538": {
        "question": "As shown in the figure, in the two concentric circles, the chord AB of the great circle is tangent to the small circle at point C. If AB = 6.0, the area of \u200b\u200bthe ring is ()",
        "image": "images/538.jpg",
        "choices": [
            "9\u03c0",
            "6\u03c0",
            "3\u03c0",
            "\u03c0"
        ],
        "unit": null,
        "precision": null,
        "answer": "9\u03c0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "538",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 115,
            "img_height": 111,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the two concentric circles, the chord AB of the great circle is tangent to the small circle at point C. If AB = 6.0, the area of \u200b\u200bthe ring is ()\nChoices:\n(A) 9\u03c0\n(B) 6\u03c0\n(C) 3\u03c0\n(D) \u03c0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef area_of_ring(radius1, radius2):\n    area1 = math.pi * radius1**2\n    area2 = math.pi * radius2**2\n    area_ring = area2 - area1\n    return area_ring\n\nradius1 = 3.0\nradius2 = 6.0\n\nprint(area_of_ring(radius1, radius2))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "9\u03c0",
        "prediction": "9\u03c0",
        "true_false": true
    },
    "539": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u70b9D\u3001E\u5206\u522b\u662f\u8fb9AB\u3001BC\u7684\u4e2d\u70b9\uff0c\u82e5\u25b3BDE\u7684\u5468\u957f\u662f6\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u662f\uff08\uff09",
        "image": "images/539.jpg",
        "choices": [
            "8",
            "10",
            "12",
            "14"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "539",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 149,
            "img_height": 71,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0c\u70b9D\u3001E\u5206\u522b\u662f\u8fb9AB\u3001BC\u7684\u4e2d\u70b9\uff0c\u82e5\u25b3BDE\u7684\u5468\u957f\u662f6\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u662f\uff08\uff09\nChoices:\n(A) 8\n(B) 10\n(C) 12\n(D) 14\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 2 * BD\nBC = 2 * BE\nAC = AB + BC\n\nperimeter = AB + BC + AC\nperimeter",
        "execution": "",
        "error": "name 'BD' is not defined",
        "extraction": "12",
        "prediction": "12",
        "true_false": true
    },
    "540": {
        "question": "What fraction of the shape is blue?",
        "image": "images/540.jpg",
        "choices": [
            "3/11",
            "8/11",
            "6/11",
            "3/5"
        ],
        "unit": null,
        "precision": null,
        "answer": "3/11",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "540",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 102,
            "img_height": 103,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What fraction of the shape is blue?\nChoices:\n(A) 3/11\n(B) 8/11\n(C) 6/11\n(D) 3/5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_parts = 11\nblue_parts = 3\n\nfraction_blue = blue_parts / total_parts\nprint(fraction_blue)",
        "execution": "0.2727272727272727",
        "error": "None",
        "extraction": "0.2727272727272727",
        "prediction": "3/11",
        "true_false": true
    },
    "541": {
        "question": "Which of the cubes is not identical to the unfolded net?",
        "image": "images/541.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "541",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 280,
            "img_height": 560,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the cubes is not identical to the unfolded net?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_identical(net, cube):\n    for side in net:\n        if side not in cube:\n            return False\n    return True\n\ndef find_not_identical(net, cubes):\n    for cube in cubes:\n        if not is_identical(net, cube):\n            return cube\n    return \"\"\n\nnet = ['A', 'B', 'C', 'D', 'E']\ncubes = [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'E', 'D'], ['A', 'B', 'D', 'C', 'E'], ['A', 'B', 'D', 'E', 'C'], ['A', 'B', 'E', 'C', 'D']]\n\nprint(find_not_identical(net, cubes))",
        "execution": "",
        "error": "name 'is_identical' is not defined",
        "extraction": "E",
        "prediction": "E",
        "true_false": false
    },
    "542": {
        "question": "How many models in the figure achieve an Acc score greater than 60?",
        "image": "images/542.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "542",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1690,
            "img_height": 1358,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([692, 12], 'Model Performance'), ([234, 84], 'GPT3-3B'), ([1544, 86], 'GPT-4'), ([234, 122], 'GPT3-6B'), ([234, 159], 'GPT3-12B'), ([232, 195], 'GPT3-175B'), ([81, 221], '80'), ([234, 240], 'LLaMA-7B'), ([234, 278], 'LLaMA2-7B'), ([234, 316], 'LLaMA-13B'), ([234, 354], 'LLaMA2-13B'), ([234, 392], 'LLaMA-33B'), ([1062, 390], 'LLaMA2-7OB'), ([82, 436], '60'), ([234, 432], 'LLaMA-65B'), ([963, 431], 'LLaMA-65B'), ([1062, 460], 'LLaMA2-7OB'), ([234, 470], 'LLaMA2-7OB'), ([886, 478], 'LLaMA-338\"'), ([234, 508], 'GPT-4'), ([964, 522], 'LLaMA-6SB'), ([33, 517], '2'), ([791, 529], 'LLaMA2-13B\"'), ([688, 600], 'LLaMa8A838'), ([84, 650], '40'), ([625, 678], 'LLaMA-TB'), ([888, 684], 'LLaMA-33B'), ([652, 702], 'GPT3-175B'), ([792, 758], 'LLaMA2-13B'), ([418, 826], 'GPT3-12B'), ([82, 862], '20'), ([305, 869], 'GPT3-6B'), ([724, 874], 'LLaMA-13B'), ([154, 904], 'GPT3-3B'), ([694, 906], 'LLaMA2-7B'), ([626, 946], 'LLaMA-TB'), ([360, 1060], '2.0'), ([660, 1060], '1.8'), ([960, 1060], '1.6'), ([1258, 1060], '1.4'), ([1558, 1060], '1.2'), ([768, 1092], 'Pretrain Loss'), ([0, 1199], 'Figure 2: The performance of SFT (blue lines) and ICL (red lines) settings o GSMSK. GPT-4 states'), ([81, 1244], 'use some part of the GSMSK data in pre-training, and suggest others consider its performance'), ([1, 1298], 'between SFT and ICL.'), ([2, 1249], 'they')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many models in the figure achieve an Acc score greater than 60?\nImage detected text: [([692, 12], 'Model Performance'), ([234, 84], 'GPT3-3B'), ([1544, 86], 'GPT-4'), ([234, 122], 'GPT3-6B'), ([234, 159], 'GPT3-12B'), ([232, 195], 'GPT3-175B'), ([81, 221], '80'), ([234, 240], 'LLaMA-7B'), ([234, 278], 'LLaMA2-7B'), ([234, 316], 'LLaMA-13B'), ([234, 354], 'LLaMA2-13B'), ([234, 392], 'LLaMA-33B'), ([1062, 390], 'LLaMA2-7OB'), ([82, 436], '60'), ([234, 432], 'LLaMA-65B'), ([963, 431], 'LLaMA-65B'), ([1062, 460], 'LLaMA2-7OB'), ([234, 470], 'LLaMA2-7OB'), ([886, 478], 'LLaMA-338\"'), ([234, 508], 'GPT-4'), ([964, 522], 'LLaMA-6SB'), ([33, 517], '2'), ([791, 529], 'LLaMA2-13B\"'), ([688, 600], 'LLaMa8A838'), ([84, 650], '40'), ([625, 678], 'LLaMA-TB'), ([888, 684], 'LLaMA-33B'), ([652, 702], 'GPT3-175B'), ([792, 758], 'LLaMA2-13B'), ([418, 826], 'GPT3-12B'), ([82, 862], '20'), ([305, 869], 'GPT3-6B'), ([724, 874], 'LLaMA-13B'), ([154, 904], 'GPT3-3B'), ([694, 906], 'LLaMA2-7B'), ([626, 946], 'LLaMA-TB'), ([360, 1060], '2.0'), ([660, 1060], '1.8'), ([960, 1060], '1.6'), ([1258, 1060], '1.4'), ([1558, 1060], '1.2'), ([768, 1092], 'Pretrain Loss'), ([0, 1199], 'Figure 2: The performance of SFT (blue lines) and ICL (red lines) settings o GSMSK. GPT-4 states'), ([81, 1244], 'use some part of the GSMSK data in pre-training, and suggest others consider its performance'), ([1, 1298], 'between SFT and ICL.'), ([2, 1249], 'they')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_models(text):\n    models = ['GPT3-3B', 'GPT-4', 'GPT3-6B', 'GPT3-12B', 'GPT3-175B', 'LLaMA-7B', 'LLaMA2-7B', 'LLaMA-13B', 'LLaMA2-13B', 'LLaMA-33B', 'LLaMA2-7OB', 'LLaMA-65B', 'LLaMA-338\"', 'LLaMA-6SB', 'LLaMA-TB', 'LLaMa8A838']\n    count = 0\n    for item in text:\n        if item[1] in models and float(item[1].split('-')[1][:-1]) > 60:\n            count += 1\n    return count\n\ntext = [([692, 12], 'Model Performance'), ([234, 84], 'GPT3-3B'), ([1544, 86], 'GPT-4'), ([234, 122], 'GPT3-6B'), ([234, 159], 'GPT3-12B'), ([232, 195], 'GPT3-175B'), ([81, 221], '80'), ([234, 240], 'LLaMA-7B'), ([234, 278], 'LLaMA2-7B'), ([234, 316], 'LLaMA-13B'), ([234, 354], 'LLaMA2-13B'), ([234, 392], 'LLaMA-33B'), ([1062, 390], 'LLaMA2-7OB'), ([82, 436], '60'), ([234, 432], 'LLaMA-65B'), ([963, 431], 'LLaMA-65B'), ([1062, 460], 'LLaMA2-7OB'), ([234, 470], 'LLaMA2-7OB'), ([886, 478], 'LLaMA-338\"'), ([234, 508], 'GPT-4'), ([964, 522], 'LLaMA-6SB'), ([33, 517], '2'), ([791, 529], 'LLaMA2-13B\"'), ([688, 600], 'LLaMa8A838'), ([84, 650], '40'), ([625, 678], 'LLaMA-TB'), ([888, 684], 'LLaMA-33B'), ([652, 702], 'GPT3-175B'), ([792, 758], 'LLaMA2-13B'), ([418, 826], 'GPT3-12B'), ([82, 862], '20'), ([305, 869], 'GPT3-6B'), ([724, 874], 'LLaMA-13B'), ([154, 904], 'GPT3-3B'), ([694, 906], 'LLaMA2-7B'), ([626, 946], 'LLaMA-TB'), ([360, 1060], '2.0'), ([660, 1060], '1.8'), ([960, 1060], '1.6'), ([1258, 1060], '1.4'), ([1558, 1060], '1.2'), ([768, 1092], 'Pretrain Loss'), ([0, 1199], 'Figure 2: The performance of SFT (blue lines) and ICL (red lines) settings o GSMSK. GPT-4 states'), ([81, 1244], 'use some part of the GSMSK data in pre-training, and suggest others consider its performance'), ([1, 1298], 'between SFT and ICL.'), ([2, 1249], 'they')]\n\nprint(count_models(text))",
        "execution": "",
        "error": "could not convert string to float: ''",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "543": {
        "question": "Are there fewer small purple matte cars than brown matte things?",
        "image": "images/543.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "543",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer small purple matte cars than brown matte things?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_purple_matte_cars = 10\nbrown_matte_things = 15\n\nif small_purple_matte_cars < brown_matte_things:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "544": {
        "question": "What is the total percentage of people  who say that they do either less or more often than the usual amount of exercise during the coronavirus pandemic in the United States as of April 2020?",
        "image": "images/544.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "44",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "544",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([285, 63], 'Not sure 32'), ([545, 89], 'More often than usual 175'), ([53, 157], 'Less often than usual 2756'), ([523, 435], 'About the same'), ([639, 435], 'usual 5326'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the total percentage of people  who say that they do either less or more often than the usual amount of exercise during the coronavirus pandemic in the United States as of April 2020?\nImage detected text: [([285, 63], 'Not sure 32'), ([545, 89], 'More often than usual 175'), ([53, 157], 'Less often than usual 2756'), ([523, 435], 'About the same'), ([639, 435], 'usual 5326'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "not_sure = 32\nmore_often = 175\nless_often = 2756\nabout_same = 5326\n\ntotal_people = not_sure + more_often + less_often + about_same\n\npercentage_less_or_more = (less_often + more_often) / total_people * 100\n\nprint(percentage_less_or_more)",
        "execution": "35.36011581614187",
        "error": "None",
        "extraction": "23.6",
        "prediction": null,
        "true_false": false
    },
    "545": {
        "question": "Is Violet Red less than Crimson?",
        "image": "images/545.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "545",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 764,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 123], '1'), ([9, 161], '1'), ([133, 301], '{'), ([311, 301], '7'), ([490, 302], ''), ([665, 301], '1'), ([133, 335], '2'), ([665, 331], '1'), ([367, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Violet Red less than Crimson?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 123], '1'), ([9, 161], '1'), ([133, 301], '{'), ([311, 301], '7'), ([490, 302], ''), ([665, 301], '1'), ([133, 335], '2'), ([665, 331], '1'), ([367, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "violet_red = 1\ncrimson = 1\n\nif violet_red < crimson:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "546": {
        "question": "What is the overall ratio of male to female?",
        "image": "images/546.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "546",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([683, 53], '21.43'), ([625, 81], '20.92'), ([567, 107], '20.43'), ([509, 135], '19.95'), ([453, 161], '19.48'), ([44, 160], '1'), ([395, 187], '19.02'), ([337, 211], '18.57'), ([43, 211], 'L'), ([279, 235], '18.14'), ([221, 259], '17.72'), ([163, 281], '17.31'), ([105, 303], '16.92'), ([105, 389], '2009'), ([163, 389], '2010'), ([221, 391], '2011'), ([279, 389], '2012'), ([337, 391], '2013'), ([395, 391], '2014'), ([451, 389], '2015'), ([509, 389], '2016'), ([567, 389], '2017'), ([625, 389], '201,8'), ([683, 389], '2019'), ([341, 431], 'Female'), ([415, 431], 'Male'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the overall ratio of male to female?\nImage detected text: [([683, 53], '21.43'), ([625, 81], '20.92'), ([567, 107], '20.43'), ([509, 135], '19.95'), ([453, 161], '19.48'), ([44, 160], '1'), ([395, 187], '19.02'), ([337, 211], '18.57'), ([43, 211], 'L'), ([279, 235], '18.14'), ([221, 259], '17.72'), ([163, 281], '17.31'), ([105, 303], '16.92'), ([105, 389], '2009'), ([163, 389], '2010'), ([221, 391], '2011'), ([279, 389], '2012'), ([337, 391], '2013'), ([395, 391], '2014'), ([451, 389], '2015'), ([509, 389], '2016'), ([567, 389], '2017'), ([625, 389], '201,8'), ([683, 389], '2019'), ([341, 431], 'Female'), ([415, 431], 'Male'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "male_count = 0\nfemale_count = 0\n\nfor text in detected_text:\n    if text[1] == 'Male':\n        male_count = int(detected_text[detected_text.index(text)-1][1])\n    elif text[1] == 'Female':\n        female_count = int(detected_text[detected_text.index(text)-1][1])\n\nratio = male_count / female_count\nprint(ratio)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "The overall ratio of male to female is 1.",
        "prediction": null,
        "true_false": false
    },
    "547": {
        "question": "Based on the diagram below, which organisms will be most directly affected by a decrease in the amount of grass?",
        "image": "images/547.jpg",
        "choices": [
            "Insects",
            "Hawk and snake",
            "Snake and raccoon",
            "Mouse and cricket"
        ],
        "unit": null,
        "precision": null,
        "answer": "Insects",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "547",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 630,
            "img_height": 377,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([163, 27], 'Snake'), ([319, 81], 'Hawk'), ([411, 143], 'Owl'), ([259, 189], 'Mouse'), ([207, 223], 'Trees'), ([95, 253], 'Deer'), ([425, 247], 'Cricket'), ([295, 273], 'Grass'), ([206, 314], 'Decomposers'), ([433, 210], 'Frog')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Based on the diagram below, which organisms will be most directly affected by a decrease in the amount of grass?\nChoices:\n(A) Insects\n(B) Hawk and snake\n(C) Snake and raccoon\n(D) Mouse and cricket\nImage detected text: [([163, 27], 'Snake'), ([319, 81], 'Hawk'), ([411, 143], 'Owl'), ([259, 189], 'Mouse'), ([207, 223], 'Trees'), ([95, 253], 'Deer'), ([425, 247], 'Cricket'), ([295, 273], 'Grass'), ([206, 314], 'Decomposers'), ([433, 210], 'Frog')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "organisms_affected = {\n    'Insects': ['Grass'],\n    'Hawk': ['Mouse', 'Cricket'],\n    'Snake': ['Mouse'],\n    'Raccoon': [],\n    'Mouse': [],\n    'Cricket': [],\n}\n\ndef affected_organisms(organisms_affected, decrease_in_grass):\n    affected = []\n    for organism, food_sources in organisms_affected.items():\n        if decrease_in_grass in food_sources:\n            affected.append(organism)\n    return affected\n\ndecrease_in_grass = 'Grass'\nprint(affected_organisms(organisms_affected, decrease_in_grass))",
        "execution": "['Insects']",
        "error": "None",
        "extraction": "['Insects']",
        "prediction": "Insects",
        "true_false": true
    },
    "548": {
        "question": "Are there fewer cyan jets than big buss?",
        "image": "images/548.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "548",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer cyan jets than big buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_jets_busses(cyan_jets, big_busses):\n    if cyan_jets < big_busses:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncyan_jets = 5\nbig_busses = 10\n\nprint(compare_jets_busses(cyan_jets, big_busses))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "549": {
        "question": "As shown in the figure, PA and PB are tangent to \u2299O to A and B respectively. Point C and point D are the moving points on line segments PA and PB, and CD always remains tangent to circle O. If PA = 8.0, then perimeter of \u25b3PCD is ()",
        "image": "images/549.jpg",
        "choices": [
            "8",
            "12",
            "16",
            "\u4e0d\u80fd\u786e\u5b9a"
        ],
        "unit": null,
        "precision": null,
        "answer": "16",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "549",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 192,
            "img_height": 111,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, PA and PB are tangent to \u2299O to A and B respectively. Point C and point D are the moving points on line segments PA and PB, and CD always remains tangent to circle O. If PA = 8.0, then perimeter of \u25b3PCD is ()\nChoices:\n(A) 8\n(B) 12\n(C) 16\n(D) \u4e0d\u80fd\u786e\u5b9a\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef perimeter_PCD(PA):\n    PB = PA\n    PC = math.sqrt(PA**2 + PB**2)\n    PD = PC\n    CD = math.sqrt(PA**2 + PB**2)\n    \n    perimeter = PA + PC + CD\n    return perimeter\n\nPA = 8.0\nperimeter = perimeter_PCD(PA)\nprint(perimeter)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "16",
        "prediction": "16",
        "true_false": true
    },
    "550": {
        "question": "What is the accuracy of the algorithm with highest accuracy?",
        "image": "images/550.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "550",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([89, 17], 'Accuracy of different'), ([54, 80], '10'), ([171, 55], 'algorithms'), ([19, 183], '0'), ([128, 400], 'homer'), ([313, 403], 'tumor')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the accuracy of the algorithm with highest accuracy?\nImage detected text: [([89, 17], 'Accuracy of different'), ([54, 80], '10'), ([171, 55], 'algorithms'), ([19, 183], '0'), ([128, 400], 'homer'), ([313, 403], 'tumor')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracies = [0.85, 0.92, 0.78, 0.95]\nhighest_accuracy = max(accuracies)\nprint(highest_accuracy)",
        "execution": "0.95",
        "error": "None",
        "extraction": "0.95",
        "prediction": null,
        "true_false": false
    },
    "551": {
        "question": "What is the difference between the highest tattoos in male and the least in female?",
        "image": "images/551.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "14",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "551",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '3570'), ([669, 65], '31%'), ([61, 89], '3076'), ([603, 103], '27%'), ([44, 110], '1'), ([61, 137], '2570'), ([513, 141], '2396'), ([43, 161], '1'), ([61, 183], '2076'), ([43, 185], '1'), ([199, 217], '1536'), ([291, 217], '1536'), ([43, 223], '1'), ([61, 279], '1070'), ([43, 291], '1'), ([163, 391], '2003'), ([319, 391], '2008'), ([477, 391], '2012'), ([633, 389], '2015'), ([339, 431], 'Male'), ([401, 431], 'Female'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the highest tattoos in male and the least in female?\nImage detected text: [([61, 41], '3570'), ([669, 65], '31%'), ([61, 89], '3076'), ([603, 103], '27%'), ([44, 110], '1'), ([61, 137], '2570'), ([513, 141], '2396'), ([43, 161], '1'), ([61, 183], '2076'), ([43, 185], '1'), ([199, 217], '1536'), ([291, 217], '1536'), ([43, 223], '1'), ([61, 279], '1070'), ([43, 291], '1'), ([163, 391], '2003'), ([319, 391], '2008'), ([477, 391], '2012'), ([633, 389], '2015'), ([339, 431], 'Male'), ([401, 431], 'Female'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_tattoos_male = 3570\nleast_tattoos_female = 3076\n\ndifference = highest_tattoos_male - least_tattoos_female\nprint(difference)",
        "execution": "494",
        "error": "None",
        "extraction": "494",
        "prediction": "494",
        "true_false": false
    },
    "552": {
        "question": "How many queries have a p-value lower than 0.50?",
        "image": "images/552.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "552",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1726,
            "img_height": 330,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([158, 34], 'shutdown'), ([327, 33], 'bullet'), ([465, 33], 'objective'), ([653, 33], 'superintelligent'), ([960, 34], 'rot23'), ([1077, 33], 'paperclips'), ([1282, 32], 'paperclips_large'), ([1592, 36], 'water'), ([15, 85], 'p-value'), ([192, 90], '0.92'), ([345, 87], '0.69'), ([512, 90], '0.01'), ([754, 86], '0.10'), ([970, 90], '0.58'), ([1132, 90], '0.43'), ([1388, 88], '0.60'), ([1606, 90], '0.01'), ([0, 172], 'Table l: Goodness-of-fit results for power law'), ([925, 177], 'models.'), ([1096, 172], 'The table shows p-values from the'), ([0, 220], 'Kolmogorov-Smirnov'), ([387, 227], 'test'), ([470, 220], 'on fitted power laws for each influence query:'), ([1333, 223], 'Values  above the 0.1'), ([0, 259], 'thresholds suggested by Clauset et al. (2009) indicate the power law is a plausible fit:')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many queries have a p-value lower than 0.50?\nImage detected text: [([158, 34], 'shutdown'), ([327, 33], 'bullet'), ([465, 33], 'objective'), ([653, 33], 'superintelligent'), ([960, 34], 'rot23'), ([1077, 33], 'paperclips'), ([1282, 32], 'paperclips_large'), ([1592, 36], 'water'), ([15, 85], 'p-value'), ([192, 90], '0.92'), ([345, 87], '0.69'), ([512, 90], '0.01'), ([754, 86], '0.10'), ([970, 90], '0.58'), ([1132, 90], '0.43'), ([1388, 88], '0.60'), ([1606, 90], '0.01'), ([0, 172], 'Table l: Goodness-of-fit results for power law'), ([925, 177], 'models.'), ([1096, 172], 'The table shows p-values from the'), ([0, 220], 'Kolmogorov-Smirnov'), ([387, 227], 'test'), ([470, 220], 'on fitted power laws for each influence query:'), ([1333, 223], 'Values  above the 0.1'), ([0, 259], 'thresholds suggested by Clauset et al. (2009) indicate the power law is a plausible fit:')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "p_values = [0.92, 0.69, 0.01, 0.10, 0.58, 0.43, 0.60, 0.01]\ncount = 0\n\nfor p_value in p_values:\n    if p_value < 0.50:\n        count += 1\n\nprint(count)",
        "execution": "4",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "553": {
        "question": "Is Dark Violet less than Chocolate?",
        "image": "images/553.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "553",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 11], 'title'), ([447, 13], 'Burlywood'), ([447, 35], 'Chocolate'), ([447, 59], 'Dark Violet'), ([447, 81], 'Hot Pink'), ([447, 105], 'Dark Olive')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Violet less than Chocolate?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 11], 'title'), ([447, 13], 'Burlywood'), ([447, 35], 'Chocolate'), ([447, 59], 'Dark Violet'), ([447, 81], 'Hot Pink'), ([447, 105], 'Dark Olive')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dark_violet = 'Dark Violet'\nchocolate = 'Chocolate'\n\nif dark_violet < chocolate:\n    ans = 'yes'\nelse:\n    ans = 'no'\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "554": {
        "question": "Is Burlywood the minimum?",
        "image": "images/554.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "554",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 488,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([151, 11], 'title'), ([33, 43], 'Medium Periwinkle'), ([67, 79], 'Sandy Brown'), ([79, 115], 'Dark Khaki'), ([109, 149], 'Violet'), ([7, 155], '9'), ([79, 184], 'Web Green'), ([9, 191], '1'), ([83, 221], 'Dark Gray'), ([105, 257], 'Yellow'), ([99, 291], 'Salmon'), ([81, 327], 'Burlywood'), ([281, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Burlywood the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([151, 11], 'title'), ([33, 43], 'Medium Periwinkle'), ([67, 79], 'Sandy Brown'), ([79, 115], 'Dark Khaki'), ([109, 149], 'Violet'), ([7, 155], '9'), ([79, 184], 'Web Green'), ([9, 191], '1'), ([83, 221], 'Dark Gray'), ([105, 257], 'Yellow'), ([99, 291], 'Salmon'), ([81, 327], 'Burlywood'), ([281, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "colors = ['Medium Periwinkle', 'Sandy Brown', 'Dark Khaki', 'Violet', 'Web Green', 'Dark Gray', 'Yellow', 'Salmon', 'Burlywood']\nminimum_color = min(colors)\nif minimum_color == 'Burlywood':\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "555": {
        "question": "Is this nest larger than a fist?",
        "image": "images/555.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "555",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 640,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this nest larger than a fist?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_nest_larger_than_fist(nest_size, fist_size):\n    if nest_size > fist_size:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnest_size = 10\nfist_size = 8\n\nprint(is_nest_larger_than_fist(nest_size, fist_size))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "556": {
        "question": "Are there fewer large red metallic things that are on the left side of the cyan shiny scooter than things that are in front of the small jet?",
        "image": "images/556.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "556",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer large red metallic things that are on the left side of the cyan shiny scooter than things that are in front of the small jet?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_large_red_metallic_things(caption):\n    count = 0\n    words = caption.split()\n    for i in range(len(words)-4):\n        if words[i] == \"large\" and words[i+1] == \"red\" and words[i+2] == \"metallic\" and words[i+3] == \"things\":\n            if words[i+4] == \"left\" and words[i+5] == \"side\" and words[i+6] == \"of\" and words[i+7] == \"the\" and words[i+8] == \"cyan\" and words[i+9] == \"shiny\" and words[i+10] == \"scooter\":\n                count -= 1\n            elif words[i+4] == \"in\" and words[i+5] == \"front\" and words[i+6] == \"of\" and words[i+7] == \"the\" and words[i+8] == \"small\" and words[i+9] == \"jet\":\n                count += 1\n    return count\n\ncaption = \"There are fewer large red metallic things on the left side of the cyan shiny scooter than things that are in front of the small jet.\"\ncount = count_large_red_metallic_things(caption)\nif count < 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "557": {
        "question": "\u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220BAC\uff1d90\u00b0\uff0c\u4ee5Rt\u25b3ABC\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5206\u522b\u5411\u5916\u4f5c\u7b49\u8fb9\u4e09\u89d2\u5f62\u25b3A'BC\uff0c\u25b3AB'C\uff0c\u25b3ABC'\uff0c\u82e5\u25b3A'BC\uff0c\u25b3AB'C\u7684\u9762\u79ef\u5206\u522b\u662f10\u548c4\uff0c\u5219\u25b3ABC'\u7684\u9762\u79ef\u662f\uff08\uff09",
        "image": "images/557.jpg",
        "choices": [
            "4",
            "6",
            "8",
            "9"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "557",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 155,
            "img_height": 130,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220BAC\uff1d90\u00b0\uff0c\u4ee5Rt\u25b3ABC\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5206\u522b\u5411\u5916\u4f5c\u7b49\u8fb9\u4e09\u89d2\u5f62\u25b3A'BC\uff0c\u25b3AB'C\uff0c\u25b3ABC'\uff0c\u82e5\u25b3A'BC\uff0c\u25b3AB'C\u7684\u9762\u79ef\u5206\u522b\u662f10\u548c4\uff0c\u5219\u25b3ABC'\u7684\u9762\u79ef\u662f\uff08\uff09\nChoices:\n(A) 4\n(B) 6\n(C) 8\n(D) 9\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_area(side):\n    return (math.sqrt(3) / 4) * side**2\n\ndef find_triangle_area(area1, area2):\n    side1 = math.sqrt((4 * area1) / (math.sqrt(3)))\n    side2 = math.sqrt((4 * area2) / (math.sqrt(3)))\n    side3 = side1 + side2\n    return triangle_area(side3)\n\narea1 = 10\narea2 = 4\n\nresult = find_triangle_area(area1, area2)\nprint(result)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "558": {
        "question": "What is the value of the largest bar?",
        "image": "images/558.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "558",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 16], 'Title'), ([44, 32], '10'), ([17, 171], '9'), ([125, 367], '8'), ([168, 359], '1'), ([269, 369], '8'), ([312, 364], '8'), ([361, 367], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest bar?\nImage detected text: [([224, 16], 'Title'), ([44, 32], '10'), ([17, 171], '9'), ([125, 367], '8'), ([168, 359], '1'), ([269, 369], '8'), ([312, 364], '8'), ([361, 367], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [10, 9, 8, 1, 8, 8, 2]\nlargest_bar = max(bars)\nprint(largest_bar)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "559": {
        "question": "what is the highest number shown on the black outer part of the watch?",
        "image": "images/559.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "55",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "559",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 768,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([431, 161], \"JLL '0\"), ([385, 195], '19:'), ([454, 320], '3'), ([667, 401], '8'), ([609, 477], 'ov'), ([413, 497], \"Q8'\"), ([635, 238], 'M'), ([341, 249], '0'), ([302, 310], '('), ([465, 509], \"'UY'\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: what is the highest number shown on the black outer part of the watch?\nImage detected text: [([431, 161], \"JLL '0\"), ([385, 195], '19:'), ([454, 320], '3'), ([667, 401], '8'), ([609, 477], 'ov'), ([413, 497], \"Q8'\"), ([635, 238], 'M'), ([341, 249], '0'), ([302, 310], '('), ([465, 509], \"'UY'\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_number = 0\n\nfor text in detected_text:\n    if text.isdigit():\n        number = int(text)\n        if number > highest_number:\n            highest_number = number\n\nprint(highest_number)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "560": {
        "question": "Is Light Salmon the roughest?",
        "image": "images/560.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "560",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 514,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([231, 45], 'Chocolate'), ([325, 45], 'Sky Blue'), ([409, 45], 'Light Salmon'), ([7, 153], '1'), ([9, 191], '1'), ([477, 363], '100'), ([243, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Light Salmon the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([231, 45], 'Chocolate'), ([325, 45], 'Sky Blue'), ([409, 45], 'Light Salmon'), ([7, 153], '1'), ([9, 191], '1'), ([477, 363], '100'), ([243, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "roughest_color = 'Light Salmon'\nif roughest_color == 'Light Salmon':\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "561": {
        "question": "Is the number of gray rubber double buss right of the small red aeroplane the same as the number of small objects that are left of the tiny gray matte bicycle?",
        "image": "images/561.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "561",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of gray rubber double buss right of the small red aeroplane the same as the number of small objects that are left of the tiny gray matte bicycle?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(caption):\n    objects = {\n        'gray rubber double buss': 3,\n        'small red aeroplane': 2,\n        'small objects': 4,\n        'tiny gray matte bicycle': 1\n    }\n\n    left_objects = []\n    right_objects = []\n\n    for object in objects:\n        if object in caption:\n            if 'left' in caption:\n                left_objects.append(object)\n            elif 'right' in caption:\n                right_objects.append(object)\n\n    if len(left_objects) == objects['tiny gray matte bicycle'] and len(right_objects) == objects['gray rubber double buss']:\n        return 'Yes'\n    else:\n        return 'No'\n\ncaption = \"The image shows a small red aeroplane on the left side and a gray rubber double buss on the right side. There are also small objects on the left side and a tiny gray matte bicycle on the right side.\"\n\nprint(compare_objects(caption))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "562": {
        "question": "Subtract all small green cubes. Subtract all large cylinders. How many objects are left?",
        "image": "images/562.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "562",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small green cubes. Subtract all large cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_green_cubes = 10\nlarge_cylinders = 5\n\nobjects_left = small_green_cubes - large_cylinders\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "563": {
        "question": "Which number on the monitor is higher?",
        "image": "images/563.jpg",
        "choices": [
            "top",
            "bottom",
            "left",
            "right"
        ],
        "unit": null,
        "precision": null,
        "answer": "bottom",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "563",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([124, 120], '783'), ([16, 148], '80'), ([87, 179], 'I5i'), ([110, 288], 'e ')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number on the monitor is higher?\nChoices:\n(A) top\n(B) bottom\n(C) left\n(D) right\nImage detected text: [([124, 120], '783'), ([16, 148], '80'), ([87, 179], 'I5i'), ([110, 288], 'e ')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def get_number(text):\n    numbers = []\n    for item in text:\n        if item[1].isdigit():\n            numbers.append(int(item[1]))\n    return numbers\n\ndef compare_numbers(numbers):\n    if numbers[0] > numbers[1]:\n        return \"top\"\n    elif numbers[0] < numbers[1]:\n        return \"bottom\"\n    elif numbers[2] > numbers[3]:\n        return \"left\"\n    elif numbers[2] < numbers[3]:\n        return \"right\"\n    else:\n        return \"\"\n\ntext = [([124, 120], '783'), ([16, 148], '80'), ([87, 179], 'I5i'), ([110, 288], 'e ')]\nnumbers = get_number(text)\nresult = compare_numbers(numbers)\nprint(result)",
        "execution": "top",
        "error": "None",
        "extraction": "top",
        "prediction": "top",
        "true_false": false
    },
    "564": {
        "question": "What is the difference between the highest and the lowest time required to import ?",
        "image": "images/564.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "564",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1056,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([45, 9], 'Plot of number of days required to export and import the goods in Mexico'), ([7, 247], '8'), ([7, 295], '4'), ([1007, 307], 'Export'), ([1007, 329], 'Import'), ([4, 321], '2'), ([83, 591], '8'), ([365, 591], '8'), ([645, 591], '3'), ([927, 591], '1'), ([491, 628], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the highest and the lowest time required to import ?\nImage detected text: [([45, 9], 'Plot of number of days required to export and import the goods in Mexico'), ([7, 247], '8'), ([7, 295], '4'), ([1007, 307], 'Export'), ([1007, 329], 'Import'), ([4, 321], '2'), ([83, 591], '8'), ([365, 591], '8'), ([645, 591], '3'), ([927, 591], '1'), ([491, 628], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ntext = \"Plot of number of days required to export and import the goods in Mexico\"\nnumbers = re.findall(r'\\d+', text)\nnumbers = [int(num) for num in numbers]\n\ndifference = max(numbers) - min(numbers)\nprint(difference)",
        "execution": "",
        "error": "max() arg is an empty sequence",
        "extraction": "4",
        "prediction": "4",
        "true_false": true
    },
    "565": {
        "question": "Which model can achieve the best ImageNet 10-shot Accuracy score?",
        "image": "images/565.jpg",
        "choices": [
            "Soft MoE",
            "Experts Choice",
            "Tokens Choice",
            "Dense"
        ],
        "unit": null,
        "precision": null,
        "answer": "Soft MoE",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "565",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1966,
            "img_height": 978,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([62, 28], '0.58'), ([1048, 50], '0.80'), ([62, 88], '0.56'), ([1048, 126], '0.75'), ([62, 150], '0.54'), ([1017, 123], '0'), ([62, 210], '0.52'), ([1048, 200], '0.70'), ([26, 163], '1'), ([62, 270], '0.50'), ([1014, 226], '1'), ([1048, 276], '0.65'), ([30, 302], '2'), ([62, 330], '0.48'), ([748, 362], 'Soft MoE'), ([1014, 307], '}'), ([1048, 350], '0.60'), ([1732, 360], 'Soft MoE'), ([62, 390], '0.46'), ([747, 399], 'Experts Choice'), ([1733, 399], 'Experts Choice'), ([750, 436], 'Tokens Choice'), ([1048, 426], '0.55'), ([1736, 436], 'Tokens Choice'), ([62, 452], '0.44'), ([748, 474], 'Dense'), ([1734, 474], 'Dense'), ([1048, 500], '0.50'), ([170, 534], \"10'\"), ([392, 534], '102'), ([608, 536], '101'), ([756, 532], '102'), ([904, 534], '103'), ([1156, 534], \"10'\"), ([1378, 534], '102'), ([1596, 536], '101'), ([1742, 532], '102'), ([1888, 534], '103'), ([175, 567], 'Total Training TPUv3-days'), ([607, 567], 'Total Training ExaFLOP'), ([1161, 567], 'Total Training TPUv3-days'), ([1593, 567], 'Total Training ExaFLOP'), ([282, 640], '(a) JFT-4B Precision-at-1'), ([1212, 639], '(b) ImageNet 10-shot Accuracy'), ([3, 723], 'Figure 3: Pareto Models. Soft MoE dominates both ViTs (dense) and popular MoEs (Experts Choice Tokens'), ([6, 769], 'Choice) on the training cost'), ([543, 768], 'performance Pareto frontier: Each point is a model trained for 300k steps, and'), ([3, 824], 'larger marker sizes indicate larger models: S/32, S/16, B/32, B/16, L/16 and H/14. Cost is shown both in'), ([7, 867], 'terms of FLOPS and realized TPU-v3 training time  MoE runs include different configuration; for clarity,'), ([7, 921], 'only models on their respective Pareto frontier are displayed. Figure 22 in Appendix F shows all models.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model can achieve the best ImageNet 10-shot Accuracy score?\nChoices:\n(A) Soft MoE\n(B) Experts Choice\n(C) Tokens Choice\n(D) Dense\nImage detected text: [([62, 28], '0.58'), ([1048, 50], '0.80'), ([62, 88], '0.56'), ([1048, 126], '0.75'), ([62, 150], '0.54'), ([1017, 123], '0'), ([62, 210], '0.52'), ([1048, 200], '0.70'), ([26, 163], '1'), ([62, 270], '0.50'), ([1014, 226], '1'), ([1048, 276], '0.65'), ([30, 302], '2'), ([62, 330], '0.48'), ([748, 362], 'Soft MoE'), ([1014, 307], '}'), ([1048, 350], '0.60'), ([1732, 360], 'Soft MoE'), ([62, 390], '0.46'), ([747, 399], 'Experts Choice'), ([1733, 399], 'Experts Choice'), ([750, 436], 'Tokens Choice'), ([1048, 426], '0.55'), ([1736, 436], 'Tokens Choice'), ([62, 452], '0.44'), ([748, 474], 'Dense'), ([1734, 474], 'Dense'), ([1048, 500], '0.50'), ([170, 534], \"10'\"), ([392, 534], '102'), ([608, 536], '101'), ([756, 532], '102'), ([904, 534], '103'), ([1156, 534], \"10'\"), ([1378, 534], '102'), ([1596, 536], '101'), ([1742, 532], '102'), ([1888, 534], '103'), ([175, 567], 'Total Training TPUv3-days'), ([607, 567], 'Total Training ExaFLOP'), ([1161, 567], 'Total Training TPUv3-days'), ([1593, 567], 'Total Training ExaFLOP'), ([282, 640], '(a) JFT-4B Precision-at-1'), ([1212, 639], '(b) ImageNet 10-shot Accuracy'), ([3, 723], 'Figure 3: Pareto Models. Soft MoE dominates both ViTs (dense) and popular MoEs (Experts Choice Tokens'), ([6, 769], 'Choice) on the training cost'), ([543, 768], 'performance Pareto frontier: Each point is a model trained for 300k steps, and'), ([3, 824], 'larger marker sizes indicate larger models: S/32, S/16, B/32, B/16, L/16 and H/14. Cost is shown both in'), ([7, 867], 'terms of FLOPS and realized TPU-v3 training time  MoE runs include different configuration; for clarity,'), ([7, 921], 'only models on their respective Pareto frontier are displayed. Figure 22 in Appendix F shows all models.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def best_model(image_text):\n    models = {\n        'Soft MoE': 0.58,\n        'Experts Choice': 0.80,\n        'Tokens Choice': 0.56,\n        'Dense': 0.75\n    }\n\n    best_score = 0\n    best_model = \"\"\n\n    for text in image_text:\n        if text[1].isdigit():\n            score = float(text[1])\n            if score > best_score:\n                best_score = score\n                best_model = text[0]\n\n    return best_model\n\nimage_text = [([62, 28], '0.58'), ([1048, 50], '0.80'), ([62, 88], '0.56'), ([1048, 126], '0.75'), ([62, 150], '0.54'), ([1017, 123], '0'), ([62, 210], '0.52'), ([1048, 200], '0.70'), ([26, 163], '1'), ([62, 270], '0.50'), ([1014, 226], '1'), ([1048, 276], '0.65'), ([30, 302], '2'), ([62, 330], '0.48'), ([748, 362], 'Soft MoE'), ([1014, 307], '}'), ([1048, 350], '0.60'), ([1732, 360], 'Soft MoE'), ([62, 390], '0.46'), ([747, 399], 'Experts Choice'), ([1733, 399], 'Experts Choice'), ([750, 436], 'Tokens Choice'), ([1048, 426], '0.55'), ([1736, 436], 'Tokens Choice'), ([62, 452], '0.44'), ([748, 474], 'Dense'), ([1734, 474], 'Dense'), ([1048, 500], '0.50')]\n\nprint(best_model(image_text))",
        "execution": "[30, 302]",
        "error": "None",
        "extraction": "Experts Choice",
        "prediction": "Experts Choice",
        "true_false": false
    },
    "566": {
        "question": "\u5982\u56fe\uff0c\u5df2\u77e5\u25b3ABC\u224c\u25b3DEF\uff0cCD\u5e73\u5206\u2220BCA\uff0c\u82e5\u2220A\uff1d22\u00b0\uff0c\u2220CGF\uff1d88\u00b0\uff0c\u5219\u2220E\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/566.jpg",
        "choices": [
            "26\u00b0",
            "28\u00b0",
            "30\u00b0",
            "34\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "26\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "566",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 89,
            "img_height": 89,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5df2\u77e5\u25b3ABC\u224c\u25b3DEF\uff0cCD\u5e73\u5206\u2220BCA\uff0c\u82e5\u2220A\uff1d22\u00b0\uff0c\u2220CGF\uff1d88\u00b0\uff0c\u5219\u2220E\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 26\u00b0\n(B) 28\u00b0\n(C) 30\u00b0\n(D) 34\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nA, B, C, D, E, F, G = sp.symbols('A B C D E F G')\n\n# Define the given angles\nangle_A = 22\nangle_CGF = 88\n\n# Define the congruence of triangles\ntriangle_ABC = sp.Eq(sp.Symbol('angle_A') + sp.Symbol('angle_B') + sp.Symbol('angle_C'), 180)\ntriangle_DEF = sp.Eq(sp.Symbol('angle_D') + sp.Symbol('angle_E') + sp.Symbol('angle_F'), 180)\n\n# Define the angle bisector condition\nangle_CDA = sp.Eq(sp.Symbol('angle_C') + sp.Symbol('angle_D') + sp.Symbol('angle_A'), 180)\n\n# Define the angle relationship between CGF and E\nangle_CGF = sp.Eq(sp.Symbol('angle_CGF'), sp.Symbol('angle_C') + sp.Symbol('angle_G') + sp.Symbol('angle_F'))\nangle_E = sp.Symbol('angle_E')\n\n# Solve the equations\nsolution = sp.solve((triangle_ABC, triangle_DEF, angle_CDA, angle_CGF), (angle_B, angle_C, angle_D, angle_E, angle_F, angle_G))\n\n# Get the value of angle E\nangle_E_value = solution[angle_E].subs({angle_A: angle_A, angle_CGF: angle_CGF})\n\n# Print the result\nprint(f\"The value of angle E is {angle_E_value} degrees\")",
        "execution": "",
        "error": "name 'angle_B' is not defined",
        "extraction": "The value of angle E is 60 degrees.",
        "prediction": "26\u00b0",
        "true_false": true
    },
    "567": {
        "question": "Move the ruler to measure the length of the slug to the nearest inch. The slug is about (_) inches long.",
        "image": "images/567.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "567",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 252,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 217], 'Oin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the slug to the nearest inch. The slug is about (_) inches long.\nImage detected text: [([19, 217], 'Oin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "slug_length = 0\n\n# Measure the length of the slug using the ruler\n# Set the slug_length variable to the measured length\n\nprint(\"The slug is about\", slug_length, \"inches long.\")",
        "execution": "The slug is about 0 inches long.",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "568": {
        "question": "For an economics project, Colleen determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry? (Unit: $)",
        "image": "images/568.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "568",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 349,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([132, 6], 'Ferry fares'), ([58, 36], 'Ferry'), ([195, 39], 'Car'), ([273, 37], 'Bicycle'), ([5, 69], 'Ocracoke'), ([193, 67], 'S15'), ([291, 67], '$3'), ([5, 101], 'Mukilteu-Clinton'), ([197, 99], '87'), ([291, 99], 'S5'), ([3, 129], 'Seattle-Bremerton'), ([193, 129], 'S12'), ([291, 129], '$8'), ([2, 158], 'Southport-Fort Fisher'), ([197, 161], 'S5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For an economics project, Colleen determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Mukilteu-Clinton ferry than on the Southport-Fort Fisher ferry? (Unit: $)\nImage detected text: [([132, 6], 'Ferry fares'), ([58, 36], 'Ferry'), ([195, 39], 'Car'), ([273, 37], 'Bicycle'), ([5, 69], 'Ocracoke'), ([193, 67], 'S15'), ([291, 67], '$3'), ([5, 101], 'Mukilteu-Clinton'), ([197, 99], '87'), ([291, 99], 'S5'), ([3, 129], 'Seattle-Bremerton'), ([193, 129], 'S12'), ([291, 129], '$8'), ([2, 158], 'Southport-Fort Fisher'), ([197, 161], 'S5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "mukilteu_clinton_fare = 87\nsouthport_fort_fisher_fare = 5\n\nfare_difference = mukilteu_clinton_fare - southport_fort_fisher_fare\nprint(fare_difference)",
        "execution": "82",
        "error": "None",
        "extraction": "82",
        "prediction": "82",
        "true_false": false
    },
    "569": {
        "question": "Which subject had the highest pulse rate in baseline period?",
        "image": "images/569.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "569",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1786,
            "img_height": 2284,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([397, 265], 'BASELINE'), ([597, 267], 'PERIOD'), ([748, 278], 'VS'), ([797, 261], '\"READING\" and'), ([1076, 268], 'EXAMINATION'), ([1351, 269], 'PERIODS'), ([801, 314], 'JANUARY 1963'), ([765, 359], 'ELEVEN'), ([939, 361], 'SUBJECTS'), ([378, 488], '72'), ([300, 484], '1'), ([378, 640], '70'), ([378, 846], '84'), ([378, 886], '82'), ([380, 924], '80'), ([302, 839], '1'), ([377, 961], '76'), ([382, 1036], '74'), ([380, 1074], '72'), ([286, 1264], '3'), ([284, 1324], '2'), ([328, 1318], '1'), ([399, 1361], '0'), ([286, 1392], '9'), ([372, 1438], '0.9'), ([362, 1686], '1.80'), ([326, 1724], '2'), ([284, 1690], '1'), ([378, 1836], '70'), ([495, 1941], '1 2 3 4 5 6 7 8 9'), ([914, 1942], '2 3 4'), ([1032, 1944], '5 6 7 8'), ([1180, 1946], '9'), ([900, 1976], 'F~R-HK'), ([1090, 1978], 'E'), ([588, 2002], 'BASELINE'), ([896, 2018], 'TOTAL'), ([998, 2018], 'EXAMINATION'), ([420, 2239], 'Source: https IIWWW industrydocuments ucst eduldocsiglg0227'), ([321, 1762], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which subject had the highest pulse rate in baseline period?\nImage detected text: [([397, 265], 'BASELINE'), ([597, 267], 'PERIOD'), ([748, 278], 'VS'), ([797, 261], '\"READING\" and'), ([1076, 268], 'EXAMINATION'), ([1351, 269], 'PERIODS'), ([801, 314], 'JANUARY 1963'), ([765, 359], 'ELEVEN'), ([939, 361], 'SUBJECTS'), ([378, 488], '72'), ([300, 484], '1'), ([378, 640], '70'), ([378, 846], '84'), ([378, 886], '82'), ([380, 924], '80'), ([302, 839], '1'), ([377, 961], '76'), ([382, 1036], '74'), ([380, 1074], '72'), ([286, 1264], '3'), ([284, 1324], '2'), ([328, 1318], '1'), ([399, 1361], '0'), ([286, 1392], '9'), ([372, 1438], '0.9'), ([362, 1686], '1.80'), ([326, 1724], '2'), ([284, 1690], '1'), ([378, 1836], '70'), ([495, 1941], '1 2 3 4 5 6 7 8 9'), ([914, 1942], '2 3 4'), ([1032, 1944], '5 6 7 8'), ([1180, 1946], '9'), ([900, 1976], 'F~R-HK'), ([1090, 1978], 'E'), ([588, 2002], 'BASELINE'), ([896, 2018], 'TOTAL'), ([998, 2018], 'EXAMINATION'), ([420, 2239], 'Source: https IIWWW industrydocuments ucst eduldocsiglg0227'), ([321, 1762], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "pulse_rates = {\n    'READING': 72,\n    'EXAMINATION': 70,\n    'SUBJECTS': 84,\n    '1': 82,\n    '2': 80,\n    '3': 76,\n    '4': 74,\n    '5': 72\n}\n\nmax_pulse_rate = max(pulse_rates.values())\nsubject_with_max_pulse_rate = [subject for subject, rate in pulse_rates.items() if rate == max_pulse_rate]\n\nsubject_with_max_pulse_rate",
        "execution": "",
        "error": "name 'max_pulse_rate' is not defined",
        "extraction": "['READING']",
        "prediction": null,
        "true_false": false
    },
    "570": {
        "question": "Subtract all purple matte blocks. Subtract all brown things. How many objects are left?",
        "image": "images/570.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "570",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all purple matte blocks. Subtract all brown things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "purple_matte_blocks = 5\nbrown_things = 3\n\nobjects_left = purple_matte_blocks - brown_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "571": {
        "question": "Is Bubblegum the roughest?",
        "image": "images/571.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "571",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 613,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 11], 'title'), ([25, 27], '100'), ([7, 153], '1'), ([93, 183], 'Seafoam'), ([177, 183], 'Dark Salmon'), ([290, 181], 'Bubblegum'), ([9, 191], '1'), ([573, 363], '100'), ([297, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Bubblegum the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([57, 11], 'title'), ([25, 27], '100'), ([7, 153], '1'), ([93, 183], 'Seafoam'), ([177, 183], 'Dark Salmon'), ([290, 181], 'Bubblegum'), ([9, 191], '1'), ([573, 363], '100'), ([297, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_roughest(choices):\n    for choice in choices:\n        if choice == 'Bubblegum':\n            return 'yes'\n    return 'no'\n\nchoices = ['Seafoam', 'Dark Salmon', 'Bubblegum']\nprint(is_roughest(choices))",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "572": {
        "question": "When does the function start decreasing?",
        "image": "images/572.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "572",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 316,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([13, 13], '0.33'), ([13, 103], '0.2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When does the function start decreasing?\nImage detected text: [([13, 13], '0.33'), ([13, 103], '0.2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_decreasing_point(points):\n    for i in range(len(points)-1):\n        if points[i][1] > points[i+1][1]:\n            return points[i][0]\n    return \"\"\n\npoints = [(0.33, 13), (0.2, 103)]\nprint(find_decreasing_point(points))",
        "execution": "",
        "error": "None",
        "extraction": "0.33",
        "prediction": null,
        "true_false": false
    },
    "573": {
        "question": "A race car driver kept track of how many laps he drove in the past 5 days. What is the mode of the numbers?'",
        "image": "images/573.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "53",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "573",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([55, 9], 'Laps driven'), ([81, 37], 'Number of laps'), ([1, 64], 'Thursday'), ([129, 67], '53'), ([3, 99], 'Friday'), ([129, 99], '53'), ([1, 126], 'Saturday'), ([129, 129], '53'), ([3, 161], 'Sunday'), ([129, 161], '55'), ([1, 188], 'Monday'), ([129, 191], '55'), ([21, 34], 'Day')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A race car driver kept track of how many laps he drove in the past 5 days. What is the mode of the numbers?'\nImage detected text: [([55, 9], 'Laps driven'), ([81, 37], 'Number of laps'), ([1, 64], 'Thursday'), ([129, 67], '53'), ([3, 99], 'Friday'), ([129, 99], '53'), ([1, 126], 'Saturday'), ([129, 129], '53'), ([3, 161], 'Sunday'), ([129, 161], '55'), ([1, 188], 'Monday'), ([129, 191], '55'), ([21, 34], 'Day')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "laps = [53, 53, 53, 55, 55]\n\ndef mode(numbers):\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    max_count = max(counts.values())\n    mode_nums = [num for num, count in counts.items() if count == max_count]\n    \n    return mode_nums\n\nprint(mode(laps))",
        "execution": "[53]",
        "error": "None",
        "extraction": "[53, 55]",
        "prediction": null,
        "true_false": false
    },
    "574": {
        "question": "Do you see the figures inside these boxes? They form a pattern. Choose the figure in the answer row below that continues the pattern.",
        "image": "images/574.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "4",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "574",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 868,
            "img_height": 378,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Do you see the figures inside these boxes? They form a pattern. Choose the figure in the answer row below that continues the pattern.\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_pattern(boxes):\n    patterns = {\n        (1, 2, 3): 4,\n        (2, 4, 6): 8,\n        (3, 6, 9): 12,\n        (4, 8, 12): 16,\n        (5, 10, 15): 20\n    }\n\n    for pattern, answer in patterns.items():\n        if boxes == pattern:\n            return answer\n    return \"\"\n\nboxes = [1, 2, 3]\nprint(find_pattern(boxes))",
        "execution": "",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "575": {
        "question": "Lines $l$, $m$, and $n$ are perpendicular bisectors of $\\triangle PQR$ and meet at $T$. If $TQ = 2x$, $PT = 3y - 1$, and $TR = 8$, find $z$.",
        "image": "images/575.jpg",
        "choices": [
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "575",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 509,
            "img_height": 287,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([196, 78], 'm'), ([334, 102], '2x'), ([78, 174], 'n'), ([355, 179], '8'), ([145, 199], '3y _ 1'), ([14, 222], 'P'), ([450, 222], 'R'), ([106, 242], '2 + 4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Lines $l$, $m$, and $n$ are perpendicular bisectors of $\\triangle PQR$ and meet at $T$. If $TQ = 2x$, $PT = 3y - 1$, and $TR = 8$, find $z$.\nChoices:\n(A) 3\n(B) 4\n(C) 5\n(D) 6\nImage detected text: [([196, 78], 'm'), ([334, 102], '2x'), ([78, 174], 'n'), ([355, 179], '8'), ([145, 199], '3y _ 1'), ([14, 222], 'P'), ([450, 222], 'R'), ([106, 242], '2 + 4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx, y, z = sp.symbols('x y z')\nTQ = 2*x\nPT = 3*y - 1\nTR = 8\n\n# Perpendicular bisectors intersect at T\neq1 = sp.Eq(TQ, PT)\neq2 = sp.Eq(PT, TR)\n\n# Solve for x and y\nsol = sp.solve((eq1, eq2), (x, y))\nx_val = sol[x]\ny_val = sol[y]\n\n# Find z\nz_val = 2 + 4\n\nz_val",
        "execution": "",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "576": {
        "question": "Which part of the human brain is the largest and most anterior part of each cerebral hemisphere?",
        "image": "images/576.jpg",
        "choices": [
            "motor cortex",
            "occipital lobe",
            "temporal lobe",
            "frontal lobe"
        ],
        "unit": null,
        "precision": null,
        "answer": "frontal lobe",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "576",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 768,
            "img_height": 625,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([146, 9], 'Motor cortex'), ([425, 5], 'Somatosensory cortex'), ([462, 158], 'Parietal lobe'), ([78, 258], 'Frontal lobe'), ([540, 304], 'Occipital lobe'), ([334, 360], 'Temporal lobe'), ([28, 438], 'Auditory cortex'), ([698, 438], 'Visual'), ([698, 466], 'cortex'), ([6, 490], 'Figure 4.11'), ([6, 522], 'LOBES OF THE CEREBRUM'), ([6, 560], 'Deep fissures divide the cortex of each'), ([5, 584], 'cerebral hemisphere into four regions:')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which part of the human brain is the largest and most anterior part of each cerebral hemisphere?\nChoices:\n(A) motor cortex\n(B) occipital lobe\n(C) temporal lobe\n(D) frontal lobe\nImage detected text: [([146, 9], 'Motor cortex'), ([425, 5], 'Somatosensory cortex'), ([462, 158], 'Parietal lobe'), ([78, 258], 'Frontal lobe'), ([540, 304], 'Occipital lobe'), ([334, 360], 'Temporal lobe'), ([28, 438], 'Auditory cortex'), ([698, 438], 'Visual'), ([698, 466], 'cortex'), ([6, 490], 'Figure 4.11'), ([6, 522], 'LOBES OF THE CEREBRUM'), ([6, 560], 'Deep fissures divide the cortex of each'), ([5, 584], 'cerebral hemisphere into four regions:')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_part = 'frontal lobe'\nmost_anterior_part = 'frontal lobe'\n\nprint(largest_part)\nprint(most_anterior_part)",
        "execution": "frontal lobe\nfrontal lobe",
        "error": "None",
        "extraction": "frontal lobe",
        "prediction": "frontal lobe",
        "true_false": true
    },
    "577": {
        "question": "Consider the following matrices:\r\n$$\r\n\\mathbf{A}=\\left(\\begin{array}{rrr}\r\n1 & 2 & -1 \\\\\r\n0 & 3 & 1 \\\\\r\n2 & 0 & 1\r\n\\end{array}\\right), \\quad \\mathbf{B}=\\left(\\begin{array}{rrr}\r\n2 & 1 & 0 \\\\\r\n0 & -1 & 2 \\\\\r\n1 & 1 & 3\r\n\\end{array}\\right), \\quad \\mathbf{C}=\\left(\\begin{array}{ll}\r\n2 & 1 \\\\\r\n4 & 3 \\\\\r\n1 & 0\r\n\\end{array}\\right)\r\n$$\r\nFind $|\\mathbf{A B}|$.",
        "image": "images/577.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-104",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "577",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 533,
            "img_height": 142,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([153, 35], '2'), ([367, 35], '2'), ([32, 66], 'A ='), ([151, 67], '3'), ([196, 28], ':}'), ([290, 64], 'B ='), ([412, 68], '=1'), ([479, 69], '2'), ([107, 101], '2'), ([430, 104], '1'), ([477, 103], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Consider the following matrices:\r\n$$\r\n\\mathbf{A}=\\left(\\begin{array}{rrr}\r\n1 & 2 & -1 \\\\\r\n0 & 3 & 1 \\\\\r\n2 & 0 & 1\r\n\\end{array}\\right), \\quad \\mathbf{B}=\\left(\\begin{array}{rrr}\r\n2 & 1 & 0 \\\\\r\n0 & -1 & 2 \\\\\r\n1 & 1 & 3\r\n\\end{array}\\right), \\quad \\mathbf{C}=\\left(\\begin{array}{ll}\r\n2 & 1 \\\\\r\n4 & 3 \\\\\r\n1 & 0\r\n\\end{array}\\right)\r\n$$\r\nFind $|\\mathbf{A B}|$.\nImage detected text: [([153, 35], '2'), ([367, 35], '2'), ([32, 66], 'A ='), ([151, 67], '3'), ([196, 28], ':}'), ([290, 64], 'B ='), ([412, 68], '=1'), ([479, 69], '2'), ([107, 101], '2'), ([430, 104], '1'), ([477, 103], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\nA = np.array([[1, 2, -1], [0, 3, 1], [2, 0, 1]])\nB = np.array([[2, 1, 0], [0, -1, 2], [1, 1, 3]])\n\nAB = np.dot(A, B)\ndet_AB = np.linalg.det(AB)\n\nprint(det_AB)",
        "execution": "-103.99999999999999",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "578": {
        "question": "What number is shown?",
        "image": "images/578.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9567",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "578",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 637,
            "img_height": 285,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "579": {
        "question": "What is the average number of documents required per shipment to export goods in Uganda per year?",
        "image": "images/579.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "579",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1228,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([50, 6], 'Number of documents required per shipment to export goods'), ([7, 183], '1'), ([8, 258], '|'), ([9, 349], '6'), ([9, 373], '1'), ([101, 601], '8'), ([315, 601], '8'), ([527, 601], '18'), ([739, 601], '8'), ([953, 601], '2'), ([1165, 601], '3'), ([617, 639], 'Years'), ([1009, 673], 'Indonesia'), ([1097, 673], 'Malawi'), ([1171, 673], 'Uganda')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average number of documents required per shipment to export goods in Uganda per year?\nImage detected text: [([50, 6], 'Number of documents required per shipment to export goods'), ([7, 183], '1'), ([8, 258], '|'), ([9, 349], '6'), ([9, 373], '1'), ([101, 601], '8'), ([315, 601], '8'), ([527, 601], '18'), ([739, 601], '8'), ([953, 601], '2'), ([1165, 601], '3'), ([617, 639], 'Years'), ([1009, 673], 'Indonesia'), ([1097, 673], 'Malawi'), ([1171, 673], 'Uganda')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "documents_per_shipment = [1, 6, 1, 8, 8, 18, 8, 2, 3]\naverage_documents = sum(documents_per_shipment) / len(documents_per_shipment)\nprint(average_documents)",
        "execution": "6.111111111111111",
        "error": "None",
        "extraction": "8.0",
        "prediction": null,
        "true_false": false
    },
    "580": {
        "question": "Is Slate the high median?",
        "image": "images/580.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "580",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 650,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([149, 11], 'title'), ([89, 41], 'Hot Pink'), ([111, 73], 'Slate'), ([115, 105], 'Teal'), ([33, 136], 'Medium Turquoise'), ([7, 153], '1'), ([89, 169], 'Sky Blue'), ([9, 191], '1'), ([57, 201], 'Light Sky Blue'), ([75, 233], 'Light Coral'), ([75, 265], 'Dark Khaki'), ([69, 297], 'Dodger Blue'), ([72, 330], 'ROSV'), ([104, 330], 'BrOT'), ([625, 363], '100'), ([361, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Slate the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([149, 11], 'title'), ([89, 41], 'Hot Pink'), ([111, 73], 'Slate'), ([115, 105], 'Teal'), ([33, 136], 'Medium Turquoise'), ([7, 153], '1'), ([89, 169], 'Sky Blue'), ([9, 191], '1'), ([57, 201], 'Light Sky Blue'), ([75, 233], 'Light Coral'), ([75, 265], 'Dark Khaki'), ([69, 297], 'Dodger Blue'), ([72, 330], 'ROSV'), ([104, 330], 'BrOT'), ([625, 363], '100'), ([361, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_high_median(colors):\n    median_index = len(colors) // 2\n    median_color = colors[median_index]\n    if median_color == 'Slate':\n        return 'yes'\n    else:\n        return 'no'\n\ncolors = ['Hot Pink', 'Slate', 'Teal', 'Medium Turquoise', 'Sky Blue', 'Light Sky Blue', 'Light Coral', 'Dark Khaki', 'Dodger Blue']\nprint(is_high_median(colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "581": {
        "question": "Subtract all large matte cubes. Subtract all matte blocks. How many objects are left?",
        "image": "images/581.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "581",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large matte cubes. Subtract all matte blocks. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_matte_cubes = 10\nmatte_blocks = 5\n\nobjects_left = large_matte_cubes - matte_blocks\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "582": {
        "question": "Is Web Green greater than Rebecca Purple?",
        "image": "images/582.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "582",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 582,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 115], '9'), ([9, 151], '9'), ([111, 281], '2'), ([243, 281], 'I'), ([508, 282], '1'), ([112, 318], '1'), ([241, 329], '1'), ([373, 281], '1'), ([277, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Web Green greater than Rebecca Purple?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 115], '9'), ([9, 151], '9'), ([111, 281], '2'), ([243, 281], 'I'), ([508, 282], '1'), ([112, 318], '1'), ([241, 329], '1'), ([373, 281], '1'), ([277, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "web_green = 9\nrebecca_purple = 1\n\nif web_green > rebecca_purple:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "583": {
        "question": "Find x. Round to the nearest tenth.\r\n",
        "image": "images/583.jpg",
        "choices": [
            "5.8",
            "6.5",
            "14.2",
            "44.3"
        ],
        "unit": null,
        "precision": null,
        "answer": "5.8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "583",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 319,
            "img_height": 465,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([10, 146], 'A'), ([63, 143], '970'), ([208, 194], '16'), ([172, 274], '21')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x. Round to the nearest tenth.\r\n\nChoices:\n(A) 5.8\n(B) 6.5\n(C) 14.2\n(D) 44.3\nImage detected text: [([10, 146], 'A'), ([63, 143], '970'), ([208, 194], '16'), ([172, 274], '21')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nx = math.sqrt(970) / (16 - 21)\nx = round(x, 1)\nprint(x)",
        "execution": "-6.2",
        "error": "None",
        "extraction": "6.5",
        "prediction": "6.5",
        "true_false": false
    },
    "584": {
        "question": "A philanthropic organization compared the amounts of money that its members donated to certain causes. Who donated more money to arts education, Aubrey or Connor?'",
        "image": "images/584.jpg",
        "choices": [
            "Connor",
            "Aubrey"
        ],
        "unit": null,
        "precision": null,
        "answer": "Connor",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "584",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 391,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([155, 5], 'Donations'), ([5, 39], 'Person'), ([101, 39], 'Clean water'), ([251, 37], 'Arts education'), ([131, 67], 'S16'), ([293, 67], 'S12'), ([3, 99], 'Harold'), ([135, 99], 'S6'), ([297, 99], 'S6'), ([1, 127], 'Aubrey'), ([131, 129], 'S17'), ([293, 129], 'S16'), ([5, 163], 'Connor'), ([131, 161], 'S11'), ([293, 161], 'S19'), ([3, 63], 'Joy')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A philanthropic organization compared the amounts of money that its members donated to certain causes. Who donated more money to arts education, Aubrey or Connor?'\nChoices:\n(A) Connor\n(B) Aubrey\nImage detected text: [([155, 5], 'Donations'), ([5, 39], 'Person'), ([101, 39], 'Clean water'), ([251, 37], 'Arts education'), ([131, 67], 'S16'), ([293, 67], 'S12'), ([3, 99], 'Harold'), ([135, 99], 'S6'), ([297, 99], 'S6'), ([1, 127], 'Aubrey'), ([131, 129], 'S17'), ([293, 129], 'S16'), ([5, 163], 'Connor'), ([131, 161], 'S11'), ([293, 161], 'S19'), ([3, 63], 'Joy')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "donations = {\n    'Aubrey': {'Arts education': 'S17'},\n    'Connor': {'Arts education': 'S11'}\n}\n\naubrey_donation = donations['Aubrey']['Arts education']\nconnor_donation = donations['Connor']['Arts education']\n\nif aubrey_donation > connor_donation:\n    print(\"Aubrey donated more money to arts education\")\nelse:\n    print(\"Connor donated more money to arts education\")",
        "execution": "Aubrey donated more money to arts education",
        "error": "None",
        "extraction": "Connor",
        "prediction": "Connor",
        "true_false": true
    },
    "585": {
        "question": "\u5982\u56fe\uff0c\u5728\u77e9\u5f62ABCD\u4e2d\uff0cAB\uff1d2\uff0c\u2220AOB\uff1d60\u00b0\uff0c\u5219BD\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/585.jpg",
        "choices": [
            "4",
            "3",
            "2",
            "2\u221a{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "585",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 148,
            "img_height": 92,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u77e9\u5f62ABCD\u4e2d\uff0cAB\uff1d2\uff0c\u2220AOB\uff1d60\u00b0\uff0c\u5219BD\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 4\n(B) 3\n(C) 2\n(D) 2\u221a{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 2\nangle_AOB = 60\n\n# Calculate the length of BD using trigonometry\nBD = AB * math.sin(math.radians(angle_AOB))\n\nBD",
        "execution": "",
        "error": "None",
        "extraction": "2.0",
        "prediction": "2",
        "true_false": false
    },
    "586": {
        "question": "As shown in the figure, in Rt\u25b3ABC, \u2220BAC = 90.0, rotate \u25b3ABC clockwise around point A by 90.0 to obtain \u25b3AB\u2032C\u2032 (the corresponding point of point B is point B\u2032, and the corresponding point of point C is point C \u2032), connect CC\u2032. If \u2220CC\u2032B\u2032 = 32.0, then the size of \u2220AC\u2032B\u2032 is ()",
        "image": "images/586.jpg",
        "choices": [
            "32\u00b0",
            "45\u00b0",
            "13\u00b0",
            "30\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "13\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "586",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 80,
            "img_height": 75,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in Rt\u25b3ABC, \u2220BAC = 90.0, rotate \u25b3ABC clockwise around point A by 90.0 to obtain \u25b3AB\u2032C\u2032 (the corresponding point of point B is point B\u2032, and the corresponding point of point C is point C \u2032), connect CC\u2032. If \u2220CC\u2032B\u2032 = 32.0, then the size of \u2220AC\u2032B\u2032 is ()\nChoices:\n(A) 32\u00b0\n(B) 45\u00b0\n(C) 13\u00b0\n(D) 30\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle1, angle2):\n    angle3 = 180 - angle1 - angle2\n    return angle3\n\nangle_BAC = 90.0\nangle_CCB_prime = 32.0\n\nangle_ACB = find_angle(angle_BAC, angle_CCB_prime)\nangle_AC_primeB_prime = angle_ACB\n\nprint(angle_AC_primeB_prime)",
        "execution": "58.0",
        "error": "None",
        "extraction": "45.0",
        "prediction": "45\u00b0",
        "true_false": false
    },
    "587": {
        "question": "At 9.0 in the morning, a ship departs from point A and sails in the direction due east at a speed of 40.0 nautical miles per hour, and arrives at point B at 9.0 and 30.0 minutes. As shown in the figure, the island M is measured from A and B. In the direction of 45.0 north by east and 15.0 north by east, then the distance between B and island M is ()",
        "image": "images/587.jpg",
        "choices": [
            "20\u6d77\u91cc",
            "20\u221a{2}\u6d77\u91cc",
            "15\u6d77\u91cc",
            "20\u6d77\u91cc"
        ],
        "unit": null,
        "precision": null,
        "answer": "20\u221a{2}\u6d77\u91cc",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "587",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 144,
            "img_height": 124,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: At 9.0 in the morning, a ship departs from point A and sails in the direction due east at a speed of 40.0 nautical miles per hour, and arrives at point B at 9.0 and 30.0 minutes. As shown in the figure, the island M is measured from A and B. In the direction of 45.0 north by east and 15.0 north by east, then the distance between B and island M is ()\nChoices:\n(A) 20\u6d77\u91cc\n(B) 20\u221a{2}\u6d77\u91cc\n(C) 15\u6d77\u91cc\n(D) 20\u6d77\u91cc\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef distance_between_points(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n\nx1 = 0\ny1 = 0\nx2 = 15\ny2 = 15\n\ndistance = distance_between_points(x1, y1, x2, y2)\nprint(distance)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "20\u221a{2}",
        "prediction": "20\u221a{2}\u6d77\u91cc",
        "true_false": true
    },
    "588": {
        "question": "Which year has more actual total income?",
        "image": "images/588.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1982",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "588",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1785,
            "img_height": 2281,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([696, 130], 'VNA'), ([762, 129], 'OF GREATER ST'), ([1011, 129], 'LQUIS'), ([712, 180], 'STATEMENT'), ([877, 177], 'OFOPERATIONS'), ([378, 234], 'FOR THE'), ([510, 234], 'MONTH OF'), ([662, 236], 'SEPTEMBER'), ([846, 236], '1981'), ([930, 236], 'COMPARED'), ([1080, 238], 'TO'), ([1130, 236], 'SEPTEMBER'), ([1313, 235], '1982'), ([828, 307], 'Actual'), ([1193, 301], 'Budget'), ([1398, 308], 'Percent'), ([1534, 306], 'of'), ([710, 342], '1981'), ([943, 339], '1982'), ([1214, 340], '1982'), ([1416, 342], 'Varlance'), ([160, 380], 'INCOME'), ([195, 435], '1'), ([241, 431], 'Home'), ([326, 432], 'Visits'), ([660, 427], 's858,171'), ([895, 431], '$1,115,039'), ([1179, 431], 's996,292'), ([1466, 432], '11.9'), ([195, 465], '2'), ([240, 463], 'MedIcare'), ([394, 466], 'Allowance'), ([663, 463], '(117,251)'), ([930, 461], '(182,231)'), ([1181, 465], '(158 , 091)'), ([1466, 466], '15.3'), ([195, 501], '3'), ([242, 500], 'Bad'), ([310, 502], 'Debt'), ([394, 502], 'Provislon'), ([712, 498], '5,000)'), ([977, 497], '1,667)'), ([1229, 497], '1,667)'), ([197, 537], '4'), ([243, 533], 'Equipment'), ([410, 535], 'Rental'), ([677, 531], '120 , 947'), ([945, 531], '122 ,587'), ([1196, 532], '103,750'), ([1466, 534], '18 . 2'), ([193, 565], '5'), ([242, 568], 'Less :'), ([343, 567], 'Equip.'), ([460, 568], 'Rental'), ([576, 569], 'Exp .'), ([663, 563], '(121,101)'), ([929, 565], '(122,668)'), ([1181, 565], '(103,750)'), ([1464, 566], '18 . 2'), ([193, 601], '6'), ([242, 602], 'MLacellaneous'), ([744, 600], '117'), ([1014, 600], '381'), ([1229, 599], '1000'), ([1449, 599], '(61.9)'), ([195, 669], '9'), ([242, 667], 'TOTAL'), ([344, 668], 'INCOME'), ([659, 667], 'S135,883'), ([945, 668], '931,441'), ([1180, 670], 's837'), ([1264, 670], '534'), ([1466, 670], '11.2'), ([160, 736], 'EXPENSES'), ([176, 786], '10'), ([242, 786], 'Salarie8'), ([658, 781], 's490,059'), ([943, 785], '585 , 059'), ([1179, 785], '8571,501'), ([1482, 786], '2 . 4'), ([176, 820], '11'), ([240, 816], 'Payroll'), ([376, 819], 'Taxes'), ([693, 817], '28 , 073'), ([962, 820], '34'), ([1012, 818], '784'), ([1214, 820], '34,513'), ([1515, 819], '8'), ([176, 852], '12'), ([241, 849], 'Employee Benefits'), ([692, 852], '42,928'), ([962, 852], '54,889'), ([1212, 852], '43,761'), ([1466, 852], '25 . 4'), ([176, 884], '13'), ([241, 885], 'Supplies'), ([424, 881], 'Medical'), ([694, 884], '18,854'), ([960, 884], '18,870'), ([1211, 883], '15,196'), ([1466, 884], '24'), ([1517, 885], '2'), ([176, 918], '14'), ([241, 917], 'Supplies'), ([426, 918], 'Admin.'), ([547, 923], '6'), ([575, 917], 'MLsc ,'), ([693, 915], '20,573'), ([962, 918], '15,396'), ([1214, 918], '23,469'), ([1449, 915], '(34.4)'), ([176, 950], '15'), ([240, 949], 'Transportation'), ([692, 950], '45,229'), ([961, 949], '52 ,848'), ([1211, 949], '49,258'), ([1482, 950], '7 . 3'), ([176, 984], '16'), ([242, 983], 'Office Rencal ,'), ([494, 984], 'Utilitles'), ([292, 1018], 'and'), ([358, 1019], 'Maintenance'), ([694, 1016], '23,423'), ([958, 1013], '41,675'), ([1264, 1016], '984'), ([1466, 1016], '66 . 8'), ([176, 1052], '17'), ([242, 1052], 'Conf_'), ([345, 1055], '6'), ([373, 1048], 'Meetings'), ([709, 1049], '9 ,541'), ([975, 1049], '4,182'), ([1214, 1050], '12,439'), ([1450, 1045], '(66.4)'), ([174, 1086], '18'), ([240, 1083], 'Telephone'), ([710, 1082], '9,581'), ([959, 1083], '12,479'), ([1213, 1083], '10,126'), ([1466, 1084], '23.2'), ([174, 1120], '19'), ([242, 1120], 'Depreclation'), ([492, 1120], 'FGF'), ([560, 1120], 'and'), ([258, 1154], 'Amortization'), ([510, 1154], 'LHI'), ([709, 1153], '6,931'), ([978, 1155], '8,187'), ([1229, 1155], '6 ,584'), ([1466, 1156], '24.4'), ([176, 1186], '20'), ([239, 1182], 'Deta Processing'), ([510, 1188], 'Equlp.'), ([708, 1185], '2,489'), ([977, 1189], '9,112'), ([1229, 1189], '8,425'), ([1482, 1190], '8 . 2'), ([176, 1220], '21'), ([240, 1216], 'Auditing'), ([395, 1225], '&'), ([426, 1220], 'Professional'), ([710, 1222], '4,985'), ([960, 1222], '41,907'), ([1229, 1223], '5,075'), ([1450, 1222], '725 .8'), ([176, 1254], '22'), ([240, 1252], 'Insurance'), ([709, 1255], '5,924'), ([961, 1255], '20,618'), ([1229, 1255], '4,756'), ([1450, 1256], '333.5'), ([176, 1288], '23'), ([240, 1289], 'Dues'), ([327, 1293], '0'), ([359, 1287], 'Subscriptions'), ([710, 1290], '1,632'), ([978, 1290], '3,863'), ([1227, 1289], '1,479'), ([1447, 1289], '161.2'), ([176, 1322], '24'), ([240, 1320], 'Postage'), ([709, 1321], '3,942'), ([974, 1318], '4,511'), ([1230, 1324], '3,735'), ([1466, 1322], '20 . 8'), ([176, 1356], '25'), ([242, 1356], 'Interest'), ([707, 1355], '2,196'), ([977, 1355], '12968'), ([1229, 1355], '2,000'), ([1451, 1355], '(1.6)'), ([178, 1422], '30'), ([242, 1424], 'TOTAL'), ([342, 1422], 'EXPENSE'), ([657, 1421], 'S7162360'), ([944, 1424], '910,348'), ([1180, 1424], 's817'), ([1264, 1424], '301'), ([1464, 1424], '11.4'), ([176, 1490], '40'), ([242, 1492], 'Net'), ([309, 1489], 'Income'), ([428, 1488], '(Loss)'), ([341, 1523], 'Operat Lons'), ([691, 1521], '19,523'), ([959, 1523], '21,093'), ([1214, 1524], '20,233'), ([1482, 1524], '4.3'), ([176, 1590], '50'), ([240, 1588], 'United'), ([428, 1590], 'Income'), ([663, 1593], 'S'), ([692, 1590], '32,300'), ([176, 1624], '51'), ([240, 1621], 'Indigent'), ([392, 1624], 'Care'), ([677, 1621], '(26,961)'), ([176, 1708], '55'), ([242, 1708], 'NET'), ([308, 1706], 'DIFFERENCE'), ([663, 1709], 'S'), ([707, 1705], '5,333'), ([176, 1776], '57'), ([242, 1776], 'NET'), ([310, 1776], 'INCOME'), ([429, 1773], '(LOSS)'), ([659, 1775], 'S'), ([691, 1771], '24,856'), ([959, 1771], '21,093'), ([1181, 1775], 'S'), ([1211, 1771], '20,233'), ([1482, 1774], '4.3'), ([242, 1844], 'Visits'), ([358, 1844], 'Billable:'), ([176, 1896], '60'), ([242, 1898], 'Nurses'), ([691, 1895], '12,065'), ([959, 1895], '13,251'), ([1212, 1896], '11,739'), ([1466, 1896], '12.9'), ([176, 1930], '61'), ([240, 1932], 'HHA'), ([710, 1930], '6,413'), ([977, 1929], '7,131'), ([1230, 1930], '6,908'), ([1480, 1929], '3.2'), ([176, 1964], '62'), ([240, 1964], 'Ochers'), ([707, 1963], '42245'), ([977, 1963], '4,449'), ([1229, 1963], '3,713'), ([1466, 1964], '19 .8'), ([176, 2032], '63'), ([242, 2032], 'TOTAL'), ([691, 2027], '22,723'), ([959, 2029], '24,831'), ([1209, 2027], '22,360'), ([1465, 2028], '11.1'), ([423, 2238], 'Source: https:IIWWW industrydocuments ucsi eduldocsiqjci0zz7'), ([1213, 1013], '24 ,'), ([259, 1521], 'from'), ([359, 1588], 'Way')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which year has more actual total income?\nImage detected text: [([696, 130], 'VNA'), ([762, 129], 'OF GREATER ST'), ([1011, 129], 'LQUIS'), ([712, 180], 'STATEMENT'), ([877, 177], 'OFOPERATIONS'), ([378, 234], 'FOR THE'), ([510, 234], 'MONTH OF'), ([662, 236], 'SEPTEMBER'), ([846, 236], '1981'), ([930, 236], 'COMPARED'), ([1080, 238], 'TO'), ([1130, 236], 'SEPTEMBER'), ([1313, 235], '1982'), ([828, 307], 'Actual'), ([1193, 301], 'Budget'), ([1398, 308], 'Percent'), ([1534, 306], 'of'), ([710, 342], '1981'), ([943, 339], '1982'), ([1214, 340], '1982'), ([1416, 342], 'Varlance'), ([160, 380], 'INCOME'), ([195, 435], '1'), ([241, 431], 'Home'), ([326, 432], 'Visits'), ([660, 427], 's858,171'), ([895, 431], '$1,115,039'), ([1179, 431], 's996,292'), ([1466, 432], '11.9'), ([195, 465], '2'), ([240, 463], 'MedIcare'), ([394, 466], 'Allowance'), ([663, 463], '(117,251)'), ([930, 461], '(182,231)'), ([1181, 465], '(158 , 091)'), ([1466, 466], '15.3'), ([195, 501], '3'), ([242, 500], 'Bad'), ([310, 502], 'Debt'), ([394, 502], 'Provislon'), ([712, 498], '5,000)'), ([977, 497], '1,667)'), ([1229, 497], '1,667)'), ([197, 537], '4'), ([243, 533], 'Equipment'), ([410, 535], 'Rental'), ([677, 531], '120 , 947'), ([945, 531], '122 ,587'), ([1196, 532], '103,750'), ([1466, 534], '18 . 2'), ([193, 565], '5'), ([242, 568], 'Less :'), ([343, 567], 'Equip.'), ([460, 568], 'Rental'), ([576, 569], 'Exp .'), ([663, 563], '(121,101)'), ([929, 565], '(122,668)'), ([1181, 565], '(103,750)'), ([1464, 566], '18 . 2'), ([193, 601], '6'), ([242, 602], 'MLacellaneous'), ([744, 600], '117'), ([1014, 600], '381'), ([1229, 599], '1000'), ([1449, 599], '(61.9)'), ([195, 669], '9'), ([242, 667], 'TOTAL'), ([344, 668], 'INCOME'), ([659, 667], 'S135,883'), ([945, 668], '931,441'), ([1180, 670], 's837'), ([1264, 670], '534'), ([1466, 670], '11.2'), ([160, 736], 'EXPENSES'), ([176, 786], '10'), ([242, 786], 'Salarie8'), ([658, 781], 's490,059'), ([943, 785], '585 , 059'), ([1179, 785], '8571,501'), ([1482, 786], '2 . 4'), ([176, 820], '11'), ([240, 816], 'Payroll'), ([376, 819], 'Taxes'), ([693, 817], '28 , 073'), ([962, 820], '34'), ([1012, 818], '784'), ([1214, 820], '34,513'), ([1515, 819], '8'), ([176, 852], '12'), ([241, 849], 'Employee Benefits'), ([692, 852], '42,928'), ([962, 852], '54,889'), ([1212, 852], '43,761'), ([1466, 852], '25 . 4'), ([176, 884], '13'), ([241, 885], 'Supplies'), ([424, 881], 'Medical'), ([694, 884], '18,854'), ([960, 884], '18,870'), ([1211, 883], '15,196'), ([1466, 884], '24'), ([1517, 885], '2'), ([176, 918], '14'), ([241, 917], 'Supplies'), ([426, 918], 'Admin.'), ([547, 923], '6'), ([575, 917], 'MLsc ,'), ([693, 915], '20,573'), ([962, 918], '15,396'), ([1214, 918], '23,469'), ([1449, 915], '(34.4)'), ([176, 950], '15'), ([240, 949], 'Transportation'), ([692, 950], '45,229'), ([961, 949], '52 ,848'), ([1211, 949], '49,258'), ([1482, 950], '7 . 3'), ([176, 984], '16'), ([242, 983], 'Office Rencal ,'), ([494, 984], 'Utilitles'), ([292, 1018], 'and'), ([358, 1019], 'Maintenance'), ([694, 1016], '23,423'), ([958, 1013], '41,675'), ([1264, 1016], '984'), ([1466, 1016], '66 . 8'), ([176, 1052], '17'), ([242, 1052], 'Conf_'), ([345, 1055], '6'), ([373, 1048], 'Meetings'), ([709, 1049], '9 ,541'), ([975, 1049], '4,182'), ([1214, 1050], '12,439'), ([1450, 1045], '(66.4)'), ([174, 1086], '18'), ([240, 1083], 'Telephone'), ([710, 1082], '9,581'), ([959, 1083], '12,479'), ([1213, 1083], '10,126'), ([1466, 1084], '23.2'), ([174, 1120], '19'), ([242, 1120], 'Depreclation'), ([492, 1120], 'FGF'), ([560, 1120], 'and'), ([258, 1154], 'Amortization'), ([510, 1154], 'LHI'), ([709, 1153], '6,931'), ([978, 1155], '8,187'), ([1229, 1155], '6 ,584'), ([1466, 1156], '24.4'), ([176, 1186], '20'), ([239, 1182], 'Deta Processing'), ([510, 1188], 'Equlp.'), ([708, 1185], '2,489'), ([977, 1189], '9,112'), ([1229, 1189], '8,425'), ([1482, 1190], '8 . 2'), ([176, 1220], '21'), ([240, 1216], 'Auditing'), ([395, 1225], '&'), ([426, 1220], 'Professional'), ([710, 1222], '4,985'), ([960, 1222], '41,907'), ([1229, 1223], '5,075'), ([1450, 1222], '725 .8'), ([176, 1254], '22'), ([240, 1252], 'Insurance'), ([709, 1255], '5,924'), ([961, 1255], '20,618'), ([1229, 1255], '4,756'), ([1450, 1256], '333.5'), ([176, 1288], '23'), ([240, 1289], 'Dues'), ([327, 1293], '0'), ([359, 1287], 'Subscriptions'), ([710, 1290], '1,632'), ([978, 1290], '3,863'), ([1227, 1289], '1,479'), ([1447, 1289], '161.2'), ([176, 1322], '24'), ([240, 1320], 'Postage'), ([709, 1321], '3,942'), ([974, 1318], '4,511'), ([1230, 1324], '3,735'), ([1466, 1322], '20 . 8'), ([176, 1356], '25'), ([242, 1356], 'Interest'), ([707, 1355], '2,196'), ([977, 1355], '12968'), ([1229, 1355], '2,000'), ([1451, 1355], '(1.6)'), ([178, 1422], '30'), ([242, 1424], 'TOTAL'), ([342, 1422], 'EXPENSE'), ([657, 1421], 'S7162360'), ([944, 1424], '910,348'), ([1180, 1424], 's817'), ([1264, 1424], '301'), ([1464, 1424], '11.4'), ([176, 1490], '40'), ([242, 1492], 'Net'), ([309, 1489], 'Income'), ([428, 1488], '(Loss)'), ([341, 1523], 'Operat Lons'), ([691, 1521], '19,523'), ([959, 1523], '21,093'), ([1214, 1524], '20,233'), ([1482, 1524], '4.3'), ([176, 1590], '50'), ([240, 1588], 'United'), ([428, 1590], 'Income'), ([663, 1593], 'S'), ([692, 1590], '32,300'), ([176, 1624], '51'), ([240, 1621], 'Indigent'), ([392, 1624], 'Care'), ([677, 1621], '(26,961)'), ([176, 1708], '55'), ([242, 1708], 'NET'), ([308, 1706], 'DIFFERENCE'), ([663, 1709], 'S'), ([707, 1705], '5,333'), ([176, 1776], '57'), ([242, 1776], 'NET'), ([310, 1776], 'INCOME'), ([429, 1773], '(LOSS)'), ([659, 1775], 'S'), ([691, 1771], '24,856'), ([959, 1771], '21,093'), ([1181, 1775], 'S'), ([1211, 1771], '20,233'), ([1482, 1774], '4.3'), ([242, 1844], 'Visits'), ([358, 1844], 'Billable:'), ([176, 1896], '60'), ([242, 1898], 'Nurses'), ([691, 1895], '12,065'), ([959, 1895], '13,251'), ([1212, 1896], '11,739'), ([1466, 1896], '12.9'), ([176, 1930], '61'), ([240, 1932], 'HHA'), ([710, 1930], '6,413'), ([977, 1929], '7,131'), ([1230, 1930], '6,908'), ([1480, 1929], '3.2'), ([176, 1964], '62'), ([240, 1964], 'Ochers'), ([707, 1963], '42245'), ([977, 1963], '4,449'), ([1229, 1963], '3,713'), ([1466, 1964], '19 .8'), ([176, 2032], '63'), ([242, 2032], 'TOTAL'), ([691, 2027], '22,723'), ([959, 2029], '24,831'), ([1209, 2027], '22,360'), ([1465, 2028], '11.1'), ([423, 2238], 'Source: https:IIWWW industrydocuments ucsi eduldocsiqjci0zz7'), ([1213, 1013], '24 ,'), ([259, 1521], 'from'), ([359, 1588], 'Way')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "There is no specific information given about the prices of the baking dish, casserole dish, and ice cream scoop. Therefore, we cannot determine the amount of money Ruth needs to buy these items.\n\nFor the second question, the largest city in the nation where the plane is headquartered is not mentioned in the given information. Therefore, we cannot determine the answer.\n\nFor the third question, the years mentioned in the text are 1981 and 1982. To determine which year has more actual total income, we need the actual total income values for both years. However, the actual total income values are not provided in the given information. Therefore, we cannot determine the answer.",
        "execution": "",
        "error": "invalid syntax (<string>, line 1)",
        "extraction": "[]",
        "prediction": null,
        "true_false": false
    },
    "589": {
        "question": "What number of things are either large objects behind the shiny double bus or tiny gray metal objects?",
        "image": "images/589.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "589",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number of things are either large objects behind the shiny double bus or tiny gray metal objects?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    large_objects = ['bus']\n    tiny_gray_metal_objects = ['metal']\n\n    count = 0\n    for obj in objects:\n        if obj in large_objects or (obj in tiny_gray_metal_objects and 'shiny' in objects and 'double' in objects):\n            count += 1\n\n    return count\n\nobjects = ['bus', 'shiny', 'double', 'metal']\nprint(count_objects(objects))",
        "execution": "2",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "590": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/590.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "590",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 376,
            "img_height": 264,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "591": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/591.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "591",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 900,
            "img_height": 600,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "592": {
        "question": "What is the global maximum of this function?",
        "image": "images/592.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "592",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 283,
            "img_height": 318,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([239, 199], '2T')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the global maximum of this function?\nImage detected text: [([239, 199], '2T')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nT = sp.symbols('T')\nf = 2*T\n\nf_max = sp.limit(f, T, sp.oo)\nprint(f_max)",
        "execution": "oo",
        "error": "None",
        "extraction": "infinity",
        "prediction": null,
        "true_false": false
    },
    "593": {
        "question": "What is the average of longest light blue bar and shortest gray bar?",
        "image": "images/593.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "273",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "593",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([157, 85], '415'), ([247, 91], '406'), ([61, 107], '400'), ([337, 105], '385'), ([61, 175], '300'), ([44, 170], ''), ([61, 239], '200'), ([471, 275], '128'), ([651, 273], '131'), ([561, 289], '106'), ([209, 391], 'Solved homicides'), ([517, 391], 'Unsolved homicides'), ([315, 429], '2012'), ([377, 429], '2013'), ([439, 429], '2014'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average of longest light blue bar and shortest gray bar?\nImage detected text: [([157, 85], '415'), ([247, 91], '406'), ([61, 107], '400'), ([337, 105], '385'), ([61, 175], '300'), ([44, 170], ''), ([61, 239], '200'), ([471, 275], '128'), ([651, 273], '131'), ([561, 289], '106'), ([209, 391], 'Solved homicides'), ([517, 391], 'Unsolved homicides'), ([315, 429], '2012'), ([377, 429], '2013'), ([439, 429], '2014'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "longest_light_blue_bar = 415\nshortest_gray_bar = 106\n\naverage = (longest_light_blue_bar + shortest_gray_bar) / 2\nprint(average)",
        "execution": "260.5",
        "error": "None",
        "extraction": "260.5",
        "prediction": null,
        "true_false": false
    },
    "594": {
        "question": "When does the expenditure per student in Jamaica have the greatest increase?",
        "image": "images/594.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2005",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "594",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 12], 'Government'), ([134, 6], 'expenditure per student; tertiary (% of GDP per capita), 2004'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([12, 34], 'to 2011'), ([15, 63], 'Government expenditure per student is the average general government expenditure (current, capital, and transfers) per'), ([13, 81], 'student in the given level of education; expressed as'), ([365, 79], 'percentage of GDP per capita_'), ([13, 161], '50%'), ([743, 169], 'Jamaica'), ([13, 233], '40%'), ([13, 307], '30%'), ([743, 331], 'Euro area'), ([13, 379], '20%'), ([15, 451], '10%'), ([31, 541], '2004'), ([131, 541], '2005'), ([229, 541], '2006'), ([327, 541], '2007'), ([425, 541], '2008'), ([523, 541], '2009'), ([621, 541], '2010'), ([721, 541], '2011'), ([15, 571], 'Source: World Bank'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When does the expenditure per student in Jamaica have the greatest increase?\nImage detected text: [([12, 12], 'Government'), ([134, 6], 'expenditure per student; tertiary (% of GDP per capita), 2004'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([12, 34], 'to 2011'), ([15, 63], 'Government expenditure per student is the average general government expenditure (current, capital, and transfers) per'), ([13, 81], 'student in the given level of education; expressed as'), ([365, 79], 'percentage of GDP per capita_'), ([13, 161], '50%'), ([743, 169], 'Jamaica'), ([13, 233], '40%'), ([13, 307], '30%'), ([743, 331], 'Euro area'), ([13, 379], '20%'), ([15, 451], '10%'), ([31, 541], '2004'), ([131, 541], '2005'), ([229, 541], '2006'), ([327, 541], '2007'), ([425, 541], '2008'), ([523, 541], '2009'), ([621, 541], '2010'), ([721, 541], '2011'), ([15, 571], 'Source: World Bank'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "expenditure_per_student = [50, 40, 30, 20, 10]\nyears = [2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011]\n\ngreatest_increase = 0\ngreatest_increase_year = 0\n\nfor i in range(len(expenditure_per_student)-1):\n    increase = expenditure_per_student[i+1] - expenditure_per_student[i]\n    if increase > greatest_increase:\n        greatest_increase = increase\n        greatest_increase_year = years[i+1]\n\nprint(greatest_increase_year)",
        "execution": "0",
        "error": "None",
        "extraction": "2011",
        "prediction": "2011",
        "true_false": false
    },
    "595": {
        "question": "Is Navy Blue the maximum?",
        "image": "images/595.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "595",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 11], 'title'), ([449, 13], 'Yellow Green'), ([447, 37], 'Navy Blue'), ([449, 59], 'Dark Gray'), ([447, 83], 'Tan'), ([447, 105], 'Hot Pink'), ([447, 129], 'Chocolate')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Navy Blue the maximum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 11], 'title'), ([449, 13], 'Yellow Green'), ([447, 37], 'Navy Blue'), ([449, 59], 'Dark Gray'), ([447, 83], 'Tan'), ([447, 105], 'Hot Pink'), ([447, 129], 'Chocolate')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_max_color(color, colors):\n    max_color = max(colors)\n    if color == max_color:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolors = ['Yellow Green', 'Navy Blue', 'Dark Gray', 'Tan', 'Hot Pink', 'Chocolate']\ncolor = 'Navy Blue'\n\nprint(is_max_color(color, colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "596": {
        "question": "Is Dodger Blue the low median?",
        "image": "images/596.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "596",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 407,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 121], '9'), ([9, 159], '2'), ([79, 293], '['), ([149, 295], 'E'), ([221, 293], '['), ([289, 295], '1'), ([360, 294], '8'), ([152, 328], ''), ([221, 325], '1'), ([291, 339], '7'), ([363, 325], 'E'), ([189, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dodger Blue the low median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 121], '9'), ([9, 159], '2'), ([79, 293], '['), ([149, 295], 'E'), ([221, 293], '['), ([289, 295], '1'), ([360, 294], '8'), ([152, 328], ''), ([221, 325], '1'), ([291, 339], '7'), ([363, 325], 'E'), ([189, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\ncolors = ['Dodger Blue', 'Red', 'Green', 'Yellow', 'Purple']\nmedian = np.median([9, 2, 1, 8, 7])\n\nif colors[int(median)] == 'Dodger Blue':\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "",
        "error": "list index out of range",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "597": {
        "question": "What percentage of people prefer the least preferred object?",
        "image": "images/597.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "597",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([171, 17], 'Most'), ([210, 13], 'preferred objects'), ([36, 52], 'bow'), ([20, 100], 'outlet'), ([16, 150], 'ninety'), ([15, 199], 'statue'), ([18, 246], 'rabbit'), ([36, 294], 'hurt'), ([26, 344], 'cigar'), ([407, 397], '100'), ([193, 417], 'Percent of People')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of people prefer the least preferred object?\nImage detected text: [([171, 17], 'Most'), ([210, 13], 'preferred objects'), ([36, 52], 'bow'), ([20, 100], 'outlet'), ([16, 150], 'ninety'), ([15, 199], 'statue'), ([18, 246], 'rabbit'), ([36, 294], 'hurt'), ([26, 344], 'cigar'), ([407, 397], '100'), ([193, 417], 'Percent of People')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_object = 'bow'\nleast_preferred_object = 'cigar'\ntotal_people = 100\n\nleast_preferred_percentage = (1 / total_people) * 100\nprint(least_preferred_percentage)",
        "execution": "1.0",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "598": {
        "question": "What is the most curved beak species?",
        "image": "images/598.jpg",
        "choices": [
            "iiki",
            "swallow-tanager",
            "cliff swallow",
            "hawfinch"
        ],
        "unit": null,
        "precision": null,
        "answer": "iiki",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "598",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 593,
            "img_height": 463,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([305, 12], 'masked flowerpiercer'), ([305, 29], 'IDigossa cyaneai'), ([9, 79], 'yellow-rumped'), ([67, 93], 'warbler'), ([9, 107], '(Dendroica cororata)'), ([184, 111], 'swallow-tanager'), ([185, 127], '(Tersina viridisi'), ([489, 123], 'northern shrike'), ([489, 139], '(Lanius excubitor'), ([51, 185], 'iiwi'), ([51, 197], '(Vestiaria coccinea)'), ([481, 237], 'pine siskin'), ([481, 251], '(Cardueiis pirusi'), ([25, 317], 'olivaceous flatbill'), ([204, 316], 'Eurasian jay'), ([25, 331], '(Rhyrchocylus omvaceusi'), ([203, 333], '(Garrulus glardarius)'), ([445, 345], 'rufous-tailed plantcutter'), ([445, 359], '(Pnytotoma rara}'), ([351, 407], 'clift swallow'), ([351, 423], '{Petrochelidon Pyrrhonota'), ([127, 429], 'hawfinch'), ([127, 443], '(Coccothraustes coccothraustes'), ([423, 449], '2008 Encyclopaedia'), ([520, 450], 'Britannica'), ([24, 93], 'myrtle ,')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the most curved beak species?\nChoices:\n(A) iiki\n(B) swallow-tanager\n(C) cliff swallow\n(D) hawfinch\nImage detected text: [([305, 12], 'masked flowerpiercer'), ([305, 29], 'IDigossa cyaneai'), ([9, 79], 'yellow-rumped'), ([67, 93], 'warbler'), ([9, 107], '(Dendroica cororata)'), ([184, 111], 'swallow-tanager'), ([185, 127], '(Tersina viridisi'), ([489, 123], 'northern shrike'), ([489, 139], '(Lanius excubitor'), ([51, 185], 'iiwi'), ([51, 197], '(Vestiaria coccinea)'), ([481, 237], 'pine siskin'), ([481, 251], '(Cardueiis pirusi'), ([25, 317], 'olivaceous flatbill'), ([204, 316], 'Eurasian jay'), ([25, 331], '(Rhyrchocylus omvaceusi'), ([203, 333], '(Garrulus glardarius)'), ([445, 345], 'rufous-tailed plantcutter'), ([445, 359], '(Pnytotoma rara}'), ([351, 407], 'clift swallow'), ([351, 423], '{Petrochelidon Pyrrhonota'), ([127, 429], 'hawfinch'), ([127, 443], '(Coccothraustes coccothraustes'), ([423, 449], '2008 Encyclopaedia'), ([520, 450], 'Britannica'), ([24, 93], 'myrtle ,')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_curved_beak_species(text):\n    species = {\n        'iiki': 0,\n        'swallow-tanager': 0,\n        'cliff swallow': 0,\n        'hawfinch': 0\n    }\n\n    for line in text:\n        for choice in species.keys():\n            if choice in line:\n                species[choice] += 1\n\n    max_species = max(species, key=species.get)\n    return max_species\n\ntext = ['masked flowerpiercer', 'IDigossa cyaneai', 'yellow-rumped', 'warbler', '(Dendroica cororata)', 'swallow-tanager', '(Tersina viridisi', 'northern shrike', '(Lanius excubitor', 'iiwi', '(Vestiaria coccinea)', 'pine siskin', '(Cardueiis pirusi', 'olivaceous flatbill', 'Eurasian jay', '(Rhyrchocylus omvaceusi', '(Garrulus glardarius)', 'rufous-tailed plantcutter', '(Pnytotoma rara}', 'clift swallow', '{Petrochelidon Pyrrhonota', 'hawfinch', '(Coccothraustes coccothraustes', '2008 Encyclopaedia', 'Britannica', 'myrtle ,']\n\nprint(most_curved_beak_species(text))",
        "execution": "swallow-tanager",
        "error": "None",
        "extraction": "cliff swallow",
        "prediction": "cliff swallow",
        "true_false": false
    },
    "599": {
        "question": "In the figure above, AC = 6 and BC = 3. Point P lies on line AB between A and B such that line CP is perpendicular to line AB. Which of the following could be the length of line CP?",
        "image": "images/599.jpg",
        "choices": [
            "2",
            "4",
            "5",
            "7",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "599",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 393,
            "img_height": 340,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([119, 99], 'Note: Figure nOt datwn'), ([236, 102], 'eie'), ([7, 131], '16.'), ([33, 131], 'In the figure above.'), ([157, 133], 'AC'), ([201, 131], '6 and'), ([245, 131], 'BC = 3 Point'), ([33, 151], '(not shown) lies on AB'), ([187, 151], 'between'), ([259, 151], 'and B such that'), ([35, 171], 'CP L AB'), ([106, 170], 'Which of the following could be the length'), ([33, 193], 'of CF ?'), ([33, 225], '(A)'), ([33, 241], '(B)'), ([33, 257], '(C)'), ([30, 272], '{')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, AC = 6 and BC = 3. Point P lies on line AB between A and B such that line CP is perpendicular to line AB. Which of the following could be the length of line CP?\nChoices:\n(A) 2\n(B) 4\n(C) 5\n(D) 7\n(E) 8\nImage detected text: [([119, 99], 'Note: Figure nOt datwn'), ([236, 102], 'eie'), ([7, 131], '16.'), ([33, 131], 'In the figure above.'), ([157, 133], 'AC'), ([201, 131], '6 and'), ([245, 131], 'BC = 3 Point'), ([33, 151], '(not shown) lies on AB'), ([187, 151], 'between'), ([259, 151], 'and B such that'), ([35, 171], 'CP L AB'), ([106, 170], 'Which of the following could be the length'), ([33, 193], 'of CF ?'), ([33, 225], '(A)'), ([33, 241], '(B)'), ([33, 257], '(C)'), ([30, 272], '{')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAC = 6\nBC = 3\n\n# Using Pythagorean theorem to find the length of CP\nCP = math.sqrt(AC**2 - BC**2)\n\nCP",
        "execution": "",
        "error": "None",
        "extraction": "4.242640687119285",
        "prediction": "2",
        "true_false": true
    },
    "600": {
        "question": "Choose the answer.",
        "image": "images/600.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "600",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 424,
            "img_height": 637,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([78, 34], 'Is to'), ([234, 34], 'As'), ([362, 36], 'Is to'), ([312, 492], 'Ccere'), ([356, 492], 'Aaela')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Choose the answer.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nImage detected text: [([78, 34], 'Is to'), ([234, 34], 'As'), ([362, 36], 'Is to'), ([312, 492], 'Ccere'), ([356, 492], 'Aaela')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "answer = \"C\"",
        "execution": "",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "601": {
        "question": "What's the ratio of smallest segment and second largest segment?",
        "image": "images/601.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.33",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "601",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 210,
            "img_height": 386,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1, 11], 'Germans: Majority Prefer'), ([0, 29], 'Strong Ties with US_'), ([1, 59], 'Which is more importantfor'), ([0, 74], 'Germany'), ([65, 75], 'to have strong ties with'), ([1, 91], 'the L,S. orr\" strong ties with Russia?'), ([111, 145], 'Equally'), ([105, 159], 'close ties'), ([115, 171], '(VOL)'), ([27, 187], 'Strong ties'), ([117, 183], '218'), ([31, 201], 'with Us.'), ([143, 201], 'Strong'), ([45, 217], '5796'), ([137, 215], 'ties with'), ([141, 227], 'Russia'), ([153, 239], '1528'), ([159, 295], 'Don t'), ([157, 309], 'know'), ([0, 337], 'Source: 2015 Pew Research Centersunvey:'), ([1, 355], 'PEW RESEARCH CENTER')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What's the ratio of smallest segment and second largest segment?\nImage detected text: [([1, 11], 'Germans: Majority Prefer'), ([0, 29], 'Strong Ties with US_'), ([1, 59], 'Which is more importantfor'), ([0, 74], 'Germany'), ([65, 75], 'to have strong ties with'), ([1, 91], 'the L,S. orr\" strong ties with Russia?'), ([111, 145], 'Equally'), ([105, 159], 'close ties'), ([115, 171], '(VOL)'), ([27, 187], 'Strong ties'), ([117, 183], '218'), ([31, 201], 'with Us.'), ([143, 201], 'Strong'), ([45, 217], '5796'), ([137, 215], 'ties with'), ([141, 227], 'Russia'), ([153, 239], '1528'), ([159, 295], 'Don t'), ([157, 309], 'know'), ([0, 337], 'Source: 2015 Pew Research Centersunvey:'), ([1, 355], 'PEW RESEARCH CENTER')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_segment = 218\nsecond_largest_segment = 5796\n\nratio = smallest_segment / second_largest_segment\nprint(ratio)",
        "execution": "0.03761214630779848",
        "error": "None",
        "extraction": "0.0377",
        "prediction": "0.04",
        "true_false": false
    },
    "602": {
        "question": "Rectangle ABCD is subdivided into two identical square regions, as in the figure above. If the area of each square is 9, what is the perimeter of ABCD?",
        "image": "images/602.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "602",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 435,
            "img_height": 219,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([34, 112], 'Rectangle ABCD is subdivided'), ([277, 117], 'two identical square'), ([35, 135], 'regions_'), ([89, 135], 'as in the figure above_'), ([241, 135], 'If the area of each square'), ([35, 151], 'is 9, what is the perimeter of ABCD?'), ([247, 116], 'ito')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Rectangle ABCD is subdivided into two identical square regions, as in the figure above. If the area of each square is 9, what is the perimeter of ABCD?\nImage detected text: [([34, 112], 'Rectangle ABCD is subdivided'), ([277, 117], 'two identical square'), ([35, 135], 'regions_'), ([89, 135], 'as in the figure above_'), ([241, 135], 'If the area of each square'), ([35, 151], 'is 9, what is the perimeter of ABCD?'), ([247, 116], 'ito')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side_length = 3\nperimeter = 4 * side_length\nprint(perimeter)",
        "execution": "12",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": false
    },
    "603": {
        "question": "What is cumulative increase in weight ( in grams) for \"GROUP C\" in third week ( give an approximate value) ?",
        "image": "images/603.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "300",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "603",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1754,
            "img_height": 2237,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is cumulative increase in weight ( in grams) for \"GROUP C\" in third week ( give an approximate value) ?\nImage detected text: [([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "cumulative_increase = 0\n\nfor i in range(len(detected_text)):\n    if detected_text[i][1] == 'GROUP' and detected_text[i+1][1] == 'C':\n        for j in range(i+1, len(detected_text)):\n            if detected_text[j][1] == 'WEEKS':\n                break\n            elif detected_text[j][1].isdigit():\n                cumulative_increase += int(detected_text[j][1])\n\nprint(cumulative_increase)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "500",
        "prediction": "500",
        "true_false": false
    },
    "604": {
        "question": "Is Dark Orchid the roughest?",
        "image": "images/604.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "604",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([621, 13], 'Tomato'), ([621, 37], 'Red'), ([621, 59], 'Dark Orchid'), ([621, 83], 'Orange'), ([621, 105], 'Brown'), ([7, 153], '1'), ([9, 191], '1'), ([551, 363], '100'), ([281, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Orchid the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([621, 13], 'Tomato'), ([621, 37], 'Red'), ([621, 59], 'Dark Orchid'), ([621, 83], 'Orange'), ([621, 105], 'Brown'), ([7, 153], '1'), ([9, 191], '1'), ([551, 363], '100'), ([281, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_roughest(color):\n    if color == \"Dark Orchid\":\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolor = \"Dark Orchid\"\nprint(is_roughest(color))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "605": {
        "question": "Subtract all large green matte cubes. Subtract all big green blocks. How many objects are left?",
        "image": "images/605.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "605",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large green matte cubes. Subtract all big green blocks. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    large_green_matte_cubes = 0\n    big_green_blocks = 0\n\n    for obj in objects:\n        if obj == \"large green matte cube\":\n            large_green_matte_cubes += 1\n        elif obj == \"big green block\":\n            big_green_blocks += 1\n\n    remaining_objects = len(objects) - large_green_matte_cubes - big_green_blocks\n    return remaining_objects\n\nobjects = [\"small red cube\", \"large green matte cube\", \"small blue sphere\", \"big green block\", \"small yellow pyramid\"]\nprint(count_objects(objects))",
        "execution": "3",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "606": {
        "question": "What is the perimeter of the rectangle?",
        "image": "images/606.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "606",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 335,
            "img_height": 209,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([163, 3], 'cm'), ([1, 97], '2 cm'), ([297, 97], '2 cm'), ([163, 197], 'cm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the rectangle?\nImage detected text: [([163, 3], 'cm'), ([1, 97], '2 cm'), ([297, 97], '2 cm'), ([163, 197], 'cm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "length = 2\nwidth = 2\n\nperimeter = 2 * (length + width)\nprint(perimeter)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "607": {
        "question": "Subtract all yellow shiny things. Subtract all yellow metal things. How many objects are left?",
        "image": "images/607.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "607",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all yellow shiny things. Subtract all yellow metal things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_shiny_things = 5\nyellow_metal_things = 3\n\nobjects_left = yellow_shiny_things - yellow_metal_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "608": {
        "question": "Does South Carolina have the highest value in the South ?",
        "image": "images/608.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "608",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 775,
            "img_height": 560,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([5, 8], 'Health Insurance Coverage of Nonelderly 0-64: Employer; 2013'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([693, 85], 'ME'), ([325, 93], 'ND'), ([79, 115], 'OR'), ([395, 115], 'MN'), ([731, 133], 'NH'), ([325, 145], 'SD'), ([449, 141], 'WI'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([327, 195], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([731, 231], 'DC'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([605, 277], 'NC'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([587, 311], 'Sc'), ([555, 337], 'GA'), ([467, 345], 'MS'), ([79, 409], 'AK'), ([39, 493], '281,900- 2,024,500'), ([227, 493], '2,098,300- 4,739,300'), ([415, 493], '4,757,100- 6,467,400'), ([603, 493], '7,133,900- 16,665,500'), ([5, 539], \"SOURCE: Kaiser Family Foundation's State Health Facts_\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does South Carolina have the highest value in the South ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([5, 8], 'Health Insurance Coverage of Nonelderly 0-64: Employer; 2013'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([693, 85], 'ME'), ([325, 93], 'ND'), ([79, 115], 'OR'), ([395, 115], 'MN'), ([731, 133], 'NH'), ([325, 145], 'SD'), ([449, 141], 'WI'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([327, 195], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([731, 231], 'DC'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([605, 277], 'NC'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([587, 311], 'Sc'), ([555, 337], 'GA'), ([467, 345], 'MS'), ([79, 409], 'AK'), ([39, 493], '281,900- 2,024,500'), ([227, 493], '2,098,300- 4,739,300'), ([415, 493], '4,757,100- 6,467,400'), ([603, 493], '7,133,900- 16,665,500'), ([5, 539], \"SOURCE: Kaiser Family Foundation's State Health Facts_\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_value(state_values):\n    highest_value = max(state_values)\n    if state_values.count(highest_value) > 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nstate_values = [281900, 2098300, 4757100, 7133900]\nprint(highest_value(state_values))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "609": {
        "question": "Subtract all big green matte cylinders. Subtract all big brown cubes. How many objects are left?",
        "image": "images/609.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "609",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big green matte cylinders. Subtract all big brown cubes. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_green_matte_cylinders = 5\nbig_brown_cubes = 3\n\nobjects_left = big_green_matte_cylinders - big_brown_cubes\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "610": {
        "question": "In the figure above, P, Q, and R lie on the same line. P is the center of the larger circle, and Q is the center of the smaller circle. If the radius of the larger circle is 4, what is the radius of the smaller circle?",
        "image": "images/610.jpg",
        "choices": [
            "1",
            "2",
            "4",
            "8",
            "16"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "610",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 411,
            "img_height": 353,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([39, 149], 'In the figure above'), ([181, 149], 'Q. and'), ([227, 149], 'R lie on the same line'), ([39, 163], 'P is the center of the'), ([166, 164], 'larger circle. and Q is the center'), ([39, 181], 'of the smaller circle. If the radius of the larger circle'), ([39, 197], 'is 4 what is the radius 0f the smaller circle?'), ([39, 289], '(E)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, P, Q, and R lie on the same line. P is the center of the larger circle, and Q is the center of the smaller circle. If the radius of the larger circle is 4, what is the radius of the smaller circle?\nChoices:\n(A) 1\n(B) 2\n(C) 4\n(D) 8\n(E) 16\nImage detected text: [([39, 149], 'In the figure above'), ([181, 149], 'Q. and'), ([227, 149], 'R lie on the same line'), ([39, 163], 'P is the center of the'), ([166, 164], 'larger circle. and Q is the center'), ([39, 181], 'of the smaller circle. If the radius of the larger circle'), ([39, 197], 'is 4 what is the radius 0f the smaller circle?'), ([39, 289], '(E)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nradius_larger_circle = 4\nradius_smaller_circle = radius_larger_circle / 2\n\nprint(radius_smaller_circle)",
        "execution": "2.0",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "611": {
        "question": "A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had exactly 56 boxes? (Unit: shipments)",
        "image": "images/611.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "611",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 153,
            "img_height": 180,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1, 0], 'Boxes per shipment'), ([37, 25], 'Stem'), ([85, 27], 'Leaf'), ([85, 139], '0 3 9'), ([85, 161], '4 8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had exactly 56 boxes? (Unit: shipments)\nImage detected text: [([1, 0], 'Boxes per shipment'), ([37, 25], 'Stem'), ([85, 27], 'Leaf'), ([85, 139], '0 3 9'), ([85, 161], '4 8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "shipments = [23, 56, 12, 56, 34, 56, 78, 56, 90, 56]\n\ncount = 0\nfor shipment in shipments:\n    if shipment == 56:\n        count += 1\n\nprint(count)",
        "execution": "5",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "612": {
        "question": "Subtract all blue metal things. Subtract all tiny objects. How many objects are left?",
        "image": "images/612.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "612",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all blue metal things. Subtract all tiny objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_metal_things = 5\ntiny_objects = 3\n\nobjects_left = blue_metal_things - tiny_objects\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "613": {
        "question": "How many houses are there?",
        "image": "images/613.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "613",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 473,
            "img_height": 87,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many houses are there?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "houses = 0\nfor object in objects:\n    if object == 'house':\n        houses += 1\nprint(houses)",
        "execution": "",
        "error": "name 'objects' is not defined",
        "extraction": "Please generate a python code to solve the problem.",
        "prediction": null,
        "true_false": false
    },
    "614": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/614.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "614",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 915,
            "img_height": 661,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "615": {
        "question": "If two sides of a triangle measure 12 and 7, which of the following cannot be the perimeter of the triangle?",
        "image": "images/615.jpg",
        "choices": [
            "29",
            "34",
            "37",
            "38"
        ],
        "unit": null,
        "precision": null,
        "answer": "38",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "615",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 522,
            "img_height": 195,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([324, 74], '12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If two sides of a triangle measure 12 and 7, which of the following cannot be the perimeter of the triangle?\nChoices:\n(A) 29\n(B) 34\n(C) 37\n(D) 38\nImage detected text: [([324, 74], '12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 12\nside2 = 7\n\nperimeter = side1 + side2 + side3\n\nchoices = [29, 34, 37, 38]\n\ncannot_be_perimeter = []\n\nfor choice in choices:\n    if choice != perimeter:\n        cannot_be_perimeter.append(choice)\n\nprint(cannot_be_perimeter)",
        "execution": "",
        "error": "name 'side3' is not defined",
        "extraction": "[29, 34, 37]",
        "prediction": "29",
        "true_false": false
    },
    "616": {
        "question": "What is the ratio of instagram to google?",
        "image": "images/616.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "616",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '8076'), ([61, 121], '6076'), ([44, 156], 'L'), ([61, 201], '4076'), ([43, 231], '1'), ([191, 263], '21%'), ([61, 281], '2076'), ([675, 301], '12.3%'), ([537, 349], '0.63'), ([607, 345], '1.2%'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([158, 415], 'Facebook'), ([593, 401], 'Other'), ([86, 417], 'WhatsApp'), ([227, 417], 'Instagram'), ([309, 406], 'Google'), ([352, 431], 'Kleinanzeigen'), ([438, 415], 'Periscope'), ([526, 395], 'Xing'), ([663, 401], 'know'), ([640, 421], 'Don\"t !'), ([331, 450], 'eBay !')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the ratio of instagram to google?\nImage detected text: [([61, 41], '8076'), ([61, 121], '6076'), ([44, 156], 'L'), ([61, 201], '4076'), ([43, 231], '1'), ([191, 263], '21%'), ([61, 281], '2076'), ([675, 301], '12.3%'), ([537, 349], '0.63'), ([607, 345], '1.2%'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([158, 415], 'Facebook'), ([593, 401], 'Other'), ([86, 417], 'WhatsApp'), ([227, 417], 'Instagram'), ([309, 406], 'Google'), ([352, 431], 'Kleinanzeigen'), ([438, 415], 'Periscope'), ([526, 395], 'Xing'), ([663, 401], 'know'), ([640, 421], 'Don\"t !'), ([331, 450], 'eBay !')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "instagram_count = 8076\ngoogle_count = 4076\n\nratio = instagram_count / google_count\nprint(ratio)",
        "execution": "1.9813542688910697",
        "error": "None",
        "extraction": "1.98",
        "prediction": null,
        "true_false": false
    },
    "617": {
        "question": "The magnitude of the acceleration vector a is $10 \\mathrm{~cm} / \\mathrm{s}^2$. Use the figure to estimate the normal components of $\\mathbf{a}$.\r\n",
        "image": "images/617.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "617",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 478,
            "img_height": 484,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([80, 62], 'y')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The magnitude of the acceleration vector a is $10 \\mathrm{~cm} / \\mathrm{s}^2$. Use the figure to estimate the normal components of $\\mathbf{a}$.\r\n\nImage detected text: [([80, 62], 'y')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "a_magnitude = 10\na_normal = a_magnitude * math.cos(math.radians(45))\nprint(a_normal)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "7.07",
        "prediction": null,
        "true_false": false
    },
    "618": {
        "question": "Is Dark Orchid the maximum?",
        "image": "images/618.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "618",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 532,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([121, 11], 'title'), ([35, 235], 'Orange Red'), ([35, 259], 'Coral'), ([35, 281], 'Dark Orchid'), ([35, 305], 'Bubblegum'), ([35, 327], 'Olive'), ([35, 351], 'Dark Orange'), ([33, 373], 'Light Gold')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Orchid the maximum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([121, 11], 'title'), ([35, 235], 'Orange Red'), ([35, 259], 'Coral'), ([35, 281], 'Dark Orchid'), ([35, 305], 'Bubblegum'), ([35, 327], 'Olive'), ([35, 351], 'Dark Orange'), ([33, 373], 'Light Gold')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "max_color = 'Dark Orchid'\nchoices = ['yes', 'no']\n\nif max_color == 'Dark Orchid':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "619": {
        "question": "What is the value of f(4)?",
        "image": "images/619.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "16",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "619",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 970,
            "img_height": 666,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([448, 60], '10'), ([467, 165], '8'), ([561, 287], 'f(z) = 2'), ([467, 477], '2'), ([65, 603], '4'), ([276, 602], '2'), ([702, 602], '2'), ([808, 602], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of f(4)?\nImage detected text: [([448, 60], '10'), ([467, 165], '8'), ([561, 287], 'f(z) = 2'), ([467, 477], '2'), ([65, 603], '4'), ([276, 602], '2'), ([702, 602], '2'), ([808, 602], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(z):\n    return 2\n\nprint(f(4))",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "620": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/620.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "620",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 199,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 165], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nImage detected text: [([19, 165], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "nail_length = 19.165\nrounded_length = round(nail_length)\nprint(rounded_length)",
        "execution": "19",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "621": {
        "question": "The figure above is composed of 25 small triangles that are congruent and equilateral. If the area of triangle DFH is 10, what is the area of triangle AFK?",
        "image": "images/621.jpg",
        "choices": [
            "40",
            "42.5",
            "50",
            "52.5",
            "62.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "62.5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "621",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 397,
            "img_height": 315,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([23, 149], '12. The figure above is composed of 25 small triangles that'), ([47, 173], 'are'), ([68, 167], 'congruent and equilateral. If the area of ADFH is'), ([47, 187], '10. what is the area of AAFK'), ([75, 263], '52.5'), ([77, 283], '62.5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The figure above is composed of 25 small triangles that are congruent and equilateral. If the area of triangle DFH is 10, what is the area of triangle AFK?\nChoices:\n(A) 40\n(B) 42.5\n(C) 50\n(D) 52.5\n(E) 62.5\nImage detected text: [([23, 149], '12. The figure above is composed of 25 small triangles that'), ([47, 173], 'are'), ([68, 167], 'congruent and equilateral. If the area of ADFH is'), ([47, 187], '10. what is the area of AAFK'), ([75, 263], '52.5'), ([77, 283], '62.5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "area_DFH = 10\narea_AFK = area_DFH * (25 / 2)\nprint(area_AFK)",
        "execution": "125.0",
        "error": "None",
        "extraction": "42.5",
        "prediction": "42.5",
        "true_false": false
    },
    "622": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cD\u662fBC\u4e0a\u7684\u70b9\uff0c\u4e14BD\uff1d2\uff0cDC\uff1d1\uff0cS\u25b3ACD\uff1d12\uff0c\u90a3\u4e48S\u25b3ABC\u7b49\u4e8e\uff08\uff09",
        "image": "images/622.jpg",
        "choices": [
            "30",
            "36",
            "72",
            "24"
        ],
        "unit": null,
        "precision": null,
        "answer": "36",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "622",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 146,
            "img_height": 92,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cD\u662fBC\u4e0a\u7684\u70b9\uff0c\u4e14BD\uff1d2\uff0cDC\uff1d1\uff0cS\u25b3ACD\uff1d12\uff0c\u90a3\u4e48S\u25b3ABC\u7b49\u4e8e\uff08\uff09\nChoices:\n(A) 30\n(B) 36\n(C) 72\n(D) 24\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the variables\nBD = 2\nDC = 1\nS_ACD = 12\nS_ABC = sp.Symbol('S_ABC')\n\n# Use the area ratio of triangles to find S_ABC\neq = sp.Eq(S_ABC / S_ACD, (BD + DC) / DC)\nS_ABC_value = sp.solve(eq, S_ABC)[0]\n\nS_ABC_value",
        "execution": "",
        "error": "None",
        "extraction": "36",
        "prediction": "36",
        "true_false": true
    },
    "623": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is twelve (_).",
        "image": "images/623.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "o'clock",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "623",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 95,
            "img_height": 95,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is twelve (_).\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef find_time_word(caption):\n    time_words = ['half', 'quarter', 'o\\'clock', 'to', 'past']\n\n    for word in time_words:\n        if re.search(r'\\b' + word + r'\\b', caption):\n            return word\n    return \"\"\n\ncaption = \"The clock in the image shows that it is twelve o'clock.\"\nprint(find_time_word(caption))",
        "execution": "o'clock",
        "error": "None",
        "extraction": "o'clock",
        "prediction": "o'clock",
        "true_false": true
    },
    "624": {
        "question": "In how many years, is the total unemployed labor force in Upper middle income greater than 1.6 %?",
        "image": "images/624.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "624",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1344,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([42, 8], 'Total unemployed labor force of a'), ([353, 13], 'country'), ([9, 131], '}'), ([8, 228], '1'), ([7, 269], '5'), ([8, 318], '6'), ([9, 393], 'L'), ([99, 601], '8'), ([393, 601], '8'), ([687, 601], '2'), ([981, 601], '3'), ([1275, 601], '3'), ([671, 639], 'Years'), ([35, 673], 'Upper middle income'), ([193, 672], 'Liechtenstein'), ([305, 673], 'Switzerland')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the total unemployed labor force in Upper middle income greater than 1.6 %?\nImage detected text: [([42, 8], 'Total unemployed labor force of a'), ([353, 13], 'country'), ([9, 131], '}'), ([8, 228], '1'), ([7, 269], '5'), ([8, 318], '6'), ([9, 393], 'L'), ([99, 601], '8'), ([393, 601], '8'), ([687, 601], '2'), ([981, 601], '3'), ([1275, 601], '3'), ([671, 639], 'Years'), ([35, 673], 'Upper middle income'), ([193, 672], 'Liechtenstein'), ([305, 673], 'Switzerland')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_unemployed_labor_force = 1.6\nyears = 0\n\nwhile True:\n    years += 1\n    total_unemployed_labor_force *= 1.03 # Assuming a 3% increase each year\n    if total_unemployed_labor_force > 1.6:\n        break\n\nprint(years)",
        "execution": "1",
        "error": "None",
        "extraction": "14",
        "prediction": "14",
        "true_false": false
    },
    "625": {
        "question": "Is the number of blue matte school buss greater than the number of large cyan metallic jets?",
        "image": "images/625.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "625",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of blue matte school buss greater than the number of large cyan metallic jets?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(blue_mattes, large_cyans):\n    if blue_mattes > large_cyans:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nblue_mattes = 10\nlarge_cyans = 5\n\nprint(compare_numbers(blue_mattes, large_cyans))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "626": {
        "question": "Subtract all brown objects. Subtract all large purple cylinders. How many objects are left?",
        "image": "images/626.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "626",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown objects. Subtract all large purple cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    count = 0\n    for obj in objects:\n        if obj != 'brown' and (obj != 'large' or obj != 'purple' or obj != 'cylinder'):\n            count += 1\n    return count\n\nobjects = ['brown', 'large', 'purple', 'cylinder', 'blue', 'small', 'red', 'cube']\nremaining_objects = count_objects(objects)\nprint(remaining_objects)",
        "execution": "7",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "627": {
        "question": "Some friends played a trivia game and recorded their scores. What is the mode of the numbers?'",
        "image": "images/627.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "627",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 155,
            "img_height": 311,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([2, 4], 'Trivia game scores'), ([21, 39], 'Name'), ([97, 39], 'Score'), ([2, 66], 'Abigail'), ([3, 99], 'Bernie'), ([109, 99], '10'), ([3, 129], 'Jada'), ([5, 163], 'Luke'), ([3, 191], 'Trent'), ([109, 191], '10'), ([3, 221], 'Estelle'), ([5, 255], 'Garrett'), ([1, 283], 'Isabella')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Some friends played a trivia game and recorded their scores. What is the mode of the numbers?'\nImage detected text: [([2, 4], 'Trivia game scores'), ([21, 39], 'Name'), ([97, 39], 'Score'), ([2, 66], 'Abigail'), ([3, 99], 'Bernie'), ([109, 99], '10'), ([3, 129], 'Jada'), ([5, 163], 'Luke'), ([3, 191], 'Trent'), ([109, 191], '10'), ([3, 221], 'Estelle'), ([5, 255], 'Garrett'), ([1, 283], 'Isabella')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "scores = [10, 10]\nmode = max(set(scores), key=scores.count)\nprint(mode)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "628": {
        "question": "\u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0c\u2220ABC\u7684\u5e73\u5206\u7ebf\u4ea4AD\u4e8e\u70b9E\uff0c\u2220BCD\u7684\u5e73\u5206\u7ebf\u4ea4AD\u4e8e\u70b9F\uff0c\u82e5AB\uff1d3\uff0cAD\uff1d4\uff0c\u5219EF\u7684\u957f\u662f\uff08\uff09",
        "image": "images/628.jpg",
        "choices": [
            "1",
            "2",
            "2.5",
            "3"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "628",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 151,
            "img_height": 111,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0c\u2220ABC\u7684\u5e73\u5206\u7ebf\u4ea4AD\u4e8e\u70b9E\uff0c\u2220BCD\u7684\u5e73\u5206\u7ebf\u4ea4AD\u4e8e\u70b9F\uff0c\u82e5AB\uff1d3\uff0cAD\uff1d4\uff0c\u5219EF\u7684\u957f\u662f\uff08\uff09\nChoices:\n(A) 1\n(B) 2\n(C) 2.5\n(D) 3\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 3\nAD = 4\n\n# Calculate the length of AE using the angle bisector theorem\nAE = (AB * AD) / (AB + AD)\n\n# Calculate the length of DE using the Pythagorean theorem\nDE = math.sqrt(AD**2 - AE**2)\n\n# Calculate the length of EF using the angle bisector theorem\nEF = (AB * DE) / AE\n\nEF",
        "execution": "",
        "error": "None",
        "extraction": "2.0",
        "prediction": "2.5",
        "true_false": false
    },
    "629": {
        "question": "What percentage of people prefer the object hut?",
        "image": "images/629.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "20",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "629",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([156, 12], 'Most preferred objects'), ([41, 63], 'spur'), ([49, 131], 'hut'), ([41, 203], 'sink'), ([17, 277], 'summit'), ([23, 347], 'locker'), ([403, 391], '100'), ([187, 415], 'Percent of People')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of people prefer the object hut?\nImage detected text: [([156, 12], 'Most preferred objects'), ([41, 63], 'spur'), ([49, 131], 'hut'), ([41, 203], 'sink'), ([17, 277], 'summit'), ([23, 347], 'locker'), ([403, 391], '100'), ([187, 415], 'Percent of People')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "preferred_objects = {\n    'spur': 63,\n    'hut': 131,\n    'sink': 203,\n    'summit': 277,\n    'locker': 347\n}\n\ntotal_people = 100\n\nhut_percentage = (preferred_objects['hut'] / total_people) * 100\nprint(hut_percentage)",
        "execution": "131.0",
        "error": "None",
        "extraction": "13.1",
        "prediction": null,
        "true_false": false
    },
    "630": {
        "question": "Find the size of angle MBD in the figure below.",
        "image": "images/630.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "72",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "630",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 340,
            "img_height": 195,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the size of angle MBD in the figure below.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\n# Given information\nAB = 8\nBC = 6\nCD = 10\n\n# Using the Law of Cosines to find angle BAC\ncos_BAC = (AB**2 + BC**2 - CD**2) / (2 * AB * BC)\nangle_BAC = math.degrees(math.acos(cos_BAC))\n\n# Angle MBD is equal to angle BAC\nangle_MBD = angle_BAC\n\nprint(angle_MBD)",
        "execution": "90.0",
        "error": "None",
        "extraction": "angle_MBD",
        "prediction": null,
        "true_false": false
    },
    "631": {
        "question": "What is the value of the smallest bar?",
        "image": "images/631.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "631",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([231, 17], 'Title'), ([15, 173], '9'), ([84, 366], '8'), ([158, 366], '4'), ([237, 367], '1'), ([310, 366], '1'), ([389, 367], '6')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest bar?\nImage detected text: [([231, 17], 'Title'), ([15, 173], '9'), ([84, 366], '8'), ([158, 366], '4'), ([237, 367], '1'), ([310, 366], '1'), ([389, 367], '6')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar = float('inf')\nbars = [9, 8, 4, 1, 1, 6]\n\nfor bar in bars:\n    if bar < smallest_bar:\n        smallest_bar = bar\n\nprint(smallest_bar)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "632": {
        "question": "What is the total value of the More bar?",
        "image": "images/632.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "52",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "632",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 309,
            "img_height": 350,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 10], 'More women than men say'), ([247, 15], 'are'), ([0, 28], 'paying increased attention to politics'), ([1, 59], '% who say they are paying'), ([175, 57], 'attention to politics'), ([0, 75], 'since Donald Trumps election'), ([119, 101], 'More'), ([169, 101], 'Aboutthe zam'), ([273, 101], 'Les;'), ([65, 121], 'Total'), ([52, 194], 'Cnomen'), ([17, 239], 'RepfLean Rep'), ([11, 261], 'Dem/Lean Dem'), ([0, 289], \"Note: Don'tknowresponsesnotshown;\"), ([0, 304], 'Somce'), ([37, 301], 'Survey conducted June 27-July9, 2017.'), ([2, 324], 'PEYI'), ([25, 321], 'RESEARCH CENTER'), ([207, 8], 'they'), ([67, 167], 'Men')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the total value of the More bar?\nImage detected text: [([0, 10], 'More women than men say'), ([247, 15], 'are'), ([0, 28], 'paying increased attention to politics'), ([1, 59], '% who say they are paying'), ([175, 57], 'attention to politics'), ([0, 75], 'since Donald Trumps election'), ([119, 101], 'More'), ([169, 101], 'Aboutthe zam'), ([273, 101], 'Les;'), ([65, 121], 'Total'), ([52, 194], 'Cnomen'), ([17, 239], 'RepfLean Rep'), ([11, 261], 'Dem/Lean Dem'), ([0, 289], \"Note: Don'tknowresponsesnotshown;\"), ([0, 304], 'Somce'), ([37, 301], 'Survey conducted June 27-July9, 2017.'), ([2, 324], 'PEYI'), ([25, 321], 'RESEARCH CENTER'), ([207, 8], 'they'), ([67, 167], 'Men')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "more_bar_value = 0\n\nfor text in image_detected_text:\n    if \"More\" in text[1]:\n        more_bar_value = int(text[1].split()[1])\n        break\n\nprint(more_bar_value)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "119",
        "prediction": "119",
        "true_false": false
    },
    "633": {
        "question": "In the figure, $m\u22201 = 123$. Find the measure of $\\angle 14$.",
        "image": "images/633.jpg",
        "choices": [
            "47",
            "57",
            "67",
            "123"
        ],
        "unit": null,
        "precision": null,
        "answer": "57",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "633",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 361,
            "img_height": 330,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([62, 56], '16'), ([106, 66], '15'), ([102, 112], '10'), ([204, 96], '14'), ([254, 108], '13'), ([206, 146], '11'), ([75, 165], '8'), ([256, 156], '12'), ([221, 205], '6'), ([253, 213], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure, $m\u22201 = 123$. Find the measure of $\\angle 14$.\nChoices:\n(A) 47\n(B) 57\n(C) 67\n(D) 123\nImage detected text: [([62, 56], '16'), ([106, 66], '15'), ([102, 112], '10'), ([204, 96], '14'), ([254, 108], '13'), ([206, 146], '11'), ([75, 165], '8'), ([256, 156], '12'), ([221, 205], '6'), ([253, 213], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "m_angle_1 = 123\nm_angle_16 = 180 - m_angle_1\nm_angle_14 = m_angle_16 - 10\nprint(m_angle_14)",
        "execution": "47",
        "error": "None",
        "extraction": "57",
        "prediction": "57",
        "true_false": true
    },
    "634": {
        "question": "\u5982\u56fe\uff0c\u76f4\u7ebfAB\uff0cCD\u4ea4\u4e8e\u70b9O\uff0e\u5c04\u7ebfOE\u5e73\u5206\u2220BOC\uff0c\u82e5\u2220AOD\uff1d70\u00b0\uff0c\u5219\u2220AOE\u7b49\u4e8e\uff08\uff09",
        "image": "images/634.jpg",
        "choices": [
            "35\u00b0",
            "110\u00b0",
            "135\u00b0",
            "145\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "145\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "634",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 173,
            "img_height": 141,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u76f4\u7ebfAB\uff0cCD\u4ea4\u4e8e\u70b9O\uff0e\u5c04\u7ebfOE\u5e73\u5206\u2220BOC\uff0c\u82e5\u2220AOD\uff1d70\u00b0\uff0c\u5219\u2220AOE\u7b49\u4e8e\uff08\uff09\nChoices:\n(A) 35\u00b0\n(B) 110\u00b0\n(C) 135\u00b0\n(D) 145\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Define the angles\nAOE = sp.Symbol('AOE')\n\n# Define the given angle\nAOD = 70\n\n# Define the equation for angle AOE\neq = sp.Eq(AOE, (180 - AOD) / 2)\n\n# Solve the equation\nsolution = sp.solve(eq, AOE)\n\n# Print the solution\nprint(solution)",
        "execution": "[55.0000000000000]",
        "error": "None",
        "extraction": "[35]",
        "prediction": "35\u00b0",
        "true_false": false
    },
    "635": {
        "question": "As shown in the figure, E is any point in \u25b1ABCD, if S~quadrilateral ABCD~ = 6.0, then the area of \u200b\u200bthe shaded part in the figure is ()",
        "image": "images/635.jpg",
        "choices": [
            "2",
            "3",
            "4",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "635",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 179,
            "img_height": 86,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, E is any point in \u25b1ABCD, if S~quadrilateral ABCD~ = 6.0, then the area of \u200b\u200bthe shaded part in the figure is ()\nChoices:\n(A) 2\n(B) 3\n(C) 4\n(D) 5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef area_of_shaded_part(S):\n    # Assuming S is the area of the quadrilateral ABCD\n    # Let x be the area of the shaded part\n    # Then, x + S = area of the rectangle ABCD\n    \n    # Since ABCD is a rectangle, its area is equal to the product of its sides\n    # Let AB = a and AD = b\n    # Then, S = a * b\n    \n    # Let AE = c and EC = d\n    # Then, x = c * d\n    \n    # Since S~quadrilateral ABCD~ = 6.0, we have:\n    # S = 6.0\n    \n    # From the given figure, we can see that AE = EC = c and AD = AB = b\n    # Therefore, the rectangle ABCD is a square with side length b\n    \n    # Let the side length of the square ABCD be s\n    # Then, s = b\n    \n    # Since AE = EC = c, we have:\n    # s = b = 2c\n    \n    # From the Pythagorean theorem, we have:\n    # s^2 = b^2 + c^2\n    # (2c)^2 = b^2 + c^2\n    # 4c^2 = b^2 + c^2\n    # 3c^2 = b^2\n    \n    # Since S = a * b and S = 6.0, we have:\n    # 6.0 = a * b\n    # 6.0 = a * s\n    # 6.0 = a * 2c\n    # 3.0 = a * c\n    \n    # The area of the rectangle ABCD is s^2 = b^2 = (3c)^2 = 9c^2\n    # Therefore, x + 6.0 = 9c^2\n    # x = 9c^2 - 6.0\n    \n    # Let's calculate the value of x\n    c = math.sqrt(3.0 / a)\n    x = 9 * c**2 - 6.0\n    \n    return x\n\n# Assuming S = 6.0\nS = 6.0\n\n# Calculate the area of the shaded part\narea = area_of_shaded_part(S)\n\n# Print the result\nprint(area)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "9c^2 - 6.0",
        "prediction": "2",
        "true_false": false
    },
    "636": {
        "question": "What number is shown?",
        "image": "images/636.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "34",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "636",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 92,
            "img_height": 117,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "637": {
        "question": "\u5982\u56fe\uff0c\u76f4\u7ebfa\u2225b\uff0c\u76f4\u7ebfa\u4e0e\u77e9\u5f62ABCD\u7684\u8fb9AB\uff0cAD\u5206\u522b\u4ea4\u4e8e\u70b9E\uff0cF\uff0c\u76f4\u7ebfb\u4e0e\u77e9\u5f62ABCD\u7684\u8fb9CB\uff0cCD\u5206\u522b\u4ea4\u4e8e\u70b9G\uff0cH\uff0e\u82e5\u2220AFE\uff1d30\u00b0\uff0c\u5219\u2220DHG\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/637.jpg",
        "choices": [
            "100\u00b0",
            "110\u00b0",
            "120\u00b0",
            "130\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "120\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "637",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 166,
            "img_height": 108,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u76f4\u7ebfa\u2225b\uff0c\u76f4\u7ebfa\u4e0e\u77e9\u5f62ABCD\u7684\u8fb9AB\uff0cAD\u5206\u522b\u4ea4\u4e8e\u70b9E\uff0cF\uff0c\u76f4\u7ebfb\u4e0e\u77e9\u5f62ABCD\u7684\u8fb9CB\uff0cCD\u5206\u522b\u4ea4\u4e8e\u70b9G\uff0cH\uff0e\u82e5\u2220AFE\uff1d30\u00b0\uff0c\u5219\u2220DHG\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 100\u00b0\n(B) 110\u00b0\n(C) 120\u00b0\n(D) 130\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_AFE = 30\n    angle_AEF = 180 - angle_AFE\n    angle_EAF = 90 - angle_AEF\n\n    angle_EHG = angle_EAF\n    angle_HGD = 90\n    angle_HDG = 180 - angle_HGD\n\n    angle_DHG = 180 - angle_EHG - angle_HDG\n\n    return angle_DHG\n\nprint(find_angle())",
        "execution": "150",
        "error": "None",
        "extraction": "110",
        "prediction": "110\u00b0",
        "true_false": false
    },
    "638": {
        "question": "In how many years, is the under-5 male mortality rate greater than the average under-5 male mortality rate taken over all years ?",
        "image": "images/638.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "638",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 880,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 9], 'Under-5 mortality rate in Euro area'), ([7, 121], '3'), ([7, 215], '8'), ([11, 265], '2'), ([769, 304], 'Under-5(female)'), ([11, 307], '2'), ([769, 329], 'Under-5(male)'), ([9, 343], '1'), ([9, 437], '1'), ([79, 591], '3'), ([287, 591], '8'), ([493, 591], '8'), ([699, 591], '8'), ([377, 629], 'Year'), ([8, 178], '4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the under-5 male mortality rate greater than the average under-5 male mortality rate taken over all years ?\nImage detected text: [([53, 9], 'Under-5 mortality rate in Euro area'), ([7, 121], '3'), ([7, 215], '8'), ([11, 265], '2'), ([769, 304], 'Under-5(female)'), ([11, 307], '2'), ([769, 329], 'Under-5(male)'), ([9, 343], '1'), ([9, 437], '1'), ([79, 591], '3'), ([287, 591], '8'), ([493, 591], '8'), ([699, 591], '8'), ([377, 629], 'Year'), ([8, 178], '4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "under_5_mortality_rate = [3, 8, 2, 2, 1, 1, 3, 8, 8, 8]\naverage_mortality_rate = sum(under_5_mortality_rate) / len(under_5_mortality_rate)\n\nyears_greater_than_average = 0\nfor rate in under_5_mortality_rate:\n    if rate > average_mortality_rate:\n        years_greater_than_average += 1\n\nprint(years_greater_than_average)",
        "execution": "4",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "639": {
        "question": "What does the dial indicate as the top facing number?",
        "image": "images/639.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "475",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "639",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 768,
            "img_height": 1024,
            "source": "VizWiz",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([346, 80], '500'), ([532, 140], '%s'), ([577, 235], '2'), ([554, 354], '1'), ([396, 407], 'uot'), ([225, 511], 'Kd'), ([320, 516], 'Kcennun'), ([465, 66], '450'), ([248, 178], 'proil`'), ([476, 407], '0')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What does the dial indicate as the top facing number?\nImage detected text: [([346, 80], '500'), ([532, 140], '%s'), ([577, 235], '2'), ([554, 354], '1'), ([396, 407], 'uot'), ([225, 511], 'Kd'), ([320, 516], 'Kcennun'), ([465, 66], '450'), ([248, 178], 'proil`'), ([476, 407], '0')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dial_indicator = '500'\ntop_facing_number = dial_indicator[0]\nprint(top_facing_number)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "640": {
        "question": "Find $\\widehat{\\mathrm{WN}}$ if $\\triangle \\mathrm{IWN}$ is equilateral and $W N=5$",
        "image": "images/640.jpg",
        "choices": [
            "\\frac { 3 } { 5 } \\pi",
            "\\frac { 5 } { 3 } \\pi",
            "5 \\pi",
            "10 \\pi"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac { 5 } { 3 } \\pi",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "640",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 309,
            "img_height": 222,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([172, 22], 'W')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $\\widehat{\\mathrm{WN}}$ if $\\triangle \\mathrm{IWN}$ is equilateral and $W N=5$\nChoices:\n(A) \\frac { 3 } { 5 } \\pi\n(B) \\frac { 5 } { 3 } \\pi\n(C) 5 \\pi\n(D) 10 \\pi\nImage detected text: [([172, 22], 'W')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(wn):\n    side_length = wn\n    angle = 60\n    radians = math.radians(angle)\n    arc_length = side_length * radians\n    return arc_length\n\nwn = 5\nresult = find_angle(wn)\nprint(result)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "5pi",
        "prediction": "5 \\pi",
        "true_false": false
    },
    "641": {
        "question": "The graph of the concentration function $c(t)$ is shown after a 7-mg injection of dye into a heart. Use Simpson's Rule to estimate the cardiac output.",
        "image": "images/641.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "5.77",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "641",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 828,
            "img_height": 420,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([19, 51], '(mg/L)'), ([95, 125], '6'), ([95, 197], '4'), ([93, 263], '2'), ([176, 358], '2'), ([244, 358], '4   6'), ([392, 358], '8'), ([458, 356], '10'), ([534, 356], '12'), ([600, 356], '14'), ([680, 352], '(seconds)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The graph of the concentration function $c(t)$ is shown after a 7-mg injection of dye into a heart. Use Simpson's Rule to estimate the cardiac output.\nImage detected text: [([19, 51], '(mg/L)'), ([95, 125], '6'), ([95, 197], '4'), ([93, 263], '2'), ([176, 358], '2'), ([244, 358], '4   6'), ([392, 358], '8'), ([458, 356], '10'), ([534, 356], '12'), ([600, 356], '14'), ([680, 352], '(seconds)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\n# Given data\nconcentration = [6, 4, 2, 2, 4, 6, 8, 10, 12, 14]  # Concentration values\ntime = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]  # Time values\n\n# Simpson's Rule function\ndef simpsons_rule(x, y):\n    n = len(x)\n    h = (x[-1] - x[0]) / (n - 1)\n    integral = y[0] + y[-1]\n    \n    for i in range(1, n-1):\n        if i % 2 == 0:\n            integral += 2 * y[i]\n        else:\n            integral += 4 * y[i]\n    \n    integral *= h / 3\n    return integral\n\n# Calculate cardiac output\ncardiac_output = simpsons_rule(time, concentration)\nprint(\"Cardiac Output:\", cardiac_output)",
        "execution": "Cardiac Output: 106.66666666666666",
        "error": "None",
        "extraction": "Cardiac Output: 56.0",
        "prediction": null,
        "true_false": false
    },
    "642": {
        "question": "Line AB is tangent to circle O. If AB = 8 and OB = 10, find the diameter of the circle.",
        "image": "images/642.jpg",
        "choices": [
            "4",
            "6",
            "8",
            "10",
            "12"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "642",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 347,
            "img_height": 443,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([16, 8], '13. AB is tangent to circle O. If mAB'), ([32, 28], '8 and mOB'), ([147, 31], '10,find the diameter'), ([17, 51], 'of circle 0'), ([17, 345], 'B.'), ([14, 364], '8;'), ([72, 386], '12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Line AB is tangent to circle O. If AB = 8 and OB = 10, find the diameter of the circle.\nChoices:\n(A) 4\n(B) 6\n(C) 8\n(D) 10\n(E) 12\nImage detected text: [([16, 8], '13. AB is tangent to circle O. If mAB'), ([32, 28], '8 and mOB'), ([147, 31], '10,find the diameter'), ([17, 51], 'of circle 0'), ([17, 345], 'B.'), ([14, 364], '8;'), ([72, 386], '12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 8\nOB = 10\n\n# Using Pythagorean theorem to find the length of OA\nOA = math.sqrt(OB**2 - AB**2)\n\n# Diameter of the circle is twice the length of OA\ndiameter = 2 * OA\n\ndiameter",
        "execution": "",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": true
    },
    "643": {
        "question": "As shown in the figure, CD is the diameter of \u2299O, chord DE \u2225 OA, if the degree of \u2220D is 50.0, then the degree of \u2220C is ()",
        "image": "images/643.jpg",
        "choices": [
            "25\u00b0",
            "30\u00b0",
            "40\u00b0",
            "50\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "25\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "643",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 111,
            "img_height": 125,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, CD is the diameter of \u2299O, chord DE \u2225 OA, if the degree of \u2220D is 50.0, then the degree of \u2220C is ()\nChoices:\n(A) 25\u00b0\n(B) 30\u00b0\n(C) 40\u00b0\n(D) 50\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_D):\n    angle_C = 180 - angle_D\n    return angle_C\n\nangle_D = 50.0\nangle_C = find_angle(angle_D)\nprint(angle_C)",
        "execution": "130.0",
        "error": "None",
        "extraction": "130.0",
        "prediction": "30\u00b0",
        "true_false": false
    },
    "644": {
        "question": "What is the missing number in the picture?",
        "image": "images/644.jpg",
        "choices": [
            "6",
            "8",
            "10",
            "11"
        ],
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "644",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 494,
            "img_height": 452,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([106, 114], '10-'), ([46, 152], '8'), ([168, 386], \"'12\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the missing number in the picture?\nChoices:\n(A) 6\n(B) 8\n(C) 10\n(D) 11\nImage detected text: [([106, 114], '10-'), ([46, 152], '8'), ([168, 386], \"'12\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_number = 0\n\nfor i in range(1, 13):\n    if i != 10 and i != 8 and i != 12:\n        missing_number = i\n        break\n\nprint(missing_number)",
        "execution": "1",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": true
    },
    "645": {
        "question": "\u5982\u56fe\uff0cAC\uff0cBD\u662f\u83f1\u5f62ABCD\u7684\u5bf9\u89d2\u7ebf\uff0cBH\u22a5AD\u4e8e\u70b9H\uff0c\u82e5AC\uff1d4\uff0cBD\uff1d3\uff0c\u5219BH\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/645.jpg",
        "choices": [
            "2.4",
            "2.5",
            "4.8",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "2.4",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "645",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 139,
            "img_height": 113,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAC\uff0cBD\u662f\u83f1\u5f62ABCD\u7684\u5bf9\u89d2\u7ebf\uff0cBH\u22a5AD\u4e8e\u70b9H\uff0c\u82e5AC\uff1d4\uff0cBD\uff1d3\uff0c\u5219BH\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 2.4\n(B) 2.5\n(C) 4.8\n(D) 5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAC = 4\nBD = 3\n\nBH = math.sqrt((AC**2 + BD**2)/4)\n\nBH",
        "execution": "",
        "error": "None",
        "extraction": "2.5",
        "prediction": "2.5",
        "true_false": false
    },
    "646": {
        "question": "The employee at the department store counted the number of ties on each tie rack. How many racks have at least 0 ties? (Unit: racks)",
        "image": "images/646.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "25",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "646",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 131,
            "img_height": 224,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([15, 0], 'Ties per rack'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([67, 91], '0 5 5 6'), ([53, 117], '4 6'), ([53, 139], '2 3 4 7 8'), ([53, 159], '0 2 3 6'), ([53, 183], '5 9'), ([53, 205], '4 7 9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The employee at the department store counted the number of ties on each tie rack. How many racks have at least 0 ties? (Unit: racks)\nImage detected text: [([15, 0], 'Ties per rack'), ([5, 25], 'Stem'), ([53, 25], 'Leaf'), ([67, 91], '0 5 5 6'), ([53, 117], '4 6'), ([53, 139], '2 3 4 7 8'), ([53, 159], '0 2 3 6'), ([53, 183], '5 9'), ([53, 205], '4 7 9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "ties_per_rack = [0, 5, 5, 6, 4, 6, 2, 3, 4, 7, 8, 0, 2, 3, 6, 5, 9, 4, 7, 9]\n\ncount = 0\nfor ties in ties_per_rack:\n    if ties >= 0:\n        count += 1\n\nprint(count)",
        "execution": "20",
        "error": "None",
        "extraction": "20",
        "prediction": "20",
        "true_false": false
    },
    "647": {
        "question": "Find the top view.",
        "image": "images/647.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "B",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "647",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 900,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([137, 59], 'Find the'), ([367, 59], 'view'), ([52, 804], '1'), ([126, 816], 'IQ Test Labs\"'), ([252, 818], 'IntelligenceTest com'), ([473, 855], 'MEDIUM'), ([243, 865], 'Visualization skills'), ([296, 57], 'top')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the top view.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nImage detected text: [([137, 59], 'Find the'), ([367, 59], 'view'), ([52, 804], '1'), ([126, 816], 'IQ Test Labs\"'), ([252, 818], 'IntelligenceTest com'), ([473, 855], 'MEDIUM'), ([243, 865], 'Visualization skills'), ([296, 57], 'top')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import cv2\nimport numpy as np\n\ndef find_top_view(image_path, choices):\n    image = cv2.imread(image_path)\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    edges = cv2.Canny(gray, 50, 150)\n    lines = cv2.HoughLines(edges, 1, np.pi/180, 200)\n\n    if lines is not None:\n        for line in lines:\n            rho, theta = line[0]\n            if theta > np.pi/4 and theta < 3*np.pi/4:\n                return choices[0]\n            elif theta > 3*np.pi/4 and theta < 5*np.pi/4:\n                return choices[1]\n            elif theta > 5*np.pi/4 and theta < 7*np.pi/4:\n                return choices[2]\n            else:\n                return choices[3]\n    else:\n        return choices[4]\n\nchoices = ['A', 'B', 'C', 'D', 'E']\nimage_path = \"top_view_image.jpg\"\n\nprint(find_top_view(image_path, choices))",
        "execution": "",
        "error": "OpenCV(4.5.4) /tmp/pip-req-build-khv2fx3p/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "648": {
        "question": "What is the minimum value of this function?",
        "image": "images/648.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "648",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 296,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the minimum value of this function?\nImage detected text: [([43, 19], '2'), ([41, 57], '3'), ([41, 97], '3'), ([41, 135], '3'), ([43, 177], '?'), ([439, 21], 'Oocooo'), ([481, 39], \"'ooC\"), ([238, 177], 'ooOS'), ([165, 171], 'cO')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def minimum_value(function_values):\n    min_value = float('inf')\n    for value in function_values:\n        if value.isdigit():\n            value = int(value)\n            if value < min_value:\n                min_value = value\n    return min_value\n\nfunction_values = ['2', '3', '3', '3', '?']\nprint(minimum_value(function_values))",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "649": {
        "question": "How many values are below 30 in Mainly are incidents of individual misconduct?",
        "image": "images/649.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "649",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 310,
            "img_height": 461,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 12], 'Most Americans say reports of sexual'), ([1, 35], 'misconduct reflect societal problems'), ([1, 61], '% who say recent allegations %f sexual harassment'), ([1, 77], 'and assault .'), ([109, 101], 'Mainly are'), ([187, 101], 'Mainly reflect'), ([117, 115], 'incidents'), ([188, 118], 'widespread'), ([115, 129], 'individual'), ([186, 127], 'problems'), ([106, 144], 'misconduct'), ([187, 143], 'society'), ([59, 163], 'Total'), ([61, 205], 'Men'), ([45, 227], 'Women'), ([14, 265], 'College'), ([15, 285], 'Some college'), ([33, 307], 'HS or les'), ([11, 349], 'RepfLean Rep'), ([3, 369], 'Dem/Lean Dem'), ([1, 397], \"Note: Don'tknowresponsesnotshown;\"), ([1, 411], 'Source: Survey OfUSadulsconductedNov. 29-Dec:'), ([257, 409], '2017'), ([1, 429], 'PEW RESEARCH CENTER'), ([51, 269], 'grad-')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many values are below 30 in Mainly are incidents of individual misconduct?\nImage detected text: [([0, 12], 'Most Americans say reports of sexual'), ([1, 35], 'misconduct reflect societal problems'), ([1, 61], '% who say recent allegations %f sexual harassment'), ([1, 77], 'and assault .'), ([109, 101], 'Mainly are'), ([187, 101], 'Mainly reflect'), ([117, 115], 'incidents'), ([188, 118], 'widespread'), ([115, 129], 'individual'), ([186, 127], 'problems'), ([106, 144], 'misconduct'), ([187, 143], 'society'), ([59, 163], 'Total'), ([61, 205], 'Men'), ([45, 227], 'Women'), ([14, 265], 'College'), ([15, 285], 'Some college'), ([33, 307], 'HS or les'), ([11, 349], 'RepfLean Rep'), ([3, 369], 'Dem/Lean Dem'), ([1, 397], \"Note: Don'tknowresponsesnotshown;\"), ([1, 411], 'Source: Survey OfUSadulsconductedNov. 29-Dec:'), ([257, 409], '2017'), ([1, 429], 'PEW RESEARCH CENTER'), ([51, 269], 'grad-')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_values_below_30(text):\n    values = []\n    for line in text:\n        if line[1].isdigit():\n            value = int(line[1])\n            if value < 30:\n                values.append(value)\n    return len(values)\n\ntext = [([0, 12], 'Most Americans say reports of sexual'), ([1, 35], 'misconduct reflect societal problems'), ([1, 61], '% who say recent allegations %f sexual harassment'), ([1, 77], 'and assault .'), ([109, 101], 'Mainly are'), ([187, 101], 'Mainly reflect'), ([117, 115], 'incidents'), ([188, 118], 'widespread'), ([115, 129], 'individual'), ([186, 127], 'problems'), ([106, 144], 'misconduct'), ([187, 143], 'society'), ([59, 163], 'Total'), ([61, 205], 'Men'), ([45, 227], 'Women'), ([14, 265], 'College'), ([15, 285], 'Some college'), ([33, 307], 'HS or les'), ([11, 349], 'RepfLean Rep'), ([3, 369], 'Dem/Lean Dem'), ([1, 397], \"Note: Don'tknowresponsesnotshown;\"), ([1, 411], 'Source: Survey OfUSadulsconductedNov. 29-Dec:'), ([257, 409], '2017'), ([1, 429], 'PEW RESEARCH CENTER'), ([51, 269], 'grad-')]\n\nprint(count_values_below_30(text))",
        "execution": "0",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "650": {
        "question": "What is the sum of maximum employment rate and minimum employment?",
        "image": "images/650.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "31.3",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "650",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([325, 59], '16.896'), ([349, 81], '16.045'), ([291, 97], '15.5796'), ([403, 103], '415.345'), ([437, 123], '14.75'), ([263, 133], '14.39%6'), ([689, 131], '14-596'), ([467, 141], '14-15'), ([521, 145], '14.025'), ([579, 151], '13.8696'), ([635, 157], '13.58%'), ([235, 173], '13.1296'), ([205, 213], '11-86%6'), ([61, 229], '1293'), ([44, 206], 'L'), ([177, 251], '10.5976'), ([163, 291], '349'), ([133, 325], '235'), ([99, 357], '7.23'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([598, 452], '2017'), ([626, 451], '2018'), ([82, 452], '1999'), ([110, 451], \"'2000\"), ([140, 452], '2001'), ([168, 452], '2002'), ([197, 453], '2003'), ([226, 452], '2004'), ([254, 452], '2005'), ([283, 453], '2006'), ([312, 452], '2007'), ([340, 452], '2008'), ([368, 451], '2009'), ([398, 452], '2010'), ([423, 451], \"'2011\"), ([451, 451], '2012'), ([508, 429], '3'), ([512, 452], '2014'), ([537, 451], '\"2015'), ([569, 453], '\"2016'), ([656, 452], '2019'), ([684, 452], '2020')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of maximum employment rate and minimum employment?\nImage detected text: [([325, 59], '16.896'), ([349, 81], '16.045'), ([291, 97], '15.5796'), ([403, 103], '415.345'), ([437, 123], '14.75'), ([263, 133], '14.39%6'), ([689, 131], '14-596'), ([467, 141], '14-15'), ([521, 145], '14.025'), ([579, 151], '13.8696'), ([635, 157], '13.58%'), ([235, 173], '13.1296'), ([205, 213], '11-86%6'), ([61, 229], '1293'), ([44, 206], 'L'), ([177, 251], '10.5976'), ([163, 291], '349'), ([133, 325], '235'), ([99, 357], '7.23'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source'), ([598, 452], '2017'), ([626, 451], '2018'), ([82, 452], '1999'), ([110, 451], \"'2000\"), ([140, 452], '2001'), ([168, 452], '2002'), ([197, 453], '2003'), ([226, 452], '2004'), ([254, 452], '2005'), ([283, 453], '2006'), ([312, 452], '2007'), ([340, 452], '2008'), ([368, 451], '2009'), ([398, 452], '2010'), ([423, 451], \"'2011\"), ([451, 451], '2012'), ([508, 429], '3'), ([512, 452], '2014'), ([537, 451], '\"2015'), ([569, 453], '\"2016'), ([656, 452], '2019'), ([684, 452], '2020')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "employment_rates = [16.896, 16.045, 15.5796, 415.345, 14.75, 14.39, 14.596, 14.15, 14.025, 13.8696, 13.58, 13.1296, 11.86, 10.5976, 7.23]\n\nmax_rate = max(employment_rates)\nmin_rate = min(employment_rates)\n\nsum_rates = max_rate + min_rate\nprint(sum_rates)",
        "execution": "422.57500000000005",
        "error": "None",
        "extraction": "31.241",
        "prediction": "31.2",
        "true_false": false
    },
    "651": {
        "question": "For an assignment, Johnny looked at which countries got the most Nobel Prizes in various decades. In the 1990s, how many more Nobel Prize winners did Canada have than Italy? (Unit: Nobel Prize winners)",
        "image": "images/651.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "651",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 224,
            "img_height": 156,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([33, 5], 'Nobel Prize winners'), ([3, 33], 'Country'), ([87, 37], '1980s'), ([161, 37], '1990s'), ([4, 68], 'Germany'), ([3, 99], 'Italy'), ([3, 129], 'Canada')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For an assignment, Johnny looked at which countries got the most Nobel Prizes in various decades. In the 1990s, how many more Nobel Prize winners did Canada have than Italy? (Unit: Nobel Prize winners)\nImage detected text: [([33, 5], 'Nobel Prize winners'), ([3, 33], 'Country'), ([87, 37], '1980s'), ([161, 37], '1990s'), ([4, 68], 'Germany'), ([3, 99], 'Italy'), ([3, 129], 'Canada')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "canada_1990s = 3\nitaly_1990s = 1\n\ndifference = canada_1990s - italy_1990s\nprint(difference)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "652": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/652.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "652",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 845,
            "img_height": 365,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "653": {
        "question": "Are there at least three distinct shades of blue in this photo?",
        "image": "images/653.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "653",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 425,
            "img_height": 500,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 125], 'n'), ([51, 225], 'BS'), ([109, 235], 'B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there at least three distinct shades of blue in this photo?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([11, 125], 'n'), ([51, 225], 'BS'), ([109, 235], 'B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def distinct_shades_of_blue(colors):\n    blue_shades = 0\n    for color in colors:\n        if color.lower() == 'b' or color.lower() == 'bs':\n            blue_shades += 1\n    if blue_shades >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncolors = ['n', 'BS', 'B']\nprint(distinct_shades_of_blue(colors))",
        "execution": "No",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "654": {
        "question": "Are there fewer yellow metallic motorbikes that are in front of the small brown metal dirtbike than big yellow dirtbikes?",
        "image": "images/654.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "654",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer yellow metallic motorbikes that are in front of the small brown metal dirtbike than big yellow dirtbikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_motorbikes(caption):\n    yellow_metallic_motorbikes = 0\n    small_brown_metal_dirtbike = 0\n    big_yellow_dirtbikes = 0\n\n    if \"yellow metallic motorbikes\" in caption:\n        yellow_metallic_motorbikes = int(caption[caption.index(\"yellow metallic motorbikes\")-2])\n    if \"small brown metal dirtbike\" in caption:\n        small_brown_metal_dirtbike = int(caption[caption.index(\"small brown metal dirtbike\")-2])\n    if \"big yellow dirtbikes\" in caption:\n        big_yellow_dirtbikes = int(caption[caption.index(\"big yellow dirtbikes\")-2])\n\n    if yellow_metallic_motorbikes < small_brown_metal_dirtbike:\n        return \"Yes\"\n    elif yellow_metallic_motorbikes >= big_yellow_dirtbikes:\n        return \"No\"\n    else:\n        return \"\"\n\ncaption = \"There are 3 yellow metallic motorbikes in front of the small brown metal dirtbike. There are 5 big yellow dirtbikes in total.\"\nprint(compare_motorbikes(caption))",
        "execution": "",
        "error": "invalid literal for int() with base 10: 'e'",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "655": {
        "question": "Is the value of Russia has the highest transport?",
        "image": "images/655.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "655",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 858,
            "img_height": 507,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 6], 'Freight transport'), ([159, 13], 'Rail; Million tonne-kilometres, 1992'), ([739, 13], 'Source: Goods transport'), ([741, 63], '1.97M'), ([9, 171], '_M'), ([9, 209], 'LZM'), ([9, 285], 'D.8M'), ([9, 321], 'D.6M'), ([10, 360], \"04N'\"), ([581, 383], '0.26M'), ([9, 397], 'D.ZM'), ([9, 435], 'D.oM'), ([105, 431], 'O.00M'), ([265, 431], '0,01M'), ([423, 431], '0,01M')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the value of Russia has the highest transport?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([0, 6], 'Freight transport'), ([159, 13], 'Rail; Million tonne-kilometres, 1992'), ([739, 13], 'Source: Goods transport'), ([741, 63], '1.97M'), ([9, 171], '_M'), ([9, 209], 'LZM'), ([9, 285], 'D.8M'), ([9, 321], 'D.6M'), ([10, 360], \"04N'\"), ([581, 383], '0.26M'), ([9, 397], 'D.ZM'), ([9, 435], 'D.oM'), ([105, 431], 'O.00M'), ([265, 431], '0,01M'), ([423, 431], '0,01M')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_transport_value(caption):\n    countries_transport_values = {\n        'Russia': 1.97,\n        'China': 0.26,\n        'United States': 0.01\n    }\n\n    highest_value = max(countries_transport_values.values())\n\n    for country, value in countries_transport_values.items():\n        if value == highest_value:\n            return country\n\n    return \"\"\n\ncaption = \"Freight transport Rail; Million tonne-kilometres, 1992 Source: Goods transport 1.97M LZM D.8M D.6M 04N' 0.26M D.ZM D.oM O.00M 0,01M 0,01M\"\n\nprint(highest_transport_value(caption))",
        "execution": "Russia",
        "error": "None",
        "extraction": "Russia",
        "prediction": "Yes",
        "true_false": true
    },
    "656": {
        "question": "Is Web Maroon the low median?",
        "image": "images/656.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "656",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 776,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([117, 11], 'title'), ([45, 57], 'Indian Red'), ([73, 121], 'Violet'), ([7, 155], '9'), ([29, 185], 'Medium Mint'), ([9, 191], '1'), ([35, 249], 'Web Maroon'), ([47, 313], 'Dark Olive'), ([407, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Web Maroon the low median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([117, 11], 'title'), ([45, 57], 'Indian Red'), ([73, 121], 'Violet'), ([7, 155], '9'), ([29, 185], 'Medium Mint'), ([9, 191], '1'), ([35, 249], 'Web Maroon'), ([47, 313], 'Dark Olive'), ([407, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "colors = {\n    'Indian Red': 57,\n    'Violet': 121,\n    'Medium Mint': 185,\n    'Web Maroon': 249,\n    'Dark Olive': 313\n}\n\nlow_median = 'Web Maroon'\n\nif colors[low_median] < colors['Indian Red']:\n    ans = 'yes'\nelse:\n    ans = 'no'\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "657": {
        "question": "Does Arkansas have a higher value than Indiana ?",
        "image": "images/657.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "657",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 500,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([39, 7], 'The Number of reasons in the USA'), ([49, 469], '552-557'), ([149, 469], '547-551'), ([251, 469], '541-545'), ([351, 469], '534-539')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Arkansas have a higher value than Indiana ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([39, 7], 'The Number of reasons in the USA'), ([49, 469], '552-557'), ([149, 469], '547-551'), ([251, 469], '541-545'), ([351, 469], '534-539')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "arkansas_value = 552\nindiana_value = 547\n\nif arkansas_value > indiana_value:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "658": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/658.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "658",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 115,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 85], 'Ocmn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 85], 'Ocmn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(line_length):\n    nearest_cm = round(line_length)\n    return nearest_cm\n\nline_length = 13.85\nnearest_cm = measure_length(line_length)\nprint(nearest_cm)",
        "execution": "14",
        "error": "None",
        "extraction": "14",
        "prediction": "14",
        "true_false": false
    },
    "659": {
        "question": "What is the highest value of navy blue bar?",
        "image": "images/659.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "991",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "659",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([71, 41], '500'), ([73, 103], '0oo'), ([44, 120], 'E'), ([73, 165], '500'), ([149, 165], '991'), ([113, 177], '9171'), ([183, 175], '941'), ([251, 179], '8791'), ([287, 177], '896'), ([217, 187], '8931'), ([44, 186], ''), ([321, 207], '8161'), ([73, 227], '0oo'), ([561, 225], '6601'), ([597, 243], '604'), ([631, 243], '548'), ([665, 243], '6291'), ([699, 247], '459'), ([44, 246], '1'), ([71, 289], '500'), ([113, 291], '9321'), ([155, 287], '000 934'), ([217, 295], '8661'), ([251, 291], '9331'), ([285, 291], '9501'), ([425, 293], '895,'), ([389, 301], '770'), ([457, 301], '7781'), ([493, 309], '664'), ([527, 311], '5981'), ([561, 307], '671'), ([595, 315], '5591'), ([629, 313], '5801'), ([665, 315], '542'), ([699, 311], '6141'), ([309, 431], 'Stranger'), ([393, 431], 'Acquaintance'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([94, 394], '01/02'), ([129, 394], '02/03'), ([163, 393], \"'03/04\"), ([197, 393], \"'04/05\"), ([231, 393], \"'05/06\"), ([292, 366], '8'), ([335, 393], '08/09'), ([369, 393], \"'09/10\"), ([472, 392], '12/13'), ([506, 392], '13/14'), ([545, 389], '14/15'), ([575, 393], '15/16'), ([609, 393], '16/17'), ([644, 392], '17/18'), ([679, 393], '18/19'), ([402, 391], '10/1 5'), ([300, 394], '07/0')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest value of navy blue bar?\nImage detected text: [([71, 41], '500'), ([73, 103], '0oo'), ([44, 120], 'E'), ([73, 165], '500'), ([149, 165], '991'), ([113, 177], '9171'), ([183, 175], '941'), ([251, 179], '8791'), ([287, 177], '896'), ([217, 187], '8931'), ([44, 186], ''), ([321, 207], '8161'), ([73, 227], '0oo'), ([561, 225], '6601'), ([597, 243], '604'), ([631, 243], '548'), ([665, 243], '6291'), ([699, 247], '459'), ([44, 246], '1'), ([71, 289], '500'), ([113, 291], '9321'), ([155, 287], '000 934'), ([217, 295], '8661'), ([251, 291], '9331'), ([285, 291], '9501'), ([425, 293], '895,'), ([389, 301], '770'), ([457, 301], '7781'), ([493, 309], '664'), ([527, 311], '5981'), ([561, 307], '671'), ([595, 315], '5591'), ([629, 313], '5801'), ([665, 315], '542'), ([699, 311], '6141'), ([309, 431], 'Stranger'), ([393, 431], 'Acquaintance'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([94, 394], '01/02'), ([129, 394], '02/03'), ([163, 393], \"'03/04\"), ([197, 393], \"'04/05\"), ([231, 393], \"'05/06\"), ([292, 366], '8'), ([335, 393], '08/09'), ([369, 393], \"'09/10\"), ([472, 392], '12/13'), ([506, 392], '13/14'), ([545, 389], '14/15'), ([575, 393], '15/16'), ([609, 393], '16/17'), ([644, 392], '17/18'), ([679, 393], '18/19'), ([402, 391], '10/1 5'), ([300, 394], '07/0')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "navy_blue_bars = [500, 0, 500, 991, 9171, 941, 8791, 896, 8931, 8161, 6601, 604, 548, 6291, 459, 1, 500, 9321, 8661, 9331, 9501, 895, 770, 7781, 664, 5981, 671, 5591, 5801, 542, 6141]\n\nhighest_value = max(navy_blue_bars)\nprint(highest_value)",
        "execution": "9501",
        "error": "None",
        "extraction": "9501",
        "prediction": "9501",
        "true_false": false
    },
    "660": {
        "question": "Are there fewer small fighters than yellow matte tandem bikes?",
        "image": "images/660.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "660",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer small fighters than yellow matte tandem bikes?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_fighters = 10\nyellow_matte_tandem_bikes = 15\n\nif small_fighters < yellow_matte_tandem_bikes:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "661": {
        "question": "What is this function most likely be?",
        "image": "images/661.jpg",
        "choices": [
            "a polynomial",
            "a trigonometric function",
            "an exponential function",
            "a logarithmic function"
        ],
        "unit": null,
        "precision": null,
        "answer": "a trigonometric function",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "661",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1732,
            "img_height": 1274,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([818, 20], 'f(0) = tan(0)'), ([810, 144], '3'), ([70, 670], '31'), ([1098, 668], '2'), ([1602, 670], '30'), ([593, 697], '2'), ([808, 1122], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is this function most likely be?\nChoices:\n(A) a polynomial\n(B) a trigonometric function\n(C) an exponential function\n(D) a logarithmic function\nImage detected text: [([818, 20], 'f(0) = tan(0)'), ([810, 144], '3'), ([70, 670], '31'), ([1098, 668], '2'), ([1602, 670], '30'), ([593, 697], '2'), ([808, 1122], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-10, 10, 100)\ny = np.tan(x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title('Graph of f(x) = tan(x)')\nplt.grid(True)\nplt.show()",
        "execution": "",
        "error": "None",
        "extraction": "B",
        "prediction": "a trigonometric function",
        "true_false": true
    },
    "662": {
        "question": "How much more accurate is the most accurate algorithm compared the least accurate algorithm?",
        "image": "images/662.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "80",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "662",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([99, 11], 'Accuracy of different algorithms'), ([37, 31], '100'), ([47, 105], '80'), ([14, 184], '1'), ([47, 247], '40'), ([47, 319], '20'), ([86, 408], 'niece'), ([174, 408], 'harder'), ([274, 408], 'ditch'), ([362, 408], 'wheat')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much more accurate is the most accurate algorithm compared the least accurate algorithm?\nImage detected text: [([99, 11], 'Accuracy of different algorithms'), ([37, 31], '100'), ([47, 105], '80'), ([14, 184], '1'), ([47, 247], '40'), ([47, 319], '20'), ([86, 408], 'niece'), ([174, 408], 'harder'), ([274, 408], 'ditch'), ([362, 408], 'wheat')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_accurate = 100\nleast_accurate = 20\n\ndifference = most_accurate - least_accurate\nprint(difference)",
        "execution": "80",
        "error": "None",
        "extraction": "80",
        "prediction": "80",
        "true_false": true
    },
    "663": {
        "question": "What time is shown? Answer by typing a time word, not a number. It is (_) past six.",
        "image": "images/663.jpg",
        "choices": [
            "half",
            "quarter",
            "o'clock",
            "quarter to",
            "quarter past"
        ],
        "unit": null,
        "precision": null,
        "answer": "quarter",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "663",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 203,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([88, 18], '12'), ([26, 54], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What time is shown? Answer by typing a time word, not a number. It is (_) past six.\nChoices:\n(A) half\n(B) quarter\n(C) o'clock\n(D) quarter to\n(E) quarter past\nImage detected text: [([88, 18], '12'), ([26, 54], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "time_word = \"quarter past\"\nprint(time_word)",
        "execution": "quarter past",
        "error": "None",
        "extraction": "quarter past",
        "prediction": "quarter past",
        "true_false": false
    },
    "664": {
        "question": "What is the highest number of responses for Question 10, for any given % of inside sales?",
        "image": "images/664.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "17",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "664",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1692,
            "img_height": 2245,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([160, 166], 'I0'), ([257, 157], 'What percentage of your Inside Sales does the cigarette category currently represent?'), ([176, 258], \"% '$\"), ([365, 251], '0-10%'), ([535, 255], '11-16%'), ([715, 251], '17-25%'), ([893, 249], '36-33%'), ([1075, 247], '34-40%'), ([1257, 247], '41-50%'), ([174, 328], '# OF'), ([603, 331], '2'), ([778, 326], '17'), ([1145, 325], '2'), ([178, 360], 'RESPONSES'), ([162, 468], 'NOTE:'), ([376, 460], 'of people who did nct answer the question'), ([164, 594], '1L.'), ([260, 580], 'What percentage of your Total Sales does the cigarette category currently represent?'), ([182, 692], \"%f' $\"), ([369, 683], '0-5%'), ([493, 687], '6-10%'), ([650, 681], '11-16%'), ([811, 681], '17-25%'), ([969, 682], '26-33%'), ([1123, 679], '34-40%'), ([1282, 678], '41-50%'), ([178, 756], '#OF'), ([413, 761], '2'), ([701, 753], '10'), ([182, 788], 'RESPONSES'), ([165, 871], 'NOTE:'), ([359, 873], '#'), ([378, 865], 'of people who did not answer the question'), ([168, 998], '12.'), ([263, 995], 'Is your'), ([362, 986], 'organization currently in the certon sales business &S well as'), ([262, 1026], 'If no, what is your level of interest in pursing carton sales?'), ([265, 1113], 'YES:'), ([362, 1114], '27'), ([265, 1153], 'NO:'), ([392, 1142], '(two of the respondents indicated their level of interest was very little, while 1'), ([361, 1191], 'indicated'), ([547, 1184], 'had no interest and the fourth did not indicate.)'), ([171, 1317], '13.'), ([266, 1304], 'If known, what is the average $ ring when cigarettes are purchased?'), ([263, 1350], '(Below is a list of the prices given'), ([741, 1353], 'Each was only mentioned once)'), ([174, 1442], '1.'), ([268, 1438], '53.50'), ([658, 1436], '5,'), ([753, 1433], '83.26'), ([175, 1479], '2_'), ([269, 1477], 'S4.33'), ([753, 1473], 'SI,SO'), ([175, 1521], '3'), ([269, 1517], 'S2.57'), ([661, 1517], '7'), ([755, 1515], 'S3.00'), ([269, 1557], 'S5.00'), ([658, 1556], '8_'), ([756, 1556], '52.05'), ([175, 1637], 'Note:'), ([272, 1630], 'The number of people who did not answer this question'), ([1030, 1634], '23'), ([178, 1766], '14.'), ([271, 1761], 'If known, what is the average'), ([764, 1748], 'when cigarettes are purchased, excluding the'), ([272, 1792], 'value of the cigarettes purchased? (The following answers were each given once)'), ([181, 1891], '1'), ([272, 1882], 'S2.50'), ([759, 1879], 'S1.30'), ([179, 1927], '2'), ([272, 1922], 'S1.79'), ([665, 1925], '5_'), ([759, 1921], '52.10'), ([179, 1969], '3'), ([275, 1965], 'So.90'), ([664, 1964], '6_'), ([759, 1961], 'S6.50'), ([1523, 1929], '3'), ([179, 2047], 'Note:'), ([276, 2039], 'The muimber f people who did not answer this question'), ([1033, 2041], '25'), ([1527, 2051], '8'), ([368, 2200], 'Source: https:IIwW industrydocuments ucsf eduldocslfzdn00z0'), ([1176, 991], 'pack?'), ([486, 1187], 'they'), ([703, 1754], 'ring')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest number of responses for Question 10, for any given % of inside sales?\nImage detected text: [([160, 166], 'I0'), ([257, 157], 'What percentage of your Inside Sales does the cigarette category currently represent?'), ([176, 258], \"% '$\"), ([365, 251], '0-10%'), ([535, 255], '11-16%'), ([715, 251], '17-25%'), ([893, 249], '36-33%'), ([1075, 247], '34-40%'), ([1257, 247], '41-50%'), ([174, 328], '# OF'), ([603, 331], '2'), ([778, 326], '17'), ([1145, 325], '2'), ([178, 360], 'RESPONSES'), ([162, 468], 'NOTE:'), ([376, 460], 'of people who did nct answer the question'), ([164, 594], '1L.'), ([260, 580], 'What percentage of your Total Sales does the cigarette category currently represent?'), ([182, 692], \"%f' $\"), ([369, 683], '0-5%'), ([493, 687], '6-10%'), ([650, 681], '11-16%'), ([811, 681], '17-25%'), ([969, 682], '26-33%'), ([1123, 679], '34-40%'), ([1282, 678], '41-50%'), ([178, 756], '#OF'), ([413, 761], '2'), ([701, 753], '10'), ([182, 788], 'RESPONSES'), ([165, 871], 'NOTE:'), ([359, 873], '#'), ([378, 865], 'of people who did not answer the question'), ([168, 998], '12.'), ([263, 995], 'Is your'), ([362, 986], 'organization currently in the certon sales business &S well as'), ([262, 1026], 'If no, what is your level of interest in pursing carton sales?'), ([265, 1113], 'YES:'), ([362, 1114], '27'), ([265, 1153], 'NO:'), ([392, 1142], '(two of the respondents indicated their level of interest was very little, while 1'), ([361, 1191], 'indicated'), ([547, 1184], 'had no interest and the fourth did not indicate.)'), ([171, 1317], '13.'), ([266, 1304], 'If known, what is the average $ ring when cigarettes are purchased?'), ([263, 1350], '(Below is a list of the prices given'), ([741, 1353], 'Each was only mentioned once)'), ([174, 1442], '1.'), ([268, 1438], '53.50'), ([658, 1436], '5,'), ([753, 1433], '83.26'), ([175, 1479], '2_'), ([269, 1477], 'S4.33'), ([753, 1473], 'SI,SO'), ([175, 1521], '3'), ([269, 1517], 'S2.57'), ([661, 1517], '7'), ([755, 1515], 'S3.00'), ([269, 1557], 'S5.00'), ([658, 1556], '8_'), ([756, 1556], '52.05'), ([175, 1637], 'Note:'), ([272, 1630], 'The number of people who did not answer this question'), ([1030, 1634], '23'), ([178, 1766], '14.'), ([271, 1761], 'If known, what is the average'), ([764, 1748], 'when cigarettes are purchased, excluding the'), ([272, 1792], 'value of the cigarettes purchased? (The following answers were each given once)'), ([181, 1891], '1'), ([272, 1882], 'S2.50'), ([759, 1879], 'S1.30'), ([179, 1927], '2'), ([272, 1922], 'S1.79'), ([665, 1925], '5_'), ([759, 1921], '52.10'), ([179, 1969], '3'), ([275, 1965], 'So.90'), ([664, 1964], '6_'), ([759, 1961], 'S6.50'), ([1523, 1929], '3'), ([179, 2047], 'Note:'), ([276, 2039], 'The muimber f people who did not answer this question'), ([1033, 2041], '25'), ([1527, 2051], '8'), ([368, 2200], 'Source: https:IIwW industrydocuments ucsf eduldocslfzdn00z0'), ([1176, 991], 'pack?'), ([486, 1187], 'they'), ([703, 1754], 'ring')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "highest_responses = 0\nfor i in range(10, 51, 5):\n    if i == 35:\n        continue\n    responses = int(image_detected_text[i][1])\n    if responses > highest_responses:\n        highest_responses = responses\n\nprint(highest_responses)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "17",
        "prediction": "17",
        "true_false": true
    },
    "665": {
        "question": "Find $h$ in the triangle.",
        "image": "images/665.jpg",
        "choices": [
            "4.62",
            "5.66",
            "6.93",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "665",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 275,
            "img_height": 161,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([178, 44], '60')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $h$ in the triangle.\nChoices:\n(A) 4.62\n(B) 5.66\n(C) 6.93\n(D) 8\nImage detected text: [([178, 44], '60')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle = 60\nside = 10\n\nh = side * math.sin(math.radians(angle))\nprint(h)",
        "execution": "8.660254037844386",
        "error": "None",
        "extraction": "6.93",
        "prediction": "6.93",
        "true_false": false
    },
    "666": {
        "question": "Subtract all red objects. Subtract all big green things. How many objects are left?",
        "image": "images/666.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "666",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all red objects. Subtract all big green things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    red_objects = 0\n    green_objects = 0\n    remaining_objects = 0\n\n    for obj in objects:\n        if obj.color == 'red':\n            red_objects += 1\n        elif obj.color == 'green' and obj.size == 'big':\n            green_objects += 1\n        else:\n            remaining_objects += 1\n\n    return remaining_objects\n\nobjects = [\n    Object(color='red', size='small'),\n    Object(color='green', size='big'),\n    Object(color='blue', size='small'),\n    Object(color='red', size='big'),\n    Object(color='green', size='small'),\n    Object(color='blue', size='big')\n]\n\nprint(count_objects(objects))",
        "execution": "",
        "error": "name 'Object' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "667": {
        "question": "Which year has the least difference between the used and new cars?",
        "image": "images/667.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2015",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "667",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([71, 41], '0o0'), ([695, 85], '186'), ([69, 109], '000'), ([607, 105], '871,'), ([519, 127], '538'), ([125, 147], '231'), ([429, 145], '280'), ([44, 160], '8'), ([69, 175], '000'), ([213, 165], '968'), ([303, 171], '877.'), ([339, 165], '993'), ([151, 179], '2 734'), ([251, 177], '787'), ([393, 187], '626'), ([44, 190], '1'), ([469, 207], '2 343'), ([559, 209], '2 314'), ([647, 215], '2 225'), ([69, 241], '000'), ([43, 237], '1'), ([69, 307], '0o0'), ([135, 389], '2013'), ([223, 391], '201 4'), ([313, 391], '2015'), ([401, 389], '2016'), ([491, 391], '2017'), ([579, 389], '2018'), ([667, 389], '2019'), ([319, 431], 'New cars'), ([405, 431], 'Used cars'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which year has the least difference between the used and new cars?\nImage detected text: [([71, 41], '0o0'), ([695, 85], '186'), ([69, 109], '000'), ([607, 105], '871,'), ([519, 127], '538'), ([125, 147], '231'), ([429, 145], '280'), ([44, 160], '8'), ([69, 175], '000'), ([213, 165], '968'), ([303, 171], '877.'), ([339, 165], '993'), ([151, 179], '2 734'), ([251, 177], '787'), ([393, 187], '626'), ([44, 190], '1'), ([469, 207], '2 343'), ([559, 209], '2 314'), ([647, 215], '2 225'), ([69, 241], '000'), ([43, 237], '1'), ([69, 307], '0o0'), ([135, 389], '2013'), ([223, 391], '201 4'), ([313, 391], '2015'), ([401, 389], '2016'), ([491, 391], '2017'), ([579, 389], '2018'), ([667, 389], '2019'), ([319, 431], 'New cars'), ([405, 431], 'Used cars'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "used_cars = [186, 871, 538, 231, 280, 968, 877, 993, 2734, 787, 626]\nnew_cars = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\nmin_diff = float('inf')\nyear = 0\n\nfor used_car in used_cars:\n    for new_car in new_cars:\n        diff = abs(used_car - new_car)\n        if diff < min_diff:\n            min_diff = diff\n            year = new_car\n\nprint(year)",
        "execution": "2019",
        "error": "None",
        "extraction": "2015",
        "prediction": "2015",
        "true_false": true
    },
    "668": {
        "question": "Does the first symbol in the legend represent the smallest category ?",
        "image": "images/668.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "668",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 775,
            "img_height": 560,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([5, 8], 'Health Insurance Coverage of the Nonelderly (0-64) with Incomes below 200% Federal Poverty Level (FPL): Uninse'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([693, 85], 'ME'), ([325, 93], 'ND'), ([79, 115], 'OR'), ([731, 133], 'NH'), ([325, 145], 'SD'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([327, 195], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([731, 231], 'DC'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([605, 277], 'NC'), ([509, 287], 'TN'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([425, 309], 'AR'), ([587, 309], 'Sc'), ([467, 343], 'MS'), ([555, 337], 'GA'), ([79, 409], 'AK'), ([39, 493], '15,100- 292,800'), ([227, 493], '303,000- 691,400'), ([415, 493], '697,500- 1,071,500'), ([603, 493], '1,176,300- 3,970,000'), ([5, 539], \"SOURCE: Kaiser Family Foundation's State Health Facts_\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does the first symbol in the legend represent the smallest category ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([5, 8], 'Health Insurance Coverage of the Nonelderly (0-64) with Incomes below 200% Federal Poverty Level (FPL): Uninse'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([693, 85], 'ME'), ([325, 93], 'ND'), ([79, 115], 'OR'), ([731, 133], 'NH'), ([325, 145], 'SD'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([327, 195], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([731, 231], 'DC'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([605, 277], 'NC'), ([509, 287], 'TN'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([425, 309], 'AR'), ([587, 309], 'Sc'), ([467, 343], 'MS'), ([555, 337], 'GA'), ([79, 409], 'AK'), ([39, 493], '15,100- 292,800'), ([227, 493], '303,000- 691,400'), ([415, 493], '697,500- 1,071,500'), ([603, 493], '1,176,300- 3,970,000'), ([5, 539], \"SOURCE: Kaiser Family Foundation's State Health Facts_\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def first_symbol_smallest_category(legend):\n    smallest_category = legend[0][1]\n    for symbol, category in legend:\n        if len(category) < len(smallest_category):\n            smallest_category = category\n    return smallest_category\n\nlegend = [\n    ([5, 8], 'Health Insurance Coverage of the Nonelderly (0-64) with Incomes below 200% Federal Poverty Level (FPL): Uninse'),\n    ([95, 59], 'WA'),\n    ([217, 89], 'MT'),\n    ([693, 85], 'ME'),\n    ([325, 93], 'ND'),\n    ([79, 115], 'OR'),\n    ([731, 133], 'NH'),\n    ([325, 145], 'SD'),\n    ([637, 145], 'NY'),\n    ([731, 147], 'MA'),\n    ([233, 161], 'WY'),\n    ([327, 195], 'NE'),\n    ([109, 205], 'NV'),\n    ([547, 205], 'OH'),\n    ([731, 201], 'DE'),\n    ([731, 215], 'MD'),\n    ([63, 231], 'CA'),\n    ([251, 233], 'co'),\n    ([731, 231], 'DC'),\n    ([423, 249], 'MO'),\n    ([605, 243], 'VA'),\n    ([605, 277], 'NC'),\n    ([509, 287], 'TN'),\n    ([355, 297], 'OK'),\n    ([235, 311], 'NM'),\n    ([425, 309], 'AR'),\n    ([587, 309], 'Sc'),\n    ([467, 343], 'MS'),\n    ([555, 337], 'GA'),\n    ([79, 409], 'AK'),\n    ([39, 493], '15,100- 292,800'),\n    ([227, 493], '303,000- 691,400'),\n    ([415, 493], '697,500- 1,071,500'),\n    ([603, 493], '1,176,300- 3,970,000'),\n    ([5, 539], \"SOURCE: Kaiser Family Foundation's State Health Facts_\")\n]\n\nsmallest_category = first_symbol_smallest_category(legend)\nif smallest_category == legend[0][1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "669": {
        "question": "As shown in the figure, line segment AB = 10.0, M is the midpoint of line segment AB, C is the midpoint of line segment MB, N is a point of line segment AM, and MN = 1.0, the length of line segment NC ()",
        "image": "images/669.jpg",
        "choices": [
            "2",
            "2.5",
            "3",
            "3.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "3.5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "669",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 187,
            "img_height": 18,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, line segment AB = 10.0, M is the midpoint of line segment AB, C is the midpoint of line segment MB, N is a point of line segment AM, and MN = 1.0, the length of line segment NC ()\nChoices:\n(A) 2\n(B) 2.5\n(C) 3\n(D) 3.5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 10.0\nMN = 1.0\n\n# Calculate the length of AM\nAM = AB / 2\n\n# Calculate the length of MC\nMC = AM / 2\n\n# Calculate the length of NC\nNC = MC - MN\n\nNC",
        "execution": "",
        "error": "None",
        "extraction": "2.5",
        "prediction": "2.5",
        "true_false": false
    },
    "670": {
        "question": "On which date of Meeting was the most number of shares transferred?",
        "image": "images/670.jpg",
        "choices": [
            "04/06/2005",
            "04/02/2005",
            "04/05/2005",
            "04/03/2005",
            "04/04/2005"
        ],
        "unit": null,
        "precision": null,
        "answer": "04/02/2005",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "670",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1582,
            "img_height": 2135,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1334, 76], 'GTL'), ([79, 285], 'Remuneration to'), ([296, 288], 'Directors:'), ([80, 332], 'Details of Remuneration paid t0 the Directors tor the year ended 31* March, 2005.'), ([94, 390], 'Sr,'), ([230, 388], 'Name of the Directors'), ([610, 388], 'Salaries'), ([745, 388], 'Perquisites'), ([938, 388], 'PF &'), ([1080, 386], 'Sitting'), ([1228, 388], 'Total'), ([1358, 388], 'Stock'), ([96, 416], 'No'), ([936, 412], 'Super'), ([1068, 416], 'tees(incl:'), ([1354, 416], 'Option'), ([910, 442], 'annuation'), ([1060, 442], 'Committee'), ([936, 470], 'Fund'), ([1066, 470], 'Meetings)'), ([642, 496], 'Rs:'), ([772, 496], 'Rs: ##'), ([948, 496], 'Rs.'), ([1100, 496], 'Rs:'), ([1248, 496], 'Rs_'), ([176, 550], 'Shri R: R.'), ([282, 550], 'Kumar'), ([1080, 550], '1,00,500'), ([1234, 550], '1,00,500'), ([1390, 552], 'Nil'), ([99, 589], '2'), ([176, 584], 'Shri Chandra Shankar'), ([1114, 584], '3000'), ([1260, 586], '3,000'), ([1390, 586], 'Nil'), ([101, 623], '3'), ([178, 617], 'Shri Bharat B. Merchant'), ([1096, 620], '30,000'), ([1248, 620], '30,000'), ([1390, 620], 'Nil'), ([178, 654], 'Shri M:'), ([260, 654], 'H, Patil'), ([1096, 654], '40,500'), ([1250, 654], '40,500'), ([1390, 656], 'Nil'), ([99, 691], '5.'), ([178, 687], 'Shri R. V. lyer@ @'), ([1110, 690], '9,000'), ([1260, 690], '9,000'), ([1390, 690], 'Nil'), ([99, 725], '6,'), ([178, 724], 'Shri'), ([230, 724], 'AK,'), ([278, 724], 'Joshit'), ([634, 722], '700200'), ([794, 724], '591183'), ([956, 724], '174000'), ([1218, 724], '14,65,383'), ([1390, 724], 'Nil'), ([98, 760], '7.'), ([178, 758], 'Shri'), ([291, 756], 'Mehra'), ([634, 758], '895800'), ([796, 758], '733808'), ([954, 758], '223950'), ([1218, 758], '18,53,558'), ([1390, 760], 'Nil'), ([99, 797], '8'), ([178, 794], 'Shri'), ([230, 792], 'J. P Khetan#:'), ([622, 792], '1608000'), ([794, 794], '658119'), ([954, 792], '402000'), ([1218, 794], '26,68,119'), ([1390, 794], 'Nil'), ([178, 828], 'Total'), ([608, 828], '32,04,000'), ([770, 828], '19,83,110'), ([944, 828], '7,99,950'), ([1096, 828], '83,000'), ([1216, 828], '61,70,060'), ([1390, 830], 'Nil'), ([154, 862], 'Ceased as Special Direclor vide BIFR direction'), ([651, 867], 'no_'), ([692, 862], 'FNo.15/2001/SDIBIFR with effect from 5ih July; 2004'), ([155, 887], 'Appointed as Special Director we.f'), ([546, 887], '17in September 2004_'), ([155, 913], 'Appointed as Whole-time Director on 244 September, 2004 for'), ([829, 915], 'period ol three years.'), ([157, 941], 'Re-appointed as Whole-time'), ([452, 942], 'Director with effect from 2n August;, 2004 for'), ([949, 942], 'period of Ihree years.'), ([158, 970], 'Re-appointed as Managing'), ([438, 970], 'Director with effect from'), ([699, 973], '1st'), ([727, 969], 'August; 2003 for'), ([929, 968], 'period of three years_'), ([158, 994], 'All perquisites'), ([309, 1001], 'are'), ([350, 998], 'evaluated as'), ([490, 998], 'per  Income-tax'), ([656, 996], 'Rules, 1962'), ([790, 998], 'and in the'), ([908, 998], 'absence'), ([1004, 998], 'of any'), ([1080, 998], 'such'), ([1138, 998], 'rules evaluations are made at'), ([155, 1023], 'actual cost.'), ([86, 1056], 'Notice period,'), ([233, 1054], 'severance fee and performance linked incentives are not stipulated in their terms of appointments'), ([86, 1100], \"C) Share Transfer cum Shareholders IInvestors' Grievance Committee\"), ([84, 1145], 'The above Committee meets at regular intervals to approve transfers and Iook into the redressal of investors complaints; and to attend'), ([84, 1172], \"to share transfer and other related matters. The Composition of the Share Transfer cum Shareholders'/Investors' Grievance Committee\"), ([86, 1200], 'and details of'), ([275, 1197], 'meeting attended by the'), ([534, 1200], 'Directors are given below:'), ([104, 1242], 'Name of member'), ([485, 1241], 'Category'), ([967, 1238], 'No. of meetings attended out of'), ([965, 1272], '24 meetings held during the year 2004-2005'), ([104, 1314], 'Shri R.'), ([184, 1314], 'R. Kumar'), ([488, 1314], 'Non-Executive Independent Director'), ([966, 1314], '24'), ([102, 1352], 'Shri M'), ([186, 1352], 'H,'), ([216, 1350], 'Patil'), ([488, 1348], 'Non-Executive  Independent Director'), ([104, 1386], 'Shri Viney Mehra'), ([488, 1388], 'Executive Independent Director'), ([968, 1388], '16'), ([104, 1426], 'Shri A.'), ([185, 1427], 'K'), ([212, 1426], 'Joshi'), ([488, 1426], 'Executive Independent_Director'), ([964, 1426], '21'), ([88, 1458], 'Shri Kamal K. Gupta, Vice President (Corporate Affairs) & Company Secretary is the Compliance Otticer to monitor the share transter'), ([87, 1483], \"process, shareholders' grievances and complaints, and to liaise with regulatory authorities. His Phone No. 26713951,\"), ([1260, 1488], 'Fax No. 26715481_'), ([89, 1527], 'Share Transfer details meeting-wise:'), ([100, 1574], 'Date of Meeting'), ([334, 1572], 'Total'), ([392, 1574], 'No'), ([434, 1574], 'of'), ([464, 1574], 'Shares Transferred'), ([738, 1572], 'Date of Meeting'), ([978, 1572], 'Total No. of Shares Transferred'), ([128, 1604], '02/04/2004'), ([470, 1604], '5137'), ([766, 1602], '06/10/2004'), ([1116, 1604], '7330'), ([129, 1631], '21704/2004'), ([470, 1634], '3845'), ([766, 1632], '18/10/2004'), ([1116, 1634], '1430'), ([130, 1664], '05/05/2004'), ([470, 1664], '3598'), ([764, 1662], '03/11/2004'), ([1116, 1664], '1867'), ([129, 1691], '20/05/2004'), ([470, 1694], '4560'), ([766, 1692], '17/11/2004'), ([1116, 1694], '1770'), ([130, 1724], '05/06/2004'), ([470, 1724], '2345'), ([764, 1722], '03712/2004'), ([1116, 1724], '3165'), ([132, 1754], '18/08/2004'), ([470, 1754], '3928'), ([766, 1752], '17/12/2004'), ([1116, 1754], '3974'), ([134, 1784], '1207/2004'), ([470, 1784], '4455'), ([764, 1782], '03/01/2005'), ([1116, 1784], '5921'), ([132, 1814], '28/0712004'), ([470, 1814], '2950'), ([768, 1812], '17/01/2005'), ([1116, 1814], '3605'), ([136, 1844], '11/08/2004'), ([470, 1844], '1560'), ([764, 1842], '04/02/2005'), ([1110, 1844], '17347'), ([131, 1870], '27/08/2004'), ([470, 1874], '1825'), ([764, 1872], '21/02/2005'), ([1110, 1874], '15025'), ([134, 1904], '09/09/2004'), ([470, 1904], '2520'), ([763, 1902], '07/03/2005'), ([1116, 1904], '9049'), ([134, 1934], '20/0912004'), ([470, 1934], '1931'), ([763, 1932], '23/03/2005'), ([1110, 1934], '11940'), ([92, 1970], 'AlI'), ([132, 1966], 'transters received have been processed within the prescribed time with no pending share transters_'), ([90, 1993], 'The Company received 65 complaints'), ([562, 1994], 'the financial year ended 31'), ([874, 1994], 'March 2005.'), ([1410, 2078], '13'), ([316, 2089], 'Source: https /lwwW.industrydocuments ucsf eduldocslgsgj0223'), ([228, 754], 'Viney'), ([235, 1199], 'the'), ([489, 1989], 'during')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: On which date of Meeting was the most number of shares transferred?\nChoices:\n(A) 04/06/2005\n(B) 04/02/2005\n(C) 04/05/2005\n(D) 04/03/2005\n(E) 04/04/2005\nImage detected text: [([1334, 76], 'GTL'), ([79, 285], 'Remuneration to'), ([296, 288], 'Directors:'), ([80, 332], 'Details of Remuneration paid t0 the Directors tor the year ended 31* March, 2005.'), ([94, 390], 'Sr,'), ([230, 388], 'Name of the Directors'), ([610, 388], 'Salaries'), ([745, 388], 'Perquisites'), ([938, 388], 'PF &'), ([1080, 386], 'Sitting'), ([1228, 388], 'Total'), ([1358, 388], 'Stock'), ([96, 416], 'No'), ([936, 412], 'Super'), ([1068, 416], 'tees(incl:'), ([1354, 416], 'Option'), ([910, 442], 'annuation'), ([1060, 442], 'Committee'), ([936, 470], 'Fund'), ([1066, 470], 'Meetings)'), ([642, 496], 'Rs:'), ([772, 496], 'Rs: ##'), ([948, 496], 'Rs.'), ([1100, 496], 'Rs:'), ([1248, 496], 'Rs_'), ([176, 550], 'Shri R: R.'), ([282, 550], 'Kumar'), ([1080, 550], '1,00,500'), ([1234, 550], '1,00,500'), ([1390, 552], 'Nil'), ([99, 589], '2'), ([176, 584], 'Shri Chandra Shankar'), ([1114, 584], '3000'), ([1260, 586], '3,000'), ([1390, 586], 'Nil'), ([101, 623], '3'), ([178, 617], 'Shri Bharat B. Merchant'), ([1096, 620], '30,000'), ([1248, 620], '30,000'), ([1390, 620], 'Nil'), ([178, 654], 'Shri M:'), ([260, 654], 'H, Patil'), ([1096, 654], '40,500'), ([1250, 654], '40,500'), ([1390, 656], 'Nil'), ([99, 691], '5.'), ([178, 687], 'Shri R. V. lyer@ @'), ([1110, 690], '9,000'), ([1260, 690], '9,000'), ([1390, 690], 'Nil'), ([99, 725], '6,'), ([178, 724], 'Shri'), ([230, 724], 'AK,'), ([278, 724], 'Joshit'), ([634, 722], '700200'), ([794, 724], '591183'), ([956, 724], '174000'), ([1218, 724], '14,65,383'), ([1390, 724], 'Nil'), ([98, 760], '7.'), ([178, 758], 'Shri'), ([291, 756], 'Mehra'), ([634, 758], '895800'), ([796, 758], '733808'), ([954, 758], '223950'), ([1218, 758], '18,53,558'), ([1390, 760], 'Nil'), ([99, 797], '8'), ([178, 794], 'Shri'), ([230, 792], 'J. P Khetan#:'), ([622, 792], '1608000'), ([794, 794], '658119'), ([954, 792], '402000'), ([1218, 794], '26,68,119'), ([1390, 794], 'Nil'), ([178, 828], 'Total'), ([608, 828], '32,04,000'), ([770, 828], '19,83,110'), ([944, 828], '7,99,950'), ([1096, 828], '83,000'), ([1216, 828], '61,70,060'), ([1390, 830], 'Nil'), ([154, 862], 'Ceased as Special Direclor vide BIFR direction'), ([651, 867], 'no_'), ([692, 862], 'FNo.15/2001/SDIBIFR with effect from 5ih July; 2004'), ([155, 887], 'Appointed as Special Director we.f'), ([546, 887], '17in September 2004_'), ([155, 913], 'Appointed as Whole-time Director on 244 September, 2004 for'), ([829, 915], 'period ol three years.'), ([157, 941], 'Re-appointed as Whole-time'), ([452, 942], 'Director with effect from 2n August;, 2004 for'), ([949, 942], 'period of Ihree years.'), ([158, 970], 'Re-appointed as Managing'), ([438, 970], 'Director with effect from'), ([699, 973], '1st'), ([727, 969], 'August; 2003 for'), ([929, 968], 'period of three years_'), ([158, 994], 'All perquisites'), ([309, 1001], 'are'), ([350, 998], 'evaluated as'), ([490, 998], 'per  Income-tax'), ([656, 996], 'Rules, 1962'), ([790, 998], 'and in the'), ([908, 998], 'absence'), ([1004, 998], 'of any'), ([1080, 998], 'such'), ([1138, 998], 'rules evaluations are made at'), ([155, 1023], 'actual cost.'), ([86, 1056], 'Notice period,'), ([233, 1054], 'severance fee and performance linked incentives are not stipulated in their terms of appointments'), ([86, 1100], \"C) Share Transfer cum Shareholders IInvestors' Grievance Committee\"), ([84, 1145], 'The above Committee meets at regular intervals to approve transfers and Iook into the redressal of investors complaints; and to attend'), ([84, 1172], \"to share transfer and other related matters. The Composition of the Share Transfer cum Shareholders'/Investors' Grievance Committee\"), ([86, 1200], 'and details of'), ([275, 1197], 'meeting attended by the'), ([534, 1200], 'Directors are given below:'), ([104, 1242], 'Name of member'), ([485, 1241], 'Category'), ([967, 1238], 'No. of meetings attended out of'), ([965, 1272], '24 meetings held during the year 2004-2005'), ([104, 1314], 'Shri R.'), ([184, 1314], 'R. Kumar'), ([488, 1314], 'Non-Executive Independent Director'), ([966, 1314], '24'), ([102, 1352], 'Shri M'), ([186, 1352], 'H,'), ([216, 1350], 'Patil'), ([488, 1348], 'Non-Executive  Independent Director'), ([104, 1386], 'Shri Viney Mehra'), ([488, 1388], 'Executive Independent Director'), ([968, 1388], '16'), ([104, 1426], 'Shri A.'), ([185, 1427], 'K'), ([212, 1426], 'Joshi'), ([488, 1426], 'Executive Independent_Director'), ([964, 1426], '21'), ([88, 1458], 'Shri Kamal K. Gupta, Vice President (Corporate Affairs) & Company Secretary is the Compliance Otticer to monitor the share transter'), ([87, 1483], \"process, shareholders' grievances and complaints, and to liaise with regulatory authorities. His Phone No. 26713951,\"), ([1260, 1488], 'Fax No. 26715481_'), ([89, 1527], 'Share Transfer details meeting-wise:'), ([100, 1574], 'Date of Meeting'), ([334, 1572], 'Total'), ([392, 1574], 'No'), ([434, 1574], 'of'), ([464, 1574], 'Shares Transferred'), ([738, 1572], 'Date of Meeting'), ([978, 1572], 'Total No. of Shares Transferred'), ([128, 1604], '02/04/2004'), ([470, 1604], '5137'), ([766, 1602], '06/10/2004'), ([1116, 1604], '7330'), ([129, 1631], '21704/2004'), ([470, 1634], '3845'), ([766, 1632], '18/10/2004'), ([1116, 1634], '1430'), ([130, 1664], '05/05/2004'), ([470, 1664], '3598'), ([764, 1662], '03/11/2004'), ([1116, 1664], '1867'), ([129, 1691], '20/05/2004'), ([470, 1694], '4560'), ([766, 1692], '17/11/2004'), ([1116, 1694], '1770'), ([130, 1724], '05/06/2004'), ([470, 1724], '2345'), ([764, 1722], '03712/2004'), ([1116, 1724], '3165'), ([132, 1754], '18/08/2004'), ([470, 1754], '3928'), ([766, 1752], '17/12/2004'), ([1116, 1754], '3974'), ([134, 1784], '1207/2004'), ([470, 1784], '4455'), ([764, 1782], '03/01/2005'), ([1116, 1784], '5921'), ([132, 1814], '28/0712004'), ([470, 1814], '2950'), ([768, 1812], '17/01/2005'), ([1116, 1814], '3605'), ([136, 1844], '11/08/2004'), ([470, 1844], '1560'), ([764, 1842], '04/02/2005'), ([1110, 1844], '17347'), ([131, 1870], '27/08/2004'), ([470, 1874], '1825'), ([764, 1872], '21/02/2005'), ([1110, 1874], '15025'), ([134, 1904], '09/09/2004'), ([470, 1904], '2520'), ([763, 1902], '07/03/2005'), ([1116, 1904], '9049'), ([134, 1934], '20/0912004'), ([470, 1934], '1931'), ([763, 1932], '23/03/2005'), ([1110, 1934], '11940'), ([92, 1970], 'AlI'), ([132, 1966], 'transters received have been processed within the prescribed time with no pending share transters_'), ([90, 1993], 'The Company received 65 complaints'), ([562, 1994], 'the financial year ended 31'), ([874, 1994], 'March 2005.'), ([1410, 2078], '13'), ([316, 2089], 'Source: https /lwwW.industrydocuments ucsf eduldocslgsgj0223'), ([228, 754], 'Viney'), ([235, 1199], 'the'), ([489, 1989], 'during')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "date_meeting_transferred = {\n    '04/06/2005': 5137,\n    '04/02/2005': 17347,\n    '04/05/2005': 11940,\n    '04/03/2005': 9049,\n    '04/04/2005': 15025\n}\n\nmax_transferred = max(date_meeting_transferred.values())\nfor date, transferred in date_meeting_transferred.items():\n    if transferred == max_transferred:\n        print(date)",
        "execution": "04/02/2005",
        "error": "None",
        "extraction": "04/02/2005",
        "prediction": "04/02/2005",
        "true_false": true
    },
    "671": {
        "question": "What is the size of the semicircle rounded to 2 decimal places?",
        "image": "images/671.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "14.14",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "671",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 433,
            "img_height": 312,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([14, 8], 'YA'), ([14, 86], '3'), ([122, 62], 'f(x) = 9 = (x = 3)2'), ([370, 276], '6 X')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the size of the semicircle rounded to 2 decimal places?\nImage detected text: [([14, 8], 'YA'), ([14, 86], '3'), ([122, 62], 'f(x) = 9 = (x = 3)2'), ([370, 276], '6 X')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nradius = 3\nsemicircle_area = (math.pi * radius**2) / 2\nrounded_area = round(semicircle_area, 2)\n\nprint(rounded_area)",
        "execution": "14.14",
        "error": "None",
        "extraction": "7.07",
        "prediction": "7.07",
        "true_false": false
    },
    "672": {
        "question": "Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.",
        "image": "images/672.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "672",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 169,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 135], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.\nImage detected text: [([19, 135], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(ruler_start, ruler_end):\n    length = ruler_end - ruler_start\n    length = math.ceil(length)\n    return length\n\nruler_start = 19\nruler_end = 135\n\ntwig_length = measure_length(ruler_start, ruler_end)\nprint(\"The twig is about\", twig_length, \"inches long.\")",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "116",
        "prediction": "116",
        "true_false": false
    },
    "673": {
        "question": "Is the number of large green cars less than the number of brown rubber double buss?",
        "image": "images/673.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "673",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of large green cars less than the number of brown rubber double buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_green_cars = 10\nbrown_rubber_double_buss = 5\n\nif large_green_cars < brown_rubber_double_buss:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "674": {
        "question": "In the figure above, CDE is an equilateral triangle and ABCE is a square with an area of 1. What is the perimeter of polygon ABCDE?",
        "image": "images/674.jpg",
        "choices": [
            "4",
            "5",
            "6",
            "7",
            "8"
        ],
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "674",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 125,
            "img_height": 89,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, CDE is an equilateral triangle and ABCE is a square with an area of 1. What is the perimeter of polygon ABCDE?\nChoices:\n(A) 4\n(B) 5\n(C) 6\n(D) 7\n(E) 8\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\n# Calculate the side length of the square\nside_length_square = math.sqrt(1)\n# Calculate the side length of the equilateral triangle\nside_length_triangle = side_length_square\n\n# Calculate the perimeter of the polygon\nperimeter = 4 * side_length_square + side_length_triangle\n\nprint(perimeter)",
        "execution": "5.0",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": true
    },
    "675": {
        "question": "As shown in the figure, the cross section of a small reservoir dam is a right trapezoid, the width of crest BC is 6.0, the height of dam is 14.0, and the slope of the slope CD is i = 1.0:2.0, then the length of the dam bottom AD is ()",
        "image": "images/675.jpg",
        "choices": [
            "13m",
            "34m",
            "(6+14\u221a{3})m",
            "40m"
        ],
        "unit": null,
        "precision": null,
        "answer": "34m",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "675",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 183,
            "img_height": 83,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([36, 46], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the cross section of a small reservoir dam is a right trapezoid, the width of crest BC is 6.0, the height of dam is 14.0, and the slope of the slope CD is i = 1.0:2.0, then the length of the dam bottom AD is ()\nChoices:\n(A) 13m\n(B) 34m\n(C) (6+14\u221a{3})m\n(D) 40m\nImage detected text: [([36, 46], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nwidth_crest_BC = 6.0\nheight_dam = 14.0\nslope_CD = 1.0 / 2.0\n\nlength_dam_bottom_AD = width_crest_BC + (2 * height_dam * math.sqrt(3))\nprint(length_dam_bottom_AD)",
        "execution": "54.49742261192856",
        "error": "None",
        "extraction": "(6+14\u221a{3})m",
        "prediction": "(6+14\u221a{3})m",
        "true_false": false
    },
    "676": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/676.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "676",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([194, 22], 'Title'), ([310, 72], 'homer'), ([20, 74], '1'), ([310, 102], 'bull'), ([310, 134], 'hazard'), ([310, 168], 'spun'), ([25, 187], '{'), ([310, 196], 'chosen'), ([22, 286], '8'), ([394, 368], '10'), ([184, 394], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([194, 22], 'Title'), ([310, 72], 'homer'), ([20, 74], '1'), ([310, 102], 'bull'), ([310, 134], 'hazard'), ([310, 168], 'spun'), ([25, 187], '{'), ([310, 196], 'chosen'), ([22, 286], '8'), ([394, 368], '10'), ([184, 394], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [1, 8, 10]\nsmallest_bar = min(values)\nprint(smallest_bar)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "677": {
        "question": "Is the number of dirtbikes right of the large blue object less than the number of small green metallic cars in front of the tiny matte bicycle?",
        "image": "images/677.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "677",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of dirtbikes right of the large blue object less than the number of small green metallic cars in front of the tiny matte bicycle?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(dirtbikes, large_blue_object, small_green_metallic_cars, tiny_matte_bicycle):\n    if dirtbikes < small_green_metallic_cars:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndirtbikes = 5\nlarge_blue_object = 2\nsmall_green_metallic_cars = 8\ntiny_matte_bicycle = 3\n\nprint(compare_objects(dirtbikes, large_blue_object, small_green_metallic_cars, tiny_matte_bicycle))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "678": {
        "question": "Find x",
        "image": "images/678.jpg",
        "choices": [
            "21",
            "34",
            "58",
            "67"
        ],
        "unit": null,
        "precision": null,
        "answer": "58",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "678",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 267,
            "img_height": 149,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([64, 46], '16'), ([216, 50], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x\nChoices:\n(A) 21\n(B) 34\n(C) 58\n(D) 67\nImage detected text: [([64, 46], '16'), ([216, 50], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x = 16 * 10\nprint(x)",
        "execution": "160",
        "error": "None",
        "extraction": "160",
        "prediction": "67",
        "true_false": false
    },
    "679": {
        "question": "As shown in the figure, in \u25b1ABCD, the diagonal AC and BD intersect at point O, if AC = 12.0, BD = 8.0, AB = 7.0, then the perimeter of \u25b3OAB is ()",
        "image": "images/679.jpg",
        "choices": [
            "15",
            "17",
            "21",
            "27"
        ],
        "unit": null,
        "precision": null,
        "answer": "17",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "679",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 173,
            "img_height": 73,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in \u25b1ABCD, the diagonal AC and BD intersect at point O, if AC = 12.0, BD = 8.0, AB = 7.0, then the perimeter of \u25b3OAB is ()\nChoices:\n(A) 15\n(B) 17\n(C) 21\n(D) 27\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_perimeter(AC, BD, AB):\n    AO = math.sqrt((AC**2 + BD**2)/2)\n    BO = math.sqrt((AC**2 + BD**2)/2)\n    AB = 7.0\n\n    perimeter = AO + BO + AB\n    return perimeter\n\nAC = 12.0\nBD = 8.0\nAB = 7.0\n\nprint(triangle_perimeter(AC, BD, AB))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "21",
        "prediction": "21",
        "true_false": false
    },
    "680": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/680.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "680",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 440,
            "img_height": 303,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "681": {
        "question": "What is the largest city in the nation where this plane is headquartered?",
        "image": "images/681.jpg",
        "choices": [
            "hong kong",
            "osaka",
            "shanghai",
            "tokyo"
        ],
        "unit": null,
        "precision": null,
        "answer": "tokyo",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "681",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))",
        "execution": "tokyo",
        "error": "None",
        "extraction": "tokyo",
        "prediction": "tokyo",
        "true_false": true
    },
    "682": {
        "question": "From the above food web diagram, if all the grass dies then population of squirrel will",
        "image": "images/682.jpg",
        "choices": [
            "decrease",
            "remains the same",
            "increase",
            "NA"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "682",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 864,
            "img_height": 592,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([521, 93], '31CK BE.A4R'), ([1, 165], '4TOTI'), ([275, 203], '303C1'), ([775, 247], 'GR TTOL?'), ([447, 309], 'CARBOL'), ([627, 349], 'MOOSE'), ([153, 399], 'SQ TRREL'), ([175, 567], 'G?ASS'), ([447, 565], 'ETZRGREEN'), ([769, 561], 'BLACI'), ([767, 577], 'S?RUCE')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From the above food web diagram, if all the grass dies then population of squirrel will\nChoices:\n(A) decrease\n(B) remains the same\n(C) increase\n(D) NA\nImage detected text: [([521, 93], '31CK BE.A4R'), ([1, 165], '4TOTI'), ([275, 203], '303C1'), ([775, 247], 'GR TTOL?'), ([447, 309], 'CARBOL'), ([627, 349], 'MOOSE'), ([153, 399], 'SQ TRREL'), ([175, 567], 'G?ASS'), ([447, 565], 'ETZRGREEN'), ([769, 561], 'BLACI'), ([767, 577], 'S?RUCE')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def population_change(grass_alive):\n    if grass_alive:\n        return \"remains the same\"\n    else:\n        return \"decrease\"\n\ngrass_alive = False\n\nprint(population_change(grass_alive))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "683": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/683.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "683",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 157,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 123], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nImage detected text: [([19, 123], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nruler_length = 12  # inches\nnail_position = 19  # inches\n\nnail_length = round(nail_position / ruler_length)\nprint(nail_length)",
        "execution": "2",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "684": {
        "question": "$\\overline{CH} \\cong \\overline{KJ}$. Find $x$.",
        "image": "images/684.jpg",
        "choices": [
            "27",
            "54",
            "55",
            "83"
        ],
        "unit": null,
        "precision": null,
        "answer": "55",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "684",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 608,
            "img_height": 444,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([388, 182], '(2x'), ([454, 200], '5'), ([488, 182], '27)='), ([50, 216], 'G'), ([83, 329], '83')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: $\\overline{CH} \\cong \\overline{KJ}$. Find $x$.\nChoices:\n(A) 27\n(B) 54\n(C) 55\n(D) 83\nImage detected text: [([388, 182], '(2x'), ([454, 200], '5'), ([488, 182], '27)='), ([50, 216], 'G'), ([83, 329], '83')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq = Eq(2*x + 5, 27)\nsol = solve(eq, x)\nsol[0]",
        "execution": "",
        "error": "None",
        "extraction": "27",
        "prediction": "27",
        "true_false": false
    },
    "685": {
        "question": "What would happen to organism c if organism b increased?",
        "image": "images/685.jpg",
        "choices": [
            "decrease",
            "increase",
            "can't predict",
            "stay same"
        ],
        "unit": null,
        "precision": null,
        "answer": "increase",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "685",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 574,
            "img_height": 246,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([23, 31], 'Sun'), ([37, 185], 'Organism A'), ([145, 185], 'Organism B'), ([323, 185], 'Organism C'), ([473, 185], 'Organism'), ([199, 221], '(Not drawn t0 scale)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would happen to organism c if organism b increased?\nChoices:\n(A) decrease\n(B) increase\n(C) can't predict\n(D) stay same\nImage detected text: [([23, 31], 'Sun'), ([37, 185], 'Organism A'), ([145, 185], 'Organism B'), ([323, 185], 'Organism C'), ([473, 185], 'Organism'), ([199, 221], '(Not drawn t0 scale)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def organism_c_response(organism_b_increase):\n    if organism_b_increase:\n        return \"increase\"\n    else:\n        return \"can't predict\"\n\norganism_b_increase = True\n\nprint(organism_c_response(organism_b_increase))",
        "execution": "increase",
        "error": "None",
        "extraction": "increase",
        "prediction": "increase",
        "true_false": true
    },
    "686": {
        "question": "Is this function invertible?",
        "image": "images/686.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "686",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 731,
            "img_height": 442,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([649, 221], '~X')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this function invertible?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([649, 221], '~X')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_invertible(function):\n    # Check if the function is one-to-one\n    # If the function is one-to-one, it is invertible\n    # If the function is not one-to-one, it is not invertible\n    return \"Yes\" if \"one-to-one\" in function else \"No\"\n\nfunction = \"~X is a one-to-one function\"\nprint(is_invertible(function))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "687": {
        "question": "What could happen that would increase the number of krill?",
        "image": "images/687.jpg",
        "choices": [
            "increase in phytoplankton",
            "decrease in penguins",
            "increase in fish",
            "increase in birds"
        ],
        "unit": null,
        "precision": null,
        "answer": "increase in phytoplankton",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "687",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 576,
            "img_height": 396,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([245, 47], 'smaller toothed'), ([267, 61], 'whales'), ([31, 71], 'baleen whale'), ([255, 125], 'leopard seal'), ([477, 145], 'elephant sea'), ([376, 150], 'penguins'), ([197, 177], 'birds'), ([457, 229], 'fish'), ([15, 239], 'other seals'), ([429, 271], 'other herbivorous'), ([107, 277], 'carnivorous'), ([323, 281], 'krill'), ([107, 293], 'zooplankton'), ([445, 287], 'zooplankton'), ([273, 381], 'phytoplankton')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What could happen that would increase the number of krill?\nChoices:\n(A) increase in phytoplankton\n(B) decrease in penguins\n(C) increase in fish\n(D) increase in birds\nImage detected text: [([245, 47], 'smaller toothed'), ([267, 61], 'whales'), ([31, 71], 'baleen whale'), ([255, 125], 'leopard seal'), ([477, 145], 'elephant sea'), ([376, 150], 'penguins'), ([197, 177], 'birds'), ([457, 229], 'fish'), ([15, 239], 'other seals'), ([429, 271], 'other herbivorous'), ([107, 277], 'carnivorous'), ([323, 281], 'krill'), ([107, 293], 'zooplankton'), ([445, 287], 'zooplankton'), ([273, 381], 'phytoplankton')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "increase_phytoplankton = True\ndecrease_penguins = False\nincrease_fish = False\nincrease_birds = False\n\nif increase_phytoplankton:\n    print(\"The number of krill would increase.\")\nelif decrease_penguins:\n    print(\"The number of krill would decrease.\")\nelif increase_fish:\n    print(\"The number of krill would increase.\")\nelif increase_birds:\n    print(\"The number of krill would increase.\")",
        "execution": "The number of krill would increase.",
        "error": "None",
        "extraction": "increase_phytoplankton",
        "prediction": "increase in phytoplankton",
        "true_false": true
    },
    "688": {
        "question": "What is the minimum age group shown in the \u2018plots\u2019?",
        "image": "images/688.jpg",
        "choices": [
            "11-15",
            "21-25",
            "6-10",
            "16-20",
            "0-5"
        ],
        "unit": null,
        "precision": null,
        "answer": "0-5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "688",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 3160,
            "img_height": 2136,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([291, 338], '50-'), ([1220, 328], 'TOTAL GROUP'), ([382, 347], 'BOYS'), ([1220, 358], 'MALNOURISHED'), ([1225, 386], 'Marasmus,'), ([291, 415], '48'), ([1223, 412], 'Prekwashiorkor,'), ([1224, 444], 'Kwashiorkor)'), ([291, 494], '46_'), ([2748, 553], '(2)'), ([289, 573], '44-'), ([1827, 568], '52'), ([2775, 595], 'BOYS'), ([2886, 595], 'TOTAL'), ([2886, 625], 'Group'), ([291, 649], '42'), ([1829, 649], '50'), ([2777, 649], 'GirLS'), ([205, 686], 'Cm'), ([2694, 698], 'MALNOURISHED'), ([2893, 699], 'BOYS'), ([291, 731], '40'), ([1827, 726], '48'), ([284, 812], '38'), ([1832, 805], '46'), ([2215, 855], '188888888870'), ([289, 884], '36-'), ([1837, 879], '44'), ([2228, 902], 'MALNOURISHED'), ([2424, 904], 'GirLS'), ([284, 963], '34'), ([1837, 960], '42'), ([1839, 1037], '40'), ([185, 1066], 'AGE ( mos'), ([393, 1069], '0-5'), ([467, 1071], '6-I1'), ([538, 1071], '12-17'), ([622, 1071], '18-23'), ([701, 1074], '24-29 30-35 36-41'), ([931, 1074], '42-47'), ([1010, 1076], '48-53'), ([1089, 1076], '54-59'), ([1178, 1079], '60 +'), ([284, 1123], '54'), ([1839, 1113], '38'), ([373, 1141], 'GIRLS'), ([869, 1155], '(2)'), ([284, 1200], '52'), ([1212, 1207], 'MALNOURISHED'), ([1844, 1195], '36'), ([284, 1279], '50'), ([1206, 1278], 'TOTAL GROuP'), ([1844, 1269], '34'), ([1210, 1311], 'Marasmus,'), ([1201, 1337], 'Prekwashiorkor,'), ([284, 1355], '48'), ([272, 1390], ''), ([1207, 1370], 'Kwashiorkor)'), ([1765, 1375], 'AGE](mos)'), ([2044, 1392], '6-Il'), ([2121, 1369], '12-17 18-23 24-2930-35 36-41 42-47 48-5354-59 60+'), ([195, 1397], 'Cm'), ([1968, 1392], '0-5'), ([281, 1434], '46'), ([1762, 1488], 'FIGURE 28'), ([1958, 1480], 'HEAD CIRCUMFERENCE'), ([2343, 1484], 'BY'), ([2399, 1480], 'SEX'), ([2484, 1479], 'AND'), ([2558, 1465], 'AGE , MALNOURISHED'), ([281, 1511], '44'), ([1855, 1540], 'CHILDREN (MARASMUS, PREKWASHIORKOR'), ([2548, 1532], 'AND KWASHIORKOR)'), ([281, 1590], '42'), ([1857, 1630], 'COMPARED'), ([2048, 1626], 'With TOTAL'), ([2270, 1618], 'GROUP, JORDAN'), ([281, 1669], '40'), ([275, 1747], '38'), ([210, 1847], 'AGE (mos'), ([388, 1849], '0-5'), ([464, 1852], '6-I1'), ([533, 1852], '12-17'), ([617, 1852], '18-23'), ([689, 1852], '24-29'), ([768, 1854], '30-35'), ([847, 1854], '36-41'), ([926, 1856], '42-47'), ([1002, 1856], '48-53 54-59'), ([1163, 1859], '60+'), ([1232, 1864], ''), ([201, 1895], 'FIGURE'), ([342, 1897], '27'), ([411, 1896], 'HEAD CIRCUMFERENCES'), ([812, 1903], 'OF'), ([868, 1902], 'MALNOURISHED CHILDREN'), ([201, 1937], 'COMPARED'), ([389, 1939], 'To TOTAL GROUP;'), ([690, 1942], 'JORDAN'), ([836, 1944], 'PEDIATRIC STUDY'), ([2390, 1963], '99'), ([785, 1982], '98'), ([1100, 2092], 'Source: https:IIWWW industrydocuments ucsi eduldocsipyyc0227')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the minimum age group shown in the \u2018plots\u2019?\nChoices:\n(A) 11-15\n(B) 21-25\n(C) 6-10\n(D) 16-20\n(E) 0-5\nImage detected text: [([291, 338], '50-'), ([1220, 328], 'TOTAL GROUP'), ([382, 347], 'BOYS'), ([1220, 358], 'MALNOURISHED'), ([1225, 386], 'Marasmus,'), ([291, 415], '48'), ([1223, 412], 'Prekwashiorkor,'), ([1224, 444], 'Kwashiorkor)'), ([291, 494], '46_'), ([2748, 553], '(2)'), ([289, 573], '44-'), ([1827, 568], '52'), ([2775, 595], 'BOYS'), ([2886, 595], 'TOTAL'), ([2886, 625], 'Group'), ([291, 649], '42'), ([1829, 649], '50'), ([2777, 649], 'GirLS'), ([205, 686], 'Cm'), ([2694, 698], 'MALNOURISHED'), ([2893, 699], 'BOYS'), ([291, 731], '40'), ([1827, 726], '48'), ([284, 812], '38'), ([1832, 805], '46'), ([2215, 855], '188888888870'), ([289, 884], '36-'), ([1837, 879], '44'), ([2228, 902], 'MALNOURISHED'), ([2424, 904], 'GirLS'), ([284, 963], '34'), ([1837, 960], '42'), ([1839, 1037], '40'), ([185, 1066], 'AGE ( mos'), ([393, 1069], '0-5'), ([467, 1071], '6-I1'), ([538, 1071], '12-17'), ([622, 1071], '18-23'), ([701, 1074], '24-29 30-35 36-41'), ([931, 1074], '42-47'), ([1010, 1076], '48-53'), ([1089, 1076], '54-59'), ([1178, 1079], '60 +'), ([284, 1123], '54'), ([1839, 1113], '38'), ([373, 1141], 'GIRLS'), ([869, 1155], '(2)'), ([284, 1200], '52'), ([1212, 1207], 'MALNOURISHED'), ([1844, 1195], '36'), ([284, 1279], '50'), ([1206, 1278], 'TOTAL GROuP'), ([1844, 1269], '34'), ([1210, 1311], 'Marasmus,'), ([1201, 1337], 'Prekwashiorkor,'), ([284, 1355], '48'), ([272, 1390], ''), ([1207, 1370], 'Kwashiorkor)'), ([1765, 1375], 'AGE](mos)'), ([2044, 1392], '6-Il'), ([2121, 1369], '12-17 18-23 24-2930-35 36-41 42-47 48-5354-59 60+'), ([195, 1397], 'Cm'), ([1968, 1392], '0-5'), ([281, 1434], '46'), ([1762, 1488], 'FIGURE 28'), ([1958, 1480], 'HEAD CIRCUMFERENCE'), ([2343, 1484], 'BY'), ([2399, 1480], 'SEX'), ([2484, 1479], 'AND'), ([2558, 1465], 'AGE , MALNOURISHED'), ([281, 1511], '44'), ([1855, 1540], 'CHILDREN (MARASMUS, PREKWASHIORKOR'), ([2548, 1532], 'AND KWASHIORKOR)'), ([281, 1590], '42'), ([1857, 1630], 'COMPARED'), ([2048, 1626], 'With TOTAL'), ([2270, 1618], 'GROUP, JORDAN'), ([281, 1669], '40'), ([275, 1747], '38'), ([210, 1847], 'AGE (mos'), ([388, 1849], '0-5'), ([464, 1852], '6-I1'), ([533, 1852], '12-17'), ([617, 1852], '18-23'), ([689, 1852], '24-29'), ([768, 1854], '30-35'), ([847, 1854], '36-41'), ([926, 1856], '42-47'), ([1002, 1856], '48-53 54-59'), ([1163, 1859], '60+'), ([1232, 1864], ''), ([201, 1895], 'FIGURE'), ([342, 1897], '27'), ([411, 1896], 'HEAD CIRCUMFERENCES'), ([812, 1903], 'OF'), ([868, 1902], 'MALNOURISHED CHILDREN'), ([201, 1937], 'COMPARED'), ([389, 1939], 'To TOTAL GROUP;'), ([690, 1942], 'JORDAN'), ([836, 1944], 'PEDIATRIC STUDY'), ([2390, 1963], '99'), ([785, 1982], '98'), ([1100, 2092], 'Source: https:IIWWW industrydocuments ucsi eduldocsipyyc0227')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "minimum_age_group = \"0-5\"\n\nprint(minimum_age_group)",
        "execution": "0-5",
        "error": "None",
        "extraction": "0-5",
        "prediction": "0-5",
        "true_false": true
    },
    "689": {
        "question": "Are these people sitting in a circle?",
        "image": "images/689.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "689",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are these people sitting in a circle?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_sitting_in_circle(people):\n    num_people = len(people)\n    for i in range(num_people):\n        if people[i] != people[(i+1) % num_people]:\n            return \"No\"\n    return \"Yes\"\n\npeople = ['person1', 'person2', 'person3', 'person4']\nprint(is_sitting_in_circle(people))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "690": {
        "question": "In the diagram above, lines M and N are parallel. All of the following are true except",
        "image": "images/690.jpg",
        "choices": [
            "a + b = j + l",
            "g = h",
            "c + f = f + b",
            "g + e + f + h = 360",
            "d + e = f + j"
        ],
        "unit": null,
        "precision": null,
        "answer": "d + e = f + j",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "690",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 625,
            "img_height": 558,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([40, 398], 'In the diagram above; lines M and Nare parallel. All of the following are true EXCEPT'), ([57, 422], 'a+b=j+l'), ([41, 449], 'b. g =h'), ([56, 468], 'c+f=f+b.'), ([41, 495], 'd. g + e+f+h=360.'), ([56, 514], 'd+e=f-j')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the diagram above, lines M and N are parallel. All of the following are true except\nChoices:\n(A) a + b = j + l\n(B) g = h\n(C) c + f = f + b\n(D) g + e + f + h = 360\n(E) d + e = f + j\nImage detected text: [([40, 398], 'In the diagram above; lines M and Nare parallel. All of the following are true EXCEPT'), ([57, 422], 'a+b=j+l'), ([41, 449], 'b. g =h'), ([56, 468], 'c+f=f+b.'), ([41, 495], 'd. g + e+f+h=360.'), ([56, 514], 'd+e=f-j')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_true_except(choices):\n    for choice in choices:\n        if choice != 'g = h':\n            return choice\n    return \"\"\n\nchoices = ['a + b = j + l', 'g = h', 'c + f = f + b', 'g + e + f + h = 360', 'd + e = f + j']\nprint(is_true_except(choices))",
        "execution": "a + b = j + l",
        "error": "None",
        "extraction": "B",
        "prediction": "g = h",
        "true_false": false
    },
    "691": {
        "question": "Calculate the missing item.",
        "image": "images/691.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "256",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "691",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 596,
            "img_height": 500,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([219, 53], '2'), ([490, 52], '2'), ([129, 105], '100'), ([405, 105], '196'), ([82, 172], '3'), ([491, 169], '2'), ([280, 326], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Calculate the missing item.\nImage detected text: [([219, 53], '2'), ([490, 52], '2'), ([129, 105], '100'), ([405, 105], '196'), ([82, 172], '3'), ([491, 169], '2'), ([280, 326], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_item = 100 - (2 + 2 + 3 + 2 + 2)\nprint(missing_item)",
        "execution": "89",
        "error": "None",
        "extraction": "89",
        "prediction": "89",
        "true_false": false
    },
    "692": {
        "question": "According to the given food chain if grasses dried up in summer, what is likely to happen?",
        "image": "images/692.jpg",
        "choices": [
            "Grasshoppers will decrease.",
            "shrews will become extinct",
            "owls will increase.",
            "None of the above"
        ],
        "unit": null,
        "precision": null,
        "answer": "Grasshoppers will decrease.",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "692",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 189,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([22, 14], 'energy'), ([101, 8], 'producer'), ([205, 11], 'primary'), ([343, 8], 'secondary'), ([496, 8], 'tertiary'), ([203, 36], 'consumer'), ([351, 37], 'consumer'), ([491, 36], 'consumer'), ([29, 129], 'sun'), ([118, 126], 'grass'), ([200, 124], 'grasshopper'), ([381, 125], 'shrew'), ([527, 127], 'owl')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: According to the given food chain if grasses dried up in summer, what is likely to happen?\nChoices:\n(A) Grasshoppers will decrease.\n(B) shrews will become extinct\n(C) owls will increase.\n(D) None of the above\nImage detected text: [([22, 14], 'energy'), ([101, 8], 'producer'), ([205, 11], 'primary'), ([343, 8], 'secondary'), ([496, 8], 'tertiary'), ([203, 36], 'consumer'), ([351, 37], 'consumer'), ([491, 36], 'consumer'), ([29, 129], 'sun'), ([118, 126], 'grass'), ([200, 124], 'grasshopper'), ([381, 125], 'shrew'), ([527, 127], 'owl')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_chain(grasses_dried_up):\n    if grasses_dried_up:\n        return \"Grasshoppers will decrease.\"\n    else:\n        return \"None of the above\"\n\ngrasses_dried_up = True\n\nprint(food_chain(grasses_dried_up))",
        "execution": "Grasshoppers will decrease.",
        "error": "None",
        "extraction": "Grasshoppers will decrease.",
        "prediction": "Grasshoppers will decrease.",
        "true_false": true
    },
    "693": {
        "question": "Is the orange larger than the car?",
        "image": "images/693.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "693",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the orange larger than the car?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_orange_larger(orange_size, car_size):\n    if orange_size > car_size:\n        return \"Yes\"\n    else:\n        return \"No\"\n\norange_size = 10\ncar_size = 8\n\nprint(is_orange_larger(orange_size, car_size))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "694": {
        "question": "\u5982\u56fe\uff0c\u5728\u83f1\u5f62ABCD\u4e2d\uff0cM\u3001N\u5206\u522b\u662fBC\u548cCD\u7684\u4e2d\u70b9\uff0cNP\u22a5AB\u4e8e\u70b9P\uff0c\u8fde\u63a5MP\uff0e\u82e5\u2220DAB\uff1d40\u00b0\uff0c\u5219\u2220MPB\uff1d\uff08\uff09",
        "image": "images/694.jpg",
        "choices": [
            "125\u00b0",
            "120\u00b0",
            "115\u00b0",
            "110\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "110\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "694",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 158,
            "img_height": 85,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u83f1\u5f62ABCD\u4e2d\uff0cM\u3001N\u5206\u522b\u662fBC\u548cCD\u7684\u4e2d\u70b9\uff0cNP\u22a5AB\u4e8e\u70b9P\uff0c\u8fde\u63a5MP\uff0e\u82e5\u2220DAB\uff1d40\u00b0\uff0c\u5219\u2220MPB\uff1d\uff08\uff09\nChoices:\n(A) 125\u00b0\n(B) 120\u00b0\n(C) 115\u00b0\n(D) 110\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_DAB(angle_DAB):\n    angle_DAB = math.radians(angle_DAB)\n    angle_DAB = math.tan(angle_DAB)\n    angle_DAB = math.degrees(angle_DAB)\n    angle_DAB = round(angle_DAB)\n    return angle_DAB\n\nangle_DAB = 40\nangle_DAB = find_angle_DAB(angle_DAB)\nangle_MPB = 180 - angle_DAB - 90\nangle_MPB = round(angle_MPB)\n\nprint(angle_MPB)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "115",
        "prediction": "115\u00b0",
        "true_false": false
    },
    "695": {
        "question": "Is Dark Salmon greater than Dark Orchid?",
        "image": "images/695.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "695",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 734,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([113, 11], 'title'), ([73, 57], 'Aqua'), ([57, 121], 'Maroon'), ([7, 153], '1'), ([29, 185], 'Dark Salmon'), ([9, 191], '1'), ([33, 249], 'Dark Orchid'), ([69, 313], 'Khaki'), ([707, 363], '100'), ([385, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Salmon greater than Dark Orchid?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([113, 11], 'title'), ([73, 57], 'Aqua'), ([57, 121], 'Maroon'), ([7, 153], '1'), ([29, 185], 'Dark Salmon'), ([9, 191], '1'), ([33, 249], 'Dark Orchid'), ([69, 313], 'Khaki'), ([707, 363], '100'), ([385, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_greater(color1, color2):\n    colors = {\n        'Aqua': 0,\n        'Maroon': 1,\n        'Dark Salmon': 2,\n        'Dark Orchid': 3,\n        'Khaki': 4\n    }\n\n    if colors[color1] > colors[color2]:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolor1 = 'Dark Salmon'\ncolor2 = 'Dark Orchid'\n\nprint(is_greater(color1, color2))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "696": {
        "question": "Erica has $1,525.00. Does she have enough to buy a motorcycle and a canoe?'",
        "image": "images/696.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "696",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 214,
            "img_height": 192,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 9], 'motorcycle'), ([145, 5], 's998.00'), ([9, 41], 'canoe'), ([143, 37], 'S562.00'), ([7, 71], 'kayak'), ([143, 69], 'S645.00'), ([9, 103], 'snowmobile'), ([145, 101], 's890.00'), ([9, 135], 'sailboat'), ([145, 133], 'S969.00'), ([7, 165], 'dirt bike'), ([143, 165], 'S643.00')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Erica has $1,525.00. Does she have enough to buy a motorcycle and a canoe?'\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 9], 'motorcycle'), ([145, 5], 's998.00'), ([9, 41], 'canoe'), ([143, 37], 'S562.00'), ([7, 71], 'kayak'), ([143, 69], 'S645.00'), ([9, 103], 'snowmobile'), ([145, 101], 's890.00'), ([9, 135], 'sailboat'), ([145, 133], 'S969.00'), ([7, 165], 'dirt bike'), ([143, 165], 'S643.00')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "motorcycle_price = 998.00\ncanoe_price = 562.00\n\ntotal_cost = motorcycle_price + canoe_price\n\nif total_cost <= 1525.00:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "no",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "697": {
        "question": "As shown in the figure, in the parallelogram ABCD, it is known that AB = 6.0, BC = 9.0, \u2220B = 30.0, then the area of \u200b\u200bthe parallelogram ABCD is ()",
        "image": "images/697.jpg",
        "choices": [
            "12",
            "18",
            "27",
            "54"
        ],
        "unit": null,
        "precision": null,
        "answer": "27",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "697",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 205,
            "img_height": 68,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the parallelogram ABCD, it is known that AB = 6.0, BC = 9.0, \u2220B = 30.0, then the area of \u200b\u200bthe parallelogram ABCD is ()\nChoices:\n(A) 12\n(B) 18\n(C) 27\n(D) 54\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 6.0\nBC = 9.0\nangle_B = 30.0\n\n# Calculate the height of the parallelogram\nheight = BC * math.sin(math.radians(angle_B))\n\n# Calculate the area of the parallelogram\narea = AB * height\n\narea",
        "execution": "",
        "error": "None",
        "extraction": "27",
        "prediction": "27",
        "true_false": true
    },
    "698": {
        "question": "In the triangle in the figure above, what is the value of x?",
        "image": "images/698.jpg",
        "choices": [
            "2*\\sqrt{3}",
            "6*\\sqrt{2}",
            "6*\\sqrt{3}",
            "6",
            "12"
        ],
        "unit": null,
        "precision": null,
        "answer": "2*\\sqrt{3}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "698",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 615,
            "img_height": 376,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([423, 67], '600'), ([73, 193], 'In the'), ([123, 188], 'triangle in the figure above; what is the value of 1?'), ([128, 254], '2v3'), ([140, 274], 'V'), ([71, 255], '8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the triangle in the figure above, what is the value of x?\nChoices:\n(A) 2*\\sqrt{3}\n(B) 6*\\sqrt{2}\n(C) 6*\\sqrt{3}\n(D) 6\n(E) 12\nImage detected text: [([423, 67], '600'), ([73, 193], 'In the'), ([123, 188], 'triangle in the figure above; what is the value of 1?'), ([128, 254], '2v3'), ([140, 274], 'V'), ([71, 255], '8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_x():\n    # Given side lengths of the triangle\n    a = 6\n    b = 6 * math.sqrt(3)\n\n    # Use Pythagorean theorem to find the length of the third side\n    c = math.sqrt(a**2 + b**2)\n\n    return c\n\nx = find_x()\nprint(x)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "6.0",
        "prediction": "6",
        "true_false": false
    },
    "699": {
        "question": "What is the age gap between the center and the rightmost person?",
        "image": "images/699.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "699",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 4577,
            "img_height": 2684,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1505, 84], 'World Cup'), ([3173, 155], '2013'), ([3274, 153], 'JVva'), ([829, 142], 'FIFA Club`'), ([3202, 216], 'TOYOTA'), ([502, 444], '2012'), ([608, 437], 'LEA'), ([1721, 391], 'by'), ([562, 480], 'QL'), ([1805, 1083], 'SAMS'), ([2194, 1067], 'Ca'), ([2591, 1103], 'CA'), ([2079, 1660], '1'), ([1266, 2433], 'FIFA Club World Cup Japan 2012 presented by TOYOTA'), ([2698, 12], '2012'), ([2256, 60], 'Japan'), ([3172, 136], 'Japan'), ([3228, 193], 'LLVbwonl'), ([3196, 258], 'HLIIMAHL'), ([1851, 313], 'TOYOTA'), ([1299, 447], 'presented'), ([498, 422], 'Japan'), ([534, 516], 'TOYOTA')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between the center and the rightmost person? (Unit: years)\nImage detected text: [([1505, 84], 'World Cup'), ([3173, 155], '2013'), ([3274, 153], 'JVva'), ([829, 142], 'FIFA Club`'), ([3202, 216], 'TOYOTA'), ([502, 444], '2012'), ([608, 437], 'LEA'), ([1721, 391], 'by'), ([562, 480], 'QL'), ([1805, 1083], 'SAMS'), ([2194, 1067], 'Ca'), ([2591, 1103], 'CA'), ([2079, 1660], '1'), ([1266, 2433], 'FIFA Club World Cup Japan 2012 presented by TOYOTA'), ([2698, 12], '2012'), ([2256, 60], 'Japan'), ([3172, 136], 'Japan'), ([3228, 193], 'LLVbwonl'), ([3196, 258], 'HLIIMAHL'), ([1851, 313], 'TOYOTA'), ([1299, 447], 'presented'), ([498, 422], 'Japan'), ([534, 516], 'TOYOTA')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def age_gap(text):\n    ages = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            ages.append(int(text[i]))\n    return max(ages) - min(ages)\n\ntext = \"The image shows a group of people standing together. The person in the center is 30 years old and the person on the right is 25 years old.\"\n\nprint(age_gap(text))",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "700": {
        "question": "\u5982\u56fe\uff0c\u2299O\u662f\u25b3ABC\u7684\u5916\u63a5\u5706\uff0cAB\uff1dBC\uff1d4\uff0c\u628a\u5f27AB\u6cbf\u5f26AB\u5411\u4e0b\u6298\u53e0\u4ea4BC\u4e8e\u70b9D\uff0c\u82e5\u70b9D\u4e3aBC\u4e2d\u70b9\uff0c\u5219AC\u957f\u4e3a\uff08\uff09",
        "image": "images/700.jpg",
        "choices": [
            "1",
            "2",
            "2\u221a{2}",
            "\u221a{6}"
        ],
        "unit": null,
        "precision": null,
        "answer": "2\u221a{2}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "700",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 144,
            "img_height": 132,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u2299O\u662f\u25b3ABC\u7684\u5916\u63a5\u5706\uff0cAB\uff1dBC\uff1d4\uff0c\u628a\u5f27AB\u6cbf\u5f26AB\u5411\u4e0b\u6298\u53e0\u4ea4BC\u4e8e\u70b9D\uff0c\u82e5\u70b9D\u4e3aBC\u4e2d\u70b9\uff0c\u5219AC\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 1\n(B) 2\n(C) 2\u221a{2}\n(D) \u221a{6}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_AC_length():\n    AB = 4\n    BC = 4\n    AD = AB / 2\n    CD = BC / 2\n    AC = math.sqrt(AD**2 + CD**2)\n    return AC\n\nprint(find_AC_length())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "2.8284271247461903",
        "prediction": "2\u221a{2}",
        "true_false": true
    },
    "701": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/701.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "701",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 109,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 79], 'Ocmn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 79], 'Ocmn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef measure_length(line_text):\n    # Extract the numerical value from the line text\n    match = re.search(r'\\d+', line_text)\n    if match:\n        length = int(match.group())\n        return length\n    else:\n        return None\n\nline_text = 'The line is about 5 centimeters long.'\nlength = measure_length(line_text)\nprint(length)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "702": {
        "question": "What is cumulative increase in weight ( in grams) for \"GROUP A\" in third week ( give an approximate value) ?",
        "image": "images/702.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "400",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "702",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1754,
            "img_height": 2237,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is cumulative increase in weight ( in grams) for \"GROUP A\" in third week ( give an approximate value) ?\nImage detected text: [([465, 421], '500'), ([1138, 534], 'GROUP'), ([1138, 555], '42 \" POWDER'), ([417, 579], '3'), ([468, 634], '400'), ([419, 715], '2'), ([1056, 784], 'GROUP'), ([1157, 787], 'B'), ([419, 762], '0'), ([1056, 810], '21 % POWDER'), ([470, 842], '300'), ([419, 907], '2'), ([417, 953], '1'), ([470, 1052], '200'), ([1140, 1150], 'GROUP'), ([1241, 1153], 'C'), ([1141, 1174], 'CONTROL'), ([417, 1137], '1'), ([472, 1262], '100'), ([908, 1496], '3'), ([874, 1538], 'WEEKS'), ([332, 1718], '5'), ([420, 1716], 'Average increases in weight of the two experimental groups (A and B)'), ([423, 1759], 'and of the'), ([584, 1752], 'unsupplemented control group (C).'), ([394, 2192], 'Source\" https IJW industrydocuments ucsf eduldocslykwc0228'), ([258, 1714], 'Fig.')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "cumulative_increase = 0\n\nfor i in range(len(detected_text)):\n    if detected_text[i][1] == 'GROUP A':\n        if detected_text[i+1][1] == '3':\n            cumulative_increase = int(detected_text[i+2][1]) + int(detected_text[i+4][1]) + int(detected_text[i+6][1])\n            break\n\nprint(cumulative_increase)",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "900",
        "prediction": "900",
        "true_false": false
    },
    "703": {
        "question": "What is the sum of highest value and lowest value of navy blue bar?",
        "image": "images/703.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "2372.1",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "703",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([73, 41], '500'), ([71, 89], '000'), ([43, 115], '8'), ([71, 135], '500'), ([43, 139], '1'), ([199, 165], '070.4'), ([613, 171], '301.7'), ([71, 183], '000'), ([405, 179], '181-9'), ([46, 194], ''), ([73, 231], '500'), ([43, 235], '1'), ([71, 279], '000'), ([44, 284], '1'), ([207, 293], '658'), ([405, 305], '461.3'), ([619, 303], '481'), ([72, 328], '500'), ([197, 389], '2009'), ([403, 391], '2010'), ([609, 391], '201'), ([189, 429], 'Over_The-'), ([255, 429], 'Counter (OTC)'), ([373, 429], 'Fixed odds betting terminals (FOBTs)'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of highest value and lowest value of navy blue bar?\nImage detected text: [([73, 41], '500'), ([71, 89], '000'), ([43, 115], '8'), ([71, 135], '500'), ([43, 139], '1'), ([199, 165], '070.4'), ([613, 171], '301.7'), ([71, 183], '000'), ([405, 179], '181-9'), ([46, 194], ''), ([73, 231], '500'), ([43, 235], '1'), ([71, 279], '000'), ([44, 284], '1'), ([207, 293], '658'), ([405, 305], '461.3'), ([619, 303], '481'), ([72, 328], '500'), ([197, 389], '2009'), ([403, 391], '2010'), ([609, 391], '201'), ([189, 429], 'Over_The-'), ([255, 429], 'Counter (OTC)'), ([373, 429], 'Fixed odds betting terminals (FOBTs)'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "navy_blue_bar_values = [500, 8, 500, 1, 70.4, 301.7, 500, 181.9, 500, 1, 658, 461.3, 481, 500, 2009, 2010, 201]\n\nhighest_value = max(navy_blue_bar_values)\nlowest_value = min(navy_blue_bar_values)\n\nsum_of_values = highest_value + lowest_value\nprint(sum_of_values)",
        "execution": "2011",
        "error": "None",
        "extraction": "670.4",
        "prediction": "670.4",
        "true_false": false
    },
    "704": {
        "question": "Which two puzzle pieces form the larger square?",
        "image": "images/704.jpg",
        "choices": [
            "1 & 2",
            "1 & 3",
            "1 & 4",
            "2 & 3",
            "2 & 4"
        ],
        "unit": null,
        "precision": null,
        "answer": "1 & 3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "704",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 396,
            "img_height": 440,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which two puzzle pieces form the larger square?\nChoices:\n(A) 1 & 2\n(B) 1 & 3\n(C) 1 & 4\n(D) 2 & 3\n(E) 2 & 4\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_larger_square(pieces):\n    for i in range(len(pieces)):\n        for j in range(i+1, len(pieces)):\n            if pieces[i] + pieces[j] == \"larger square\":\n                return (i+1, j+1)\n    return \"\"\n\npieces = ['1', '2', '3', '4']\nprint(find_larger_square(pieces))",
        "execution": "",
        "error": "None",
        "extraction": "(C) 1 & 4",
        "prediction": "1 & 4",
        "true_false": false
    },
    "705": {
        "question": "Is the heart wider than more than half the width of the thorax?",
        "image": "images/705.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "705",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 419,
            "img_height": 512,
            "source": "VQA-RAD",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "medical image",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'CR9500503141'), ([290, 0], 'NIH8i8igel Geeter'), ([17, 47], '1**0 200502220800uu ^R'), ([317, 47], 'Acc: DX05OS \"'), ([343, 61], '2005'), ([383, 61], '3622'), ([283, 77], 'Acq'), ([341, 75], '216.18'), ([23, 105], 'CHASTT'), ([81, 107], 'PA'), ([1, 121], 'ERECT'), ([29, 491], '(351554'), ([75, 491], 'Obbd-40az-925b'), ([165, 491], 'Easa5aeb6i?'), ([241, 491], 'Uploadel'), ([294, 492], 'Pusei'), ([343, 491], 'Patterson'), ([124, 502], 'amure'), ([185, 499], 'Leah Hill 03'), ([249, 499], '22-2005')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the heart wider than more than half the width of the thorax?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([0, 0], 'CR9500503141'), ([290, 0], 'NIH8i8igel Geeter'), ([17, 47], '1**0 200502220800uu ^R'), ([317, 47], 'Acc: DX05OS \"'), ([343, 61], '2005'), ([383, 61], '3622'), ([283, 77], 'Acq'), ([341, 75], '216.18'), ([23, 105], 'CHASTT'), ([81, 107], 'PA'), ([1, 121], 'ERECT'), ([29, 491], '(351554'), ([75, 491], 'Obbd-40az-925b'), ([165, 491], 'Easa5aeb6i?'), ([241, 491], 'Uploadel'), ([294, 492], 'Pusei'), ([343, 491], 'Patterson'), ([124, 502], 'amure'), ([185, 499], 'Leah Hill 03'), ([249, 499], '22-2005')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "heart_width = 10\nthorax_width = 20\n\nif heart_width > thorax_width/2:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "706": {
        "question": "Find the image of the dot (8,-2) under a clockwise rotation by 270\u00b0 about the origin.\"",
        "image": "images/706.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E"
        ],
        "unit": null,
        "precision": null,
        "answer": "C",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "706",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 432,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the image of the dot (8,-2) under a clockwise rotation by 270\u00b0 about the origin.\"\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef rotate_point(x, y, angle):\n    angle_rad = math.radians(angle)\n    new_x = x * math.cos(angle_rad) - y * math.sin(angle_rad)\n    new_y = x * math.sin(angle_rad) + y * math.cos(angle_rad)\n    return (new_x, new_y)\n\npoint = (8, -2)\nangle = 270\n\nnew_point = rotate_point(point[0], point[1], angle)\nprint(new_point)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "(-2.0, -8.0)",
        "prediction": "A",
        "true_false": false
    },
    "707": {
        "question": "\u5982\u56fe\uff0ca\u2225b\uff0c\u22201\uff1d60\u00b0\uff0c\u5219\u22202\u7684\u5927\u5c0f\u662f\uff08\uff09",
        "image": "images/707.jpg",
        "choices": [
            "60\u00b0",
            "80\u00b0",
            "100\u00b0",
            "120\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "120\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "707",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 154,
            "img_height": 120,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0ca\u2225b\uff0c\u22201\uff1d60\u00b0\uff0c\u5219\u22202\u7684\u5927\u5c0f\u662f\uff08\uff09\nChoices:\n(A) 60\u00b0\n(B) 80\u00b0\n(C) 100\u00b0\n(D) 120\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_2(angle_1):\n    angle_2 = 180 - angle_1\n    return angle_2\n\nangle_1 = 60\nangle_2 = angle_2(angle_1)\nprint(angle_2)",
        "execution": "120",
        "error": "None",
        "extraction": "120",
        "prediction": "120\u00b0",
        "true_false": true
    },
    "708": {
        "question": "As shown in the figure, the light source P is directly above the crossbar AB, the shadow of AB under the light is CD, AB \u2225 CD, AB = 2.0, CD = 5.0, the distance between point P and CD is 3.0, then the distance between AB and CD is ().",
        "image": "images/708.jpg",
        "choices": [
            "\\frac{6}{5}",
            "\\frac{7}{6}",
            "\\frac{9}{5}",
            "\\frac{15}{2}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{9}{5}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "708",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 156,
            "img_height": 110,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the light source P is directly above the crossbar AB, the shadow of AB under the light is CD, AB \u2225 CD, AB = 2.0, CD = 5.0, the distance between point P and CD is 3.0, then the distance between AB and CD is ().\nChoices:\n(A) \\frac{6}{5}\n(B) \\frac{7}{6}\n(C) \\frac{9}{5}\n(D) \\frac{15}{2}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AB = 2.0\nCD = 5.0\ndistance_P_CD = 3.0\n\ndistance_AB_CD = (AB / distance_P_CD) * CD\ndistance_AB_CD",
        "execution": "",
        "error": "None",
        "extraction": "9/5",
        "prediction": "\\frac{9}{5}",
        "true_false": true
    },
    "709": {
        "question": "What is the value of f(0)?",
        "image": "images/709.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "709",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 552,
            "img_height": 393,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of f(0)?\nImage detected text: [([217, 5], '10'), ([14, 190], 'fcx)'), ([81, 193], '12x'), ([138, 192], '3/+1'), ([525, 313], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    return 10 + 12*x + 3/(x+1)\n\nvalue = f(0)\nprint(value)",
        "execution": "13.0",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "710": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/710.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "710",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2293,
            "img_height": 1555,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "711": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/711.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "711",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 369,
            "img_height": 270,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "712": {
        "question": "What is the perimeter of the shape?",
        "image": "images/712.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "712",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 258,
            "img_height": 244,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([29, 91], '3 yd'), ([195, 91], '3 yd'), ([113, 225], '3 yd')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the shape?\nImage detected text: [([29, 91], '3 yd'), ([195, 91], '3 yd'), ([113, 225], '3 yd')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 3\nside2 = 3\nside3 = 3\n\nperimeter = side1 + side2 + side3\nprint(perimeter)",
        "execution": "9",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": true
    },
    "713": {
        "question": "Find $x$.",
        "image": "images/713.jpg",
        "choices": [
            "3",
            "4",
            "6",
            "7"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "713",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 521,
            "img_height": 422,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([103, 27], '6x + 2'), ([429, 189], '10'), ([82, 230], '9x _ 2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $x$.\nChoices:\n(A) 3\n(B) 4\n(C) 6\n(D) 7\nImage detected text: [([103, 27], '6x + 2'), ([429, 189], '10'), ([82, 230], '9x _ 2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq1 = Eq(6*x + 2, 10)\neq2 = Eq(9*x - 2, 10)\n\nsol1 = solve(eq1, x)\nsol2 = solve(eq2, x)\n\nprint(sol1)\nprint(sol2)",
        "execution": "[4/3]\n[4/3]",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "714": {
        "question": "Is the number of large brown rubber motorbikes in front of the big motorbike greater than the number of big green sedans?",
        "image": "images/714.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "714",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of large brown rubber motorbikes in front of the big motorbike greater than the number of big green sedans?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_vehicle_numbers(caption):\n    large_brown_rubber_motorbikes = 0\n    big_green_sedans = 0\n\n    if \"large brown rubber motorbikes\" in caption:\n        large_brown_rubber_motorbikes = int(caption[caption.index(\"large brown rubber motorbikes\")-2])\n    if \"big green sedans\" in caption:\n        big_green_sedans = int(caption[caption.index(\"big green sedans\")-2])\n\n    if large_brown_rubber_motorbikes > big_green_sedans:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"The image shows a street with several vehicles. In front of the big motorbike, there are 3 large brown rubber motorbikes. On the other side of the street, there are 2 big green sedans.\"\n\nprint(compare_vehicle_numbers(caption))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "715": {
        "question": "Is this a periodic function?",
        "image": "images/715.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "715",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1920,
            "img_height": 1920,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this a periodic function?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\nx = np.array([5, 3, 2, 3, 3, 5, -2, -3, 0, 6, -4])\ny = np.array([0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0])\n\ndef is_periodic(x, y):\n    unique_values = np.unique(x)\n    for value in unique_values:\n        indices = np.where(x == value)\n        if np.all(y[indices] == y[indices[0][0]]):\n            return True\n    return False\n\nif is_periodic(x, y):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "",
        "error": "name 'np' is not defined",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "716": {
        "question": "Find y.",
        "image": "images/716.jpg",
        "choices": [
            "16 \\sqrt { 2 }",
            "16 \\sqrt { 3 }",
            "32",
            "16 \\sqrt { 5 }"
        ],
        "unit": null,
        "precision": null,
        "answer": "16 \\sqrt { 5 }",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "716",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 427,
            "img_height": 196,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([45, 7], '8'), ([88, 94], '16')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find y.\nChoices:\n(A) 16 \\sqrt { 2 }\n(B) 16 \\sqrt { 3 }\n(C) 32\n(D) 16 \\sqrt { 5 }\nImage detected text: [([45, 7], '8'), ([88, 94], '16')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nx = 8\ny = math.sqrt(x) * 16\n\nprint(y)",
        "execution": "45.254833995939045",
        "error": "None",
        "extraction": "16 \\sqrt { 2 }",
        "prediction": "16 \\sqrt { 2 }",
        "true_false": false
    },
    "717": {
        "question": "Is \\int_1^{\\infty} {1\\over x^{0.99}} dx finite according to this graph ?\n",
        "image": "images/717.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "717",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 314,
            "img_height": 350,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([176, 32], '4'), ([114, 48], 'J='), ([132, 122], 'area = |00'), ([184, 192], 'area'), ([265, 197], '00'), ([159, 65], '9g')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is \\int_1^{\\infty} {1\\over x^{0.99}} dx finite according to this graph ?\n\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([176, 32], '4'), ([114, 48], 'J='), ([132, 122], 'area = |00'), ([184, 192], 'area'), ([265, 197], '00'), ([159, 65], '9g')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nintegral = sp.integrate(1/x**0.99, (x, 1, sp.oo))\n\nif sp.is_finite(integral):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "",
        "error": "expr not of form a*x**b: 0.994162299216064",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "718": {
        "question": "Jeffrey is the proud owner of an eclectic bow tie collection. He keeps track of how many bow ties he has, and organizes them by pattern and material. What is the probability that a randomly selected bow tie is designed with swirls and is made of velvet? Simplify any fractions.'",
        "image": "images/718.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.21",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "718",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 215,
            "img_height": 94,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([83, 7], 'Velvet'), ([153, 9], 'Cotton'), ([6, 36], 'Zigzags'), ([7, 71], 'Swiris')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Jeffrey is the proud owner of an eclectic bow tie collection. He keeps track of how many bow ties he has, and organizes them by pattern and material. What is the probability that a randomly selected bow tie is designed with swirls and is made of velvet? Simplify any fractions.'\nImage detected text: [([83, 7], 'Velvet'), ([153, 9], 'Cotton'), ([6, 36], 'Zigzags'), ([7, 71], 'Swiris')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_bow_ties = 100\nswirls_and_velvet_bow_ties = 20\n\nprobability = swirls_and_velvet_bow_ties / total_bow_ties\nprobability",
        "execution": "",
        "error": "None",
        "extraction": "0.2",
        "prediction": "0.2",
        "true_false": false
    },
    "719": {
        "question": "Brenda graphed the daily low temperature for 5 days. What is the range of the numbers?'",
        "image": "images/719.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "719",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 225,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([26, 4], 'Daily Iow temperature'), ([21, 37], 'Day'), ([78, 34], \"Temperature (A'C)\"), ([139, 67], '13'), ([1, 96], 'Saturday'), ([1, 126], 'Sunday'), ([139, 129], '13'), ([3, 161], 'Monday'), ([139, 161], '12'), ([3, 191], 'Tuesday'), ([139, 191], '20'), ([3, 62], 'Friday')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Brenda graphed the daily low temperature for 5 days. What is the range of the numbers?'\nImage detected text: [([26, 4], 'Daily Iow temperature'), ([21, 37], 'Day'), ([78, 34], \"Temperature (A'C)\"), ([139, 67], '13'), ([1, 96], 'Saturday'), ([1, 126], 'Sunday'), ([139, 129], '13'), ([3, 161], 'Monday'), ([139, 161], '12'), ([3, 191], 'Tuesday'), ([139, 191], '20'), ([3, 62], 'Friday')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "temperatures = [13, 13, 12, 20]\nrange_of_numbers = max(temperatures) - min(temperatures)\nprint(range_of_numbers)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "720": {
        "question": "When does the function value first reach 2?",
        "image": "images/720.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "720",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 362,
            "img_height": 350,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When does the function value first reach 2?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def find_first_value():\n    x = 0\n    while True:\n        if x == 2:\n            return x\n        x += 1\n\nprint(find_first_value())",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "721": {
        "question": "How many odd functions are in the graph?",
        "image": "images/721.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "721",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 441,
            "img_height": 297,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many odd functions are in the graph?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\ndef count_odd_functions(graph):\n    count = 0\n    for i in range(len(graph)):\n        if np.all(graph[i] == -graph[i]):\n            count += 1\n    return count\n\ngraph = np.array([1, -2, 3, -4, 5])\nprint(count_odd_functions(graph))",
        "execution": "",
        "error": "name 'np' is not defined",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "722": {
        "question": "Is Deep Sky Blue the high median?",
        "image": "images/722.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "722",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 677,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([151, 11], 'title'), ([83, 45], 'Dark Cyan'), ([93, 85], 'Sky Blue'), ([61, 125], 'Deep Sky Blue'), ([7, 153], '1'), ([85, 165], 'Chocolate'), ([9, 191], '1'), ([85, 205], 'Deep Pink'), ([89, 245], 'Dim Gray'), ([33, 285], 'Medium Periwinkle'), ([55, 325], 'Rebecca Purple'), ([649, 363], '100'), ([375, 383], 'raris label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Deep Sky Blue the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([151, 11], 'title'), ([83, 45], 'Dark Cyan'), ([93, 85], 'Sky Blue'), ([61, 125], 'Deep Sky Blue'), ([7, 153], '1'), ([85, 165], 'Chocolate'), ([9, 191], '1'), ([85, 205], 'Deep Pink'), ([89, 245], 'Dim Gray'), ([33, 285], 'Medium Periwinkle'), ([55, 325], 'Rebecca Purple'), ([649, 363], '100'), ([375, 383], 'raris label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_high_median(color, colors):\n    median_index = len(colors) // 2\n    median_color = colors[median_index]\n\n    if color == median_color:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolors = ['Dark Cyan', 'Sky Blue', 'Deep Sky Blue', 'Chocolate', 'Deep Pink', 'Dim Gray', 'Medium Periwinkle', 'Rebecca Purple']\ncolor = 'Deep Sky Blue'\n\nprint(is_high_median(color, colors))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "723": {
        "question": "Is the function convex?",
        "image": "images/723.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "723",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 468,
            "img_height": 277,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the function convex?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_convex(points):\n    n = len(points)\n    if n < 3:\n        return False\n\n    orientation = 0\n    for i in range(n):\n        p1 = points[i]\n        p2 = points[(i + 1) % n]\n        p3 = points[(i + 2) % n]\n\n        cross_product = (p2[0] - p1[0]) * (p3[1] - p2[1]) - (p2[1] - p1[1]) * (p3[0] - p2[0])\n\n        if cross_product == 0:\n            continue\n        elif orientation == 0:\n            orientation = cross_product\n        elif cross_product * orientation < 0:\n            return False\n\n    return True\n\npoints = [(0, 0), (1, 1), (2, 0), (1, -1)]\nprint(is_convex(points))",
        "execution": "True",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "724": {
        "question": "Does Rebecca Purple have the minimum area under the curve?",
        "image": "images/724.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "724",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 638,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 155], '9'), ([209, 183], 'Mint'), ([271, 182], 'Rebecca Purple'), ([419, 183], 'Dark Cyan'), ([9, 191], '1'), ([595, 363], '100'), ([305, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Rebecca Purple have the minimum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 155], '9'), ([209, 183], 'Mint'), ([271, 182], 'Rebecca Purple'), ([419, 183], 'Dark Cyan'), ([9, 191], '1'), ([595, 363], '100'), ([305, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.title('Graph')\n\nplt.fill_between(x, y, color='purple', alpha=0.5)\n\nplt.show()\n\n# The area under the curve can be calculated by finding the integral of the function.\n# Since the function is a straight line, the area under the curve is a triangle.\n# The base of the triangle is the x-axis range (1 to 5) and the height is the maximum y-value (10).\n# The area of a triangle is (base * height) / 2.\n\nbase = max(x) - min(x)\nheight = max(y)\n\narea = (base * height) / 2\n\nif area == min(area):\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "",
        "error": "'float' object is not iterable",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "725": {
        "question": "In Figure, suppose that Barbara's velocity relative to Alex is a constant $v_{B A}=52 \\mathrm{~km} / \\mathrm{h}$ and car $P$ is moving in the negative direction of the $x$ axis.\r\n(a) If Alex measures a constant $v_{P A}=-78 \\mathrm{~km} / \\mathrm{h}$ for car $P$, what velocity $v_{P B}$ will Barbara measure?",
        "image": "images/725.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-130",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "725",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 976,
            "img_height": 690,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([396, 18], 'Frame B moves past'), ([394, 91], 'frame A while both'), ([394, 161], 'observe P.'), ([140, 328], 'Frame A'), ([411, 329], 'Frame B'), ([803, 413], 'P'), ([730, 508], 'XPB'), ([860, 590], 'X'), ([622, 630], 'XPA'), ([728, 630], 'XPB + XBA'), ([571, 519], 'VBA'), ([356, 626], 'XBA')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In Figure, suppose that Barbara's velocity relative to Alex is a constant $v_{B A}=52 \\mathrm{~km} / \\mathrm{h}$ and car $P$ is moving in the negative direction of the $x$ axis.\r\n(a) If Alex measures a constant $v_{P A}=-78 \\mathrm{~km} / \\mathrm{h}$ for car $P$, what velocity $v_{P B}$ will Barbara measure?\nImage detected text: [([396, 18], 'Frame B moves past'), ([394, 91], 'frame A while both'), ([394, 161], 'observe P.'), ([140, 328], 'Frame A'), ([411, 329], 'Frame B'), ([803, 413], 'P'), ([730, 508], 'XPB'), ([860, 590], 'X'), ([622, 630], 'XPA'), ([728, 630], 'XPB + XBA'), ([571, 519], 'VBA'), ([356, 626], 'XBA')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "v_BA = 52 # km/h\nv_PA = -78 # km/h\n\nv_PB = v_PA - v_BA\nprint(v_PB)",
        "execution": "-130",
        "error": "None",
        "extraction": "-130",
        "prediction": "-130",
        "true_false": true
    },
    "726": {
        "question": "Find x. Assume that any segment that appears to be tangent is tangent.",
        "image": "images/726.jpg",
        "choices": [
            "10",
            "30",
            "90",
            "120"
        ],
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "726",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 228,
            "img_height": 199,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([16, 12], '(4x + 50) ='), ([154, 58], '3x'), ([136, 144], \"30'\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x. Assume that any segment that appears to be tangent is tangent.\nChoices:\n(A) 10\n(B) 30\n(C) 90\n(D) 120\nImage detected text: [([16, 12], '(4x + 50) ='), ([154, 58], '3x'), ([136, 144], \"30'\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq1 = Eq(4*x + 50, 3*x)\neq2 = Eq(3*x, 30)\n\nsol = solve((eq1, eq2), (x))\nprint(sol)",
        "execution": "[]",
        "error": "None",
        "extraction": "30",
        "prediction": "30",
        "true_false": false
    },
    "727": {
        "question": "What is the difference between the largest and the smallest value in the chart?",
        "image": "images/727.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "70",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "727",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([233, 13], 'Title'), ([35, 29], '100'), ([15, 195], '8'), ([111, 413], 'par'), ([225, 411], 'bunch'), ([347, 408], 'timing')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between the largest and the smallest value in the chart?\nImage detected text: [([233, 13], 'Title'), ([35, 29], '100'), ([15, 195], '8'), ([111, 413], 'par'), ([225, 411], 'bunch'), ([347, 408], 'timing')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [100, 8]\ndifference = max(values) - min(values)\nprint(difference)",
        "execution": "92",
        "error": "None",
        "extraction": "92",
        "prediction": "92",
        "true_false": false
    },
    "728": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/728.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "728",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 69,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 39], 'Ocmn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 39], 'Ocmn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import re\n\ndef measure_length(line_text):\n    # Extract the numerical value from the line text\n    match = re.search(r'\\d+', line_text)\n    if match:\n        length = int(match.group())\n        return length\n    else:\n        return None\n\nline_text = 'The line is about 5 centimeters long.'\nlength = measure_length(line_text)\nprint(length)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "729": {
        "question": "What is the lowest accuracy reported in the whole chart?",
        "image": "images/729.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "729",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([65, 12], 'Accuracy of algorithms on different'), ([193, 37], 'datasets'), ([15, 71], '1'), ([14, 162], '3'), ([15, 253], '2'), ([35, 319], '0.0'), ([85, 317], '2.5'), ([137, 317], '5.0'), ([191, 315], '7.5'), ([239, 319], '10.0'), ([291, 315], '12.5'), ([343, 315], '15.0'), ([395, 315], '17.5'), ([195, 335], 'Accuracy'), ([199, 367], 'datasets'), ([173, 391], 'waiter'), ([295, 391], 'troop')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the lowest accuracy reported in the whole chart?\nImage detected text: [([65, 12], 'Accuracy of algorithms on different'), ([193, 37], 'datasets'), ([15, 71], '1'), ([14, 162], '3'), ([15, 253], '2'), ([35, 319], '0.0'), ([85, 317], '2.5'), ([137, 317], '5.0'), ([191, 315], '7.5'), ([239, 319], '10.0'), ([291, 315], '12.5'), ([343, 315], '15.0'), ([395, 315], '17.5'), ([195, 335], 'Accuracy'), ([199, 367], 'datasets'), ([173, 391], 'waiter'), ([295, 391], 'troop')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "lowest_accuracy = 100.0\n\ntext = [([65, 12], 'Accuracy of algorithms on different'), ([193, 37], 'datasets'), ([15, 71], '1'), ([14, 162], '3'), ([15, 253], '2'), ([35, 319], '0.0'), ([85, 317], '2.5'), ([137, 317], '5.0'), ([191, 315], '7.5'), ([239, 319], '10.0'), ([291, 315], '12.5'), ([343, 315], '15.0'), ([395, 315], '17.5'), ([195, 335], 'Accuracy'), ([199, 367], 'datasets'), ([173, 391], 'waiter'), ([295, 391], 'troop')]\n\nfor item in text:\n    if item[1].isdigit():\n        accuracy = float(item[1])\n        if accuracy < lowest_accuracy:\n            lowest_accuracy = accuracy\n\nprint(lowest_accuracy)",
        "execution": "1.0",
        "error": "None",
        "extraction": "0.0",
        "prediction": null,
        "true_false": false
    },
    "730": {
        "question": "In which year the market share of KLA is highest?",
        "image": "images/730.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2019",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "730",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([62, 44], '1257'), ([67, 109], '003'), ([189, 141], '25.8x'), ([397, 137], '23 15'), ([605, 159], '38.8'), ([67, 175], '7570'), ([399, 179], '69X'), ([191, 185], '62X'), ([44, 184], '1'), ([189, 213], '15.4x'), ([397, 207], '142x'), ([607, 219], '62X'), ([67, 241], '5070'), ([397, 245], '148x'), ([605, 243], '108x'), ([189, 253], '136x'), ([603, 271], '1233'), ([397, 291], '194X'), ([189, 301], '192x'), ([67, 307], '2576'), ([605, 311], '16.4x'), ([193, 349], '8x'), ([397, 345], '21-6x'), ([605, 353], '15.4%'), ([191, 391], '2018'), ([399, 391], '2019'), ([607, 391], '2020'), ([123, 431], 'ASML'), ([189, 431], 'Applied Materials'), ([327, 429], 'Tokyo Electron'), ([447, 431], 'Lam Research'), ([563, 431], 'KLA'), ([619, 431], 'Others'), ([681, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In which year the market share of KLA is highest?\nImage detected text: [([62, 44], '1257'), ([67, 109], '003'), ([189, 141], '25.8x'), ([397, 137], '23 15'), ([605, 159], '38.8'), ([67, 175], '7570'), ([399, 179], '69X'), ([191, 185], '62X'), ([44, 184], '1'), ([189, 213], '15.4x'), ([397, 207], '142x'), ([607, 219], '62X'), ([67, 241], '5070'), ([397, 245], '148x'), ([605, 243], '108x'), ([189, 253], '136x'), ([603, 271], '1233'), ([397, 291], '194X'), ([189, 301], '192x'), ([67, 307], '2576'), ([605, 311], '16.4x'), ([193, 349], '8x'), ([397, 345], '21-6x'), ([605, 353], '15.4%'), ([191, 391], '2018'), ([399, 391], '2019'), ([607, 391], '2020'), ([123, 431], 'ASML'), ([189, 431], 'Applied Materials'), ([327, 429], 'Tokyo Electron'), ([447, 431], 'Lam Research'), ([563, 431], 'KLA'), ([619, 431], 'Others'), ([681, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "market_share = {\n    'ASML': 15.4,\n    'Applied Materials': 16.4,\n    'Tokyo Electron': 21.6,\n    'Lam Research': 23.15,\n    'KLA': 25.8,\n    'Others': 38.8\n}\n\nmax_share = max(market_share.values())\nyear = [key for key, value in market_share.items() if value == max_share][0]\n\nprint(year)",
        "execution": "",
        "error": "name 'max_share' is not defined",
        "extraction": "2019",
        "prediction": "2019",
        "true_false": true
    },
    "731": {
        "question": "The train conductor made sure to count the number of passengers on each train. What is the smallest number of passengers? (Unit: passengers)",
        "image": "images/731.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "40",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "731",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 159,
            "img_height": 180,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Passengers per train'), ([41, 25], 'Stem'), ([87, 23], 'Leaf'), ([89, 117], '4 5 7'), ([89, 137], '3 9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The train conductor made sure to count the number of passengers on each train. What is the smallest number of passengers? (Unit: passengers)\nImage detected text: [([0, 0], 'Passengers per train'), ([41, 25], 'Stem'), ([87, 23], 'Leaf'), ([89, 117], '4 5 7'), ([89, 137], '3 9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "passengers_per_train = [457, 439, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457",
        "execution": "",
        "error": "unexpected EOF while parsing (<string>, line 1)",
        "extraction": "457",
        "prediction": "457",
        "true_false": false
    },
    "732": {
        "question": "Which organism would be most affected if there was a shortage of plants?",
        "image": "images/732.jpg",
        "choices": [
            "Grasshopper",
            "Snake",
            "Mouse",
            "Hawk"
        ],
        "unit": null,
        "precision": null,
        "answer": "Grasshopper",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "732",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1152,
            "img_height": 1080,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([428, 0], 'Trophic level'), ([3, 121], 'Hawk'), ([910, 124], 'Killer whale'), ([3, 286], 'Snake'), ([913, 293], 'Tuna'), ([5, 483], 'Mouse'), ([911, 487], 'Herring'), ([2, 689], 'Grasshopper'), ([915, 701], 'Zooplankton'), ([5, 903], 'Plant'), ([909, 903], 'Phytoplankton'), ([19, 1013], '^'), ([46, 1003], 'terrestrial food chain'), ([740, 1004], 'An aquatic food chain'), ([5, 1057], 'Copyright @ 2009 Pearson Education, Inc')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which organism would be most affected if there was a shortage of plants?\nChoices:\n(A) Grasshopper\n(B) Snake\n(C) Mouse\n(D) Hawk\nImage detected text: [([428, 0], 'Trophic level'), ([3, 121], 'Hawk'), ([910, 124], 'Killer whale'), ([3, 286], 'Snake'), ([913, 293], 'Tuna'), ([5, 483], 'Mouse'), ([911, 487], 'Herring'), ([2, 689], 'Grasshopper'), ([915, 701], 'Zooplankton'), ([5, 903], 'Plant'), ([909, 903], 'Phytoplankton'), ([19, 1013], '^'), ([46, 1003], 'terrestrial food chain'), ([740, 1004], 'An aquatic food chain'), ([5, 1057], 'Copyright @ 2009 Pearson Education, Inc')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_affected_organism(text):\n    organisms = {\n        'Grasshopper': 0,\n        'Snake': 0,\n        'Mouse': 0,\n        'Hawk': 0\n    }\n\n    for line in text:\n        if 'Plant' in line:\n            organisms['Grasshopper'] += 1\n            organisms['Snake'] += 1\n            organisms['Mouse'] += 1\n            organisms['Hawk'] += 1\n\n    most_affected = max(organisms, key=organisms.get)\n    return most_affected\n\ntext = ['Trophic level', 'Hawk', 'Killer whale', 'Snake', 'Tuna', 'Mouse', 'Herring', 'Grasshopper', 'Zooplankton', 'Plant', 'Phytoplankton', '^', 'terrestrial food chain', 'An aquatic food chain', 'Copyright @ 2009 Pearson Education, Inc']\n\nprint(most_affected_organism(text))",
        "execution": "Grasshopper",
        "error": "None",
        "extraction": "Grasshopper",
        "prediction": "Grasshopper",
        "true_false": true
    },
    "733": {
        "question": "Square ABCD. CT: tangent to semicircle. Find the angle \u2220CTD. Return the numeric value.",
        "image": "images/733.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "63.4",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "733",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 972,
            "img_height": 1018,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([29, 37], 'B'), ([901, 25], 'C'), ([197, 521], 'T'), ([34, 928], 'A')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Square ABCD. CT: tangent to semicircle. Find the angle \u2220CTD. Return the numeric value.\nImage detected text: [([29, 37], 'B'), ([901, 25], 'C'), ([197, 521], 'T'), ([34, 928], 'A')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(BC, CT):\n    BT = BC - CT\n    angle_BCT = math.degrees(math.atan(BT / CT))\n    angle_CTD = 90 - angle_BCT\n    return angle_CTD\n\nBC = 901\nCT = 197\n\nangle_CTD = find_angle(BC, CT)\nprint(angle_CTD)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "angle_CTD = 90 - angle_BCT",
        "prediction": null,
        "true_false": false
    },
    "734": {
        "question": "Are there fewer double buss that are behind the aeroplane than things on the left side of the yellow double bus?",
        "image": "images/734.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "734",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer double buss that are behind the aeroplane than things on the left side of the yellow double bus?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_double_buses(caption):\n    count = 0\n    words = caption.split()\n    for i in range(len(words)-1):\n        if words[i] == \"double\" and words[i+1] == \"bus\":\n            count += 1\n    return count\n\ndef count_things_on_left(caption):\n    count = 0\n    words = caption.split()\n    for i in range(len(words)):\n        if words[i] == \"yellow\" and words[i+1] == \"double\" and words[i+2] == \"bus\":\n            break\n        count += 1\n    return count\n\ndef compare_counts(caption):\n    double_buses = count_double_buses(caption)\n    things_on_left = count_things_on_left(caption)\n    if double_buses < things_on_left:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncaption = \"The image shows a yellow double bus parked on the left side of the aeroplane. There are two double buses behind the aeroplane. There are also several things on the left side of the yellow double bus.\"\nprint(compare_counts(caption))",
        "execution": "",
        "error": "name 'count_double_buses' is not defined",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "735": {
        "question": "Is the number of big cyan things in front of the cyan rubber suv less than the number of big suvs that are behind the red bus?",
        "image": "images/735.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "735",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of big cyan things in front of the cyan rubber suv less than the number of big suvs that are behind the red bus?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(cyan_things, cyan_suv, red_bus, big_suv):\n    if cyan_things < big_suv:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ncyan_things = 5\ncyan_suv = 3\nred_bus = 2\nbig_suv = 4\n\nprint(compare_numbers(cyan_things, cyan_suv, red_bus, big_suv))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "736": {
        "question": "\u5982\u56fe\uff0c\u5df2\u77e5\u76f4\u7ebfa\u2225b\uff0c\u76f4\u89d2\u4e09\u89d2\u5f62ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0c\u82e5\u2220B\uff1d58\u00b0\uff0c\u90a3\u4e48\u22201\ufe63\u22202\uff1d\uff08\uff09",
        "image": "images/736.jpg",
        "choices": [
            "28\u00b0",
            "30\u00b0",
            "32\u00b0",
            "58\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "32\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "736",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 226,
            "img_height": 154,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([3, 79], ''), ([44, 80], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5df2\u77e5\u76f4\u7ebfa\u2225b\uff0c\u76f4\u89d2\u4e09\u89d2\u5f62ABC\u4e2d\uff0c\u2220C\uff1d90\u00b0\uff0c\u82e5\u2220B\uff1d58\u00b0\uff0c\u90a3\u4e48\u22201\ufe63\u22202\uff1d\uff08\uff09\nChoices:\n(A) 28\u00b0\n(B) 30\u00b0\n(C) 32\u00b0\n(D) 58\u00b0\nImage detected text: [([3, 79], ''), ([44, 80], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle_B = 58\nangle_C = 90\n\nangle_A = 180 - angle_B - angle_C\n\nangle_1 = angle_A\nangle_2 = 180 - angle_A\n\nresult = angle_1 - angle_2\n\nprint(result)",
        "execution": "-116",
        "error": "None",
        "extraction": "-2",
        "prediction": "32\u00b0",
        "true_false": true
    },
    "737": {
        "question": "Find the perimeter of the parallelogram.",
        "image": "images/737.jpg",
        "choices": [
            "32",
            "39",
            "46",
            "78"
        ],
        "unit": null,
        "precision": null,
        "answer": "78",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "737",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 352,
            "img_height": 179,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([272, 66], '16 ft'), ([34, 102], '60'), ([100, 142], '23 ft')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the perimeter of the parallelogram.\nChoices:\n(A) 32\n(B) 39\n(C) 46\n(D) 78\nImage detected text: [([272, 66], '16 ft'), ([34, 102], '60'), ([100, 142], '23 ft')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 16\nside2 = 60\nside3 = 23\n\nperimeter = 2 * (side1 + side2)\nprint(perimeter)",
        "execution": "152",
        "error": "None",
        "extraction": "32",
        "prediction": "32",
        "true_false": false
    },
    "738": {
        "question": "Is this function continuous?",
        "image": "images/738.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "738",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 383,
            "img_height": 268,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is this function continuous?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_continuous(function):\n    try:\n        result = function(0)\n        return True\n    except:\n        return False\n\n# Example usage\ndef continuous_function(x):\n    return x**2\n\nprint(is_continuous(continuous_function))",
        "execution": "True",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "739": {
        "question": "How much money does Hannah need to buy a baking dish and a cookie jar? (Unit: $)",
        "image": "images/739.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "23",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "739",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 201,
            "img_height": 160,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 7], 'frying pan'), ([161, 5], 'S48'), ([5, 34], 'baking dish'), ([161, 37], 'S10'), ([9, 69], 'casserole dish'), ([161, 69], 'S13'), ([9, 103], 'cookie jar'), ([161, 101], 'S13'), ([4, 130], 'rolling pin'), ([161, 133], 'S15')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Hannah need to buy a baking dish and a cookie jar? (Unit: $)\nImage detected text: [([7, 7], 'frying pan'), ([161, 5], 'S48'), ([5, 34], 'baking dish'), ([161, 37], 'S10'), ([9, 69], 'casserole dish'), ([161, 69], 'S13'), ([9, 103], 'cookie jar'), ([161, 101], 'S13'), ([4, 130], 'rolling pin'), ([161, 133], 'S15')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "baking_dish_price = 10.00\ncookie_jar_price = 13.00\n\nans = baking_dish_price + cookie_jar_price\nprint(ans)",
        "execution": "23.0",
        "error": "None",
        "extraction": "23.0",
        "prediction": null,
        "true_false": false
    },
    "740": {
        "question": "What percent of the stands are full?",
        "image": "images/740.jpg",
        "choices": [
            "15",
            "100",
            "50",
            "50"
        ],
        "unit": null,
        "precision": null,
        "answer": "15",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "740",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 375,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percent of the stands are full?\nChoices:\n(A) 15\n(B) 100\n(C) 50\n(D) 50\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def percent_full(occupied_stands, total_stands):\n    percent = (occupied_stands / total_stands) * 100\n    return percent\n\noccupied_stands = 75\ntotal_stands = 150\n\nprint(percent_full(occupied_stands, total_stands))",
        "execution": "50.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50",
        "true_false": false
    },
    "741": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/741.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "741",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1920,
            "img_height": 1080,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([127, 681], 'SPENCER IRACY'), ([125, 923], 'D')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([127, 681], 'SPENCER IRACY'), ([125, 923], 'D')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1990\nperson2_birth_year = 1995\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "742": {
        "question": "Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.",
        "image": "images/742.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "742",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 159,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 125], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the twig to the nearest inch. The twig is about (_) inches long.\nImage detected text: [([19, 125], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_length(ruler_start, ruler_end):\n    length = ruler_end - ruler_start\n    length = math.ceil(length)\n    return length\n\nruler_start = 19\nruler_end = 125\n\ntwig_length = measure_length(ruler_start, ruler_end)\nprint(\"The twig is about\", twig_length, \"inches long.\")",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "The twig is about 106 inches long.",
        "prediction": null,
        "true_false": false
    },
    "743": {
        "question": "What is the different between the highest unemployment rate and the lowest?",
        "image": "images/743.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "10.53",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "743",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([207, 59], '16.78%'), ([179, 77], '16.17%'), ([237, 111], '15.07%'), ([95, 129], '14.53%'), ([121, 145], '13.995'), ([149, 175], '13.045'), ([44, 226], ']'), ([265, 249], '10-66%'), ([61, 289], '1035'), ([701, 289], '3836'), ([673, 307], '8.83'), ([307, 313], '61%'), ([335, 355], '2896'), ([507, 347], '54%'), ([553, 349], '7.44%'), ([613, 353], '7.3%'), ([411, 357], '7.11%'), ([363, 385], '25%'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([598, 452], '2017'), ([627, 453], '\"2018'), ([88, 448], '1999'), ([112, 451], '2000'), ([142, 452], '2001'), ([169, 450], '2002'), ([198, 452], '2003'), ([224, 450], '2004'), ([256, 452], '2005'), ([284, 452], '2006'), ([309, 451], '2007'), ([342, 452], '2008'), ([370, 452], '2009'), ([395, 451], '2010'), ([427, 453], '\"2011'), ([456, 452], '2012'), ([508, 429], '3'), ([512, 452], '2014'), ([542, 452], '2015'), ([570, 452], '2016'), ([656, 452], '2019'), ([684, 452], '2020')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the different between the highest unemployment rate and the lowest?\nImage detected text: [([207, 59], '16.78%'), ([179, 77], '16.17%'), ([237, 111], '15.07%'), ([95, 129], '14.53%'), ([121, 145], '13.995'), ([149, 175], '13.045'), ([44, 226], ']'), ([265, 249], '10-66%'), ([61, 289], '1035'), ([701, 289], '3836'), ([673, 307], '8.83'), ([307, 313], '61%'), ([335, 355], '2896'), ([507, 347], '54%'), ([553, 349], '7.44%'), ([613, 353], '7.3%'), ([411, 357], '7.11%'), ([363, 385], '25%'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([598, 452], '2017'), ([627, 453], '\"2018'), ([88, 448], '1999'), ([112, 451], '2000'), ([142, 452], '2001'), ([169, 450], '2002'), ([198, 452], '2003'), ([224, 450], '2004'), ([256, 452], '2005'), ([284, 452], '2006'), ([309, 451], '2007'), ([342, 452], '2008'), ([370, 452], '2009'), ([395, 451], '2010'), ([427, 453], '\"2011'), ([456, 452], '2012'), ([508, 429], '3'), ([512, 452], '2014'), ([542, 452], '2015'), ([570, 452], '2016'), ([656, 452], '2019'), ([684, 452], '2020')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "unemployment_rates = ['16.78%', '16.17%', '15.07%', '14.53%', '13.995', '13.045', '10-66%', '8.83', '7.44%', '7.3%', '7.11%', '25%']\n\nunemployment_rates = [float(rate.strip('%')) for rate in unemployment_rates]\nhighest_rate = max(unemployment_rates)\nlowest_rate = min(unemployment_rates)\n\ndifference = highest_rate - lowest_rate\nprint(difference)",
        "execution": "",
        "error": "could not convert string to float: '10-66'",
        "extraction": "2.67",
        "prediction": "2.67",
        "true_false": false
    },
    "744": {
        "question": "If RL = 5, RT = 9, and WS = 6, find RW.",
        "image": "images/744.jpg",
        "choices": [
            "5.4",
            "6",
            "6.6",
            "7.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "7.5",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "744",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 404,
            "img_height": 199,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([236, 140], 'W'), ([345, 131], 'S'), ([55, 161], 'R')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If RL = 5, RT = 9, and WS = 6, find RW.\nChoices:\n(A) 5.4\n(B) 6\n(C) 6.6\n(D) 7.5\nImage detected text: [([236, 140], 'W'), ([345, 131], 'S'), ([55, 161], 'R')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "RL = 5\nRT = 9\nWS = 6\n\nRW = (RT * WS) / RL\nRW",
        "execution": "",
        "error": "None",
        "extraction": "6.0",
        "prediction": "6.6",
        "true_false": false
    },
    "745": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/745.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "745",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 4256,
            "img_height": 2832,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "746": {
        "question": "Mrs. Zimmerman hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2013 and 2014? (Unit: entries per year)",
        "image": "images/746.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "746",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 199,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([35, 7], 'Art contest entries'), ([11, 39], 'Year'), ([63, 39], 'Number of entries'), ([7, 67], '2010'), ([115, 67], '42'), ([7, 99], '2011'), ([115, 99], '43'), ([7, 129], '2012'), ([115, 129], '43'), ([7, 159], '2013'), ([115, 161], '39'), ([7, 191], '2014'), ([115, 191], '46')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Mrs. Zimmerman hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2013 and 2014? (Unit: entries per year)\nImage detected text: [([35, 7], 'Art contest entries'), ([11, 39], 'Year'), ([63, 39], 'Number of entries'), ([7, 67], '2010'), ([115, 67], '42'), ([7, 99], '2011'), ([115, 99], '43'), ([7, 129], '2012'), ([115, 129], '43'), ([7, 159], '2013'), ([115, 161], '39'), ([7, 191], '2014'), ([115, 191], '46')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "entries_2013 = 39\nentries_2014 = 46\n\nrate_of_change = (entries_2014 - entries_2013) / (2014 - 2013)\nprint(rate_of_change)",
        "execution": "7.0",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "747": {
        "question": "In $\\odot M$, $FL=24,HJ=48$, and $m \\widehat {HP}=65$. Find $m \\widehat {HJ}$.",
        "image": "images/747.jpg",
        "choices": [
            "65",
            "120",
            "130",
            "155"
        ],
        "unit": null,
        "precision": null,
        "answer": "130",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "747",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 507,
            "img_height": 467,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([74, 170], 'F'), ([61, 225], 'H'), ([190, 398], 'P')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In $\\odot M$, $FL=24,HJ=48$, and $m \\widehat {HP}=65$. Find $m \\widehat {HJ}$.\nChoices:\n(A) 65\n(B) 120\n(C) 130\n(D) 155\nImage detected text: [([74, 170], 'F'), ([61, 225], 'H'), ([190, 398], 'P')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(FL, HJ, HP):\n    # Calculate the length of JH using the Law of Cosines\n    JH = math.sqrt(FL**2 + HJ**2 - 2*FL*HJ*math.cos(math.radians(HP)))\n    \n    # Use the Law of Sines to find the angle HJ\n    angle_HJ = math.degrees(math.asin(HJ*math.sin(math.radians(HP))/JH))\n    \n    return angle_HJ\n\nFL = 24\nHJ = 48\nHP = 65\n\nangle_HJ = find_angle(FL, HJ, HP)\nprint(angle_HJ)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "120",
        "prediction": "120",
        "true_false": false
    },
    "748": {
        "question": "As shown in the figure, PA and PB are tangents of \u2299O, the tangent point of point A and B, AC is the diameter of \u2299O, given that \u2220P = 50.0, then the size of \u2220ACB is ()",
        "image": "images/748.jpg",
        "choices": [
            "65\u00b0",
            "60\u00b0",
            "55\u00b0",
            "50\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "65\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "748",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 207,
            "img_height": 117,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, PA and PB are tangents of \u2299O, the tangent point of point A and B, AC is the diameter of \u2299O, given that \u2220P = 50.0, then the size of \u2220ACB is ()\nChoices:\n(A) 65\u00b0\n(B) 60\u00b0\n(C) 55\u00b0\n(D) 50\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(P_angle):\n    # Calculate the angle ACB using the formula: ACB = 180 - 2 * P_angle\n    ACB = 180 - 2 * P_angle\n    return ACB\n\nP_angle = 50.0\nACB = find_angle(P_angle)\nprint(ACB)",
        "execution": "80.0",
        "error": "None",
        "extraction": "55",
        "prediction": "55\u00b0",
        "true_false": false
    },
    "749": {
        "question": "As shown in the figure, in \u25b3ABC, DE \u2225 BC, if AB = 7.0, AC = 5.0, AD = 3.0, then DE = ()",
        "image": "images/749.jpg",
        "choices": [
            "\\frac{15}{4}cm",
            "\\frac{20}{3}cm",
            "\\frac{15}{7}cm",
            "\\frac{20}{7}cm"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{20}{7}cm",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "749",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 181,
            "img_height": 98,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in \u25b3ABC, DE \u2225 BC, if AB = 7.0, AC = 5.0, AD = 3.0, then DE = ()\nChoices:\n(A) \\frac{15}{4}cm\n(B) \\frac{20}{3}cm\n(C) \\frac{15}{7}cm\n(D) \\frac{20}{7}cm\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nAB = 7.0\nAC = 5.0\nAD = 3.0\n\nDE = sp.symbols('DE')\neq = sp.Eq((DE/AD), (AC/AB))\nDE_value = sp.solve(eq, DE)[0]\nDE_value",
        "execution": "",
        "error": "None",
        "extraction": "15/4",
        "prediction": "\\frac{15}{4}cm",
        "true_false": false
    },
    "750": {
        "question": "Which number is missing?",
        "image": "images/750.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "750",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 290,
            "img_height": 356,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([116, 16], '12'), ([28, 62], '9'), ([217, 59], '10'), ([128, 158], '2'), ([28, 256], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number is missing?\nImage detected text: [([116, 16], '12'), ([28, 62], '9'), ([217, 59], '10'), ([128, 158], '2'), ([28, 256], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [12, 9, 10, 2, 5]\nmissing_number = None\n\nfor i in range(1, len(numbers) + 2):\n    if i not in numbers:\n        missing_number = i\n        break\n\nprint(missing_number)",
        "execution": "1",
        "error": "None",
        "extraction": "7",
        "prediction": "7",
        "true_false": false
    },
    "751": {
        "question": "What would most likely happen if Artemia was removed?",
        "image": "images/751.jpg",
        "choices": [
            "Seahorses would decrease",
            "Rotifers would decrease",
            "Mysids would decrease",
            "Algae would decrease"
        ],
        "unit": null,
        "precision": null,
        "answer": "Seahorses would decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "751",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 862,
            "img_height": 363,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([477, 165], 'Artemia'), ([671, 163], 'Young Seahorse'), ([86, 228], 'Algae'), ([258, 226], 'Rotifer'), ([483, 296], 'Mysid'), ([702, 298], 'Seahorse')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would most likely happen if Artemia was removed?\nChoices:\n(A) Seahorses would decrease\n(B) Rotifers would decrease\n(C) Mysids would decrease\n(D) Algae would decrease\nImage detected text: [([477, 165], 'Artemia'), ([671, 163], 'Young Seahorse'), ([86, 228], 'Algae'), ([258, 226], 'Rotifer'), ([483, 296], 'Mysid'), ([702, 298], 'Seahorse')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def remove_artemia(detected_text):\n    for text in detected_text:\n        if text[1] == 'Artemia':\n            return text[1]\n\nchoices = ['Seahorses would decrease', 'Rotifers would decrease', 'Mysids would decrease', 'Algae would decrease']\ndetected_text = [([477, 165], 'Artemia'), ([671, 163], 'Young Seahorse'), ([86, 228], 'Algae'), ([258, 226], 'Rotifer'), ([483, 296], 'Mysid'), ([702, 298], 'Seahorse')]\n\nremoved_species = remove_artemia(detected_text)\n\nif removed_species == 'Artemia':\n    return choices[0]\nelse:\n    return \"\"",
        "execution": "",
        "error": "'return' outside function (<string>, line 12)",
        "extraction": "A",
        "prediction": "Seahorses would decrease",
        "true_false": true
    },
    "752": {
        "question": "\u5982\u56fe\uff0cPA\u662f\u2299O\u7684\u5207\u7ebf\uff0c\u5207\u70b9\u4e3aA\uff0cOP\uff1d4\uff0c\u2220APO\uff1d30\u00b0\uff0c\u5219\u2299O\u7684\u534a\u5f84\u957f\u4e3a\uff08\uff09",
        "image": "images/752.jpg",
        "choices": [
            "1",
            "\u221a{3}",
            "2",
            "3"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "752",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 122,
            "img_height": 87,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cPA\u662f\u2299O\u7684\u5207\u7ebf\uff0c\u5207\u70b9\u4e3aA\uff0cOP\uff1d4\uff0c\u2220APO\uff1d30\u00b0\uff0c\u5219\u2299O\u7684\u534a\u5f84\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 1\n(B) \u221a{3}\n(C) 2\n(D) 3\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef radius_length(OP, angle):\n    # calculate the length of AP using trigonometry\n    AP = OP * math.tan(math.radians(angle))\n    \n    # calculate the radius length using Pythagorean theorem\n    radius = math.sqrt(OP**2 + AP**2)\n    \n    return radius\n\nOP = 4\nangle = 30\n\nradius = radius_length(OP, angle)\nprint(radius)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "753": {
        "question": "What is the value of the smallest bar?",
        "image": "images/753.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "753",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([231, 13], 'Title'), ([35, 29], '10'), ([15, 195], '1'), ([71, 413], 'secant'), ([171, 411], 'sketch'), ([274, 410], 'priest'), ([379, 411], 'civic')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest bar?\nImage detected text: [([231, 13], 'Title'), ([35, 29], '10'), ([15, 195], '1'), ([71, 413], 'secant'), ([171, 411], 'sketch'), ([274, 410], 'priest'), ([379, 411], 'civic')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar = float('inf')\nbars = [10, 1]\nfor bar in bars:\n    if bar < smallest_bar:\n        smallest_bar = bar\nprint(smallest_bar)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "754": {
        "question": "Base your answers on the diagram below, which shows a partial food web. What will happen to fish population if algae's are decreased?",
        "image": "images/754.jpg",
        "choices": [
            "Population will decrease",
            "Population will remain the same",
            "Population will increase",
            "None of the above"
        ],
        "unit": null,
        "precision": null,
        "answer": "Population will decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "754",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 464,
            "img_height": 364,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([250, 56], 'Wnoodse'), ([138, 76], 'Duk'), ([292, 248], 'Cccllzach'), ([22, 268], 'plot'), ([382, 270], 'Enh\"DITU'), ([216, 326], 'Decamtosbg')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Base your answers on the diagram below, which shows a partial food web. What will happen to fish population if algae's are decreased?\nChoices:\n(A) Population will decrease\n(B) Population will remain the same\n(C) Population will increase\n(D) None of the above\nImage detected text: [([250, 56], 'Wnoodse'), ([138, 76], 'Duk'), ([292, 248], 'Cccllzach'), ([22, 268], 'plot'), ([382, 270], 'Enh\"DITU'), ([216, 326], 'Decamtosbg')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def fish_population(algae_decrease):\n    if algae_decrease:\n        return \"Population will decrease\"\n    else:\n        return \"Population will remain the same\"\n\nalgae_decrease = True\n\nprint(fish_population(algae_decrease))",
        "execution": "Population will decrease",
        "error": "None",
        "extraction": "Population will decrease",
        "prediction": "Population will decrease",
        "true_false": true
    },
    "755": {
        "question": "What is this function most likely be?",
        "image": "images/755.jpg",
        "choices": [
            "a polynomial",
            "a trigonometric function",
            "an exponential function",
            "a logarithmic function"
        ],
        "unit": null,
        "precision": null,
        "answer": "a polynomial",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "755",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1430,
            "img_height": 776,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is this function most likely be?\nChoices:\n(A) a polynomial\n(B) a trigonometric function\n(C) an exponential function\n(D) a logarithmic function\nImage detected text: [([786, 168], '3'), ([610, 199], '(0,c)_'), ([784, 248], '2'), ([24, 265], 'f (x)=c'), ([43, 387], 'x | f (x)'), ([1368, 416], 'X'), ([324, 440], '-6'), ([395, 437], '-5'), ([476, 440], '-4'), ([556, 440], '-3'), ([636, 440], '-2'), ([766, 646], '~3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nc = sp.symbols('c')\n\nf = c * x**2\n\nprint(f)",
        "execution": "c*x**2",
        "error": "None",
        "extraction": "(A) a polynomial",
        "prediction": "a polynomial",
        "true_false": true
    },
    "756": {
        "question": "If the trees died, the population of porcupine would most likely",
        "image": "images/756.jpg",
        "choices": [
            "double",
            "skyrocket",
            "decrease",
            "increase"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "756",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 765,
            "img_height": 591,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([295, 79], 'Arctic Fox'), ([431, 95], 'Hawks'), ([25, 101], 'Great'), ([575, 103], 'Snakes'), ([174, 108], 'Snowy'), ([19, 117], 'Homed'), ([181, 125], 'Owl'), ([27, 133], 'Owl'), ([547, 249], 'Skunk'), ([185, 263], 'Enine'), ([307, 263], 'Wolverine'), ([29, 271], 'Minks'), ([545, 379], 'Insect'), ([23, 403], 'Cottontail'), ([442, 398], 'Carbou'), ([154, 408], 'Porcupine'), ([705, 419], 'Moose'), ([491, 555], 'Trees'), ([79, 575], 'Grass'), ([269, 577], 'Benies'), ([319, 406], 'Peel')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the trees died, the population of porcupine would most likely\nChoices:\n(A) double\n(B) skyrocket\n(C) decrease\n(D) increase\nImage detected text: [([295, 79], 'Arctic Fox'), ([431, 95], 'Hawks'), ([25, 101], 'Great'), ([575, 103], 'Snakes'), ([174, 108], 'Snowy'), ([19, 117], 'Homed'), ([181, 125], 'Owl'), ([27, 133], 'Owl'), ([547, 249], 'Skunk'), ([185, 263], 'Enine'), ([307, 263], 'Wolverine'), ([29, 271], 'Minks'), ([545, 379], 'Insect'), ([23, 403], 'Cottontail'), ([442, 398], 'Carbou'), ([154, 408], 'Porcupine'), ([705, 419], 'Moose'), ([491, 555], 'Trees'), ([79, 575], 'Grass'), ([269, 577], 'Benies'), ([319, 406], 'Peel')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def porcupine_population(trees_status):\n    if trees_status == \"died\":\n        return \"decrease\"\n    else:\n        return \"\"\n\ntrees_status = \"died\"\nprint(porcupine_population(trees_status))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "757": {
        "question": "Find x to the nearest tenth. Assume that segments that appear to be tangent are tangent.",
        "image": "images/757.jpg",
        "choices": [
            "7.2",
            "8",
            "12",
            "15"
        ],
        "unit": null,
        "precision": null,
        "answer": "7.2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "757",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 220,
            "img_height": 165,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([70, 54], '15'), ([92, 96], '12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x to the nearest tenth. Assume that segments that appear to be tangent are tangent.\nChoices:\n(A) 7.2\n(B) 8\n(C) 12\n(D) 15\nImage detected text: [([70, 54], '15'), ([92, 96], '12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_x(radius, distance):\n    x = math.sqrt(radius**2 - distance**2)\n    return round(x, 1)\n\nradius = 15\ndistance = 12\n\nx = find_x(radius, distance)\nprint(x)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "758": {
        "question": "Is the number of tiny purple trucks behind the small matte motorbike less than the number of fighters that are behind the big metal utility bike?",
        "image": "images/758.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "758",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of tiny purple trucks behind the small matte motorbike less than the number of fighters that are behind the big metal utility bike?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_trucks_and_fighters(num_trucks, num_bikes):\n    if num_trucks < num_bikes:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_trucks = 5\nnum_bikes = 8\n\nprint(compare_trucks_and_fighters(num_trucks, num_bikes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "759": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/759.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "759",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 201,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 167], 'Uin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nImage detected text: [([19, 167], 'Uin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "nail_length = 19.0\nnearest_inch = round(nail_length)\nprint(nearest_inch)",
        "execution": "19",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "760": {
        "question": "Is the number of yellow tandem bikes less than the number of big objects?",
        "image": "images/760.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "760",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of yellow tandem bikes less than the number of big objects?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(yellow_tandem_bikes, big_objects):\n    if yellow_tandem_bikes < big_objects:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nyellow_tandem_bikes = 10\nbig_objects = 15\n\nprint(compare_numbers(yellow_tandem_bikes, big_objects))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "761": {
        "question": "What happens to the crayfish population if the Largemouth Bass and Northern Pike populations decrease?",
        "image": "images/761.jpg",
        "choices": [
            "Nothing",
            "Decrease",
            "Slightly Decrease",
            "Increase"
        ],
        "unit": null,
        "precision": null,
        "answer": "Increase",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "761",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 405,
            "img_height": 319,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([59, 43], 'Northern Pike'), ([255, 38], 'Muskellunge'), ([139, 105], 'Largemouth Bass'), ([49, 181], 'Crayfish'), ([159, 185], 'Minnows'), ([287, 185], 'Insects'), ([171, 267], 'Plants')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What happens to the crayfish population if the Largemouth Bass and Northern Pike populations decrease?\nChoices:\n(A) Nothing\n(B) Decrease\n(C) Slightly Decrease\n(D) Increase\nImage detected text: [([59, 43], 'Northern Pike'), ([255, 38], 'Muskellunge'), ([139, 105], 'Largemouth Bass'), ([49, 181], 'Crayfish'), ([159, 185], 'Minnows'), ([287, 185], 'Insects'), ([171, 267], 'Plants')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def crayfish_population_change(bass_population, pike_population):\n    if bass_population > 0 or pike_population > 0:\n        return \"Decrease\"\n    else:\n        return \"Nothing\"\n\nbass_population = 0\npike_population = 0\n\nprint(crayfish_population_change(bass_population, pike_population))",
        "execution": "Nothing",
        "error": "None",
        "extraction": "Decrease",
        "prediction": "Decrease",
        "true_false": false
    },
    "762": {
        "question": "What is the center of symmetry of this function?",
        "image": "images/762.jpg",
        "choices": [
            "(0, 0)",
            "(-1, 0)",
            "(2, 0)"
        ],
        "unit": null,
        "precision": null,
        "answer": "(0, 0)",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "762",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 395,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the center of symmetry of this function?\nChoices:\n(A) (0, 0)\n(B) (-1, 0)\n(C) (2, 0)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\ny = x**2 - 4*x + 3\n\nsymmetry_point = sp.solve(sp.Eq(y, y.subs(x, -x)), x)\nsymmetry_point",
        "execution": "",
        "error": "None",
        "extraction": "[-1, 0]",
        "prediction": "(-1, 0)",
        "true_false": false
    },
    "763": {
        "question": "Subtract all tiny shiny balls. Subtract all purple objects. How many objects are left?",
        "image": "images/763.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "763",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny shiny balls. Subtract all purple objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_shiny_balls = 5\npurple_objects = 3\n\nobjects_left = tiny_shiny_balls - purple_objects\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "764": {
        "question": "What is the average number of bananas on each stock?",
        "image": "images/764.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "764",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 349,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the average number of bananas on each stock?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def average_bananas(stock):\n    total_bananas = sum(stock)\n    num_stocks = len(stock)\n    average = total_bananas / num_stocks\n    return average\n\nstock = [10, 15, 20, 25, 30]\nprint(average_bananas(stock))",
        "execution": "20.0",
        "error": "None",
        "extraction": "17.0",
        "prediction": null,
        "true_false": false
    },
    "765": {
        "question": "Is Chartreuse the roughest?",
        "image": "images/765.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "765",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 514,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([411, 45], 'Salmon'), ([411, 69], 'Chartreuse'), ([411, 91], 'Dark Khaki'), ([411, 115], 'Teal'), ([411, 137], 'Rebecca Purple'), ([7, 155], '9'), ([9, 191], '1'), ([477, 363], '100'), ([243, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Chartreuse the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([411, 45], 'Salmon'), ([411, 69], 'Chartreuse'), ([411, 91], 'Dark Khaki'), ([411, 115], 'Teal'), ([411, 137], 'Rebecca Purple'), ([7, 155], '9'), ([9, 191], '1'), ([477, 363], '100'), ([243, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_roughest(color):\n    colors_roughness = {\n        'Salmon': 9,\n        'Chartreuse': 1,\n        'Dark Khaki': 100,\n        'Teal': 100,\n        'Rebecca Purple': 100\n    }\n\n    if color in colors_roughness:\n        if colors_roughness[color] == 1:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"\"\n\ncolor = \"Chartreuse\"\nprint(is_roughest(color))",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "766": {
        "question": "Are there fewer tiny red trucks than small blue bicycles?",
        "image": "images/766.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "766",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([390, 163], '41')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer tiny red trucks than small blue bicycles?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([390, 163], '41')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_red_trucks = 41\nsmall_blue_bicycles = 0\n\nif tiny_red_trucks < small_blue_bicycles:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "767": {
        "question": "What is the maximum value of y?",
        "image": "images/767.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "767",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 483,
            "img_height": 429,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([282, 54], 'x2'), ([435, 69], '25'), ([457, 221], 'X'), ([313, 333], '(3,-4)'), ([324, 68], '+y ?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the maximum value of y?\nImage detected text: [([282, 54], 'x2'), ([435, 69], '25'), ([457, 221], 'X'), ([313, 333], '(3,-4)'), ([324, 68], '+y ?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x2 = 25\nX = 3\ny = -4\n\nmax_y = x2 + X\nprint(max_y)",
        "execution": "28",
        "error": "None",
        "extraction": "21",
        "prediction": "21",
        "true_false": false
    },
    "768": {
        "question": "Use the graph to answer the question below. Which month is the hottest on average in Rome?",
        "image": "images/768.jpg",
        "choices": [
            "December, January, and February",
            "July and August",
            "March and April"
        ],
        "unit": null,
        "precision": null,
        "answer": "July and August",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "768",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 323,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "line plot",
            "grade": "elementary school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([103, 0], 'Average temperature in Rome; Italy'), ([21, 49], '40'), ([19, 75], '35'), ([0, 105], '2'), ([19, 131], '25'), ([1, 139], '1'), ([21, 215], '10'), ([36, 290], '8 4 $'), ([138, 290], '8 , $ >'), ([309, 287], '68 &'), ([374, 310], 'Nov'), ([266, 306], 'Aug')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Use the graph to answer the question below. Which month is the hottest on average in Rome?\nChoices:\n(A) December, January, and February\n(B) July and August\n(C) March and April\nImage detected text: [([103, 0], 'Average temperature in Rome; Italy'), ([21, 49], '40'), ([19, 75], '35'), ([0, 105], '2'), ([19, 131], '25'), ([1, 139], '1'), ([21, 215], '10'), ([36, 290], '8 4 $'), ([138, 290], '8 , $ >'), ([309, 287], '68 &'), ([374, 310], 'Nov'), ([266, 306], 'Aug')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def hottest_month(temperatures):\n    max_temp = max(temperatures)\n    hottest_month = temperatures.index(max_temp) + 1\n    return hottest_month\n\ntemperatures = [40, 35, 25, 10, 8, 4, 8, 68]\nhottest_month = hottest_month(temperatures)\n\nif hottest_month in [12, 1, 2]:\n    answer = \"(A) December, January, and February\"\nelif hottest_month in [7, 8]:\n    answer = \"(B) July and August\"\nelif hottest_month in [3, 4]:\n    answer = \"(C) March and April\"\nelse:\n    answer = \"No data available\"\n\nprint(answer)",
        "execution": "(B) July and August",
        "error": "None",
        "extraction": "(B) July and August",
        "prediction": "July and August",
        "true_false": true
    },
    "769": {
        "question": "The diagram below is a model of two solutions. Each blue ball represents one particle of solute. Which solution has a higher concentration of blue particles?",
        "image": "images/769.jpg",
        "choices": [
            "neither; their concentrations are the same",
            "Solution A",
            "Solution B"
        ],
        "unit": null,
        "precision": null,
        "answer": "Solution A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "769",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 378,
            "img_height": 251,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "elementary school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 197], 'Solvent volume: 25 mL'), ([213, 197], 'Solvent volume: 25 m'), ([41, 237], 'Solution'), ([256, 235], 'Solution')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The diagram below is a model of two solutions. Each blue ball represents one particle of solute. Which solution has a higher concentration of blue particles?\nChoices:\n(A) neither; their concentrations are the same\n(B) Solution A\n(C) Solution B\nImage detected text: [([0, 197], 'Solvent volume: 25 mL'), ([213, 197], 'Solvent volume: 25 m'), ([41, 237], 'Solution'), ([256, 235], 'Solution')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def higher_concentration(solution_a, solution_b):\n    concentration_a = solution_a.count('blue')\n    concentration_b = solution_b.count('blue')\n\n    if concentration_a > concentration_b:\n        return 'Solution A'\n    elif concentration_b > concentration_a:\n        return 'Solution B'\n    else:\n        return 'neither; their concentrations are the same'\n\nsolution_a = ['blue', 'blue', 'blue', 'red', 'red']\nsolution_b = ['blue', 'blue', 'red', 'red', 'red']\n\nprint(higher_concentration(solution_a, solution_b))",
        "execution": "Solution A",
        "error": "None",
        "extraction": "Solution A",
        "prediction": "Solution A",
        "true_false": true
    },
    "770": {
        "question": "What is the amplitude of this function?",
        "image": "images/770.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "770",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 482,
            "img_height": 276,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([12, 2], '1.0'), ([11, 65], '0.5'), ([368, 142], '15'), ([0, 186], '~0.5'), ([10, 246], '1.0')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the amplitude of this function?\nImage detected text: [([12, 2], '1.0'), ([11, 65], '0.5'), ([368, 142], '15'), ([0, 186], '~0.5'), ([10, 246], '1.0')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "amplitude = 15\nprint(amplitude)",
        "execution": "15",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "771": {
        "question": "Base your answers on the diagram of a food chain below and on your knowledge of science. If the population of snakes increases, the population of frogs will most likely",
        "image": "images/771.jpg",
        "choices": [
            "decrease",
            "remain the same",
            "increase",
            "None"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "771",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 960,
            "img_height": 720,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 9], 'Food chain'), ([203, 9], 'the path of energy through an ecosystem'), ([270, 108], 'Food Chain'), ([39, 275], 'Sun'), ([143, 449], 'Leaves'), ([745, 469], 'Hawk'), ([105, 481], 'Picaret'), ([343, 533], 'Ceniun'), ([549, 499], '3 _'), ([571, 559], 'Snake'), ([833, 563], 'Mushrooms'), ([559, 593], 'Cots'), ([849, 597], 'Decomposer'), ([183, 599], 'Cricket'), ([135, 631], 'Conun'), ([375, 492], 'Frog')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Base your answers on the diagram of a food chain below and on your knowledge of science. If the population of snakes increases, the population of frogs will most likely\nChoices:\n(A) decrease\n(B) remain the same\n(C) increase\n(D) None\nImage detected text: [([7, 9], 'Food chain'), ([203, 9], 'the path of energy through an ecosystem'), ([270, 108], 'Food Chain'), ([39, 275], 'Sun'), ([143, 449], 'Leaves'), ([745, 469], 'Hawk'), ([105, 481], 'Picaret'), ([343, 533], 'Ceniun'), ([549, 499], '3 _'), ([571, 559], 'Snake'), ([833, 563], 'Mushrooms'), ([559, 593], 'Cots'), ([849, 597], 'Decomposer'), ([183, 599], 'Cricket'), ([135, 631], 'Conun'), ([375, 492], 'Frog')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def population_change(snake_increase):\n    if snake_increase:\n        return \"decrease\"\n    else:\n        return \"remain the same\"\n\nsnake_increase = True\n\nprint(population_change(snake_increase))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "772": {
        "question": "Is the number of small yellow shiny motorbikes greater than the number of red rubber fighters?",
        "image": "images/772.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "772",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of small yellow shiny motorbikes greater than the number of red rubber fighters?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(num1, num2):\n    if num1 > num2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nsmall_yellow_shiny_motorbikes = 10\nred_rubber_fighters = 5\n\nprint(compare_numbers(small_yellow_shiny_motorbikes, red_rubber_fighters))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "773": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, point D is on the extended line of AB, passing point D is the tangent of \u2299O, and the tangent point is C, if \u2220A = 25.0, then \u2220D = ()",
        "image": "images/773.jpg",
        "choices": [
            "25\u00b0",
            "40\u00b0",
            "50\u00b0",
            "65\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "40\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "773",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 163,
            "img_height": 117,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, point D is on the extended line of AB, passing point D is the tangent of \u2299O, and the tangent point is C, if \u2220A = 25.0, then \u2220D = ()\nChoices:\n(A) 25\u00b0\n(B) 40\u00b0\n(C) 50\u00b0\n(D) 65\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(A):\n    # Calculate angle D using the formula: \u2220D = 180 - 2 * \u2220A\n    D = 180 - 2 * A\n    return D\n\nangle_A = 25.0\nangle_D = find_angle(angle_A)\nprint(angle_D)",
        "execution": "130.0",
        "error": "None",
        "extraction": "40",
        "prediction": "40\u00b0",
        "true_false": true
    },
    "774": {
        "question": "Are there fewer large matte utility bikes than small yellow bicycles?",
        "image": "images/774.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "774",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer large matte utility bikes than small yellow bicycles?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bikes(large_bikes, small_bikes):\n    if large_bikes < small_bikes:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nlarge_bikes = 10\nsmall_bikes = 15\n\nprint(compare_bikes(large_bikes, small_bikes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "775": {
        "question": "Is Orange Red the roughest?",
        "image": "images/775.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "775",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 724,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 135], '9'), ([9, 171], '1'), ([679, 323], '100'), ([347, 343], 'xaxis label'), ([34, 372], 'Orange Red'), ([153, 373], 'Tomato'), ([239, 373], 'Red')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Orange Red the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 135], '9'), ([9, 171], '1'), ([679, 323], '100'), ([347, 343], 'xaxis label'), ([34, 372], 'Orange Red'), ([153, 373], 'Tomato'), ([239, 373], 'Red')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_roughest(color, colors):\n    for c in colors:\n        if c == color:\n            return \"yes\"\n    return \"no\"\n\ncolors = ['Orange Red', 'Tomato', 'Red']\ncolor = 'Orange Red'\n\nprint(is_roughest(color, colors))",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "776": {
        "question": "Find $JQ$ if $Q$ is the incenter of $\\triangle JLN$.  Rounded to the nearest hundredth.",
        "image": "images/776.jpg",
        "choices": [
            "16.50",
            "18.79",
            "20.32",
            "25.50"
        ],
        "unit": null,
        "precision": null,
        "answer": "18.79",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "776",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 589,
            "img_height": 424,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 211], '16.5'), ([365, 251], 'M')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $JQ$ if $Q$ is the incenter of $\\triangle JLN$.  Rounded to the nearest hundredth.\nChoices:\n(A) 16.50\n(B) 18.79\n(C) 20.32\n(D) 25.50\nImage detected text: [([79, 211], '16.5'), ([365, 251], 'M')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_JQ(JN, JL, LN):\n    s = (JN + JL + LN) / 2\n    area = math.sqrt(s * (s - JN) * (s - JL) * (s - LN))\n    JQ = (2 * area) / (JN + JL + LN)\n    return round(JQ, 2)\n\nJN = 16.5\nJL = 18.79\nLN = 20.32\n\nJQ = find_JQ(JN, JL, LN)\nprint(JQ)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "18.79",
        "prediction": "18.79",
        "true_false": true
    },
    "777": {
        "question": "In rhombus LMPQ, $m \\angle Q L M=2 x^{2}-10$, $m \\angle Q P M=8 x$,  and $M P=10$ . \r\nFind the perimeter of $LMPQ$",
        "image": "images/777.jpg",
        "choices": [
            "10",
            "40",
            "70",
            "140"
        ],
        "unit": null,
        "precision": null,
        "answer": "40",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "777",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 337,
            "img_height": 177,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([163, 45], 'R'), ([234, 80], '10'), ([172, 136], 'M')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In rhombus LMPQ, $m \\angle Q L M=2 x^{2}-10$, $m \\angle Q P M=8 x$,  and $M P=10$ . \r\nFind the perimeter of $LMPQ$\nChoices:\n(A) 10\n(B) 40\n(C) 70\n(D) 140\nImage detected text: [([163, 45], 'R'), ([234, 80], '10'), ([172, 136], 'M')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nangle_QLM = 2*x**2 - 10\nangle_QPM = 8*x\nMP = 10\n\nperimeter = 4*MP\nprint(perimeter)",
        "execution": "40",
        "error": "None",
        "extraction": "40",
        "prediction": "40",
        "true_false": true
    },
    "778": {
        "question": "Can you find the missing shape in this picture puzzle?",
        "image": "images/778.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "unit": null,
        "precision": null,
        "answer": "A",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "778",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 797,
            "img_height": 431,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([445, 53], '?'), ([97, 385], 'A'), ([283, 385], 'B')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Can you find the missing shape in this picture puzzle?\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\nImage detected text: [([445, 53], '?'), ([97, 385], 'A'), ([283, 385], 'B')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_shape = '?'\nchoices = ['A', 'B', 'C', 'D']\n\nif missing_shape in choices:\n    print(missing_shape)\nelse:\n    print(\"\")",
        "execution": "",
        "error": "None",
        "extraction": "?",
        "prediction": "A",
        "true_false": true
    },
    "779": {
        "question": "Is the cardiac silhouette less than half the diameter of the diaphragm?",
        "image": "images/779.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "779",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1023,
            "img_height": 841,
            "source": "VQA-RAD",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "medical image",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([914, 4], 'MedPixe'), ([59, 73], 'R'), ([50, 110], 'AVN'), ([239, 829], '000926a4-7637-4661-b434-6744fba59ae Uploader'), ([508, 832], 'bnian'), ([546, 832], '3indietun_ource'), ([636, 832], 'bnan'), ([664, 832], 'Asindietun Ub-24'), ([757, 829], '2003')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the cardiac silhouette less than half the diameter of the diaphragm?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([914, 4], 'MedPixe'), ([59, 73], 'R'), ([50, 110], 'AVN'), ([239, 829], '000926a4-7637-4661-b434-6744fba59ae Uploader'), ([508, 832], 'bnian'), ([546, 832], '3indietun_ource'), ([636, 832], 'bnan'), ([664, 832], 'Asindietun Ub-24'), ([757, 829], '2003')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "cardiac_silhouette_diameter = 0.5\ndiaphragm_diameter = 1.0\n\nif cardiac_silhouette_diameter < diaphragm_diameter/2:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "780": {
        "question": "Which number is missing?",
        "image": "images/780.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "780",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 848,
            "img_height": 209,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([28, 90], '1'), ([90, 88], '2'), ([159, 89], '5'), ([346, 88], '3'), ([413, 89], '3'), ([479, 89], '5'), ([668, 86], '4'), ([732, 86], '5'), ([95, 155], '5'), ([412, 154], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number is missing?\nImage detected text: [([28, 90], '1'), ([90, 88], '2'), ([159, 89], '5'), ([346, 88], '3'), ([413, 89], '3'), ([479, 89], '5'), ([668, 86], '4'), ([732, 86], '5'), ([95, 155], '5'), ([412, 154], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = ['1', '2', '3', '4', '5']\ndetected_numbers = ['1', '2', '5', '3', '3', '5', '4', '5']\n\nmissing_number = [number for number in numbers if number not in detected_numbers]\nprint(missing_number[0])",
        "execution": "",
        "error": "name 'detected_numbers' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "781": {
        "question": "In $\\triangle CDF$, $K$ is the centroid and $DK=16$. Find $CD$.",
        "image": "images/781.jpg",
        "choices": [
            "9",
            "12",
            "18",
            "18"
        ],
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "781",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 461,
            "img_height": 540,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([251, 105], 'H'), ([257, 189], '12'), ([377, 205], 'F'), ([227, 249], 'K'), ([84, 324], '9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In $\\triangle CDF$, $K$ is the centroid and $DK=16$. Find $CD$.\nChoices:\n(A) 9\n(B) 12\n(C) 18\n(D) 18\nImage detected text: [([251, 105], 'H'), ([257, 189], '12'), ([377, 205], 'F'), ([227, 249], 'K'), ([84, 324], '9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_CD(DK):\n    CD = DK * 3\n    return CD\n\nDK = 16\nCD = find_CD(DK)\nprint(CD)",
        "execution": "48",
        "error": "None",
        "extraction": "48",
        "prediction": "18",
        "true_false": true
    },
    "782": {
        "question": "Which number is missing?",
        "image": "images/782.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "782",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 384,
            "img_height": 376,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([301, 41], '18'), ([112, 108], '9'), ([240, 108], '2'), ([231, 227], '12'), ([315, 303], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number is missing?\nImage detected text: [([301, 41], '18'), ([112, 108], '9'), ([240, 108], '2'), ([231, 227], '12'), ([315, 303], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [18, 9, 2, 12, 3]\n\nmissing_number = None\nfor i in range(1, 19):\n    if i not in numbers:\n        missing_number = i\n        break\n\nprint(missing_number)",
        "execution": "1",
        "error": "None",
        "extraction": "18",
        "prediction": "18",
        "true_false": false
    },
    "783": {
        "question": "In order to measure the width of parallel river AB, \u2220ACB = 30.0, \u2220ADB = 60.0, CD = 60.0, then the width of the river AB is ()",
        "image": "images/783.jpg",
        "choices": [
            "30m",
            "30\u221a{3}m",
            "(30\u221a{3}+30)m",
            "(30\u221a{3}-30)m"
        ],
        "unit": null,
        "precision": null,
        "answer": "30\u221a{3}m",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "783",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 130,
            "img_height": 87,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In order to measure the width of parallel river AB, \u2220ACB = 30.0, \u2220ADB = 60.0, CD = 60.0, then the width of the river AB is ()\nChoices:\n(A) 30m\n(B) 30\u221a{3}m\n(C) (30\u221a{3}+30)m\n(D) (30\u221a{3}-30)m\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef calculate_width(angle_acb, angle_adb, cd):\n    angle_acb_rad = math.radians(angle_acb)\n    angle_adb_rad = math.radians(angle_adb)\n    \n    width_ab = cd * math.tan(angle_acb_rad) / (math.tan(angle_acb_rad) + math.tan(angle_adb_rad))\n    \n    return width_ab\n\nangle_acb = 30.0\nangle_adb = 60.0\ncd = 60.0\n\nwidth_ab = calculate_width(angle_acb, angle_adb, cd)\nprint(width_ab)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "30.0",
        "prediction": "30m",
        "true_false": false
    },
    "784": {
        "question": "Across all years, what is the maximum rating of statistical capacity in Maldives ?",
        "image": "images/784.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "70",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "784",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 938,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([46, 8], 'Methodology assessment of statistical capacity'), ([7, 189], '1'), ([7, 303], ']'), ([5, 392], '2'), ([83, 607], '8'), ([285, 607], '8'), ([485, 607], '3'), ([687, 607], '8'), ([471, 639], 'Years'), ([673, 675], 'Sub-Saharan Africa (developing only)'), ([883, 675], 'Maldives'), ([885, 607], '8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Across all years, what is the maximum rating of statistical capacity in Maldives ?\nImage detected text: [([46, 8], 'Methodology assessment of statistical capacity'), ([7, 189], '1'), ([7, 303], ']'), ([5, 392], '2'), ([83, 607], '8'), ([285, 607], '8'), ([485, 607], '3'), ([687, 607], '8'), ([471, 639], 'Years'), ([673, 675], 'Sub-Saharan Africa (developing only)'), ([883, 675], 'Maldives'), ([885, 607], '8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "max_rating = 0\n\nfor text in image_detected_text:\n    if 'Maldives' in text:\n        rating = int(text[1])\n        if rating > max_rating:\n            max_rating = rating\n\nprint(max_rating)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "785": {
        "question": "Part of an ecosystem is shown in this diagram. Imagine the algae and floating plants are prevented from growing. How will that most likely affect this ecosystem?",
        "image": "images/785.jpg",
        "choices": [
            "The number of ducks will increase",
            "The number of minnows will increase",
            "There will be no effect on this ecosystem",
            "The number of aquatic crustaceans will decrease"
        ],
        "unit": null,
        "precision": null,
        "answer": "The number of aquatic crustaceans will decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "785",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 456,
            "img_height": 258,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 21], 'Raccoons'), ([338, 28], 'Ducks'), ([76, 74], 'Fish'), ([358, 78], 'Minnows'), ([27, 143], 'Aquatic crustaceans'), ([195, 217], 'and floating plants'), ([135, 217], 'Algae')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Part of an ecosystem is shown in this diagram. Imagine the algae and floating plants are prevented from growing. How will that most likely affect this ecosystem?\nChoices:\n(A) The number of ducks will increase\n(B) The number of minnows will increase\n(C) There will be no effect on this ecosystem\n(D) The number of aquatic crustaceans will decrease\nImage detected text: [([24, 21], 'Raccoons'), ([338, 28], 'Ducks'), ([76, 74], 'Fish'), ([358, 78], 'Minnows'), ([27, 143], 'Aquatic crustaceans'), ([195, 217], 'and floating plants'), ([135, 217], 'Algae')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def affect_on_ecosystem(diagram):\n    affected_species = ['Ducks', 'Minnows', 'Aquatic crustaceans']\n    unaffected_species = ['Raccoons', 'Fish']\n\n    for species in affected_species:\n        if species not in diagram:\n            return \"The number of \" + species.lower() + \" will decrease\"\n\n    for species in unaffected_species:\n        if species not in diagram:\n            return \"There will be no effect on this ecosystem\"\n\n    return \"\"\n\ndiagram = \"Raccoons, Ducks, Fish, Minnows, Aquatic crustaceans, Algae, and floating plants\"\nprint(affect_on_ecosystem(diagram))",
        "execution": "",
        "error": "None",
        "extraction": "The number of aquatic crustaceans will decrease",
        "prediction": "The number of aquatic crustaceans will decrease",
        "true_false": true
    },
    "786": {
        "question": "Find $m \\angle K$",
        "image": "images/786.jpg",
        "choices": [
            "6",
            "60",
            "100",
            "180"
        ],
        "unit": null,
        "precision": null,
        "answer": "100",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "786",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 317,
            "img_height": 237,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([44, 150], '80'), ([2, 186], 'M')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $m \\angle K$\nChoices:\n(A) 6\n(B) 60\n(C) 100\n(D) 180\nImage detected text: [([44, 150], '80'), ([2, 186], 'M')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "angle_K = 180 - 80\nprint(angle_K)",
        "execution": "100",
        "error": "None",
        "extraction": "100",
        "prediction": "100",
        "true_false": true
    },
    "787": {
        "question": "What percentage of the zebra's stripes are horizontal?",
        "image": "images/787.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "50",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "787",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 427,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of the zebra's stripes are horizontal?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_stripes = 50\nhorizontal_stripes = 30\n\npercentage_horizontal = (horizontal_stripes / total_stripes) * 100\nprint(percentage_horizontal)",
        "execution": "60.0",
        "error": "None",
        "extraction": "60",
        "prediction": "60",
        "true_false": false
    },
    "788": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/788.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "788",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 515,
            "img_height": 332,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "789": {
        "question": "What is the sum of the values of posse and mortar?",
        "image": "images/789.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "789",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 12], 'Title'), ([39, 33], '10'), ([15, 175], '1'), ([95, 365], '3'), ([169, 369], '6'), ([239, 367], '2'), ([307, 367], '2'), ([377, 367], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the values of posse and mortar?\nImage detected text: [([224, 12], 'Title'), ([39, 33], '10'), ([15, 175], '1'), ([95, 365], '3'), ([169, 369], '6'), ([239, 367], '2'), ([307, 367], '2'), ([377, 367], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "posse = 3\nmortar = 6\n\nsum_values = posse + mortar\nprint(sum_values)",
        "execution": "9",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "790": {
        "question": "\u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cN\u662fBC\u8fb9\u4e0a\u7684\u4e2d\u70b9\uff0cAM\u5e73\u5206\u2220BAC\uff0cBM\u22a5AM\u4e8e\u70b9M\uff0c\u82e5AB\uff1d8\uff0cMN\uff1d2\uff0e\u5219AC\u7684\u957f\u4e3a\uff08\uff09",
        "image": "images/790.jpg",
        "choices": [
            "10",
            "11",
            "12",
            "13"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "790",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 145,
            "img_height": 105,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u25b3ABC\u4e2d\uff0cN\u662fBC\u8fb9\u4e0a\u7684\u4e2d\u70b9\uff0cAM\u5e73\u5206\u2220BAC\uff0cBM\u22a5AM\u4e8e\u70b9M\uff0c\u82e5AB\uff1d8\uff0cMN\uff1d2\uff0e\u5219AC\u7684\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 10\n(B) 11\n(C) 12\n(D) 13\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nAB = 8\nMN = 2\n\n# Using the Pythagorean theorem to find BM\nBM = math.sqrt(AB**2 - MN**2)\n\n# Since N is the midpoint of BC, BN = NC\nBN = BM\n\n# Using the Pythagorean theorem to find AC\nAC = 2 * math.sqrt(AB**2 + BN**2)\n\nAC",
        "execution": "",
        "error": "None",
        "extraction": "12",
        "prediction": "12",
        "true_false": true
    },
    "791": {
        "question": "Given $V_s$ = 5V, $R_1$ = 1k\u03a9, $R_2$ = 2.2k\u03a9, $R_3$ = 2.2k\u03a9, $R_4$ = 1.5k\u03a9, and $R_L$ = 4.7k\u03a9. Determine the voltage and current across $R_L$. Answer in unit of V (3 sig.fig.).",
        "image": "images/791.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "1.06",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "791",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 444,
            "img_height": 400,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "algebraic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([290, 126], 'RL'), ([354, 148], 'B'), ([108, 166], 'Vs'), ([376, 252], 'pa'), ([240, 144], 'AA')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Given $V_s$ = 5V, $R_1$ = 1k\u03a9, $R_2$ = 2.2k\u03a9, $R_3$ = 2.2k\u03a9, $R_4$ = 1.5k\u03a9, and $R_L$ = 4.7k\u03a9. Determine the voltage and current across $R_L$. Answer in unit of V (3 sig.fig.).\nImage detected text: [([290, 126], 'RL'), ([354, 148], 'B'), ([108, 166], 'Vs'), ([376, 252], 'pa'), ([240, 144], 'AA')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "Vs = 5\nR1 = 1000\nR2 = 2200\nR3 = 2200\nR4 = 1500\nRL = 4700\n\n# Calculate the total resistance\nRT = R1 + R2 + R3 + R4 + RL\n\n# Calculate the current flowing through the circuit\nI = Vs / RT\n\n# Calculate the voltage across RL\nVL = I * RL\n\nprint(round(VL, 3))",
        "execution": "2.026",
        "error": "None",
        "extraction": "4.255",
        "prediction": "4.25",
        "true_false": false
    },
    "792": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/792.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "792",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 3936,
            "img_height": 2624,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "793": {
        "question": "What is the highest Elo score for the agent using an offline RL algorithm?",
        "image": "images/793.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1578",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "793",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1922,
            "img_height": 1056,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 19], 'Table 5'), ([182, 17], 'Evaluation of the 6 reference agents with the proposed metrics'), ([1370, 18], 'Agents highlighted in'), ([96, 64], 'blue utilize offline RL algorithms, whereas the other 3 rely on behavior cloning: In the bottom'), ([6, 110], 'portion of this table we show performance of agents from Vinyals et al. (2019).'), ([1394, 118], 'Our BC agent is most'), ([10, 163], 'comparable to AlphaStar Supervised but performs better due to significant tuning improvements'), ([11, 212], 'The other AlphaStar agents highlighted in grey have differences which make their performance not'), ([12, 268], 'directly comparable to ours'), ([34, 384], 'Agent'), ([1241, 383], 'Robustness'), ([1497, 385], 'Elo'), ([1614, 384], 'VS very_hard'), ([34, 451], 'MuZero Supervised with MCTS at inference time'), ([1299, 455], '50%'), ([1480, 452], '1578'), ([1703, 455], '95%'), ([32, 502], 'Emphatic Offline Actor-Critic'), ([1299, 505], '43%'), ([1483, 505], '1563'), ([1703, 505], '97'), ([35, 553], 'Offline Actor-Critic'), ([1299, 555], '43%'), ([1482, 556], '1548'), ([1703, 555], '98%'), ([31, 599], 'Fine-tuned Behavior Cloning'), ([1299, 607], '36%'), ([1482, 606], '1485'), ([1703, 607], '95%'), ([34, 653], 'MuZero Supervised'), ([1299, 657], '30%'), ([1482, 656], '1425'), ([1703, 655], '92%'), ([31, 698], 'Behavior Cloning'), ([1299, 707], '25%'), ([1483, 705], '1380'), ([1703, 705], '88%'), ([34, 774], 'very_hard built-in bot'), ([1311, 779], '3%'), ([1482, 777], '1000'), ([1705, 777], '50%'), ([34, 826], 'AlphaStar Supervised'), ([1309, 827], '8%'), ([1483, 829], '1171'), ([1705, 827], '75%'), ([36, 873], 'AlphaStar Supervised (Race specific networks)'), ([1301, 879], '17/'), ([1483, 877], '1280'), ([1703, 879], '82%'), ([33, 921], 'AlphaStar Supervised (Race specific networks'), ([859, 929], '+ FT)'), ([1299, 929], '440'), ([1482, 929], '1545'), ([1703, 929], '94%'), ([35, 971], 'AlphaStar Final (Race specific networks'), ([753, 979], '+ FT'), ([854, 978], '+ Online Learning)'), ([1287, 974], '100%'), ([1481, 977], '2968'), ([1695, 977], '100%'), ([7, 74], 'pale')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest Elo score for the agent using an offline RL algorithm?\nImage detected text: [([11, 19], 'Table 5'), ([182, 17], 'Evaluation of the 6 reference agents with the proposed metrics'), ([1370, 18], 'Agents highlighted in'), ([96, 64], 'blue utilize offline RL algorithms, whereas the other 3 rely on behavior cloning: In the bottom'), ([6, 110], 'portion of this table we show performance of agents from Vinyals et al. (2019).'), ([1394, 118], 'Our BC agent is most'), ([10, 163], 'comparable to AlphaStar Supervised but performs better due to significant tuning improvements'), ([11, 212], 'The other AlphaStar agents highlighted in grey have differences which make their performance not'), ([12, 268], 'directly comparable to ours'), ([34, 384], 'Agent'), ([1241, 383], 'Robustness'), ([1497, 385], 'Elo'), ([1614, 384], 'VS very_hard'), ([34, 451], 'MuZero Supervised with MCTS at inference time'), ([1299, 455], '50%'), ([1480, 452], '1578'), ([1703, 455], '95%'), ([32, 502], 'Emphatic Offline Actor-Critic'), ([1299, 505], '43%'), ([1483, 505], '1563'), ([1703, 505], '97'), ([35, 553], 'Offline Actor-Critic'), ([1299, 555], '43%'), ([1482, 556], '1548'), ([1703, 555], '98%'), ([31, 599], 'Fine-tuned Behavior Cloning'), ([1299, 607], '36%'), ([1482, 606], '1485'), ([1703, 607], '95%'), ([34, 653], 'MuZero Supervised'), ([1299, 657], '30%'), ([1482, 656], '1425'), ([1703, 655], '92%'), ([31, 698], 'Behavior Cloning'), ([1299, 707], '25%'), ([1483, 705], '1380'), ([1703, 705], '88%'), ([34, 774], 'very_hard built-in bot'), ([1311, 779], '3%'), ([1482, 777], '1000'), ([1705, 777], '50%'), ([34, 826], 'AlphaStar Supervised'), ([1309, 827], '8%'), ([1483, 829], '1171'), ([1705, 827], '75%'), ([36, 873], 'AlphaStar Supervised (Race specific networks)'), ([1301, 879], '17/'), ([1483, 877], '1280'), ([1703, 879], '82%'), ([33, 921], 'AlphaStar Supervised (Race specific networks'), ([859, 929], '+ FT)'), ([1299, 929], '440'), ([1482, 929], '1545'), ([1703, 929], '94%'), ([35, 971], 'AlphaStar Final (Race specific networks'), ([753, 979], '+ FT'), ([854, 978], '+ Online Learning)'), ([1287, 974], '100%'), ([1481, 977], '2968'), ([1695, 977], '100%'), ([7, 74], 'pale')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_elo_score(text):\n    elo_scores = []\n    for line in text:\n        if \"Elo\" in line[1]:\n            elo_scores.append(int(line[1].split()[0]))\n    return max(elo_scores)\n\ntext = [([11, 19], 'Table 5'), ([182, 17], 'Evaluation of the 6 reference agents with the proposed metrics'), ([1370, 18], 'Agents highlighted in'), ([96, 64], 'blue utilize offline RL algorithms, whereas the other 3 rely on behavior cloning: In the bottom'), ([6, 110], 'portion of this table we show performance of agents from Vinyals et al. (2019).'), ([1394, 118], 'Our BC agent is most'), ([10, 163], 'comparable to AlphaStar Supervised but performs better due to significant tuning improvements'), ([11, 212], 'The other AlphaStar agents highlighted in grey have differences which make their performance not'), ([12, 268], 'directly comparable to ours'), ([34, 384], 'Agent'), ([1241, 383], 'Robustness'), ([1497, 385], 'Elo'), ([1614, 384], 'VS very_hard'), ([34, 451], 'MuZero Supervised with MCTS at inference time'), ([1299, 455], '50%'), ([1480, 452], '1578'), ([1703, 455], '95%'), ([32, 502], 'Emphatic Offline Actor-Critic'), ([1299, 505], '43%'), ([1483, 505], '1563'), ([1703, 505], '97'), ([35, 553], 'Offline Actor-Critic'), ([1299, 555], '43%'), ([1482, 556], '1548'), ([1703, 555], '98%'), ([31, 599], 'Fine-tuned Behavior Cloning'), ([1299, 607], '36%'), ([1482, 606], '1485'), ([1703, 607], '95%'), ([34, 653], 'MuZero Supervised'), ([1299, 657], '30%'), ([1482, 656], '1425'), ([1703, 655], '92%'), ([31, 698], 'Behavior Cloning'), ([1299, 707], '25%'), ([1483, 705], '1380'), ([1703, 705], '88%'), ([34, 774], 'very_hard built-in bot'), ([1311, 779], '3%'), ([1482, 777], '1000'), ([1705, 777], '50%'), ([34, 826], 'AlphaStar Supervised'), ([1309, 827], '8%'), ([1483, 829], '1171'), ([1705, 827], '75%'), ([36, 873], 'AlphaStar Supervised (Race specific networks)'), ([1301, 879], '17/'), ([1483, 877], '1280'), ([1703, 879], '82%'), ([33, 921], 'AlphaStar Supervised (Race specific networks'), ([859, 929], '+ FT)'), ([1299, 929], '440'), ([1482, 929], '1545'), ([1703, 929], '94%'), ([35, 971], 'AlphaStar Final (Race specific networks'), ([753, 979], '+ FT'), ([854, 978], '+ Online Learning)'), ([1287, 974], '100%'), ([1481, 977], '2968'), ([1695, 977], '100%'), ([7, 74], 'pale')]\n\nprint(highest_elo_score(text))",
        "execution": "",
        "error": "invalid literal for int() with base 10: 'Elo'",
        "extraction": "2968",
        "prediction": "2968",
        "true_false": false
    },
    "794": {
        "question": "How many bars have values larger than 4?",
        "image": "images/794.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "794",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([226, 12], 'Title'), ([41, 31], '10'), ([15, 197], '1'), ([90, 408], 'bat'), ([181, 411], 'coin'), ([268, 405], 'delay'), ([366, 408], 'calm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many bars have values larger than 4?\nImage detected text: [([226, 12], 'Title'), ([41, 31], '10'), ([15, 197], '1'), ([90, 408], 'bat'), ([181, 411], 'coin'), ([268, 405], 'delay'), ([366, 408], 'calm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [10, 1, 'bat', 'coin', 'delay', 'calm']\ncount = 0\n\nfor bar in bars:\n    if isinstance(bar, int) and bar > 4:\n        count += 1\n\nprint(count)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "795": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/795.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "75",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "795",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 475,
            "img_height": 601,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "796": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/796.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "796",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2516,
            "img_height": 1938,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([521, 238], 'BECA'), ([616, 372], 'M'), ([126, 506], 'F'), ([616, 494], 'AL'), ([591, 643], 'UERIcan ExprEs'), ([583, 675], 'UNDING SPONSOR')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nImage detected text: [([521, 238], 'BECA'), ([616, 372], 'M'), ([126, 506], 'F'), ([616, 494], 'AL'), ([591, 643], 'UERIcan ExprEs'), ([583, 675], 'UNDING SPONSOR')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_people_after_ww2(text):\n    count = 0\n    for line in text:\n        if \"born after\" in line:\n            count += 1\n    return count\n\ntext = [\n    \"John Smith - born after World War II\",\n    \"Jane Doe - born before World War II\",\n    \"Michael Johnson - born after World War II\"\n]\n\nprint(count_people_after_ww2(text))",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "797": {
        "question": "What is the missing pattern in the picture?",
        "image": "images/797.jpg",
        "choices": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "797",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 386,
            "img_height": 291,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the missing pattern in the picture?\nChoices:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5\n(F) 6\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def missing_pattern(image):\n    patterns = {\n        'pattern1': ['A', 'B', 'C', 'D'],\n        'pattern2': ['B', 'C', 'D', 'E'],\n        'pattern3': ['C', 'D', 'E', 'F'],\n        'pattern4': ['D', 'E', 'F', 'G']\n    }\n\n    for pattern, values in patterns.items():\n        if values == image:\n            return pattern\n    return \"\"\n\nimage = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nprint(missing_pattern(image))",
        "execution": "",
        "error": "None",
        "extraction": "pattern4",
        "prediction": "4",
        "true_false": false
    },
    "798": {
        "question": "In the figure above, l || m. Which of the following must equal 180?",
        "image": "images/798.jpg",
        "choices": [
            "k + n + r",
            "k + p + s",
            "n + p + s",
            "n + p + t",
            "r + s + t"
        ],
        "unit": null,
        "precision": null,
        "answer": "k + p + s",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "798",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 371,
            "img_height": 372,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([31, 207], 'In the figure above.'), ([155, 207], '(Il m:'), ([195, 205], 'Which of the following'), ([31, 231], 'must'), ([64, 228], 'equal [80'), ([63, 253], 'k |n +r'), ([62, 274], 'k + p + $'), ([63, 299], 'n | p + $'), ([63, 319], 'n | P + ['), ([63, 339], 'r +S + (')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure above, l || m. Which of the following must equal 180?\nChoices:\n(A) k + n + r\n(B) k + p + s\n(C) n + p + s\n(D) n + p + t\n(E) r + s + t\nImage detected text: [([31, 207], 'In the figure above.'), ([155, 207], '(Il m:'), ([195, 205], 'Which of the following'), ([31, 231], 'must'), ([64, 228], 'equal [80'), ([63, 253], 'k |n +r'), ([62, 274], 'k + p + $'), ([63, 299], 'n | p + $'), ([63, 319], 'n | P + ['), ([63, 339], 'r +S + (')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "l = 180\nm = 180\n\nk = l\nn = m\nr = l\n\np = m\ns = l\nt = m\n\nchoices = ['k + n + r', 'k + p + s', 'n + p + s', 'n + p + t', 'r + s + t']\n\nfor choice in choices:\n    if eval(choice) == 180:\n        print(choice)",
        "execution": "",
        "error": "None",
        "extraction": "k + p + s",
        "prediction": "k + p + s",
        "true_false": true
    },
    "799": {
        "question": "How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)",
        "image": "images/799.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "13",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "799",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 229,
            "img_height": 128,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\ntotal_cost = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(\"Ruth needs $\" + str(total_cost) + \" to buy a baking dish, a casserole dish, and an ice cream scoop.\")",
        "execution": "Ruth needs $13.0 to buy a baking dish, a casserole dish, and an ice cream scoop.",
        "error": "None",
        "extraction": "13.0",
        "prediction": null,
        "true_false": false
    },
    "800": {
        "question": "Does Medium Orchid intersect Forest Green?",
        "image": "images/800.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "800",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 596,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([491, 157], 'Medium Orchid'), ([7, 153], '1'), ([491, 181], 'Midnight Blue'), ([9, 191], '1'), ([491, 205], 'Aqua'), ([489, 227], 'Forest Green'), ([427, 363], '100'), ([217, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Medium Orchid intersect Forest Green?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([491, 157], 'Medium Orchid'), ([7, 153], '1'), ([491, 181], 'Midnight Blue'), ([9, 191], '1'), ([491, 205], 'Aqua'), ([489, 227], 'Forest Green'), ([427, 363], '100'), ([217, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def intersect_colors(color1, color2):\n    colors = {\n        'Medium Orchid': [(186, 85, 211), (199, 21, 133)],\n        'Forest Green': [(34, 139, 34), (0, 100, 0)]\n    }\n\n    if color1 in colors and color2 in colors:\n        if colors[color1][0] >= colors[color2][0] and colors[color1][1] >= colors[color2][1] and colors[color1][2] >= colors[color2][2]:\n            return \"yes\"\n        else:\n            return \"no\"\n    else:\n        return \"\"\n\ncolor1 = 'Medium Orchid'\ncolor2 = 'Forest Green'\n\nprint(intersect_colors(color1, color2))",
        "execution": "",
        "error": "list index out of range",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": false
    },
    "801": {
        "question": "A gymnast jotted down the number of cartwheels she did each day. What is the mode of the numbers?'",
        "image": "images/801.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "801",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 272,
            "img_height": 280,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([65, 3], 'Doing cartwheels'), ([31, 37], 'Day'), ([101, 39], 'Number of cartwheels'), ([1, 64], 'Sunday'), ([173, 69], '10'), ([3, 99], 'Monday'), ([173, 101], '10'), ([1, 126], 'Tuesday'), ([1, 158], 'Wednesday'), ([1, 188], 'Thursday'), ([173, 191], '10'), ([1, 219], 'Friday'), ([1, 250], 'Saturday')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A gymnast jotted down the number of cartwheels she did each day. What is the mode of the numbers?'\nImage detected text: [([65, 3], 'Doing cartwheels'), ([31, 37], 'Day'), ([101, 39], 'Number of cartwheels'), ([1, 64], 'Sunday'), ([173, 69], '10'), ([3, 99], 'Monday'), ([173, 101], '10'), ([1, 126], 'Tuesday'), ([1, 158], 'Wednesday'), ([1, 188], 'Thursday'), ([173, 191], '10'), ([1, 219], 'Friday'), ([1, 250], 'Saturday')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [10, 10, 10, 10]\nmode = max(set(numbers), key = numbers.count)\nprint(mode)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": true
    },
    "802": {
        "question": "Karen bought 4 pounds of silk scraps and 4 pounds of canvas scraps. How much did she spend? (Unit: $)",
        "image": "images/802.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "69",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "802",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 243,
            "img_height": 194,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'silk scraps'), ([173, 7], 'S9.08/lb'), ([9, 39], 'denim scraps'), ([175, 39], '$8.47/lb'), ([11, 75], 'canvas scraps'), ([173, 71], 'S8.17/lb'), ([7, 103], 'felt scraps'), ([173, 101], '$7.29/lb'), ([9, 135], 'faux fur scraps'), ([164, 132], 'S11.79/lb'), ([9, 169], 'lace scraps'), ([173, 165], '86.37/lb')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Karen bought 4 pounds of silk scraps and 4 pounds of canvas scraps. How much did she spend? (Unit: $)\nImage detected text: [([9, 7], 'silk scraps'), ([173, 7], 'S9.08/lb'), ([9, 39], 'denim scraps'), ([175, 39], '$8.47/lb'), ([11, 75], 'canvas scraps'), ([173, 71], 'S8.17/lb'), ([7, 103], 'felt scraps'), ([173, 101], '$7.29/lb'), ([9, 135], 'faux fur scraps'), ([164, 132], 'S11.79/lb'), ([9, 169], 'lace scraps'), ([173, 165], '86.37/lb')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "silk_scraps_price = 9.08\ncanvas_scraps_price = 8.17\n\ntotal_cost = (silk_scraps_price + canvas_scraps_price) * 4\nprint(total_cost)",
        "execution": "69.0",
        "error": "None",
        "extraction": "34.5",
        "prediction": null,
        "true_false": false
    },
    "803": {
        "question": "What is the value of the smallest individual bar in the whole chart?",
        "image": "images/803.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "803",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 14], 'Title'), ([41, 35], '10'), ([12, 140], '9'), ([99, 313], '1'), ([139, 306], 'N!'), ([289, 313], '8'), ([378, 312], '1'), ([237, 391], 'human'), ([367, 391], 'saint'), ([331, 312], '8'), ([139, 389], 'log')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual bar in the whole chart?\nImage detected text: [([224, 14], 'Title'), ([41, 35], '10'), ([12, 140], '9'), ([99, 313], '1'), ([139, 306], 'N!'), ([289, 313], '8'), ([378, 312], '1'), ([237, 391], 'human'), ([367, 391], 'saint'), ([331, 312], '8'), ([139, 389], 'log')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "smallest_bar_value = float('inf')\nchart_values = [10, 9, 1, 8, 1]\nfor value in chart_values:\n    if value < smallest_bar_value:\n        smallest_bar_value = value\n\nprint(smallest_bar_value)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": true
    },
    "804": {
        "question": "In $\\odot B$, $CE=13.5$. Find $BD$. Round to the nearest hundredth.",
        "image": "images/804.jpg",
        "choices": [
            "3.71",
            "4.29",
            "4.53",
            "6.75"
        ],
        "unit": null,
        "precision": null,
        "answer": "4.29",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "804",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 493,
            "img_height": 524,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([238, 44], 'A'), ([263, 163], '8'), ([270, 244], 'B'), ([408, 336], 'E')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In $\\odot B$, $CE=13.5$. Find $BD$. Round to the nearest hundredth.\nChoices:\n(A) 3.71\n(B) 4.29\n(C) 4.53\n(D) 6.75\nImage detected text: [([238, 44], 'A'), ([263, 163], '8'), ([270, 244], 'B'), ([408, 336], 'E')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_BD(CE):\n    radius = 8\n    BC = radius * 2\n    BE = math.sqrt(BC**2 - CE**2)\n    BD = BC - BE\n    return round(BD, 2)\n\nCE = 13.5\nprint(find_BD(CE))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "4.53",
        "prediction": "4.53",
        "true_false": false
    },
    "805": {
        "question": "Is the donut more than half eaten?",
        "image": "images/805.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "805",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 434,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the donut more than half eaten?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "donut_percent_eaten = 75\n\nif donut_percent_eaten > 50:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "806": {
        "question": "As shown in the figure, AB is the diameter of \u2299O, and point C is on \u2299O. If \u2220A = 40.0, then the degree of \u2220B is ()",
        "image": "images/806.jpg",
        "choices": [
            "80\u00b0",
            "60\u00b0",
            "50\u00b0",
            "40\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "806",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 127,
            "img_height": 107,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, AB is the diameter of \u2299O, and point C is on \u2299O. If \u2220A = 40.0, then the degree of \u2220B is ()\nChoices:\n(A) 80\u00b0\n(B) 60\u00b0\n(C) 50\u00b0\n(D) 40\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_A(angle_A):\n    angle_B = 180 - angle_A\n    return angle_B\n\nangle_A = 40.0\nangle_B = find_angle_A(angle_A)\nprint(angle_B)",
        "execution": "140.0",
        "error": "None",
        "extraction": "40\u00b0",
        "prediction": "40\u00b0",
        "true_false": false
    },
    "807": {
        "question": "Which of the following leaf shapes would have the least amount of wind resistance and water loss?",
        "image": "images/807.jpg",
        "choices": [
            "Truncate",
            "Acuminate",
            "Rounded",
            "Sagittate"
        ],
        "unit": null,
        "precision": null,
        "answer": "Acuminate",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "807",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 508,
            "img_height": 300,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([90, 22], 'acuminate'), ([376, 24], 'oblique'), ([102, 92], 'acute'), ([372, 96], 'sagittate'), ([88, 160], 'rounded'), ([384, 166], 'hastate'), ([91, 239], 'cordate'), ([380, 234], 'truncate'), ([149, 281], 'EM: Armstrong 2002')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which of the following leaf shapes would have the least amount of wind resistance and water loss?\nChoices:\n(A) Truncate\n(B) Acuminate\n(C) Rounded\n(D) Sagittate\nImage detected text: [([90, 22], 'acuminate'), ([376, 24], 'oblique'), ([102, 92], 'acute'), ([372, 96], 'sagittate'), ([88, 160], 'rounded'), ([384, 166], 'hastate'), ([91, 239], 'cordate'), ([380, 234], 'truncate'), ([149, 281], 'EM: Armstrong 2002')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def least_resistance_leaf_shape(shapes):\n    resistance_levels = {\n        'truncate': 1,\n        'acuminate': 2,\n        'rounded': 3,\n        'sagittate': 4\n    }\n\n    least_resistance = float('inf')\n    least_resistance_shape = \"\"\n\n    for shape in shapes:\n        if shape in resistance_levels:\n            resistance = resistance_levels[shape]\n            if resistance < least_resistance:\n                least_resistance = resistance\n                least_resistance_shape = shape\n\n    return least_resistance_shape\n\nshapes = ['acuminate', 'oblique', 'acute', 'sagittate', 'rounded', 'hastate', 'cordate', 'truncate']\nprint(least_resistance_leaf_shape(shapes))",
        "execution": "truncate",
        "error": "None",
        "extraction": "truncate",
        "prediction": "Truncate",
        "true_false": false
    },
    "808": {
        "question": "Subtract all large purple spheres. Subtract all small gray things. How many objects are left?",
        "image": "images/808.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "808",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large purple spheres. Subtract all small gray things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_purple_spheres = 5\nsmall_gray_things = 3\n\nobjects_left = large_purple_spheres - small_gray_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "809": {
        "question": "In a group of horses, some individuals have a black coat and others have a reddish-brown coat. In this group, the gene for the coat color trait has two alleles. The allele for a black coat (L) is dominant over the allele for a reddish-brown coat (l).\nThis Punnett square shows a cross between two horses. What is the expected ratio of offspring with a reddish-brown coat to offspring with a black coat? Choose the most likely ratio.",
        "image": "images/809.jpg",
        "choices": [
            "1:3",
            "4:0",
            "3:1",
            "0:4",
            "2:2"
        ],
        "unit": null,
        "precision": null,
        "answer": "2:2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "809",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 233,
            "img_height": 241,
            "source": "ScienceQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In a group of horses, some individuals have a black coat and others have a reddish-brown coat. In this group, the gene for the coat color trait has two alleles. The allele for a black coat (L) is dominant over the allele for a reddish-brown coat (l).\nThis Punnett square shows a cross between two horses. What is the expected ratio of offspring with a reddish-brown coat to offspring with a black coat? Choose the most likely ratio.\nChoices:\n(A) 1:3\n(B) 4:0\n(C) 3:1\n(D) 0:4\n(E) 2:2\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def punnett_square_ratio():\n    black_coat = ['L', 'L']\n    reddish_brown_coat = ['l', 'l']\n\n    offspring_ratio = {\n        'LL': 0,\n        'Ll': 2,\n        'lL': 2,\n        'll': 0\n    }\n\n    total_offspring = 0\n    reddish_brown_offspring = 0\n    black_offspring = 0\n\n    for parent1 in black_coat:\n        for parent2 in reddish_brown_coat:\n            offspring = parent1 + parent2\n            total_offspring += 1\n            reddish_brown_offspring += offspring_ratio[offspring]\n            black_offspring += 2 - offspring_ratio[offspring]\n\n    return f\"{reddish_brown_offspring}:{black_offspring}\"\n\nprint(punnett_square_ratio())",
        "execution": "8:0",
        "error": "None",
        "extraction": "3:1",
        "prediction": "3:1",
        "true_false": false
    },
    "810": {
        "question": "Subtract all yellow metallic balls. Subtract all small yellow shiny things. How many objects are left?",
        "image": "images/810.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "810",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all yellow metallic balls. Subtract all small yellow shiny things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_metallic_balls = 5\nsmall_yellow_shiny_things = 3\n\nobjects_left = yellow_metallic_balls - small_yellow_shiny_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "811": {
        "question": "A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies? (Unit: lemon-flavored candies)",
        "image": "images/811.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "34",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "811",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 247,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Lemon-flavored candies per bag'), ([71, 25], 'Stem'), ([119, 27], 'Leaf'), ([121, 51], '4 9'), ([119, 71], '3 4'), ([119, 95], '18 9 9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies? (Unit: lemon-flavored candies)\nImage detected text: [([0, 0], 'Lemon-flavored candies per bag'), ([71, 25], 'Stem'), ([119, 27], 'Leaf'), ([121, 51], '4 9'), ([119, 71], '3 4'), ([119, 95], '18 9 9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "lemon_candies_per_bag = [4, 3, 18]\nsmallest_number = min(lemon_candies_per_bag)\nprint(smallest_number)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "812": {
        "question": "Does the gray bar always have smaller value?",
        "image": "images/812.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "812",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 840,
            "img_height": 1286,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 28], 'Across 14 countries polled, climate change and'), ([7, 71], 'infectious diseases top list of global threats'), ([10, 120], 'Median % who say the following are a'), ([460, 122], 'to their country'), ([384, 178], 'Major'), ([666, 178], 'Minor'), ([752, 178], 'Not a'), ([378, 204], 'threat'), ([661, 203], 'threat'), ([745, 202], 'threat'), ([14, 260], 'Global climate change'), ([576, 260], '70%'), ([680, 260], '24%'), ([766, 260], '5%'), ([98, 332], 'The spread of'), ([586, 348], '69'), ([692, 348], '28'), ([44, 362], 'infectious diseases'), ([141, 436], 'Terrorism'), ([570, 438], '66'), ([682, 438], '30'), ([54, 514], 'Cyberattacks from'), ([562, 528], '65'), ([672, 528], '30'), ([86, 540], 'other countries'), ([18, 601], 'The spread of nuclear'), ([543, 619], '61'), ([656, 618], '31'), ([148, 632], 'weapons'), ([38, 692], 'The condition of the'), ([526, 706], '58'), ([652, 706], '35'), ([79, 716], 'global economy'), ([94, 794], 'Global poverty'), ([498, 796], '53'), ([624, 796], '35'), ([18, 860], 'Long-standing conflict'), ([26, 888], 'between countries or'), ([470, 886], '48'), ([612, 886], '41'), ([102, 916], 'ethnic groups'), ([61, 951], 'Large numbers of'), ([40, 978], 'people moving from'), ([424, 974], '40'), ([567, 977], '40'), ([724, 974], '18'), ([10, 1004], 'one country to another'), ([10, 1051], 'Note: Percentages are medians based on 14 countries surveyed: U.S_, Canada, Belgium'), ([10, 1076], 'Denmark, France, Germany; Italy; Netherlands, Spain, Sweden, UK, Australia, Japan and'), ([8, 1106], 'South Korea. Those who did not answer are not shown'), ([8, 1131], 'Source- Spring 2020 Global Attitudes Survey_ Q13a-i '), ([10, 1157], '\"Despite Pandemic, Many Europeans Still See Climate Change as Greatest Threat to Their'), ([9, 1187], 'Countries\"'), ([10, 1224], 'PEW RESEARCH CENTER')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does the gray bar always have smaller value?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([11, 28], 'Across 14 countries polled, climate change and'), ([7, 71], 'infectious diseases top list of global threats'), ([10, 120], 'Median % who say the following are a'), ([460, 122], 'to their country'), ([384, 178], 'Major'), ([666, 178], 'Minor'), ([752, 178], 'Not a'), ([378, 204], 'threat'), ([661, 203], 'threat'), ([745, 202], 'threat'), ([14, 260], 'Global climate change'), ([576, 260], '70%'), ([680, 260], '24%'), ([766, 260], '5%'), ([98, 332], 'The spread of'), ([586, 348], '69'), ([692, 348], '28'), ([44, 362], 'infectious diseases'), ([141, 436], 'Terrorism'), ([570, 438], '66'), ([682, 438], '30'), ([54, 514], 'Cyberattacks from'), ([562, 528], '65'), ([672, 528], '30'), ([86, 540], 'other countries'), ([18, 601], 'The spread of nuclear'), ([543, 619], '61'), ([656, 618], '31'), ([148, 632], 'weapons'), ([38, 692], 'The condition of the'), ([526, 706], '58'), ([652, 706], '35'), ([79, 716], 'global economy'), ([94, 794], 'Global poverty'), ([498, 796], '53'), ([624, 796], '35'), ([18, 860], 'Long-standing conflict'), ([26, 888], 'between countries or'), ([470, 886], '48'), ([612, 886], '41'), ([102, 916], 'ethnic groups'), ([61, 951], 'Large numbers of'), ([40, 978], 'people moving from'), ([424, 974], '40'), ([567, 977], '40'), ([724, 974], '18'), ([10, 1004], 'one country to another'), ([10, 1051], 'Note: Percentages are medians based on 14 countries surveyed: U.S_, Canada, Belgium'), ([10, 1076], 'Denmark, France, Germany; Italy; Netherlands, Spain, Sweden, UK, Australia, Japan and'), ([8, 1106], 'South Korea. Those who did not answer are not shown'), ([8, 1131], 'Source- Spring 2020 Global Attitudes Survey_ Q13a-i '), ([10, 1157], '\"Despite Pandemic, Many Europeans Still See Climate Change as Greatest Threat to Their'), ([9, 1187], 'Countries\"'), ([10, 1224], 'PEW RESEARCH CENTER')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def gray_bar_smaller(image_text):\n    gray_bar_text = \"\"\n    for text in image_text:\n        if \"Gray bar\" in text:\n            gray_bar_text = text\n            break\n    \n    if gray_bar_text == \"\":\n        return \"No\"\n    \n    gray_bar_value = int(gray_bar_text.split()[0])\n    for text in image_text:\n        if \"Median %\" in text:\n            value = int(text.split()[0])\n            if value > gray_bar_value:\n                return \"No\"\n    \n    return \"Yes\"\n\nimage_text = [\"Across 14 countries polled, climate change and\",\n              \"infectious diseases top list of global threats\",\n              \"Median % who say the following are a\",\n              \"to their country\",\n              \"Major\",\n              \"Minor\",\n              \"Not a\",\n              \"threat\",\n              \"threat\",\n              \"threat\",\n              \"Global climate change\",\n              \"70%\",\n              \"24%\",\n              \"5%\",\n              \"The spread of\",\n              \"69\",\n              \"28\",\n              \"infectious diseases\",\n              \"Terrorism\",\n              \"66\",\n              \"30\",\n              \"Cyberattacks from\",\n              \"65\",\n              \"30\",\n              \"other countries\",\n              \"The spread of nuclear\",\n              \"61\",\n              \"31\",\n              \"weapons\",\n              \"The condition of the\",\n              \"58\",\n              \"35\",\n              \"global economy\",\n              \"Global poverty\",\n              \"53\",\n              \"35\",\n              \"Long-standing conflict\",\n              \"between countries or\",\n              \"48\",\n              \"41\",\n              \"ethnic groups\",\n              \"Large numbers of\",\n              \"people moving from\",\n              \"40\",\n              \"40\",\n              \"18\",\n              \"one country to another\"]\n\nprint(gray_bar_smaller(image_text))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "813": {
        "question": "What is the highest value on the X axis?",
        "image": "images/813.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "30",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "813",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1768,
            "img_height": 2264,
            "source": "DocVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "document image",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([271, 501], '0.8'), ([1045, 543], '360 m H'), ([1109, 599], 'El'), ([1164, 606], 'Cm'), ([1213, 607], '='), ([1242, 596], '47.0'), ([1127, 655], '0.1%'), ([271, 815], '0.6'), ([272, 1126], '0.4'), ([196, 1178], 'E'), ([196, 1311], '1'), ([1091, 1347], '435 n ]'), ([270, 1430], '0.2'), ([1158, 1426], 'Elcm'), ([1247, 1433], '='), ([1277, 1427], '14.7'), ([1177, 1467], '0.17'), ([524, 1774], '5'), ([708, 1774], '10'), ([909, 1773], '15'), ([1114, 1774], '20'), ([1297, 1775], '25'), ([1483, 1775], '30'), ([607, 1871], 'MICROGRAMS /ml-E-DNP_LYSINE_HCL'), ([805, 2036], 'Figure'), ([929, 2045], '2'), ([399, 2227], 'suullle nlypS IWNN'), ([732, 2230], '@ustrE'), ([823, 2223], 'documents ucsf eduldocslkmvd02')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest value on the X axis?\nImage detected text: [([271, 501], '0.8'), ([1045, 543], '360 m H'), ([1109, 599], 'El'), ([1164, 606], 'Cm'), ([1213, 607], '='), ([1242, 596], '47.0'), ([1127, 655], '0.1%'), ([271, 815], '0.6'), ([272, 1126], '0.4'), ([196, 1178], 'E'), ([196, 1311], '1'), ([1091, 1347], '435 n ]'), ([270, 1430], '0.2'), ([1158, 1426], 'Elcm'), ([1247, 1433], '='), ([1277, 1427], '14.7'), ([1177, 1467], '0.17'), ([524, 1774], '5'), ([708, 1774], '10'), ([909, 1773], '15'), ([1114, 1774], '20'), ([1297, 1775], '25'), ([1483, 1775], '30'), ([607, 1871], 'MICROGRAMS /ml-E-DNP_LYSINE_HCL'), ([805, 2036], 'Figure'), ([929, 2045], '2'), ([399, 2227], 'suullle nlypS IWNN'), ([732, 2230], '@ustrE'), ([823, 2223], 'documents ucsf eduldocslkmvd02')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_value_x_axis(text):\n    values = []\n    for item in text:\n        if item[1].isdigit() or (item[1].startswith('-') and item[1][1:].isdigit()):\n            values.append(float(item[1]))\n    return max(values)\n\ntext = [([271, 501], '0.8'), ([1045, 543], '360 m H'), ([1109, 599], 'El'), ([1164, 606], 'Cm'), ([1213, 607], '='), ([1242, 596], '47.0'), ([1127, 655], '0.1%'), ([271, 815], '0.6'), ([272, 1126], '0.4'), ([196, 1178], 'E'), ([196, 1311], '1'), ([1091, 1347], '435 n ]'), ([270, 1430], '0.2'), ([1158, 1426], 'Elcm'), ([1247, 1433], '='), ([1277, 1427], '14.7'), ([1177, 1467], '0.17'), ([524, 1774], '5'), ([708, 1774], '10'), ([909, 1773], '15'), ([1114, 1774], '20'), ([1297, 1775], '25'), ([1483, 1775], '30'), ([607, 1871], 'MICROGRAMS /ml-E-DNP_LYSINE_HCL'), ([805, 2036], 'Figure'), ([929, 2045], '2'), ([399, 2227], 'suullle nlypS IWNN'), ([732, 2230], '@ustrE'), ([823, 2223], 'documents ucsf eduldocslkmvd02')]\n\nprint(highest_value_x_axis(text))",
        "execution": "30.0",
        "error": "None",
        "extraction": "47.0",
        "prediction": null,
        "true_false": false
    },
    "814": {
        "question": "What is the value of the largest individual bar in the whole chart?",
        "image": "images/814.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "100000000",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "814",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([173, 13], 'Title'), ([39, 31], '1010'), ([42, 66], '109'), ([43, 107], '108'), ([42, 144], '107'), ([43, 185], '106'), ([15, 179], '!'), ([365, 217], 'acre'), ([43, 225], '105'), ([365, 239], 'potato'), ([42, 262], '104'), ([43, 303], '103'), ([43, 343], '102'), ([95, 373], '3'), ([153, 373], '2'), ([209, 371], '1'), ([271, 373], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest individual bar in the whole chart?\nImage detected text: [([173, 13], 'Title'), ([39, 31], '1010'), ([42, 66], '109'), ([43, 107], '108'), ([42, 144], '107'), ([43, 185], '106'), ([15, 179], '!'), ([365, 217], 'acre'), ([43, 225], '105'), ([365, 239], 'potato'), ([42, 262], '104'), ([43, 303], '103'), ([43, 343], '102'), ([95, 373], '3'), ([153, 373], '2'), ([209, 371], '1'), ([271, 373], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [1010, 109, 108, 107, 106, 105, 104, 103, 102, 3, 2, 1, 1]\nmax_value = max(values)\nprint(max_value)",
        "execution": "1010",
        "error": "None",
        "extraction": "1010",
        "prediction": "1010",
        "true_false": false
    },
    "815": {
        "question": "Find $m \\angle N C L$",
        "image": "images/815.jpg",
        "choices": [
            "60",
            "120",
            "240",
            "360"
        ],
        "unit": null,
        "precision": null,
        "answer": "120",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "815",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 367,
            "img_height": 279,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 36], 'M'), ([55, 77], '(x - 1)?'), ([222, 112], '60'), ([30, 172], '(3x + 5)?')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $m \\angle N C L$\nChoices:\n(A) 60\n(B) 120\n(C) 240\n(D) 360\nImage detected text: [([224, 36], 'M'), ([55, 77], '(x - 1)?'), ([222, 112], '60'), ([30, 172], '(3x + 5)?')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nangle_M = 60\nangle_N = (x - 1)\nangle_L = (3*x + 5)\n\neq = sp.Eq(angle_M + angle_N + angle_L, 360)\nsolution = sp.solve(eq, x)\n\nangle_NCL = angle_N.subs(x, solution[0])\nprint(angle_NCL)",
        "execution": "73",
        "error": "None",
        "extraction": "60",
        "prediction": "60",
        "true_false": false
    },
    "816": {
        "question": "Find x. Round to the nearest tenth, if necessary.",
        "image": "images/816.jpg",
        "choices": [
            "3",
            "9",
            "12.25",
            "24"
        ],
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "816",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 379,
            "img_height": 272,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([274, 30], '2x'), ([176, 46], '24'), ([202, 156], '12.25')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x. Round to the nearest tenth, if necessary.\nChoices:\n(A) 3\n(B) 9\n(C) 12.25\n(D) 24\nImage detected text: [([274, 30], '2x'), ([176, 46], '24'), ([202, 156], '12.25')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq = Eq(2*x, 24)\n\nsol = solve(eq, x)\nsol = round(sol[0], 1)\n\nsol",
        "execution": "",
        "error": "None",
        "extraction": "12.0",
        "prediction": "12.25",
        "true_false": false
    },
    "817": {
        "question": "As shown in the figure, the straight line a \u2225 b, the point B is on the straight line b, and AB \u22a5 BC, \u22202 = 65.0, then the degree of \u22201 is ()",
        "image": "images/817.jpg",
        "choices": [
            "65\u00b0",
            "25\u00b0",
            "35\u00b0",
            "45\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "25\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "817",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 171,
            "img_height": 94,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, the straight line a \u2225 b, the point B is on the straight line b, and AB \u22a5 BC, \u22202 = 65.0, then the degree of \u22201 is ()\nChoices:\n(A) 65\u00b0\n(B) 25\u00b0\n(C) 35\u00b0\n(D) 45\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle2):\n    angle1 = 180 - angle2\n    return angle1\n\nangle2 = 65.0\nangle1 = find_angle(angle2)\nprint(angle1)",
        "execution": "115.0",
        "error": "None",
        "extraction": "115.0",
        "prediction": "65\u00b0",
        "true_false": false
    },
    "818": {
        "question": "What's the ratio of least value of light brown graph and leftmost value of dark brown graph?",
        "image": "images/818.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.32",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "818",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 310,
            "img_height": 434,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([17, 13], \"2000,just half of voters said it 'really\"), ([0, 32], \"mattered' who won the presidency; this\"), ([0, 52], 'year, 83% express this view'), ([1, 79], '% 0f registered volers tho Say'), ([21, 109], 'rcally matters who wins the'), ([9, 123], 'pre sidential'), ([81, 123], 'lection'), ([9, 275], 'Things will be pretty much the same'), ([8, 287], 'regardless'), ([82, 290], 'ino'), ([119, 289], 'elected'), ([9, 317], '2000'), ([61, 317], '2004'), ([115, 317], '2008'), ([167, 317], '2012'), ([219, 317], '2016'), ([273, 317], '2020'), ([1, 344], 'Notes: Based on registered voters. Volunteered and don\"t know'), ([2, 362], 'response5 not snown'), ([101, 359], 'Data'), ([142, 362], 'prior Years trom June Survey5'), ([2, 374], 'ScuICC:'), ([37, 373], 'Telephong'), ([88, 376], 'suful'), ([129, 373], 'U.S. adulis conducted July 23Aug'), ([1, 387], '2020.'), ([1, 405], 'PEW RESEARCH CENTER')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What's the ratio of least value of light brown graph and leftmost value of dark brown graph?\nImage detected text: [([17, 13], \"2000,just half of voters said it 'really\"), ([0, 32], \"mattered' who won the presidency; this\"), ([0, 52], 'year, 83% express this view'), ([1, 79], '% 0f registered volers tho Say'), ([21, 109], 'rcally matters who wins the'), ([9, 123], 'pre sidential'), ([81, 123], 'lection'), ([9, 275], 'Things will be pretty much the same'), ([8, 287], 'regardless'), ([82, 290], 'ino'), ([119, 289], 'elected'), ([9, 317], '2000'), ([61, 317], '2004'), ([115, 317], '2008'), ([167, 317], '2012'), ([219, 317], '2016'), ([273, 317], '2020'), ([1, 344], 'Notes: Based on registered voters. Volunteered and don\"t know'), ([2, 362], 'response5 not snown'), ([101, 359], 'Data'), ([142, 362], 'prior Years trom June Survey5'), ([2, 374], 'ScuICC:'), ([37, 373], 'Telephong'), ([88, 376], 'suful'), ([129, 373], 'U.S. adulis conducted July 23Aug'), ([1, 387], '2020.'), ([1, 405], 'PEW RESEARCH CENTER')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "light_brown_graph = 2000\ndark_brown_graph = 83\n\nratio = light_brown_graph / dark_brown_graph\nprint(ratio)",
        "execution": "24.096385542168676",
        "error": "None",
        "extraction": "2000/83",
        "prediction": null,
        "true_false": false
    },
    "819": {
        "question": "Find the value of $t$ in the parallelogram.",
        "image": "images/819.jpg",
        "choices": [
            "6",
            "7",
            "8",
            "13"
        ],
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "819",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 428,
            "img_height": 400,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([291, 131], 'S _ 7'), ([299, 223], '2t _ 6'), ([282, 326], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the value of $t$ in the parallelogram.\nChoices:\n(A) 6\n(B) 7\n(C) 8\n(D) 13\nImage detected text: [([291, 131], 'S _ 7'), ([299, 223], '2t _ 6'), ([282, 326], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nt = sp.Symbol('t')\neq = sp.Eq(2*t, 6)\nsol = sp.solve(eq, t)\nsol",
        "execution": "",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "820": {
        "question": "$a=14, b=48,$ and $c=50$ find $cosA$",
        "image": "images/820.jpg",
        "choices": [
            "0.14",
            "0.48",
            "0.50",
            "0.96"
        ],
        "unit": null,
        "precision": null,
        "answer": "0.96",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "820",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 238,
            "img_height": 160,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: $a=14, b=48,$ and $c=50$ find $cosA$\nChoices:\n(A) 0.14\n(B) 0.48\n(C) 0.50\n(D) 0.96\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\na = 14\nb = 48\nc = 50\n\ncosA = (b**2 + c**2 - a**2) / (2 * b * c)\ncosA = round(cosA, 2)\n\nprint(cosA)",
        "execution": "0.96",
        "error": "None",
        "extraction": "0.96",
        "prediction": "0.96",
        "true_false": true
    },
    "821": {
        "question": "Are most of the people young men?",
        "image": "images/821.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "821",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 360,
            "img_height": 500,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([76, 270], 'aelut'), ([127, 147], 'Qualo')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are most of the people young men?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([76, 270], 'aelut'), ([127, 147], 'Qualo')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_gender(text):\n    count_male = 0\n    count_female = 0\n\n    for word in text:\n        if word.lower() == 'men' or word.lower() == 'man' or word.lower() == 'male':\n            count_male += 1\n        elif word.lower() == 'women' or word.lower() == 'woman' or word.lower() == 'female':\n            count_female += 1\n\n    if count_male > count_female:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ntext = ['Most', 'of', 'the', 'people', 'in', 'the', 'image', 'are', 'young', 'men']\nprint(count_gender(text))",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "822": {
        "question": "Find the perimeter of the parallelogram. Round to the nearest tenth if necessary.",
        "image": "images/822.jpg",
        "choices": [
            "22",
            "40",
            "44",
            "48"
        ],
        "unit": null,
        "precision": null,
        "answer": "44",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "822",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 356,
            "img_height": 227,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([13, 5], '13.'), ([186, 4], '12 m'), ([12, 86], '10 m'), ([40, 172], '60')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find the perimeter of the parallelogram. Round to the nearest tenth if necessary.\nChoices:\n(A) 22\n(B) 40\n(C) 44\n(D) 48\nImage detected text: [([13, 5], '13.'), ([186, 4], '12 m'), ([12, 86], '10 m'), ([40, 172], '60')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 13\nside2 = 12\nside3 = 10\nside4 = 60\n\nperimeter = side1 + side2 + side3 + side4\nprint(perimeter)",
        "execution": "95",
        "error": "None",
        "extraction": "95",
        "prediction": "22",
        "true_false": false
    },
    "823": {
        "question": "You can see how organisms are interconnected from the diagram given. What will be the effect if all the Killer whales are removed?",
        "image": "images/823.jpg",
        "choices": [
            "The population of tuna will increase",
            "Mouse will decrease in number",
            "The phytoplankton will decrease",
            "The grasshopper will die"
        ],
        "unit": null,
        "precision": null,
        "answer": "The population of tuna will increase",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "823",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1152,
            "img_height": 1080,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([428, 0], 'Trophic level'), ([3, 121], 'Hawk'), ([910, 124], 'Killer whale'), ([3, 286], 'Snake'), ([913, 293], 'Tuna'), ([5, 483], 'Mouse'), ([911, 487], 'Herring'), ([2, 689], 'Grasshopper'), ([915, 701], 'Zooplankton'), ([5, 903], 'Plant'), ([909, 903], 'Phytoplankton'), ([19, 1013], '^'), ([46, 1003], 'terrestrial food chain'), ([740, 1004], 'An aquatic food chain'), ([5, 1057], 'Copyright @ 2009 Pearson Education, Inc')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: You can see how organisms are interconnected from the diagram given. What will be the effect if all the Killer whales are removed?\nChoices:\n(A) The population of tuna will increase\n(B) Mouse will decrease in number\n(C) The phytoplankton will decrease\n(D) The grasshopper will die\nImage detected text: [([428, 0], 'Trophic level'), ([3, 121], 'Hawk'), ([910, 124], 'Killer whale'), ([3, 286], 'Snake'), ([913, 293], 'Tuna'), ([5, 483], 'Mouse'), ([911, 487], 'Herring'), ([2, 689], 'Grasshopper'), ([915, 701], 'Zooplankton'), ([5, 903], 'Plant'), ([909, 903], 'Phytoplankton'), ([19, 1013], '^'), ([46, 1003], 'terrestrial food chain'), ([740, 1004], 'An aquatic food chain'), ([5, 1057], 'Copyright @ 2009 Pearson Education, Inc')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def effect_of_removing_killer_whales(diagram):\n    connections = {\n        'Killer whale': ['Tuna', 'Herring'],\n        'Tuna': ['Hawk'],\n        'Herring': ['Snake'],\n        'Snake': ['Grasshopper'],\n        'Grasshopper': ['Zooplankton'],\n        'Zooplankton': ['Phytoplankton'],\n        'Phytoplankton': ['Plant']\n    }\n\n    if 'Killer whale' in diagram:\n        return \"The phytoplankton will decrease\"\n    return \"\"\n\ndiagram = \"The diagram shows a trophic level with various organisms. The Killer whale is connected to the Tuna and Herring. The Tuna is connected to the Hawk. The Herring is connected to the Snake. The Snake is connected to the Grasshopper. The Grasshopper is connected to the Zooplankton. The Zooplankton is connected to the Phytoplankton. The Phytoplankton is connected to the Plant.\"\n\nprint(effect_of_removing_killer_whales(diagram))",
        "execution": "The phytoplankton will decrease",
        "error": "None",
        "extraction": "The phytoplankton will decrease",
        "prediction": "The phytoplankton will decrease",
        "true_false": false
    },
    "824": {
        "question": "How much money does Luca need to buy a sour apple candy and a butterscotch candy? (Unit: $)",
        "image": "images/824.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "0.13",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "824",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 247,
            "img_height": 192,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'sour apple candy'), ([195, 5], '$0.06'), ([7, 39], 'piece of gum'), ([195, 37], '$0.07'), ([9, 73], 'gummy worm'), ([195, 69], '$0.09'), ([7, 105], 'lemon drop'), ([195, 101], '$0.05'), ([6, 132], 'piece of licorice'), ([195, 133], '$0.07'), ([9, 167], 'butterscotch candy'), ([195, 165], '$0.07')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Luca need to buy a sour apple candy and a butterscotch candy? (Unit: $)\nImage detected text: [([9, 7], 'sour apple candy'), ([195, 5], '$0.06'), ([7, 39], 'piece of gum'), ([195, 37], '$0.07'), ([9, 73], 'gummy worm'), ([195, 69], '$0.09'), ([7, 105], 'lemon drop'), ([195, 101], '$0.05'), ([6, 132], 'piece of licorice'), ([195, 133], '$0.07'), ([9, 167], 'butterscotch candy'), ([195, 165], '$0.07')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sour_apple_candy_price = 0.06\nbutterscotch_candy_price = 0.07\n\nans = sour_apple_candy_price + butterscotch_candy_price\nprint(ans)",
        "execution": "0.13",
        "error": "None",
        "extraction": "0.13",
        "prediction": "0.13",
        "true_false": true
    },
    "825": {
        "question": "Is the number of metallic road bikes that are behind the large bus less than the number of small matte double buss?",
        "image": "images/825.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "825",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of metallic road bikes that are behind the large bus less than the number of small matte double buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bikes_and_busses(num_metallic_road_bikes, num_large_busses, num_small_matte_double_busses):\n    if num_metallic_road_bikes < num_large_busses:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_metallic_road_bikes = 5\nnum_large_busses = 3\nnum_small_matte_double_busses = 7\n\nprint(compare_bikes_and_busses(num_metallic_road_bikes, num_large_busses, num_small_matte_double_busses))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "826": {
        "question": "Which is the largest part of the lung?",
        "image": "images/826.jpg",
        "choices": [
            "Inferior lobes",
            "Cardiac notch",
            "Superior lobes",
            "Middle lobe"
        ],
        "unit": null,
        "precision": null,
        "answer": "Superior lobes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "826",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 638,
            "img_height": 479,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([229, 40], 'Lung lobes'), ([376, 122], 'Superior Lobes'), ([375, 143], 'Middle Lobe'), ([377, 169], 'Inferior Lobes'), ([443, 265], 'Cardiac'), ([443, 283], 'notch'), ([203, 419], 'Hilum of trachea'), ([265, 451], 'DrAsir John Samuel (PTI')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which is the largest part of the lung?\nChoices:\n(A) Inferior lobes\n(B) Cardiac notch\n(C) Superior lobes\n(D) Middle lobe\nImage detected text: [([229, 40], 'Lung lobes'), ([376, 122], 'Superior Lobes'), ([375, 143], 'Middle Lobe'), ([377, 169], 'Inferior Lobes'), ([443, 265], 'Cardiac'), ([443, 283], 'notch'), ([203, 419], 'Hilum of trachea'), ([265, 451], 'DrAsir John Samuel (PTI')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_part = \"Inferior lobes\"\nprint(largest_part)",
        "execution": "Inferior lobes",
        "error": "None",
        "extraction": "Inferior lobes",
        "prediction": "Inferior lobes",
        "true_false": false
    },
    "827": {
        "question": "Choose the answer for the missing picture.",
        "image": "images/827.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "827",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 828,
            "img_height": 1138,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([558, 434], '2'), ([54, 762], 'A'), ([306, 762], 'B'), ([54, 968], 'D'), ([306, 966], 'E')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Choose the answer for the missing picture.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\n(E) E\n(F) F\nImage detected text: [([558, 434], '2'), ([54, 762], 'A'), ([306, 762], 'B'), ([54, 968], 'D'), ([306, 966], 'E')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_picture = 'C'\nprint(missing_picture)",
        "execution": "C",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "828": {
        "question": "Linda wants to buy 0.9 pounds of double chocolate cookie dough. How much will she spend? (Unit: $)",
        "image": "images/828.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "2.7",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "828",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 357,
            "img_height": 194,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([10, 7], 'peanut butter cookie dough'), ([281, 7], '53 per Ib'), ([9, 39], 'double chocolate cookie dough'), ([281, 39], '53 per Ib'), ([9, 71], 'chocolate chip cookie dough'), ([281, 71], 'S5 per Ib'), ([11, 103], 'oatmeal raisin cookie dough'), ([281, 103], 'S7 per Ib'), ([9, 135], 'gingersnap cookie dough'), ([281, 135], '53 per Ib'), ([9, 167], 'snickerdoodle cookie dough'), ([283, 169], 'S8 per Ib')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Linda wants to buy 0.9 pounds of double chocolate cookie dough. How much will she spend? (Unit: $)\nImage detected text: [([10, 7], 'peanut butter cookie dough'), ([281, 7], '53 per Ib'), ([9, 39], 'double chocolate cookie dough'), ([281, 39], '53 per Ib'), ([9, 71], 'chocolate chip cookie dough'), ([281, 71], 'S5 per Ib'), ([11, 103], 'oatmeal raisin cookie dough'), ([281, 103], 'S7 per Ib'), ([9, 135], 'gingersnap cookie dough'), ([281, 135], '53 per Ib'), ([9, 167], 'snickerdoodle cookie dough'), ([283, 169], 'S8 per Ib')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "double_chocolate_price_per_lb = 5.00\nweight = 0.9\n\ntotal_cost = double_chocolate_price_per_lb * weight\nprint(total_cost)",
        "execution": "4.5",
        "error": "None",
        "extraction": "4.5",
        "prediction": "4.5",
        "true_false": false
    },
    "829": {
        "question": "Which matchstick needs to be moved in order to create a square?",
        "image": "images/829.jpg",
        "choices": [
            "Top",
            "Bottom",
            "Left",
            "Right",
            "Not possible"
        ],
        "unit": null,
        "precision": null,
        "answer": "Left",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "829",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 378,
            "img_height": 396,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which matchstick needs to be moved in order to create a square?\nChoices:\n(A) Top\n(B) Bottom\n(C) Left\n(D) Right\n(E) Not possible\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def move_matchstick(square):\n    # Check if it is already a square\n    if square[0] == square[1] and square[1] == square[2] and square[2] == square[3]:\n        return \"Already a square\"\n\n    # Check if it is possible to create a square\n    if square[0] + square[1] + square[2] + square[3] % 4 != 0:\n        return \"Not possible\"\n\n    # Find the matchstick to move\n    for i in range(4):\n        if square[i] == square[i+1]:\n            return i+1\n\n    return \"Not possible\"\n\nsquare = [3, 2, 2, 3]\nprint(move_matchstick(square))",
        "execution": "Not possible",
        "error": "None",
        "extraction": "Not possible",
        "prediction": "Not possible",
        "true_false": false
    },
    "830": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/830.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "830",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 870,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([33, 5], 'Scnale Sweav'), ([271, 7], 'nq In'), ([386, 6], '1959'), ([17, 833], 'U.S. Senate Historical Office')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([33, 5], 'Scnale Sweav'), ([271, 7], 'nq In'), ([386, 6], '1959'), ([17, 833], 'U.S. Senate Historical Office')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1959\nperson2_birth_year = 1959\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "0",
        "error": "None",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "831": {
        "question": "An author recorded how many words she wrote in the past 3 days. How many words in total did the author write on Thursday and Friday? (Unit: words)",
        "image": "images/831.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "679",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "831",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 236,
            "img_height": 156,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([63, 5], 'Words written'), ([31, 37], 'Day'), ([99, 39], 'Number of words'), ([1, 63], 'Wednesday'), ([151, 69], '407'), ([3, 99], 'Thursday'), ([149, 99], '374'), ([0, 126], 'Friday'), ([149, 129], '305')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: An author recorded how many words she wrote in the past 3 days. How many words in total did the author write on Thursday and Friday? (Unit: words)\nImage detected text: [([63, 5], 'Words written'), ([31, 37], 'Day'), ([99, 39], 'Number of words'), ([1, 63], 'Wednesday'), ([151, 69], '407'), ([3, 99], 'Thursday'), ([149, 99], '374'), ([0, 126], 'Friday'), ([149, 129], '305')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "thursday_words = 374\nfriday_words = 305\n\ntotal_words = thursday_words + friday_words\nprint(total_words)",
        "execution": "679",
        "error": "None",
        "extraction": "679",
        "prediction": "679",
        "true_false": true
    },
    "832": {
        "question": "What is the value of f(0)?",
        "image": "images/832.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "-2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "832",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1920,
            "img_height": 1920,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of f(0)?\nImage detected text: [([919, 219], '5'), ([919, 519], '3'), ([917, 671], '2'), ([503, 1001], '3'), ([1399, 1001], '3'), ([1703, 1005], '5'), ([898, 1274], '-2'), ([898, 1424], '-3'), ([1410, 1524], 'x3 + 3x2'), ([1611, 1535], '6x = 8'), ([898, 1576], '-4'), ([1252, 1546], 'flx)'), ([898, 1728], '_5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    return 5*x**3 + 3*x**2 + 2*x + 3\n\nresult = f(0)\nprint(result)",
        "execution": "3",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "833": {
        "question": "Phenylalanine (Phe, 5) is a naturally occurring amino acid. What is the energy of interaction between its phenyl group and the electric dipole moment of a neighbouring peptide group? Take the distance between the groups as $4.0 \\mathrm{~nm}$ and treat the phenyl group as a benzene molecule. The magnitude of the dipole moment of the peptide group is $\\mu=1.3 \\mathrm{D}$ and the polarizability volume of benzene is $\\alpha^{\\prime}=1.04 \\times 10^{-29} \\mathrm{~m}^3$.\r\n",
        "image": "images/833.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "-4.3",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "833",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 474,
            "img_height": 372,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([186, 172], 'HzN'), ([347, 171], 'OH'), ([80, 282], '5'), ([125, 272], 'Phenylalanine')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Phenylalanine (Phe, 5) is a naturally occurring amino acid. What is the energy of interaction between its phenyl group and the electric dipole moment of a neighbouring peptide group? Take the distance between the groups as $4.0 \\mathrm{~nm}$ and treat the phenyl group as a benzene molecule. The magnitude of the dipole moment of the peptide group is $\\mu=1.3 \\mathrm{D}$ and the polarizability volume of benzene is $\\alpha^{\\prime}=1.04 \\times 10^{-29} \\mathrm{~m}^3$.\r\n\nImage detected text: [([186, 172], 'HzN'), ([347, 171], 'OH'), ([80, 282], '5'), ([125, 272], 'Phenylalanine')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "distance = 4.0 * 10**-9  # convert nm to m\ndipole_moment = 1.3 * 10**-30  # convert D to C.m\npolarizability_volume = 1.04 * 10**-29  # m^3\n\nenergy = (dipole_moment**2) / (4 * 3.14 * 8.85 * 10**-12 * distance**3) * polarizability_volume\nprint(energy)",
        "execution": "2.4706268667458347e-54",
        "error": "None",
        "extraction": "1.04e-29",
        "prediction": "0.0",
        "true_false": false
    },
    "834": {
        "question": "Among the states that border Georgia , does Florida have the lowest value ?",
        "image": "images/834.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "834",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 785,
            "img_height": 610,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([4, 8], 'Poverty Rate by RacelEthnicity: Hispanic_'), ([289, 9], '2019'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([325, 91], 'ND'), ([693, 85], 'ME'), ([79, 115], 'OR'), ([395, 115], 'MN'), ([731, 133], 'NH'), ([325, 143], 'SD'), ([449, 141], 'WI'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([729, 171], 'CT'), ([327, 193], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([577, 229], 'WV'), ([731, 231], 'DC'), ([343, 245], 'KS'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([529, 255], 'KY'), ([605, 277], 'NC'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([425, 309], 'AR'), ([587, 309], 'Sc'), ([467, 343], 'MS'), ([555, 337], 'GA'), ([79, 409], 'AK'), ([39, 493], '8.9%- 11.8%'), ([227, 493], '12.5%- 16.3%'), ([415, 493], '16.8%- 22.0%'), ([603, 493], '22.1%- 30.8%'), ([39, 527], 'NIA'), ([5, 589], \"SOURCE: Kaiser Family Foundation's State Health Facts.\")]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Among the states that border Georgia , does Florida have the lowest value ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([4, 8], 'Poverty Rate by RacelEthnicity: Hispanic_'), ([289, 9], '2019'), ([95, 59], 'WA'), ([217, 89], 'MT'), ([325, 91], 'ND'), ([693, 85], 'ME'), ([79, 115], 'OR'), ([395, 115], 'MN'), ([731, 133], 'NH'), ([325, 143], 'SD'), ([449, 141], 'WI'), ([637, 145], 'NY'), ([731, 147], 'MA'), ([233, 161], 'WY'), ([729, 171], 'CT'), ([327, 193], 'NE'), ([109, 205], 'NV'), ([547, 205], 'OH'), ([731, 201], 'DE'), ([731, 215], 'MD'), ([63, 231], 'CA'), ([251, 233], 'co'), ([577, 229], 'WV'), ([731, 231], 'DC'), ([343, 245], 'KS'), ([423, 249], 'MO'), ([605, 243], 'VA'), ([529, 255], 'KY'), ([605, 277], 'NC'), ([355, 297], 'OK'), ([235, 311], 'NM'), ([425, 309], 'AR'), ([587, 309], 'Sc'), ([467, 343], 'MS'), ([555, 337], 'GA'), ([79, 409], 'AK'), ([39, 493], '8.9%- 11.8%'), ([227, 493], '12.5%- 16.3%'), ([415, 493], '16.8%- 22.0%'), ([603, 493], '22.1%- 30.8%'), ([39, 527], 'NIA'), ([5, 589], \"SOURCE: Kaiser Family Foundation's State Health Facts.\")]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def lowest_value(states, values):\n    lowest = float('inf')\n    for state in states:\n        if state == 'Florida':\n            florida_value = values[state]\n            if florida_value < lowest:\n                lowest = florida_value\n    return lowest\n\nstates = ['Georgia', 'Florida', 'Alabama', 'South Carolina']\nvalues = {\n    'Georgia': 10,\n    'Florida': 5,\n    'Alabama': 8,\n    'South Carolina': 7\n}\n\nlowest = lowest_value(states, values)\nif lowest == values['Florida']:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "835": {
        "question": "What percent of people are wearing blue?",
        "image": "images/835.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "835",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 55], 'SEMPRESS')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percent of people are wearing blue?\nImage detected text: [([0, 55], 'SEMPRESS')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_people = 100\nblue_people = 75\n\npercent_blue = (blue_people / total_people) * 100\nprint(percent_blue)",
        "execution": "75.0",
        "error": "None",
        "extraction": "75",
        "prediction": "75",
        "true_false": false
    },
    "836": {
        "question": "What is the smallest species shown?",
        "image": "images/836.jpg",
        "choices": [
            "chinlea",
            "arganodus",
            "semionotus",
            "xenacanthus"
        ],
        "unit": null,
        "precision": null,
        "answer": "semionotus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "836",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1500,
            "img_height": 1076,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([588, 272], '\"Xenacanthus\"'), ([690, 424], 'Semionotus'), ([429, 515], 'Chinlea'), ([796, 844], 'Arganodus'), ([471, 973], '50 cm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the smallest species shown?\nChoices:\n(A) chinlea\n(B) arganodus\n(C) semionotus\n(D) xenacanthus\nImage detected text: [([588, 272], '\"Xenacanthus\"'), ([690, 424], 'Semionotus'), ([429, 515], 'Chinlea'), ([796, 844], 'Arganodus'), ([471, 973], '50 cm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def smallest_species(species_list):\n    smallest_species = \"\"\n    smallest_length = float('inf')\n\n    for species in species_list:\n        length = float(species[1].split()[0])\n        if length < smallest_length:\n            smallest_length = length\n            smallest_species = species[1]\n\n    return smallest_species\n\nspecies_list = [([588, 272], '\"Xenacanthus\"'), ([690, 424], 'Semionotus'), ([429, 515], 'Chinlea'), ([796, 844], 'Arganodus'), ([471, 973], '50 cm')]\n\nprint(smallest_species(species_list))",
        "execution": "",
        "error": "could not convert string to float: '\"Xenacanthus\"'",
        "extraction": "Chinlea",
        "prediction": "chinlea",
        "true_false": false
    },
    "837": {
        "question": "Are there fewer tiny red motorbikes than big red choppers?",
        "image": "images/837.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "837",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there fewer tiny red motorbikes than big red choppers?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_motorbikes_and_choppers(motorbikes, choppers):\n    if motorbikes < choppers:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nmotorbikes = 5\nchoppers = 10\n\nprint(compare_motorbikes_and_choppers(motorbikes, choppers))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "838": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/838.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "838",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1600,
            "img_height": 1200,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "839": {
        "question": "How many years have value less than 10%?",
        "image": "images/839.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "839",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([67, 41], '3535'), ([67, 85], '3025'), ([429, 95], '27-696'), ([67, 129], '2525'), ([119, 149], '21.49'), ([67, 171], '2035'), ([44, 180], '3'), ([243, 189], '16.996'), ([491, 199], '15.6%'), ([41, 212], '0'), ([305, 229], '12.1%'), ([69, 259], '1025'), ([185, 259], '8-83'), ([44, 252], '1'), ([371, 289], '5.3%'), ([619, 315], '2.4%'), ([685, 417], '6.8%'), ([121, 449], '2010'), ([183, 449], '2011'), ([245, 449], '2012'), ([307, 449], '2013'), ([369, 449], '2014'), ([433, 449], '2015'), ([495, 449], '2016'), ([557, 449], '2017'), ([619, 449], '2018'), ([681, 449], '2019'), ([681, 489], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many years have value less than 10%?\nImage detected text: [([67, 41], '3535'), ([67, 85], '3025'), ([429, 95], '27-696'), ([67, 129], '2525'), ([119, 149], '21.49'), ([67, 171], '2035'), ([44, 180], '3'), ([243, 189], '16.996'), ([491, 199], '15.6%'), ([41, 212], '0'), ([305, 229], '12.1%'), ([69, 259], '1025'), ([185, 259], '8-83'), ([44, 252], '1'), ([371, 289], '5.3%'), ([619, 315], '2.4%'), ([685, 417], '6.8%'), ([121, 449], '2010'), ([183, 449], '2011'), ([245, 449], '2012'), ([307, 449], '2013'), ([369, 449], '2014'), ([433, 449], '2015'), ([495, 449], '2016'), ([557, 449], '2017'), ([619, 449], '2018'), ([681, 449], '2019'), ([681, 489], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "years = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\nvalues = [21.49, 16.996, 12.1, 5.3, 2.4, 6.8]\n\ncount = 0\nfor i in range(len(values)):\n    if values[i] < 10:\n        count += 1\n\nprint(count)",
        "execution": "3",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "840": {
        "question": "From which item can you get the most protein?",
        "image": "images/840.jpg",
        "choices": [
            "salami",
            "wine",
            "cheese",
            "bread"
        ],
        "unit": null,
        "precision": null,
        "answer": "salami",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "840",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 375,
            "img_height": 500,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: From which item can you get the most protein?\nChoices:\n(A) salami\n(B) wine\n(C) cheese\n(D) bread\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "protein_content = {\n    'salami': 15,\n    'wine': 0,\n    'cheese': 10,\n    'bread': 2\n}\n\nmax_protein = max(protein_content, key=protein_content.get)\nprint(max_protein)",
        "execution": "salami",
        "error": "None",
        "extraction": "salami",
        "prediction": "salami",
        "true_false": true
    },
    "841": {
        "question": "Some friends compared the sizes of their stuffed animal collections. What is the median of the numbers?'",
        "image": "images/841.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "841",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 265,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([31, 5], 'Stuffed animal collections'), ([2, 34], 'Name |Number of stuffed animals'), ([3, 67], 'Tiana'), ([3, 99], 'Mitch'), ([0, 126], 'Riley'), ([3, 162], 'Lucy'), ([3, 191], 'Seth'), ([149, 193], '10')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Some friends compared the sizes of their stuffed animal collections. What is the median of the numbers?'\nImage detected text: [([31, 5], 'Stuffed animal collections'), ([2, 34], 'Name |Number of stuffed animals'), ([3, 67], 'Tiana'), ([3, 99], 'Mitch'), ([0, 126], 'Riley'), ([3, 162], 'Lucy'), ([3, 191], 'Seth'), ([149, 193], '10')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [10, 10, 10, 10, 10]\nnumbers.sort()\nn = len(numbers)\nif n % 2 == 0:\n    median = (numbers[n//2 - 1] + numbers[n//2]) / 2\nelse:\n    median = numbers[n//2]\nprint(median)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "842": {
        "question": "At a certain moment, there is a passenger ship at sea point P, and lighthouse A is measured in the direction 30.0 north by east of P, and is 50.0 nautical miles away. The passenger ship sails at the speed of 60.0 nautical mile/hour in the direction of 60.0 from north by west for $\\frac{2.0}{3.0}$hours to reach point B, then tan\u2220BAP = ()",
        "image": "images/842.jpg",
        "choices": [
            "\\frac{4}{5}",
            "\\frac{6}{5}",
            "\\frac{\u221a{5}}{5}",
            "\\frac{2\u221a{5}}{5}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{4}{5}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "842",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 154,
            "img_height": 115,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: At a certain moment, there is a passenger ship at sea point P, and lighthouse A is measured in the direction 30.0 north by east of P, and is 50.0 nautical miles away. The passenger ship sails at the speed of 60.0 nautical mile/hour in the direction of 60.0 from north by west for $\\frac{2.0}{3.0}$hours to reach point B, then tan\u2220BAP = ()\nChoices:\n(A) \\frac{4}{5}\n(B) \\frac{6}{5}\n(C) \\frac{\u221a{5}}{5}\n(D) \\frac{2\u221a{5}}{5}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef tan_angle_BAP():\n    angle_ABP = math.degrees(math.atan(50/60))\n    angle_BAP = 180 - 30 - angle_ABP\n    tan_BAP = math.tan(math.radians(angle_BAP))\n    return tan_BAP\n\nprint(tan_angle_BAP())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "6/5",
        "prediction": "\\frac{6}{5}",
        "true_false": false
    },
    "843": {
        "question": "Is Aqua greater than Red?",
        "image": "images/843.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "843",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 752,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([57, 11], 'title'), ([25, 37], '100'), ([7, 145], '1'), ([9, 183], '1'), ([225, 345], '2'), ([569, 345], '1'), ([365, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Aqua greater than Red?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([57, 11], 'title'), ([25, 37], '100'), ([7, 145], '1'), ([9, 183], '1'), ([225, 345], '2'), ([569, 345], '1'), ([365, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "aqua = 2\nred = 1\n\nif aqua > red:\n    print(\"Aqua is greater than Red\")\nelse:\n    print(\"Aqua is not greater than Red\")",
        "execution": "Aqua is greater than Red",
        "error": "None",
        "extraction": "Aqua is greater than Red",
        "prediction": "yes",
        "true_false": false
    },
    "844": {
        "question": "Is the larger window shaped like the smaller window?",
        "image": "images/844.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "844",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the larger window shaped like the smaller window?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_window_shapes(larger_window, smaller_window):\n    if larger_window == smaller_window:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nlarger_window = \"rectangle\"\nsmaller_window = \"circle\"\n\nprint(compare_window_shapes(larger_window, smaller_window))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "845": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/845.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "845",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 550,
            "img_height": 390,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "846": {
        "question": "Is Brown the high median?",
        "image": "images/846.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "846",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 758,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 107], '1'), ([9, 145], '1'), ([93, 269], 'E'), ([195, 269], 'f'), ([397, 269], '7'), ([495, 269], 'E'), ([597, 269], '1'), ([700, 270], '1'), ([95, 301], '1'), ([497, 301], '1'), ([597, 313], '1'), ([195, 319], '1'), ([365, 383], 'xaxis label'), ([295, 268], '1'), ([395, 298], '1')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Brown the high median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 107], '1'), ([9, 145], '1'), ([93, 269], 'E'), ([195, 269], 'f'), ([397, 269], '7'), ([495, 269], 'E'), ([597, 269], '1'), ([700, 270], '1'), ([95, 301], '1'), ([497, 301], '1'), ([597, 313], '1'), ([195, 319], '1'), ([365, 383], 'xaxis label'), ([295, 268], '1'), ([395, 298], '1')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_brown_high_median(text):\n    for line in text:\n        if \"title\" in line:\n            title = line[1]\n            if \"Brown\" in title:\n                return \"yes\"\n    return \"no\"\n\ntext = [([49, 11], 'title'), ([7, 107], '1'), ([9, 145], '1'), ([93, 269], 'E'), ([195, 269], 'f'), ([397, 269], '7'), ([495, 269], 'E'), ([597, 269], '1'), ([700, 270], '1'), ([95, 301], '1'), ([497, 301], '1'), ([597, 313], '1'), ([195, 319], '1'), ([365, 383], 'xaxis label'), ([295, 268], '1'), ([395, 298], '1')]\n\nprint(is_brown_high_median(text))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "847": {
        "question": "Which function grows the fastest as x increases?",
        "image": "images/847.jpg",
        "choices": [
            "red",
            "purple",
            "blue"
        ],
        "unit": null,
        "precision": null,
        "answer": "red",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "847",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1706,
            "img_height": 1294,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 75], '4'), ([75, 251], '3'), ([560, 346], 'X'), ([701, 354], 'logeX'), ([77, 429], '2'), ([1043, 511], 'log1o*'), ([305, 833], '2 e'), ([1045, 831], '10'), ([1395, 851], 'X'), ([25, 965], '~1'), ([25, 1145], '_2'), ([425, 320], 'log2 -')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which function grows the fastest as x increases?\nChoices:\n(A) red\n(B) purple\n(C) blue\nImage detected text: [([79, 75], '4'), ([75, 251], '3'), ([560, 346], 'X'), ([701, 354], 'logeX'), ([77, 429], '2'), ([1043, 511], 'log1o*'), ([305, 833], '2 e'), ([1045, 831], '10'), ([1395, 851], 'X'), ([25, 965], '~1'), ([25, 1145], '_2'), ([425, 320], 'log2 -')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf1 = 4\nf2 = 3\nf3 = x\nf4 = sp.log(x)\nf5 = 2\nf6 = sp.log(x, 10)\nf7 = 2**x\n\nfunctions = [f1, f2, f3, f4, f5, f6, f7]\nfastest_function = functions[0]\n\nfor function in functions:\n    if sp.limit(function/x, x, sp.oo) == sp.oo:\n        fastest_function = function\n        break\n\nfastest_function",
        "execution": "",
        "error": "None",
        "extraction": "f7",
        "prediction": "red",
        "true_false": true
    },
    "848": {
        "question": "In how many years, is the tuberculosis treatment success rate in Bulgaria greater than the average tuberculosis treatment success rate in Bulgaria taken over all years ?",
        "image": "images/848.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "848",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1091,
            "img_height": 700,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 9], 'Tuberculosis treatment success rate'), ([11, 183], '8'), ([11, 237], '8'), ([7, 271], '5'), ([11, 317], '1'), ([8, 378], '1'), ([95, 601], '2'), ([251, 601], '8'), ([409, 601], '8'), ([565, 601], '8'), ([721, 601], '2'), ([879, 601], '8'), ([1035, 601], '8'), ([547, 639], 'Years'), ([811, 673], 'Bulgaria'), ([891, 673], 'Marshall Islands'), ([1019, 673], 'Venezuela')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the tuberculosis treatment success rate in Bulgaria greater than the average tuberculosis treatment success rate in Bulgaria taken over all years ?\nImage detected text: [([51, 9], 'Tuberculosis treatment success rate'), ([11, 183], '8'), ([11, 237], '8'), ([7, 271], '5'), ([11, 317], '1'), ([8, 378], '1'), ([95, 601], '2'), ([251, 601], '8'), ([409, 601], '8'), ([565, 601], '8'), ([721, 601], '2'), ([879, 601], '8'), ([1035, 601], '8'), ([547, 639], 'Years'), ([811, 673], 'Bulgaria'), ([891, 673], 'Marshall Islands'), ([1019, 673], 'Venezuela')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "success_rates = [8, 8, 5, 1, 1, 2, 8, 8, 8, 2, 8, 8]\naverage_success_rate = sum(success_rates) / len(success_rates)\n\nyears = 0\nfor rate in success_rates:\n    if rate > average_success_rate:\n        years += 1\n\nprint(years)",
        "execution": "7",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "849": {
        "question": "The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Which image has the most non-zero AC coefficients? (a): Image A, (b): Image B, (c): Image C, (d): Image D.",
        "image": "images/849.jpg",
        "choices": [
            "(c)",
            "(d)",
            "(a)",
            "(b)",
            "(e)"
        ],
        "unit": null,
        "precision": null,
        "answer": "(b)",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "849",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 940,
            "img_height": 282,
            "source": "TheoremQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([15, 201], 'Image A Image B'), ([471, 198], 'Image C'), ([711, 198], 'Image D')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Which image has the most non-zero AC coefficients? (a): Image A, (b): Image B, (c): Image C, (d): Image D.\nChoices:\n(A) (c)\n(B) (d)\n(C) (a)\n(D) (b)\n(E) (e)\nImage detected text: [([15, 201], 'Image A Image B'), ([471, 198], 'Image C'), ([711, 198], 'Image D')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\n\n# Define the DCT coefficients for each image\nimage_a = np.array([[1, 2, 3, 4, 5, 6, 7, 8],\n                    [2, 3, 4, 5, 6, 7, 8, 9],\n                    [3, 4, 5, 6, 7, 8, 9, 10],\n                    [4, 5, 6, 7, 8, 9, 10, 11],\n                    [5, 6, 7, 8, 9, 10, 11, 12],\n                    [6, 7, 8, 9, 10, 11, 12, 13],\n                    [7, 8, 9, 10, 11, 12, 13, 14],\n                    [8, 9, 10, 11, 12, 13, 14, 15]])\n\nimage_b = np.array([[1, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0, 0]])\n\nimage_c = np.array([[1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1]])\n\nimage_d = np.array([[1, 2, 3, 4, 5, 6, 7, 8],\n                    [2, 3, 4, 5, 6, 7, 8, 9],\n                    [3, 4, 5, 6, 7, 8, 9, 10],\n                    [4, 5, 6, 7, 8, 9, 10, 11],\n                    [5, 6, 7, 8, 9, 10, 11, 12],\n                    [6, 7, 8, 9, 10, 11, 12, 13],\n                    [7, 8, 9, 10, 11, 12, 13, 14],\n                    [8, 9, 10, 11, 12, 13, 14, 15]])\n\n# Calculate the number of non-zero AC coefficients for each image\nnum_nonzero_a = np.count_nonzero(image_a[1:, 1:])\nnum_nonzero_b = np.count_nonzero(image_b[1:, 1:])\nnum_nonzero_c = np.count_nonzero(image_c[1:, 1:])\nnum_nonzero_d = np.count_nonzero(image_d[1:, 1:])\n\n# Determine the image with the most non-zero AC coefficients\nmax_nonzero = max(num_nonzero_a, num_nonzero_b, num_nonzero_c, num_nonzero_d)\n\nif max_nonzero == num_nonzero_a:\n    result = \"(a)\"\nelif max_nonzero == num_nonzero_b:\n    result = \"(b)\"\nelif max_nonzero == num_nonzero_c:\n    result = \"(c)\"\nelse:\n    result = \"(d)\"\n\nprint(result)",
        "execution": "(a)",
        "error": "None",
        "extraction": "(c)",
        "prediction": "(a)",
        "true_false": false
    },
    "850": {
        "question": "Is the number of cars in front of the tiny metal thing less than the number of large matte things in front of the cyan rubber road bike?",
        "image": "images/850.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "850",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of cars in front of the tiny metal thing less than the number of large matte things in front of the cyan rubber road bike?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_objects(num_cars, num_metal_things, num_large_matte_things, num_cyan_rubber_road_bikes):\n    if num_cars < num_large_matte_things:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_cars = 3\nnum_metal_things = 1\nnum_large_matte_things = 5\nnum_cyan_rubber_road_bikes = 2\n\nprint(compare_objects(num_cars, num_metal_things, num_large_matte_things, num_cyan_rubber_road_bikes))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "851": {
        "question": "In how many years, is the net concessional disbursements from imf greater than 32000000 US$?",
        "image": "images/851.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "851",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1139,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([105, 9], 'Net disbursements received by Latin America(developing only) from International Monetary Fund'), ([33, 89], '100000000'), ([39, 187], '80000000'), ([7, 203], '3'), ([10, 250], '1'), ([39, 283], '60000000'), ([1009, 307], 'IMF concessional'), ([7, 315], '4'), ([1009, 329], 'IMF nonconcessional'), ([11, 343], 'I'), ([39, 381], '40000000'), ([39, 477], '20000000'), ([143, 591], '7'), ([339, 591], '1'), ([537, 591], '8'), ([735, 591], '1'), ([931, 591], '3'), ([523, 628], 'Year')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the net concessional disbursements from imf greater than 32000000 US$?\nImage detected text: [([105, 9], 'Net disbursements received by Latin America(developing only) from International Monetary Fund'), ([33, 89], '100000000'), ([39, 187], '80000000'), ([7, 203], '3'), ([10, 250], '1'), ([39, 283], '60000000'), ([1009, 307], 'IMF concessional'), ([7, 315], '4'), ([1009, 329], 'IMF nonconcessional'), ([11, 343], 'I'), ([39, 381], '40000000'), ([39, 477], '20000000'), ([143, 591], '7'), ([339, 591], '1'), ([537, 591], '8'), ([735, 591], '1'), ([931, 591], '3'), ([523, 628], 'Year')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "net_disbursements = [80000000, 60000000, 40000000, 20000000]\nyears = [3, 4, 7, 8]\n\nfor i in range(len(net_disbursements)):\n    if net_disbursements[i] > 32000000:\n        print(years[i])\n        break",
        "execution": "3",
        "error": "None",
        "extraction": "7",
        "prediction": "7",
        "true_false": false
    },
    "852": {
        "question": "Which number is missing?",
        "image": "images/852.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "40",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "852",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 612,
            "img_height": 598,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([300, 80], '5'), ([83, 281], '10'), ([285, 281], '14'), ([491, 279], '19'), ([81, 485], '25'), ([285, 485], '32'), ([491, 467], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number is missing?\nImage detected text: [([300, 80], '5'), ([83, 281], '10'), ([285, 281], '14'), ([491, 279], '19'), ([81, 485], '25'), ([285, 485], '32'), ([491, 467], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [5, 10, 14, 19, 25, 32, 2]\n\nmissing_number = None\nfor i in range(1, len(numbers) + 1):\n    if i not in numbers:\n        missing_number = i\n        break\n\nprint(missing_number)",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "853": {
        "question": "As shown in the figure, in the diamond ABCD, \u2220BAD = 120.0, the length of the diagonal AC is 3.0, then the perimeter of the diamond ABCD is ()",
        "image": "images/853.jpg",
        "choices": [
            "3",
            "6",
            "9",
            "12"
        ],
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "853",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 169,
            "img_height": 98,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in the diamond ABCD, \u2220BAD = 120.0, the length of the diagonal AC is 3.0, then the perimeter of the diamond ABCD is ()\nChoices:\n(A) 3\n(B) 6\n(C) 9\n(D) 12\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle_BAD = 120.0\ndiagonal_AC = 3.0\n\n# Using the law of cosines to find the length of side AB\nside_AB = math.sqrt(diagonal_AC**2 + diagonal_AC**2 - 2 * diagonal_AC * diagonal_AC * math.cos(math.radians(angle_BAD)))\n\n# The perimeter of the diamond is the sum of all four sides\nperimeter = side_AB * 4\n\nprint(perimeter)",
        "execution": "20.784609690826525",
        "error": "None",
        "extraction": "9",
        "prediction": "9",
        "true_false": false
    },
    "854": {
        "question": "If the pelicans in the community were eradicated, which population feel the most direct effect?",
        "image": "images/854.jpg",
        "choices": [
            "Plant",
            "Phyto-plankton",
            "Fish",
            "Lizard"
        ],
        "unit": null,
        "precision": null,
        "answer": "Fish",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "854",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 947,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the pelicans in the community were eradicated, which population feel the most direct effect?\nChoices:\n(A) Plant\n(B) Phyto-plankton\n(C) Fish\n(D) Lizard\nImage detected text: [([95, 1], 'Trophic'), ([332, 2], 'Terrestrial'), ([575, 2], 'Aquatic'), ([94, 34], 'level'), ([330, 34], 'food chain'), ([572, 32], 'food chain'), ([270, 96], 'Snake'), ([662, 98], 'Pelican'), ([93, 149], 'Tertiary'), ([94, 190], 'consumer'), ([92, 215], '(secondary'), ([92, 247], 'carnivore)'), ([94, 367], 'Secondary'), ([662, 380], 'Fish'), ([2, 324], '|'), ([90, 403], '{arnuvoee)'), ([271, 414], 'Lizard'), ([93, 585], 'Primary'), ([660, 598], 'Zoo-'), ([93, 621], 'consumer'), ([271, 605], 'Caterpillar'), ([659, 629], 'plankton'), ([93, 649], '(herbivore)'), ([93, 802], 'Primary'), ([659, 798], 'Phyto-'), ([272, 822], 'Plant'), ([91, 832], 'producer'), ([659, 833], 'plankton'), ([93, 867], '(autotroph)')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def direct_effect(populations):\n    population_effects = {\n        'Plant': 'Phyto-plankton',\n        'Phyto-plankton': 'Fish',\n        'Fish': 'Lizard'\n    }\n\n    for population in populations:\n        if population == 'Pelican':\n            return population_effects[population]\n    return \"\"\n\npopulations = ['Trophic', 'Terrestrial', 'Aquatic', 'Snake', 'Pelican', 'Tertiary', 'consumer', 'Secondary', 'Fish', 'Lizard', 'Primary', 'Zoo-', 'Caterpillar', 'plankton', 'Phyto-', 'Plant', 'producer', 'plankton', 'autotroph']\nprint(direct_effect(populations))",
        "execution": "",
        "error": "'Pelican'",
        "extraction": "Fish",
        "prediction": "Fish",
        "true_false": true
    },
    "855": {
        "question": "Find $x$ so that $a \u2225 b$.",
        "image": "images/855.jpg",
        "choices": [
            "2.5",
            "14",
            "15",
            "16"
        ],
        "unit": null,
        "precision": null,
        "answer": "14",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "855",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 536,
            "img_height": 250,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([169, 135], '(4x+ 11)8'), ([311, 134], '(8x + 1)9')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $x$ so that $a \u2225 b$.\nChoices:\n(A) 2.5\n(B) 14\n(C) 15\n(D) 16\nImage detected text: [([169, 135], '(4x+ 11)8'), ([311, 134], '(8x + 1)9')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq1 = Eq((4*x + 11)*8, (8*x + 1)*9)\n\nsol = solve(eq1, x)\nsol",
        "execution": "",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "856": {
        "question": "Which picture has the least leaves?",
        "image": "images/856.jpg",
        "choices": [
            "Both",
            "Compound",
            "Simple",
            "Neither"
        ],
        "unit": null,
        "precision": null,
        "answer": "Simple",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "856",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 400,
            "img_height": 300,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([39, 245], 'compound'), ([239, 247], 'sitplc')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which picture has the least leaves?\nChoices:\n(A) Both\n(B) Compound\n(C) Simple\n(D) Neither\nImage detected text: [([39, 245], 'compound'), ([239, 247], 'sitplc')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def least_leaves(pictures):\n    least_leaves_picture = \"\"\n    least_leaves_count = float('inf')\n\n    for picture in pictures:\n        leaves_count = count_leaves(picture)\n        if leaves_count < least_leaves_count:\n            least_leaves_count = leaves_count\n            least_leaves_picture = picture\n\n    return least_leaves_picture\n\ndef count_leaves(picture):\n    # code to count the number of leaves in the picture\n    return leaves_count\n\npictures = ['Both', 'Compound', 'Simple', 'Neither']\nprint(least_leaves(pictures))",
        "execution": "",
        "error": "name 'count_leaves' is not defined",
        "extraction": "Compound",
        "prediction": "Compound",
        "true_false": false
    },
    "857": {
        "question": "What is the value of the largest bar?",
        "image": "images/857.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "857",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([202, 16], 'Title'), ([19, 85], '1'), ([19, 305], '1'), ([403, 379], '10'), ([196, 404], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest bar?\nImage detected text: [([202, 16], 'Title'), ([19, 85], '1'), ([19, 305], '1'), ([403, 379], '10'), ([196, 404], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [1, 1, 10]\nlargest_bar = max(values)\nprint(largest_bar)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "858": {
        "question": "On the basis of the given food web, which organism will increase in number if there were no seals?",
        "image": "images/858.jpg",
        "choices": [
            "Shark",
            "Small Shrimp",
            "Octopus",
            "Mysid Shrimp"
        ],
        "unit": null,
        "precision": null,
        "answer": "Octopus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "858",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1162,
            "img_height": 764,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([811, 35], 'Plankton'), ([997, 189], 'Shark'), ([295, 237], 'Small'), ([288, 252], 'Octopus'), ([843, 291], 'Big Shrimp'), ([1043, 313], 'Rock Fish'), ([91, 333], 'Smali'), ([500, 328], 'Octopus Fccd Web'), ([85, 349], 'Lobater'), ([7, 457], 'Small Shrimp'), ([283, 465], 'Squid'), ([971, 474], 'Mysid Shrimp'), ([1083, 495], 'Herring'), ([621, 531], 'Scraw-led'), ([623, 547], 'Cowzish'), ([883, 543], 'Big Lobster'), ([773, 569], 'Crab'), ([193, 577], 'Lantern Fish'), ([373, 597], 'Hcrse'), ([989, 603], 'Flat Fish'), ([497, 651], 'Clam:'), ([735, 681], 'Sea Snail'), ([233, 719], 'Mysid Shrimp'), ([973, 735], 'Aquatic Plants'), ([641, 753], 'penge:'), ([909, 415], 'Moray')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: On the basis of the given food web, which organism will increase in number if there were no seals?\nChoices:\n(A) Shark\n(B) Small Shrimp\n(C) Octopus\n(D) Mysid Shrimp\nImage detected text: [([811, 35], 'Plankton'), ([997, 189], 'Shark'), ([295, 237], 'Small'), ([288, 252], 'Octopus'), ([843, 291], 'Big Shrimp'), ([1043, 313], 'Rock Fish'), ([91, 333], 'Smali'), ([500, 328], 'Octopus Fccd Web'), ([85, 349], 'Lobater'), ([7, 457], 'Small Shrimp'), ([283, 465], 'Squid'), ([971, 474], 'Mysid Shrimp'), ([1083, 495], 'Herring'), ([621, 531], 'Scraw-led'), ([623, 547], 'Cowzish'), ([883, 543], 'Big Lobster'), ([773, 569], 'Crab'), ([193, 577], 'Lantern Fish'), ([373, 597], 'Hcrse'), ([989, 603], 'Flat Fish'), ([497, 651], 'Clam:'), ([735, 681], 'Sea Snail'), ([233, 719], 'Mysid Shrimp'), ([973, 735], 'Aquatic Plants'), ([641, 753], 'penge:'), ([909, 415], 'Moray')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "food_web = {\n    'Plankton': ['Shark', 'Small Shrimp'],\n    'Shark': ['Octopus', 'Big Shrimp'],\n    'Small Shrimp': ['Octopus', 'Squid'],\n    'Octopus': ['Rock Fish'],\n    'Big Shrimp': ['Rock Fish', 'Big Lobster'],\n    'Rock Fish': ['Crab', 'Herring'],\n    'Squid': ['Herring'],\n    'Mysid Shrimp': ['Herring', 'Lantern Fish', 'Mysid Shrimp'],\n    'Herring': ['Flat Fish'],\n    'Crab': ['Lobster'],\n    'Lantern Fish': ['Horse'],\n    'Flat Fish': ['Clam'],\n    'Clam': ['Sea Snail'],\n    'Sea Snail': ['Aquatic Plants']\n}\n\ndef increase_in_number(food_web, organism):\n    queue = [organism]\n    visited = set()\n\n    while queue:\n        current_organism = queue.pop(0)\n        visited.add(current_organism)\n\n        if current_organism in food_web:\n            for prey in food_web[current_organism]:\n                if prey not in visited:\n                    queue.append(prey)\n\n    return visited\n\nno_seals_organism = increase_in_number(food_web, 'Seal')\nprint(no_seals_organism)",
        "execution": "{'Seal'}",
        "error": "None",
        "extraction": "[]",
        "prediction": "Shark",
        "true_false": false
    },
    "859": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/859.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "27",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "859",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 750,
            "img_height": 603,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "860": {
        "question": "Miss Foley ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. What is the largest number of sit-ups done? (Unit: sit-ups)",
        "image": "images/860.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "86",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "860",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 291,
            "img_height": 246,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Sit-up competition (number of sit-ups)'), ([111, 25], 'Stem'), ([159, 25], 'Leaf'), ([159, 51], '0 0 2'), ([159, 73], '4 5'), ([157, 93], '1 2'), ([159, 139], '2 5 6'), ([159, 181], '5 5 8'), ([159, 225], '2 3 6')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Miss Foley ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. What is the largest number of sit-ups done? (Unit: sit-ups)\nImage detected text: [([0, 0], 'Sit-up competition (number of sit-ups)'), ([111, 25], 'Stem'), ([159, 25], 'Leaf'), ([159, 51], '0 0 2'), ([159, 73], '4 5'), ([157, 93], '1 2'), ([159, 139], '2 5 6'), ([159, 181], '5 5 8'), ([159, 225], '2 3 6')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sit_ups = [2, 4, 5, 6, 8]\nlargest_sit_ups = max(sit_ups)\nprint(largest_sit_ups)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "861": {
        "question": "Is Crimson less than Gray?",
        "image": "images/861.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "no",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "861",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 680,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 155], '9'), ([9, 191], '1'), ([583, 235], 'Crimson'), ([583, 259], 'Medium Purple'), ([583, 281], 'Gray'), ([583, 305], 'Dark Green'), ([583, 327], 'Cornflower'), ([583, 351], 'Light Slate'), ([515, 363], '100'), ([583, 373], 'Firebrick'), ([263, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Crimson less than Gray?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 155], '9'), ([9, 191], '1'), ([583, 235], 'Crimson'), ([583, 259], 'Medium Purple'), ([583, 281], 'Gray'), ([583, 305], 'Dark Green'), ([583, 327], 'Cornflower'), ([583, 351], 'Light Slate'), ([515, 363], '100'), ([583, 373], 'Firebrick'), ([263, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "crimson = 100\ngray = 100\n\nif crimson < gray:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": true
    },
    "862": {
        "question": "One of the most dramatic videos on the web (but entirely fictitious) supposedly shows a man sliding along a long water slide and then being launched into the air to land in a water pool. Let's attach some reasonable numbers to such a flight to calculate the velocity with which the man would have hit the water. Figure indicates the launch and landing sites and includes a superimposed coordinate system with its origin conveniently located at the launch site. From the video we take the horizontal flight distance as $D=20.0 \\mathrm{~m}$, the flight time as $t=2.50 \\mathrm{~s}$, and the launch angle as $\\theta_0=40.0^{\\circ}$. Find the magnitude of the velocity at launch and at landing.",
        "image": "images/862.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "10.44",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "862",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1302,
            "img_height": 600,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([437, 97], 'Vo'), ([472, 222], 'X'), ([1070, 214], 'Water'), ([290, 248], 'Launch'), ([662, 538], 'D'), ([1080, 278], 'pool')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: One of the most dramatic videos on the web (but entirely fictitious) supposedly shows a man sliding along a long water slide and then being launched into the air to land in a water pool. Let's attach some reasonable numbers to such a flight to calculate the velocity with which the man would have hit the water. Figure indicates the launch and landing sites and includes a superimposed coordinate system with its origin conveniently located at the launch site. From the video we take the horizontal flight distance as $D=20.0 \\mathrm{~m}$, the flight time as $t=2.50 \\mathrm{~s}$, and the launch angle as $\\theta_0=40.0^{\\circ}$. Find the magnitude of the velocity at launch and at landing.\nImage detected text: [([437, 97], 'Vo'), ([472, 222], 'X'), ([1070, 214], 'Water'), ([290, 248], 'Launch'), ([662, 538], 'D'), ([1080, 278], 'pool')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nD = 20.0\nt = 2.50\ntheta_0 = 40.0\n\n# Calculate the horizontal velocity at launch\nVx = D / t\n\n# Calculate the vertical velocity at launch\nVy = Vx * math.tan(math.radians(theta_0))\n\n# Calculate the magnitude of the velocity at launch\nV_launch = math.sqrt(Vx**2 + Vy**2)\n\n# Calculate the magnitude of the velocity at landing (assuming no air resistance)\nV_landing = V_launch\n\nprint(\"Magnitude of velocity at launch:\", V_launch)\nprint(\"Magnitude of velocity at landing:\", V_landing)",
        "execution": "Magnitude of velocity at launch: 10.443258314658229\nMagnitude of velocity at landing: 10.443258314658229",
        "error": "None",
        "extraction": "Magnitude of velocity at launch: 8.0\nMagnitude of velocity at landing: 8.0",
        "prediction": null,
        "true_false": false
    },
    "863": {
        "question": "Does Rhode Island have the lowest value in the USA ?",
        "image": "images/863.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "863",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 500,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([38, 20], 'The Percentage of services in the USA'), ([633, 61], 'Value')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Rhode Island have the lowest value in the USA ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([38, 20], 'The Percentage of services in the USA'), ([633, 61], 'Value')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "services_percentage = {\n    'Rhode Island': 0.5,\n    'New York': 0.8,\n    'California': 0.7,\n    'Texas': 0.6\n}\n\nlowest_value = min(services_percentage.values())\n\nif services_percentage['Rhode Island'] == lowest_value:\n    answer = 'Yes'\nelse:\n    answer = 'No'\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": true
    },
    "864": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/864.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "16",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "864",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2480,
            "img_height": 1738,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(dob1, dob2):\n    date_format = \"%m/%d/%Y\"\n    dob1 = datetime.datetime.strptime(dob1, date_format)\n    dob2 = datetime.datetime.strptime(dob2, date_format)\n    age_gap = abs((dob1 - dob2).days) // 365\n    return age_gap\n\ndob1 = \"01/01/1990\"\ndob2 = \"01/01/2000\"\n\nage_gap = calculate_age(dob1, dob2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "865": {
        "question": "Does Hot Pink have the lowest value?",
        "image": "images/865.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "865",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 512,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([239, 45], 'Indian Red'), ([333, 45], 'Hot Pink'), ([415, 45], 'Light Salmon'), ([7, 153], '1'), ([9, 191], '1'), ([475, 363], '100'), ([241, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Hot Pink have the lowest value?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([239, 45], 'Indian Red'), ([333, 45], 'Hot Pink'), ([415, 45], 'Light Salmon'), ([7, 153], '1'), ([9, 191], '1'), ([475, 363], '100'), ([241, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def lowest_value(color_values):\n    lowest_value = min(color_values)\n    if lowest_value == color_values[2]:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolor_values = [239, 333, 415]\nprint(lowest_value(color_values))",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "866": {
        "question": "For trapezoid $Q R S T, A$ and $B$ are midpoints of the legs. Find $m \\angle S$",
        "image": "images/866.jpg",
        "choices": [
            "45",
            "60",
            "120",
            "135"
        ],
        "unit": null,
        "precision": null,
        "answer": "135",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "866",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 359,
            "img_height": 169,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([144, 24], '12'), ([68, 52], '120='), ([244, 94], '45'), ([152, 122], '20')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For trapezoid $Q R S T, A$ and $B$ are midpoints of the legs. Find $m \\angle S$\nChoices:\n(A) 45\n(B) 60\n(C) 120\n(D) 135\nImage detected text: [([144, 24], '12'), ([68, 52], '120='), ([244, 94], '45'), ([152, 122], '20')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(midpoint_angle, opposite_angle):\n    opposite_side = 2 * math.sin(math.radians(opposite_angle))\n    adjacent_side = 2 * math.sin(math.radians(midpoint_angle))\n    angle = math.degrees(math.asin(opposite_side / adjacent_side))\n    return angle\n\nmidpoint_angle = 120\nopposite_angle = 45\n\nangle_S = find_angle(midpoint_angle, opposite_angle)\nprint(angle_S)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "45",
        "prediction": "45",
        "true_false": false
    },
    "867": {
        "question": "A food industry researcher compiled the revenues of several pizzerias. How much did Dan's Deep Dish make from pizza sales? (Unit: $)",
        "image": "images/867.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "22",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "867",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 465,
            "img_height": 187,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([191, 7], 'Pizza sales'), ([29, 38], 'Restaurant'), ([155, 39], 'Pepperoni pizzas'), ([322, 38], 'Supreme pizzas'), ([3, 67], 'Pizzas'), ([205, 67], 'S20'), ([367, 67], 'S20'), ([3, 97], 'Pizzeria Italiano'), ([205, 99], 'S17'), ([367, 99], 'S16'), ([3, 129], \"Dan's Deep Dish\"), ([209, 129], '$8'), ([367, 129], 'S14'), ([2, 158], 'The Real Chicago'), ([205, 161], 'S13'), ([367, 161], 'S16'), ([55, 64], 'Only')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A food industry researcher compiled the revenues of several pizzerias. How much did Dan's Deep Dish make from pizza sales? (Unit: $)\nImage detected text: [([191, 7], 'Pizza sales'), ([29, 38], 'Restaurant'), ([155, 39], 'Pepperoni pizzas'), ([322, 38], 'Supreme pizzas'), ([3, 67], 'Pizzas'), ([205, 67], 'S20'), ([367, 67], 'S20'), ([3, 97], 'Pizzeria Italiano'), ([205, 99], 'S17'), ([367, 99], 'S16'), ([3, 129], \"Dan's Deep Dish\"), ([209, 129], '$8'), ([367, 129], 'S14'), ([2, 158], 'The Real Chicago'), ([205, 161], 'S13'), ([367, 161], 'S16'), ([55, 64], 'Only')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dan_deep_dish_revenue = 8.00\n\nprint(dan_deep_dish_revenue)",
        "execution": "8.0",
        "error": "None",
        "extraction": "8.00",
        "prediction": null,
        "true_false": false
    },
    "868": {
        "question": "Subtract all big green cylinders. Subtract all rubber cylinders. How many objects are left?",
        "image": "images/868.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "868",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big green cylinders. Subtract all rubber cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_green_cylinders = 5\nrubber_cylinders = 3\n\nobjects_left = big_green_cylinders - rubber_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "869": {
        "question": "Subtract all large yellow matte cubes. Subtract all metal things. How many objects are left?",
        "image": "images/869.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "869",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large yellow matte cubes. Subtract all metal things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_yellow_matte_cubes = 5\nmetal_things = 3\n\nobjects_left = large_yellow_matte_cubes - metal_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "870": {
        "question": "Are there more tiny motorbikes in front of the small cyan tandem bike than big cyan metal double buss?",
        "image": "images/870.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "870",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there more tiny motorbikes in front of the small cyan tandem bike than big cyan metal double buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def more_motorbikes_than_busses(motorbike_count, bus_count):\n    if motorbike_count > bus_count:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nmotorbike_count = 5\nbus_count = 3\n\nprint(more_motorbikes_than_busses(motorbike_count, bus_count))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "871": {
        "question": "Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.",
        "image": "images/871.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "871",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 200,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([19, 165], 'Oin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the nail to the nearest inch. The nail is about (_) inches long.\nImage detected text: [([19, 165], 'Oin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nruler_length = 12  # inches\nnail_position = 19  # inches\n\nnail_length = round(nail_position / ruler_length)\nprint(nail_length)",
        "execution": "2",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "872": {
        "question": "Determine the next shape.",
        "image": "images/872.jpg",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "unit": null,
        "precision": null,
        "answer": "D",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "872",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1472,
            "img_height": 496,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([87, 29], 'Determine the next'), ([906, 68], 'A'), ([1194, 72], 'B'), ([266, 92], 'shape:'), ([582, 250], '3'), ([1187, 281], 'D')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Determine the next shape.\nChoices:\n(A) A\n(B) B\n(C) C\n(D) D\nImage detected text: [([87, 29], 'Determine the next'), ([906, 68], 'A'), ([1194, 72], 'B'), ([266, 92], 'shape:'), ([582, 250], '3'), ([1187, 281], 'D')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "next_shape = 'C'\nprint(next_shape)",
        "execution": "C",
        "error": "None",
        "extraction": "C",
        "prediction": "C",
        "true_false": false
    },
    "873": {
        "question": "How many groups of bars contain at least one bar with value smaller than 40?",
        "image": "images/873.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "873",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([224, 14], 'Title'), ([37, 57], 'gait'), ([14, 106], 'entity'), ([39, 149], 'pity'), ([44, 197], 'tap'), ([16, 242], 'fabric'), ([244, 302], '50'), ([384, 302], '100'), ([212, 332], 'Values'), ([152, 374], 'sketch'), ([351, 371], 'squad')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many groups of bars contain at least one bar with value smaller than 40?\nImage detected text: [([224, 14], 'Title'), ([37, 57], 'gait'), ([14, 106], 'entity'), ([39, 149], 'pity'), ([44, 197], 'tap'), ([16, 242], 'fabric'), ([244, 302], '50'), ([384, 302], '100'), ([212, 332], 'Values'), ([152, 374], 'sketch'), ([351, 371], 'squad')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bars = [50, 100, 60, 30, 80, 20, 70, 90, 40, 50]\ncount = 0\n\nfor bar in bars:\n    if bar < 40:\n        count += 1\n\nprint(count)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "874": {
        "question": "What is the value of y at x=-2.5?",
        "image": "images/874.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "874",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 479,
            "img_height": 479,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([26, 244], '~6 5 -4 3 22'), ([260, 246], '41'), ([401, 247], '5')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of y at x=-2.5?\nImage detected text: [([26, 244], '~6 5 -4 3 22'), ([260, 246], '41'), ([401, 247], '5')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x = -2.5\ny = 6*x**5 - 4*x**3 + 22*x + 41\nprint(y)",
        "execution": "-537.4375",
        "error": "None",
        "extraction": "41",
        "prediction": "41",
        "true_false": false
    },
    "875": {
        "question": "Subtract all yellow things. Subtract all blue cylinders. How many objects are left?",
        "image": "images/875.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "875",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all yellow things. Subtract all blue cylinders. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_objects = 5\nblue_cylinders = 3\n\nobjects_left = yellow_objects - blue_cylinders\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "876": {
        "question": "In the figure, square $ABDC$ is inscribed in $\\odot K$. Find the measure of a central angle.",
        "image": "images/876.jpg",
        "choices": [
            "45",
            "60",
            "90",
            "180"
        ],
        "unit": null,
        "precision": null,
        "answer": "90",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "876",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 273,
            "img_height": 275,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure, square $ABDC$ is inscribed in $\\odot K$. Find the measure of a central angle.\nChoices:\n(A) 45\n(B) 60\n(C) 90\n(D) 180\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef measure_of_central_angle(side_length):\n    radius = side_length / (2 * math.sqrt(2))\n    central_angle = 2 * math.asin(side_length / (2 * radius))\n    return math.degrees(central_angle)\n\nside_length = 10\nprint(measure_of_central_angle(side_length))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "45",
        "prediction": "45",
        "true_false": false
    },
    "877": {
        "question": "What is the sum of the accuracies of the algorithms squad and warm?",
        "image": "images/877.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "877",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([89, 17], 'Accuracy of different'), ([171, 55], 'algorithms'), ([54, 80], '10'), ([19, 161], '0'), ([99, 349], 'W\"nn')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the accuracies of the algorithms squad and warm?\nImage detected text: [([89, 17], 'Accuracy of different'), ([171, 55], 'algorithms'), ([54, 80], '10'), ([19, 161], '0'), ([99, 349], 'W\"nn')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "squad_accuracy = 0.10\nwarm_accuracy = 0.90\n\nsum_of_accuracies = squad_accuracy + warm_accuracy\nprint(sum_of_accuracies)",
        "execution": "1.0",
        "error": "None",
        "extraction": "1.0",
        "prediction": null,
        "true_false": false
    },
    "878": {
        "question": "\u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ACB\uff1d90\u00b0\uff0c\u4ee5Rt\u25b3ABC\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5411\u5916\u4f5c\u6b63\u65b9\u5f62\uff0c\u5176\u9762\u79ef\u5206\u522b\u4e3aS1\uff0cS2\uff0cS3\uff0c\u4e14S1\uff1d5\uff0cS3\uff1d16\uff0c\u5219S2\uff1d\uff08\uff09",
        "image": "images/878.jpg",
        "choices": [
            "6",
            "2\u221a{2}",
            "11",
            "24"
        ],
        "unit": null,
        "precision": null,
        "answer": "11",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "878",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 94,
            "img_height": 82,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728Rt\u25b3ABC\u4e2d\uff0c\u2220ACB\uff1d90\u00b0\uff0c\u4ee5Rt\u25b3ABC\u7684\u4e09\u8fb9\u4e3a\u8fb9\u5411\u5916\u4f5c\u6b63\u65b9\u5f62\uff0c\u5176\u9762\u79ef\u5206\u522b\u4e3aS1\uff0cS2\uff0cS3\uff0c\u4e14S1\uff1d5\uff0cS3\uff1d16\uff0c\u5219S2\uff1d\uff08\uff09\nChoices:\n(A) 6\n(B) 2\u221a{2}\n(C) 11\n(D) 24\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nS1 = 5\nS3 = 16\n\nS2 = S3 - S1\nS2 = math.sqrt(S2)\n\nprint(S2)",
        "execution": "3.3166247903554",
        "error": "None",
        "extraction": "2.0",
        "prediction": "24",
        "true_false": false
    },
    "879": {
        "question": "Subtract all large gray rubber things. Subtract all small blue spheres. How many objects are left?",
        "image": "images/879.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "879",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all large gray rubber things. Subtract all small blue spheres. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "large_gray_rubber_things = 5\nsmall_blue_spheres = 3\n\nobjects_left = large_gray_rubber_things - small_blue_spheres\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "880": {
        "question": "What's the total add up value of largest and smallest bar?",
        "image": "images/880.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "252.65",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "880",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 8], 'Surface plastic particles by ocean basin, 2013'), ([776, 18], 'Our Daorld'), ([15, 41], \"Number of plastic particles floating at the ocean surface within each of the world's ocean or marine basins. This\"), ([13, 60], 'includes the total number of particlesranging from small microplastics to macroplastics'), ([581, 59], 'includes only plastics'), ([13, 79], 'within surface waters (and not at depth or on the seafloor)'), ([11, 125], 'Global ocean (total)'), ([763, 123], '5.25 trillion'), ([53, 185], 'North Pacific'), ([391, 185], '98 trillion'), ([51, 247], 'Indian Ocean'), ([309, 247], '3 trillion'), ([47, 307], 'North Atlantic'), ([255, 307], '931 billion'), ([51, 367], 'South Pacific'), ([203, 369], '490 billion'), ([45, 429], 'South Atlantic'), ([181, 429], '297 .'), ([219, 429], 'billion'), ([15, 491], 'Mediterranean Sea'), ([175, 491], '247'), ([213, 491], 'billion'), ([241, 541], 'trillion'), ([349, 541], '2 trillion'), ([477, 541], 'trillion'), ([595, 541], 'trillion'), ([713, 541], 'trillion'), ([15, 569], 'Source: Eriksen et al. (2014)'), ([797, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What's the total add up value of largest and smallest bar?\nImage detected text: [([11, 8], 'Surface plastic particles by ocean basin, 2013'), ([776, 18], 'Our Daorld'), ([15, 41], \"Number of plastic particles floating at the ocean surface within each of the world's ocean or marine basins. This\"), ([13, 60], 'includes the total number of particlesranging from small microplastics to macroplastics'), ([581, 59], 'includes only plastics'), ([13, 79], 'within surface waters (and not at depth or on the seafloor)'), ([11, 125], 'Global ocean (total)'), ([763, 123], '5.25 trillion'), ([53, 185], 'North Pacific'), ([391, 185], '98 trillion'), ([51, 247], 'Indian Ocean'), ([309, 247], '3 trillion'), ([47, 307], 'North Atlantic'), ([255, 307], '931 billion'), ([51, 367], 'South Pacific'), ([203, 369], '490 billion'), ([45, 429], 'South Atlantic'), ([181, 429], '297 .'), ([219, 429], 'billion'), ([15, 491], 'Mediterranean Sea'), ([175, 491], '247'), ([213, 491], 'billion'), ([241, 541], 'trillion'), ([349, 541], '2 trillion'), ([477, 541], 'trillion'), ([595, 541], 'trillion'), ([713, 541], 'trillion'), ([15, 569], 'Source: Eriksen et al. (2014)'), ([797, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_bar_value = 5.25\nsmallest_bar_value = 0.297\n\ntotal_value = largest_bar_value + smallest_bar_value\nprint(total_value)",
        "execution": "5.547",
        "error": "None",
        "extraction": "5.547",
        "prediction": "5.55",
        "true_false": false
    },
    "881": {
        "question": "If the population of grasshopper decreases, the population of mouse will most likely do what?",
        "image": "images/881.jpg",
        "choices": [
            "decrease",
            "remain the same",
            "increase",
            "NA"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "881",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 600,
            "img_height": 375,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the population of grasshopper decreases, the population of mouse will most likely do what?\nChoices:\n(A) decrease\n(B) remain the same\n(C) increase\n(D) NA\nImage detected text: [([108, 1], 'Hognose Snake'), ([350, 2], 'Hawk '), ([338, 102], 'Garter Snake'), ([142, 112], 'Toad'), ([22, 156], 'Rabbit'), ([284, 190], 'Spider'), ([428, 218], 'Preying Mantis'), ([103, 249], 'Grasshopper'), ([492, 302], 'parrow'), ([340, 316], 'Mouse'), ([4, 344], 'Grass')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def population_relationship(population1, population2):\n    if population1 == \"grasshopper\" and population2 == \"mouse\":\n        return \"decrease\"\n    else:\n        return \"NA\"\n\nprint(population_relationship(\"grasshopper\", \"mouse\"))",
        "execution": "decrease",
        "error": "None",
        "extraction": "decrease",
        "prediction": "decrease",
        "true_false": true
    },
    "882": {
        "question": "Is Lawn Green the low median?",
        "image": "images/882.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "882",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 677,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([107, 11], 'title'), ([43, 105], 'Web Gray'), ([7, 153], '1'), ([9, 191], '1'), ([27, 265], 'Lawn Green'), ([355, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Lawn Green the low median?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([107, 11], 'title'), ([43, 105], 'Web Gray'), ([7, 153], '1'), ([9, 191], '1'), ([27, 265], 'Lawn Green'), ([355, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "low_median = 'Lawn Green'\n\nif low_median == 'Lawn Green':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "883": {
        "question": "Which number is missing?",
        "image": "images/883.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "15",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "883",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 868,
            "img_height": 207,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 53], '3'), ([123, 55], '9'), ([185, 51], '12'), ([344, 52], '15'), ([416, 52], '10'), ([485, 51], '16'), ([655, 57], '6'), ([723, 55], '9'), ([795, 55], '8'), ([44, 120], '17'), ([116, 122], '11'), ([195, 121], '8'), ([355, 123], '7'), ([415, 117], '12'), ([495, 121], '6'), ([643, 117], '18'), ([785, 117], '16')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number is missing?\nImage detected text: [([53, 53], '3'), ([123, 55], '9'), ([185, 51], '12'), ([344, 52], '15'), ([416, 52], '10'), ([485, 51], '16'), ([655, 57], '6'), ([723, 55], '9'), ([795, 55], '8'), ([44, 120], '17'), ([116, 122], '11'), ([195, 121], '8'), ([355, 123], '7'), ([415, 117], '12'), ([495, 121], '6'), ([643, 117], '18'), ([785, 117], '16')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = ['3', '9', '12', '15', '10', '16', '6', '9', '8', '17', '11', '8', '7', '12', '6', '18', '16']\n\nmissing_number = None\nfor i in range(1, 19):\n    if str(i) not in numbers:\n        missing_number = i\n        break\n\nprint(missing_number)",
        "execution": "1",
        "error": "None",
        "extraction": "17",
        "prediction": "17",
        "true_false": false
    },
    "884": {
        "question": "What is the blue kite in the lower right corner shaped like?",
        "image": "images/884.jpg",
        "choices": [
            "ferret",
            "cat",
            "cloud",
            "octopus"
        ],
        "unit": null,
        "precision": null,
        "answer": "octopus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "884",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "A-OKVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "geometry reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the blue kite in the lower right corner shaped like?\nChoices:\n(A) ferret\n(B) cat\n(C) cloud\n(D) octopus\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def blue_kite_shape(caption, choices):\n    shapes = {\n        'ferret': 'A',\n        'cat': 'B',\n        'cloud': 'C',\n        'octopus': 'D'\n    }\n\n    for choice in choices:\n        if choice == shapes[caption]:\n            return choice\n    return \"\"\n\nchoices = ['ferret', 'cat', 'cloud', 'octopus']\ncaption = \"The image shows a blue kite in the lower right corner. The kite has a long tail and is shaped like an animal.\"\n\nprint(blue_kite_shape(caption, choices))",
        "execution": "",
        "error": "'The image shows a blue kite in the lower right corner. The kite has a long tail and is shaped like an animal.'",
        "extraction": "ferret",
        "prediction": "ferret",
        "true_false": false
    },
    "885": {
        "question": "Grayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni? (Unit: pieces of pepperoni)",
        "image": "images/885.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "18",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "885",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 225,
            "img_height": 136,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([0, 0], 'Pieces of pepperoni per pizza'), ([75, 25], 'Stem'), ([123, 25], 'Leaf'), ([123, 51], '8 9'), ([121, 71], '12')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Grayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni? (Unit: pieces of pepperoni)\nImage detected text: [([0, 0], 'Pieces of pepperoni per pizza'), ([75, 25], 'Stem'), ([123, 25], 'Leaf'), ([123, 51], '8 9'), ([121, 71], '12')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "pieces_of_pepperoni = [8, 9, 12]\nsmallest_number = min(pieces_of_pepperoni)\nprint(smallest_number)",
        "execution": "8",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "886": {
        "question": "A newspaper researched how many grocery stores there are in each town. What is the median of the numbers?'",
        "image": "images/886.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "886",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 235,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([7, 3], 'Grocery stores in each town'), ([27, 37], 'Town'), ([97, 39], 'Number of stores'), ([3, 67], 'Chesterton'), ([3, 99], 'Riverside'), ([5, 131], 'Greenwood'), ([3, 161], 'Salem'), ([3, 191], 'Marion')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A newspaper researched how many grocery stores there are in each town. What is the median of the numbers?'\nImage detected text: [([7, 3], 'Grocery stores in each town'), ([27, 37], 'Town'), ([97, 39], 'Number of stores'), ([3, 67], 'Chesterton'), ([3, 99], 'Riverside'), ([5, 131], 'Greenwood'), ([3, 161], 'Salem'), ([3, 191], 'Marion')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "towns = ['Chesterton', 'Riverside', 'Greenwood', 'Salem', 'Marion']\nnumber_of_stores = [3, 3, 5, 3, 3]\n\nsorted_stores = sorted(number_of_stores)\nn = len(sorted_stores)\n\nif n % 2 == 0:\n    median = (sorted_stores[n//2 - 1] + sorted_stores[n//2]) / 2\nelse:\n    median = sorted_stores[n//2]\n\nprint(median)",
        "execution": "3",
        "error": "None",
        "extraction": "3.0",
        "prediction": null,
        "true_false": false
    },
    "887": {
        "question": "As shown in the figure, \u25b3ABC is the inscribed triangle of \u2299O. If \u2220ABC = 70.0, then the degree of \u2220AOC is equal to ()",
        "image": "images/887.jpg",
        "choices": [
            "140\u00b0",
            "130\u00b0",
            "120\u00b0",
            "110\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "140\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "887",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 119,
            "img_height": 106,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, \u25b3ABC is the inscribed triangle of \u2299O. If \u2220ABC = 70.0, then the degree of \u2220AOC is equal to ()\nChoices:\n(A) 140\u00b0\n(B) 130\u00b0\n(C) 120\u00b0\n(D) 110\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle_AOC(angle_ABC):\n    angle_AOC = 2 * angle_ABC\n    return angle_AOC\n\nangle_ABC = 70.0\nangle_AOC = find_angle_AOC(angle_ABC)\nprint(angle_AOC)",
        "execution": "140.0",
        "error": "None",
        "extraction": "140.0",
        "prediction": "140\u00b0",
        "true_false": true
    },
    "888": {
        "question": "Subtract all small green shiny balls. Subtract all small metallic things. How many objects are left?",
        "image": "images/888.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "888",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small green shiny balls. Subtract all small metallic things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_green_shiny_balls = 10\nsmall_metallic_things = 5\n\nobjects_left = small_green_shiny_balls - small_metallic_things\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "889": {
        "question": "Is Purple the minimum?",
        "image": "images/889.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "889",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 472,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "pie chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 11], 'title'), ([383, 147], 'Blue'), ([381, 169], 'Light Green'), ([382, 191], 'Bubblegum'), ([381, 215], 'Violet Red'), ([383, 239], 'Purple')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Purple the minimum?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([9, 11], 'title'), ([383, 147], 'Blue'), ([381, 169], 'Light Green'), ([382, 191], 'Bubblegum'), ([381, 215], 'Violet Red'), ([383, 239], 'Purple')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_purple_minimum(colors):\n    if \"Purple\" in colors:\n        return \"yes\"\n    else:\n        return \"no\"\n\ncolors = ['Blue', 'Light Green', 'Bubblegum', 'Violet Red', 'Purple']\nprint(is_purple_minimum(colors))",
        "execution": "yes",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "890": {
        "question": "Which is larger the moon or the sun?",
        "image": "images/890.jpg",
        "choices": [
            "Sun",
            "It varies",
            "They are equal in size",
            "Moon"
        ],
        "unit": null,
        "precision": null,
        "answer": "Sun",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "890",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1500,
            "img_height": 844,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([223, 30], 'Solar Eclipse'), ([1064, 420], 'Sun'), ([211, 555], 'Earth'), ([643, 605], 'et')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which is larger the moon or the sun?\nChoices:\n(A) Sun\n(B) It varies\n(C) They are equal in size\n(D) Moon\nImage detected text: [([223, 30], 'Solar Eclipse'), ([1064, 420], 'Sun'), ([211, 555], 'Earth'), ([643, 605], 'et')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "moon_radius = 1737.4\nsun_radius = 696340\n\nif moon_radius > sun_radius:\n    answer = \"Moon\"\nelif moon_radius < sun_radius:\n    answer = \"Sun\"\nelse:\n    answer = \"They are equal in size\"\n\nprint(answer)",
        "execution": "Sun",
        "error": "None",
        "extraction": "Sun",
        "prediction": "Sun",
        "true_false": true
    },
    "891": {
        "question": "How many algorithms have accuracy lower than 8 in at least one dataset?",
        "image": "images/891.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "891",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([38, 11], 'Accuracy of algorithms on'), ([101, 44], 'different datasets'), ([48, 70], '10.0'), ([191, 101], 'datasets'), ([64, 132], '7.5'), ([218, 166], 'epic'), ([13, 143], '1'), ([64, 194], '5.0'), ([216, 200], 'saddle'), ([64, 256], '2.5'), ([64, 318], '0.0'), ([217, 127], 'icy'), ([125, 384], 'kick'), ([170, 406], 'gloom'), ([279, 343], '1'), ([275, 403], 'brave')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many algorithms have accuracy lower than 8 in at least one dataset?\nImage detected text: [([38, 11], 'Accuracy of algorithms on'), ([101, 44], 'different datasets'), ([48, 70], '10.0'), ([191, 101], 'datasets'), ([64, 132], '7.5'), ([218, 166], 'epic'), ([13, 143], '1'), ([64, 194], '5.0'), ([216, 200], 'saddle'), ([64, 256], '2.5'), ([64, 318], '0.0'), ([217, 127], 'icy'), ([125, 384], 'kick'), ([170, 406], 'gloom'), ([279, 343], '1'), ([275, 403], 'brave')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracy_values = [10.0, 7.5, 5.0, 2.5, 0.0]\ncount = 0\n\nfor value in accuracy_values:\n    if value < 8:\n        count += 1\n\nprint(count)",
        "execution": "4",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": true
    },
    "892": {
        "question": "Does New Jersey have a higher value than Georgia ?",
        "image": "images/892.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "892",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 500,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([52, 22], 'Hospital Beds per'), ([51, 467], '0.8-1.2'), ([143, 467], '0.5-0.7'), ([237, 469], '0.2-0.4'), ([331, 469], '0.0-0.1'), ([425, 469], 'NYA')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does New Jersey have a higher value than Georgia ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([52, 22], 'Hospital Beds per'), ([51, 467], '0.8-1.2'), ([143, 467], '0.5-0.7'), ([237, 469], '0.2-0.4'), ([331, 469], '0.0-0.1'), ([425, 469], 'NYA')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_values(state1, value1, state2, value2):\n    if value1 > value2:\n        return state1\n    else:\n        return state2\n\nstate1 = \"New Jersey\"\nvalue1 = 0.8\nstate2 = \"Georgia\"\nvalue2 = 0.5\n\nresult = compare_values(state1, value1, state2, value2)\nif result == state1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "Yes",
        "error": "None",
        "extraction": "Yes",
        "prediction": "Yes",
        "true_false": false
    },
    "893": {
        "question": "What is the limit of the blue function as x approaches negative infinity?",
        "image": "images/893.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "893",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 327,
            "img_height": 331,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the limit of the blue function as x approaches negative infinity?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = 3*x**2 - 2*x + 5\n\nlimit = sp.limit(f, x, sp.NegativeInfinity)\nprint(limit)",
        "execution": "",
        "error": "module 'sympy' has no attribute 'NegativeInfinity'",
        "extraction": "Negative infinity",
        "prediction": null,
        "true_false": false
    },
    "894": {
        "question": "What is the sum of the accuracies of the algorithms fat and acre?",
        "image": "images/894.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "894",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([17, 159], '1'), ([91, 355], '9'), ([143, 359], 'I'), ([186, 354], '2'), ([232, 354], '0'), ([285, 355], '2'), ([335, 357], '8'), ([389, 359], 'g')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the accuracies of the algorithms fat and acre?\nImage detected text: [([93, 10], 'Accuracy of different algorithms'), ([37, 31], '10'), ([17, 159], '1'), ([91, 355], '9'), ([143, 359], 'I'), ([186, 354], '2'), ([232, 354], '0'), ([285, 355], '2'), ([335, 357], '8'), ([389, 359], 'g')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "fat_accuracy = 10\nacre_accuracy = 9\n\nsum_of_accuracies = fat_accuracy + acre_accuracy\nprint(sum_of_accuracies)",
        "execution": "19",
        "error": "None",
        "extraction": "19",
        "prediction": "19",
        "true_false": false
    },
    "895": {
        "question": "Which model has the lowest Audio-Audio Similarity and Text-Audio Similarity scores overall?",
        "image": "images/895.jpg",
        "choices": [
            "MusicLDM (mix-up)",
            "MusicLDM (original)",
            "MusicLDM (BLM)",
            "MusicLDM (BAM)",
            "MuBERT"
        ],
        "unit": null,
        "precision": null,
        "answer": "MuBERT",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "895",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1882,
            "img_height": 682,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "violin plot",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([341, 38], 'Audio-Audio Similarity'), ([1239, 38], 'Text-Audio Similarity'), ([5, 101], '1.0'), ([5, 271], '0.5'), ([7, 441], '0.0'), ([169, 527], 'MusicLDM (mix-up)'), ([559, 529], 'MusicLDM (original)'), ([949, 529], 'MusicLDM (BLM)'), ([1339, 527], 'MusicLDM (BAM)'), ([1716, 530], 'MuBERT'), ([107, 619], 'Figure 3: The violin plot of the audio-audio similarity, and the text-to-audio similarity:')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model has the lowest Audio-Audio Similarity and Text-Audio Similarity scores overall?\nChoices:\n(A) MusicLDM (mix-up)\n(B) MusicLDM (original)\n(C) MusicLDM (BLM)\n(D) MusicLDM (BAM)\n(E) MuBERT\nImage detected text: [([341, 38], 'Audio-Audio Similarity'), ([1239, 38], 'Text-Audio Similarity'), ([5, 101], '1.0'), ([5, 271], '0.5'), ([7, 441], '0.0'), ([169, 527], 'MusicLDM (mix-up)'), ([559, 529], 'MusicLDM (original)'), ([949, 529], 'MusicLDM (BLM)'), ([1339, 527], 'MusicLDM (BAM)'), ([1716, 530], 'MuBERT'), ([107, 619], 'Figure 3: The violin plot of the audio-audio similarity, and the text-to-audio similarity:')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "audio_audio_similarity = [1.0, 0.5, 0.0]\ntext_audio_similarity = [1.0, 0.5, 0.0]\nmodels = ['MusicLDM (mix-up)', 'MusicLDM (original)', 'MusicLDM (BLM)', 'MusicLDM (BAM)', 'MuBERT']\n\nlowest_similarity = float('inf')\nlowest_model = \"\"\n\nfor i in range(len(models)):\n    if audio_audio_similarity[i] < lowest_similarity and text_audio_similarity[i] < lowest_similarity:\n        lowest_similarity = min(audio_audio_similarity[i], text_audio_similarity[i])\n        lowest_model = models[i]\n\nprint(lowest_model)",
        "execution": "",
        "error": "list index out of range",
        "extraction": "MusicLDM (mix-up)",
        "prediction": "MusicLDM (mix-up)",
        "true_false": false
    },
    "896": {
        "question": "Approximately, what percentage of jewelry sales in January were Rings?",
        "image": "images/896.jpg",
        "choices": [
            "Around 21%",
            "Around 27%",
            "Around 31%",
            "Around 37%"
        ],
        "unit": null,
        "precision": null,
        "answer": "Around 31%",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "896",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 758,
            "img_height": 464,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([205, 13], 'Number of Items Sold'), ([80, 68], '80'), ([80, 100], '70'), ([80, 134], '60'), ([80, 166], '50'), ([80, 200], '40'), ([80, 234], '30'), ([80, 266], '20'), ([80, 298], '10'), ([142, 364], 'Neckleces'), ([286, 360], 'Earings'), ([542, 364], 'Bracelets'), ([301, 409], 'January'), ([413, 409], '(June'), ([428, 361], 'Rings')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Approximately, what percentage of jewelry sales in January were Rings?\nChoices:\n(A) Around 21%\n(B) Around 27%\n(C) Around 31%\n(D) Around 37%\nImage detected text: [([205, 13], 'Number of Items Sold'), ([80, 68], '80'), ([80, 100], '70'), ([80, 134], '60'), ([80, 166], '50'), ([80, 200], '40'), ([80, 234], '30'), ([80, 266], '20'), ([80, 298], '10'), ([142, 364], 'Neckleces'), ([286, 360], 'Earings'), ([542, 364], 'Bracelets'), ([301, 409], 'January'), ([413, 409], '(June'), ([428, 361], 'Rings')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_of_rings_sold = 428\ntotal_items_sold = 80 + 70 + 60 + 50 + 40 + 30 + 20 + 10\n\npercentage_of_rings = (number_of_rings_sold / total_items_sold) * 100\npercentage_of_rings = round(percentage_of_rings)\n\npercentage_of_rings",
        "execution": "",
        "error": "None",
        "extraction": "Around 37%",
        "prediction": "Around 37%",
        "true_false": false
    },
    "897": {
        "question": "Use a calculator to find the measure of $\u2220J$ to the nearest degree.",
        "image": "images/897.jpg",
        "choices": [
            "33",
            "40",
            "50",
            "57"
        ],
        "unit": null,
        "precision": null,
        "answer": "40",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "897",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 352,
            "img_height": 223,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([158, 170], '14'), ([312, 178], 'K')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Use a calculator to find the measure of $\u2220J$ to the nearest degree.\nChoices:\n(A) 33\n(B) 40\n(C) 50\n(D) 57\nImage detected text: [([158, 170], '14'), ([312, 178], 'K')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle_K = 14\nangle_J = 180 - angle_K\n\nangle_J_rounded = round(angle_J)\n\nprint(angle_J_rounded)",
        "execution": "166",
        "error": "None",
        "extraction": "40",
        "prediction": "40",
        "true_false": true
    },
    "898": {
        "question": "As shown in the figure, A, B, and C are the three points on \u2299O, if \u2220C = 35.0, then the degree of \u2220OAB is ()",
        "image": "images/898.jpg",
        "choices": [
            "35\u00b0",
            "55\u00b0",
            "65\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "55\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "898",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 112,
            "img_height": 109,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, A, B, and C are the three points on \u2299O, if \u2220C = 35.0, then the degree of \u2220OAB is ()\nChoices:\n(A) 35\u00b0\n(B) 55\u00b0\n(C) 65\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef angle_OAB(angle_C):\n    angle_OAB = 180 - angle_C\n    return angle_OAB\n\nangle_C = 35.0\nangle_OAB = angle_OAB(angle_C)\nprint(angle_OAB)",
        "execution": "145.0",
        "error": "None",
        "extraction": "145",
        "prediction": "35\u00b0",
        "true_false": false
    },
    "899": {
        "question": "Which number comes next?",
        "image": "images/899.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2123",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "899",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 406,
            "img_height": 185,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([42, 86], '13'), ([102, 88], '57'), ([158, 86], '911 1315 1719')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which number comes next?\nImage detected text: [([42, 86], '13'), ([102, 88], '57'), ([158, 86], '911 1315 1719')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [13, 57, 911, 1315, 1719]\nnext_number = numbers[-1] + (numbers[-1] - numbers[-2])\nprint(next_number)",
        "execution": "2123",
        "error": "None",
        "extraction": "1719",
        "prediction": "1719",
        "true_false": false
    },
    "900": {
        "question": "Is the number of rubber cars less than the number of brown jets?",
        "image": "images/900.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "900",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of rubber cars less than the number of brown jets?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "rubber_cars = 10\nbrown_jets = 15\n\nif rubber_cars < brown_jets:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "901": {
        "question": "Subtract all shiny spheres. Subtract all big red matte spheres. How many objects are left?",
        "image": "images/901.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "901",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all shiny spheres. Subtract all big red matte spheres. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "shiny_spheres = 5\nbig_red_matte_spheres = 3\n\nobjects_left = shiny_spheres - big_red_matte_spheres\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "902": {
        "question": "If the leaf base has an angle greater than 90 degrees, what is it called?",
        "image": "images/902.jpg",
        "choices": [
            "obtuse",
            "decurrent",
            "cuneate",
            "acute"
        ],
        "unit": null,
        "precision": null,
        "answer": "obtuse",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "902",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1500,
            "img_height": 1429,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([92, 32], '90o'), ([508, 82], '90o'), ([123, 391], 'Acute'), ([626, 390], 'Obtuse'), ([1127, 387], 'Cuneate'), ([170, 828], 'Rounded'), ([656, 828], 'Decurrent'), ([1125, 827], 'Truncate'), ([183, 1121], 'Cordate'), ([720, 1164], 'Lobate'), ([44, 1288], 'Figure 4.11'), ([377, 1290], 'Leaf base shapes.'), ([1168, 1292], 'Sagittate')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: If the leaf base has an angle greater than 90 degrees, what is it called?\nChoices:\n(A) obtuse\n(B) decurrent\n(C) cuneate\n(D) acute\nImage detected text: [([92, 32], '90o'), ([508, 82], '90o'), ([123, 391], 'Acute'), ([626, 390], 'Obtuse'), ([1127, 387], 'Cuneate'), ([170, 828], 'Rounded'), ([656, 828], 'Decurrent'), ([1125, 827], 'Truncate'), ([183, 1121], 'Cordate'), ([720, 1164], 'Lobate'), ([44, 1288], 'Figure 4.11'), ([377, 1290], 'Leaf base shapes.'), ([1168, 1292], 'Sagittate')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def leaf_base_angle(angle):\n    if angle > 90:\n        return \"obtuse\"\n    elif angle == 90:\n        return \"right\"\n    else:\n        return \"acute\"\n\nangle = 100\nprint(leaf_base_angle(angle))",
        "execution": "obtuse",
        "error": "None",
        "extraction": "obtuse",
        "prediction": "obtuse",
        "true_false": true
    },
    "903": {
        "question": "As shown in the figure, if \u2220ABC = 30.0, then the degree of \u2220AOC is ()",
        "image": "images/903.jpg",
        "choices": [
            "30\u00b0",
            "45\u00b0",
            "60\u00b0",
            "70\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "60\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "903",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 110,
            "img_height": 112,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, if \u2220ABC = 30.0, then the degree of \u2220AOC is ()\nChoices:\n(A) 30\u00b0\n(B) 45\u00b0\n(C) 60\u00b0\n(D) 70\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(angle_ABC):\n    angle_AOC = 180 - angle_ABC\n    return angle_AOC\n\nangle_ABC = 30.0\nangle_AOC = find_angle(angle_ABC)\nprint(angle_AOC)",
        "execution": "150.0",
        "error": "None",
        "extraction": "150",
        "prediction": "45\u00b0",
        "true_false": false
    },
    "904": {
        "question": "Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.",
        "image": "images/904.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "904",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 633,
            "img_height": 204,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Fill in the blank to describe the model. The model has 9 dots divided into 3 equal groups. There are (_) dots in each group.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "dots = 9\ngroups = 3\n\ndots_in_each_group = dots // groups\nprint(dots_in_each_group)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": true
    },
    "905": {
        "question": "Is the number of large red cars behind the metal car less than the number of blue matte tandem bikes that are behind the big blue rubber utility bike?",
        "image": "images/905.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "905",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of large red cars behind the metal car less than the number of blue matte tandem bikes that are behind the big blue rubber utility bike?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(large_red_cars, metal_car, blue_matte_tandem_bikes, big_blue_rubber_utility_bike):\n    if large_red_cars < blue_matte_tandem_bikes:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nlarge_red_cars = 5\nmetal_car = 3\nblue_matte_tandem_bikes = 7\nbig_blue_rubber_utility_bike = 4\n\nprint(compare_numbers(large_red_cars, metal_car, blue_matte_tandem_bikes, big_blue_rubber_utility_bike))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "906": {
        "question": "Is the sum of smallest two value is greater then then largest value?",
        "image": "images/906.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "906",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([13, 11], 'Alcohol consumption per person, 2016'), ([776, 18], 'Our Daorld'), ([15, 45], 'Consumption of alcohol'), ([183, 43], 'measured in liters of pure alcohol per person aged 15 or older'), ([11, 129], 'Slovenia'), ([771, 129], '12.6 liters'), ([27, 283], 'Nauru'), ([417, 283], 'liters'), ([11, 435], 'Ecuador'), ([317, 435], '4.4 liters'), ([57, 541], 'liters'), ([157, 541], '2 liters'), ([281, 545], 'liters'), ([391, 543], 'liters'), ([501, 545], 'liters'), ([593, 541], '10 liters'), ([703, 541], '12 liters'), ([15, 571], 'Source: World Bank'), ([550, 570], 'OurWNorldlnData orglalcohol-consumption'), ([793, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the sum of smallest two value is greater then then largest value?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([13, 11], 'Alcohol consumption per person, 2016'), ([776, 18], 'Our Daorld'), ([15, 45], 'Consumption of alcohol'), ([183, 43], 'measured in liters of pure alcohol per person aged 15 or older'), ([11, 129], 'Slovenia'), ([771, 129], '12.6 liters'), ([27, 283], 'Nauru'), ([417, 283], 'liters'), ([11, 435], 'Ecuador'), ([317, 435], '4.4 liters'), ([57, 541], 'liters'), ([157, 541], '2 liters'), ([281, 545], 'liters'), ([391, 543], 'liters'), ([501, 545], 'liters'), ([593, 541], '10 liters'), ([703, 541], '12 liters'), ([15, 571], 'Source: World Bank'), ([550, 570], 'OurWNorldlnData orglalcohol-consumption'), ([793, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "values = [12.6, 4.4, 2]\nsmallest_values = sorted(values)[:2]\nlargest_value = max(values)\n\nsum_smallest = sum(smallest_values)\n\nif sum_smallest > largest_value:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "907": {
        "question": "When the military expenditure value was lower than 0.2%?",
        "image": "images/907.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1970",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "907",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 850,
            "img_height": 600,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([10, 8], 'Military expenditure as share of GDP, 1970 to 1980'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([37, 541], '1970'), ([183, 541], '1972'), ([327, 541], '1974'), ([473, 541], '1976'), ([617, 541], '1978'), ([763, 541], '1980'), ([15, 571], 'Source: World Bank'), ([567, 571], 'Ouri orldlnData org military-spendingl -'), ([793, 569], 'CC BY')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: When the military expenditure value was lower than 0.2%?\nImage detected text: [([10, 8], 'Military expenditure as share of GDP, 1970 to 1980'), ([775, 19], 'Our World'), ([797, 31], 'Data'), ([37, 541], '1970'), ([183, 541], '1972'), ([327, 541], '1974'), ([473, 541], '1976'), ([617, 541], '1978'), ([763, 541], '1980'), ([15, 571], 'Source: World Bank'), ([567, 571], 'Ouri orldlnData org military-spendingl -'), ([793, 569], 'CC BY')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def military_expenditure(data):\n    for i in range(len(data)):\n        if data[i] < 0.2:\n            return i\n    return -1\n\ndata = [0.15, 0.18, 0.21, 0.17, 0.19, 0.22, 0.16, 0.14, 0.23, 0.2]\nprint(military_expenditure(data))",
        "execution": "0",
        "error": "None",
        "extraction": "8",
        "prediction": "8",
        "true_false": false
    },
    "908": {
        "question": "which organism would most likely have a decrease in its population if decrease the population of ant base of above diagram?",
        "image": "images/908.jpg",
        "choices": [
            "plant",
            "human",
            "lizard",
            "snake"
        ],
        "unit": null,
        "precision": null,
        "answer": "lizard",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "908",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 312,
            "img_height": 497,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 87], 'plant'), ([205, 181], 'poison dart'), ([243, 315], 'leiadopis'), ([33, 321], 'lizard'), ([243, 329], 'epinephlos'), ([203, 467], 'the goliath bird'), ([207, 485], 'eating spader')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: which organism would most likely have a decrease in its population if decrease the population of ant base of above diagram?\nChoices:\n(A) plant\n(B) human\n(C) lizard\n(D) snake\nImage detected text: [([79, 87], 'plant'), ([205, 181], 'poison dart'), ([243, 315], 'leiadopis'), ([33, 321], 'lizard'), ([243, 329], 'epinephlos'), ([203, 467], 'the goliath bird'), ([207, 485], 'eating spader')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def decrease_population(caption, choices):\n    organisms = {\n        'plant': ['poison dart', 'leiadopis'],\n        'lizard': ['epinephlos'],\n        'snake': ['the goliath bird', 'eating spader']\n    }\n\n    if \"ant\" in caption:\n        organism = 'plant'\n\n    for choice in choices:\n        if choice in organisms[organism]:\n            return choice\n    return \"\"\n\nchoices = ['plant', 'human', 'lizard', 'snake']\ncaption = \"The diagram shows a food chain with ants at the base. The ants are being eaten by poison dart frogs and leiadopis plants. The poison dart frogs are being eaten by epinephlos lizards. The epinephlos lizards are being eaten by the goliath bird eating spader.\"\n\nprint(decrease_population(caption, choices))",
        "execution": "",
        "error": "None",
        "extraction": "plant",
        "prediction": "plant",
        "true_false": false
    },
    "909": {
        "question": "As shown in the figure, in \u25b3ABC, DE \u2225 BC, if AD = 1.0, DB = 2.0, then the value of \\frac ADAB is ()",
        "image": "images/909.jpg",
        "choices": [
            "\\frac{2}{3}",
            "\\frac{1}{4}",
            "\\frac{1}{3}",
            "\\frac{1}{2}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\\frac{1}{3}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "909",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 132,
            "img_height": 118,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in \u25b3ABC, DE \u2225 BC, if AD = 1.0, DB = 2.0, then the value of \\frac ADAB is ()\nChoices:\n(A) \\frac{2}{3}\n(B) \\frac{1}{4}\n(C) \\frac{1}{3}\n(D) \\frac{1}{2}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "AD = 1.0\nDB = 2.0\n\nADAB = AD / (AD + DB)\nprint(ADAB)",
        "execution": "0.3333333333333333",
        "error": "None",
        "extraction": "1/3",
        "prediction": "\\frac{1}{3}",
        "true_false": true
    },
    "910": {
        "question": "Subtract all blue metal balls. Subtract all large matte things. How many objects are left?",
        "image": "images/910.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "910",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all blue metal balls. Subtract all large matte things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_metal_balls = 5\nlarge_matte_things = 3\n\nobjects_left = blue_metal_balls - large_matte_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": true
    },
    "911": {
        "question": "Is the smaller picture below the larger picture?",
        "image": "images/911.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "911",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the smaller picture below the larger picture?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def is_smaller_picture_below(larger_picture_height, smaller_picture_height):\n    if smaller_picture_height < larger_picture_height:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nlarger_picture_height = 800\nsmaller_picture_height = 600\n\nprint(is_smaller_picture_below(larger_picture_height, smaller_picture_height))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "912": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/912.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "912",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 629,
            "img_height": 413,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(ages):\n    current_year = datetime.datetime.now().year\n    ww2_end_year = 1945\n    count = 0\n    \n    for age in ages:\n        birth_year = current_year - age\n        if birth_year > ww2_end_year:\n            count += 1\n    \n    return count\n\nages = [25, 30, 40, 50, 60]\nprint(count_people_after_ww2(ages))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "913": {
        "question": "Does Dark Cyan have the maximum area under the curve?",
        "image": "images/913.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "913",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 763,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([671, 13], 'Web Green'), ([671, 37], 'Hot Pink'), ([671, 59], 'Dark Cyan'), ([669, 83], 'Lawn Green'), ([669, 105], 'Light Sky Blue'), ([671, 129], 'Violet'), ([671, 151], 'Chartreuse'), ([7, 153], '1'), ([9, 191], '1'), ([599, 363], '100'), ([307, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Dark Cyan have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([671, 13], 'Web Green'), ([671, 37], 'Hot Pink'), ([671, 59], 'Dark Cyan'), ([669, 83], 'Lawn Green'), ([669, 105], 'Light Sky Blue'), ([671, 129], 'Violet'), ([671, 151], 'Chartreuse'), ([7, 153], '1'), ([9, 191], '1'), ([599, 363], '100'), ([307, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\ncolors = ['Web Green', 'Hot Pink', 'Dark Cyan', 'Lawn Green', 'Light Sky Blue', 'Violet', 'Chartreuse']\nareas = [671-671, 671-671, 671-671, 671-671, 671-671, 671-671, 671-671]\n\nmax_area = max(areas)\nmax_color = colors[areas.index(max_area)]\n\nif max_color == 'Dark Cyan':\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)",
        "execution": "no",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "914": {
        "question": "Subtract all tiny purple shiny cubes. Subtract all large purple balls. How many objects are left?",
        "image": "images/914.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "914",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny purple shiny cubes. Subtract all large purple balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "tiny_purple_shiny_cubes = 10\nlarge_purple_balls = 5\n\nobjects_left = tiny_purple_shiny_cubes - large_purple_balls\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "915": {
        "question": "What would happen to the Lion population if the Gum Tree population decreased?",
        "image": "images/915.jpg",
        "choices": [
            "Unable to determine.",
            "Nothing would happen.",
            "It would also decrease.",
            "It would increase."
        ],
        "unit": null,
        "precision": null,
        "answer": "It would also decrease.",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "915",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 528,
            "img_height": 740,
            "source": "TQA",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([253, 63], 'Lion'), ([245, 79], 'Tertiary'), ([238, 94], 'Consuer'), ([403, 285], 'Hyena'), ([395, 301], 'Secondary'), ([394, 316], 'Consuer'), ([53, 321], 'Cheetah'), ([49, 337], 'Secondar'), ([48, 352], 'Consuer'), ([165, 491], 'Giraffe'), ([323, 501], 'Rhino'), ([27, 511], 'Zebra'), ([156, 522], 'Consuer'), ([318, 516], 'Primary'), ([21, 527], 'Primary'), ([313, 533], 'Consuer'), ([463, 527], 'Elephant'), ([15, 543], 'Consuer'), ([465, 543], 'Primary'), ([460, 558], 'Consuer'), ([349, 695], 'Gu Tree'), ([135, 701], 'Baobab'), ([130, 716], 'Producer'), ([344, 710], 'Eucalyptus'), ([351, 727], 'Producer'), ([163, 505], 'Fnary')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would happen to the Lion population if the Gum Tree population decreased?\nChoices:\n(A) Unable to determine.\n(B) Nothing would happen.\n(C) It would also decrease.\n(D) It would increase.\nImage detected text: [([253, 63], 'Lion'), ([245, 79], 'Tertiary'), ([238, 94], 'Consuer'), ([403, 285], 'Hyena'), ([395, 301], 'Secondary'), ([394, 316], 'Consuer'), ([53, 321], 'Cheetah'), ([49, 337], 'Secondar'), ([48, 352], 'Consuer'), ([165, 491], 'Giraffe'), ([323, 501], 'Rhino'), ([27, 511], 'Zebra'), ([156, 522], 'Consuer'), ([318, 516], 'Primary'), ([21, 527], 'Primary'), ([313, 533], 'Consuer'), ([463, 527], 'Elephant'), ([15, 543], 'Consuer'), ([465, 543], 'Primary'), ([460, 558], 'Consuer'), ([349, 695], 'Gu Tree'), ([135, 701], 'Baobab'), ([130, 716], 'Producer'), ([344, 710], 'Eucalyptus'), ([351, 727], 'Producer'), ([163, 505], 'Fnary')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def lion_population_change(gum_tree_population_change):\n    if gum_tree_population_change < 0:\n        return \"It would also decrease.\"\n    elif gum_tree_population_change == 0:\n        return \"Nothing would happen.\"\n    else:\n        return \"Unable to determine.\"\n\ngum_tree_population_change = -1\n\nprint(lion_population_change(gum_tree_population_change))",
        "execution": "It would also decrease.",
        "error": "None",
        "extraction": "It would also decrease.",
        "prediction": "It would also decrease.",
        "true_false": true
    },
    "916": {
        "question": "As shown in the figure, in Rt\u25b3ABC, \u2220C = 90.0, \u2220A = 30.0, BC = 2.0, the radius of \u2299C is 1.0, point P is the point on the hypotenuse AB, passing point P is a tangent PQ of \u2299C (Point Q is the tangent point), then the minimum value of the line segment PQ is ()",
        "image": "images/916.jpg",
        "choices": [
            "2",
            "\u221a{3}",
            "\u221a{2}",
            "2-\\frac{\u221a{3}}{3}"
        ],
        "unit": null,
        "precision": null,
        "answer": "\u221a{2}",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "916",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 112,
            "img_height": 145,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, in Rt\u25b3ABC, \u2220C = 90.0, \u2220A = 30.0, BC = 2.0, the radius of \u2299C is 1.0, point P is the point on the hypotenuse AB, passing point P is a tangent PQ of \u2299C (Point Q is the tangent point), then the minimum value of the line segment PQ is ()\nChoices:\n(A) 2\n(B) \u221a{3}\n(C) \u221a{2}\n(D) 2-\\frac{\u221a{3}}{3}\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef minimum_PQ():\n    BC = 2.0\n    radius = 1.0\n    angle_A = 30.0\n\n    angle_C = 90.0\n    angle_B = 180 - angle_A - angle_C\n\n    side_AC = BC / math.sin(math.radians(angle_B))\n    side_AB = BC / math.sin(math.radians(angle_C))\n\n    side_CP = side_AC - radius\n    side_PQ = math.sqrt(side_CP**2 - radius**2)\n\n    return side_PQ\n\nprint(minimum_PQ())",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "1.732",
        "prediction": "2",
        "true_false": false
    },
    "917": {
        "question": "What is the ratio of the number of procedures to register a business in 2004 to that in 2007?",
        "image": "images/917.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "917",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 939,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 8], 'Start-up procedures to register'), ([335, 11], 'business VS property in Namibia'), ([9, 195], 'L'), ([9, 311], '1'), ([89, 551], '8'), ([249, 551], '8'), ([409, 551], '8'), ([569, 551], '8'), ([729, 551], '2'), ([889, 551], '18'), ([475, 589], 'Year'), ([35, 623], 'Register'), ([95, 625], 'business'), ([171, 623], 'Register'), ([231, 625], 'property')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the ratio of the number of procedures to register a business in 2004 to that in 2007?\nImage detected text: [([51, 8], 'Start-up procedures to register'), ([335, 11], 'business VS property in Namibia'), ([9, 195], 'L'), ([9, 311], '1'), ([89, 551], '8'), ([249, 551], '8'), ([409, 551], '8'), ([569, 551], '8'), ([729, 551], '2'), ([889, 551], '18'), ([475, 589], 'Year'), ([35, 623], 'Register'), ([95, 625], 'business'), ([171, 623], 'Register'), ([231, 625], 'property')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "procedures_2004 = 8\nprocedures_2007 = 18\n\nratio = procedures_2004 / procedures_2007\nprint(ratio)",
        "execution": "0.4444444444444444",
        "error": "None",
        "extraction": "0.4444444444444444",
        "prediction": null,
        "true_false": false
    },
    "918": {
        "question": "Calculate the missing item.",
        "image": "images/918.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "918",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 538,
            "img_height": 492,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([81, 39], '15'), ([441, 41], '11'), ([205, 151], '22'), ([335, 151], '13'), ([352, 288], '5'), ([87, 385], '23'), ([439, 385], '32')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Calculate the missing item.\nImage detected text: [([81, 39], '15'), ([441, 41], '11'), ([205, 151], '22'), ([335, 151], '13'), ([352, 288], '5'), ([87, 385], '23'), ([439, 385], '32')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "missing_item = 0\n\nfor i in range(1, 33):\n    if i not in [15, 11, 22, 13, 5, 23, 32]:\n        missing_item = i\n        break\n\nprint(missing_item)",
        "execution": "1",
        "error": "None",
        "extraction": "15",
        "prediction": "15",
        "true_false": false
    },
    "919": {
        "question": "How many items sold more than 3 units in at least one store?",
        "image": "images/919.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "919",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([76, 12], 'Sales statistics for items in different'), ([217, 37], 'stores'), ([37, 53], '10'), ([99, 77], 'stores'), ([125, 97], 'wrist'), ([127, 123], 'cult'), ([15, 171], '8'), ([13, 205], '3'), ([92, 364], '1'), ([143, 367], '3'), ([186, 364], '8'), ([237, 367], '8'), ([287, 367], '1'), ([333, 367], '37'), ([383, 367], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many items sold more than 3 units in at least one store?\nImage detected text: [([76, 12], 'Sales statistics for items in different'), ([217, 37], 'stores'), ([37, 53], '10'), ([99, 77], 'stores'), ([125, 97], 'wrist'), ([127, 123], 'cult'), ([15, 171], '8'), ([13, 205], '3'), ([92, 364], '1'), ([143, 367], '3'), ([186, 364], '8'), ([237, 367], '8'), ([287, 367], '1'), ([333, 367], '37'), ([383, 367], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sales_data = [10, 8, 3, 1, 3, 8, 8, 1, 37, 2]\n\ncount = 0\nfor item in sales_data:\n    if item > 3:\n        count += 1\n\nprint(count)",
        "execution": "5",
        "error": "None",
        "extraction": "6",
        "prediction": "6",
        "true_false": false
    },
    "920": {
        "question": "The measure of angle BAC equals x*\\degree. What is the value of x?",
        "image": "images/920.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "30",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "920",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 388,
            "img_height": 310,
            "source": "GEOS",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([45, 9], 'mLBAC =x\"'), ([135, 9], 'What is the value of x?'), ([173, 279], '4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The measure of angle BAC equals x*\\degree. What is the value of x?\nImage detected text: [([45, 9], 'mLBAC =x\"'), ([135, 9], 'What is the value of x?'), ([173, 279], '4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "angle_BAC_measure = 4\nprint(\"The value of x is\", angle_BAC_measure)",
        "execution": "The value of x is 4",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "921": {
        "question": "Find x to the nearest tenth. Assume that segments that appear to be tangent are tangent.",
        "image": "images/921.jpg",
        "choices": [
            "5",
            "8.1",
            "10.3",
            "21.6"
        ],
        "unit": null,
        "precision": null,
        "answer": "21.6",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "921",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 226,
            "img_height": 170,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([62, 56], '10.3'), ([16, 108], '8.1'), ([116, 106], '17')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find x to the nearest tenth. Assume that segments that appear to be tangent are tangent.\nChoices:\n(A) 5\n(B) 8.1\n(C) 10.3\n(D) 21.6\nImage detected text: [([62, 56], '10.3'), ([16, 108], '8.1'), ([116, 106], '17')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_x(radius, distance):\n    x = math.sqrt(radius**2 - distance**2)\n    return round(x, 1)\n\nradius = 20\ndistance = 15\n\nx = find_x(radius, distance)\nprint(x)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "10.3",
        "prediction": "10.3",
        "true_false": false
    },
    "922": {
        "question": "What is the value of the smallest individual element in the whole chart?",
        "image": "images/922.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "922",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([217, 13], 'Title'), ([381, 51], 'print'), ([17, 67], '2'), ([381, 75], 'lever'), ([15, 188], '['), ([17, 321], '1'), ([401, 391], '10'), ([211, 415], 'Values')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the smallest individual element in the whole chart?\nImage detected text: [([217, 13], 'Title'), ([381, 51], 'print'), ([17, 67], '2'), ([381, 75], 'lever'), ([15, 188], '['), ([17, 321], '1'), ([401, 391], '10'), ([211, 415], 'Values')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "chart_values = [2, 1, 10]\nsmallest_value = min(chart_values)\nprint(smallest_value)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": true
    },
    "923": {
        "question": "Which model achieves the highest score in terms of Rec?",
        "image": "images/923.jpg",
        "choices": [
            "Transformers Agent (GPT-4)",
            "LLaMA-Adapter v2-7B",
            "LLaVA-7B",
            "Otter-9B ",
            "MM-ReAct-GPT-3.5",
            "LLaVA-13B (LLaMA-2)",
            "MM-ReAct-GPT-4"
        ],
        "unit": null,
        "precision": null,
        "answer": "LLaVA-13B (LLaMA-2)",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "923",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1910,
            "img_height": 1056,
            "source": "PaperQA",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "table",
            "grade": "college",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 17], 'Table 3: MM-Vet evaluation results on various LMMs regarding each core VL capability. For each'), ([50, 68], 'column, the highest, the second, and the third highest figures are highlighted by green, orange and'), ([53, 117], 'blue backgrounds. All the numbers are presented in % and the full score is 100%.'), ([83, 177], 'Model'), ([765, 177], 'Rec'), ([901, 175], 'OCR'), ([1049, 177], 'Know'), ([1219, 174], 'Gen'), ([1364, 176], 'Spat'), ([1506, 176], 'Math'), ([1705, 177], 'Total'), ([81, 228], 'Transformers Agent (GPT-4) [34]'), ([760, 228], '18.2'), ([917, 231], '3.9'), ([1075, 231], '2.2'), ([1231, 231], '3.2'), ([1368, 228], '12.4'), ([1527, 231], '4.0'), ([1664, 228], '13.4+0.5'), ([77, 270], 'LLaMA-Adapter v2-7B [28]'), ([761, 279], '16.8'), ([919, 279], '7.8'), ([1075, 281], '25'), ([1228, 276], '3.0'), ([1369, 281], '16.6'), ([1527, 281], '4.4'), ([1664, 278], '13.6+0.2'), ([80, 326], 'OpenFlamingo-9B [2, 6]'), ([759, 329], '24.6'), ([909, 331], '14.4'), ([1067, 331], '13.0'), ([1220, 328], '12.3'), ([1369, 329], '18.0'), ([1523, 331], '15.0'), ([1662, 328], '21.8+0.1'), ([82, 376], 'MiniGPT-4-8B [84]'), ([759, 381], '27.4'), ([908, 378], '15.0'), ([1066, 378], '12.8'), ([1219, 377], '13.9'), ([1364, 378], '20.3'), ([1525, 381], '7.7'), ([1662, 378], '22.1+0.1'), ([82, 428], 'BLIP-2-12B [42]'), ([759, 429], '27.5'), ([909, 431], '11.1'), ([1067, 431], '11.8'), ([1231, 429], '7.0'), ([1369, 429], '16.2'), ([1527, 431], '5.8'), ([1662, 428], '22.4+0.2'), ([79, 478], 'LLaVA-7B [46]'), ([759, 479], '28.0'), ([908, 478], '17.1'), ([1067, 479], '16.3'), ([1220, 478], '18.9'), ([1364, 478], '21.2'), ([1517, 481], '11.'), ([1662, 478], '23.8+0.6'), ([82, 526], 'MiniGPT-4-14B [84]'), ([758, 528], '29.9'), ([908, 528], '16.1'), ([1062, 528], '20.4'), ([1218, 528], '22.1'), ([1364, 528], '22.2'), ([1527, 531], '3.8'), ([1662, 528], '24.4+0.4'), ([81, 577], 'Otter-9B'), ([270, 580], '40]'), ([758, 578], '28.4'), ([908, 578], '16.4'), ([1066, 578], '19.4'), ([1218, 578], '20.7'), ([1368, 578], '19.3'), ([1523, 581], '15.0'), ([1662, 577], '24.610.2'), ([79, 626], 'InstructBLIP-I4B [19]'), ([759, 629], '30.8'), ([907, 627], '16.0'), ([1074, 628], '9.8'), ([1231, 631], '9.0'), ([1365, 631], '21.1'), ([1516, 628], '10.5'), ([1662, 628], '25.6+0.3'), ([81, 676], 'InstructBLIP-8B [19]'), ([758, 678], '32.4'), ([909, 681], '14.6'), ([1067, 681], '16.5'), ([1221, 679], '18.2'), ([1369, 679], '18.6'), ([1527, 681], '7.7'), ([1662, 677], '26.2+0.2'), ([80, 728], 'LLaVA-13B'), ([338, 730], '46]'), ([758, 728], '30.9'), ([904, 726], '20.1'), ([1062, 728], '23.5'), ([1225, 731], '26.4'), ([1367, 729], '24.3'), ([1527, 731], '7.7'), ([1662, 728], '26.4+0.1'), ([84, 778], 'MM-ReAct-GPT-3.5 [76]'), ([759, 779], '24.2'), ([913, 781], '31.5'), ([1063, 781], '21.5'), ([1219, 781], '20.7'), ([1371, 781], '32.3'), ([1518, 778], '26.2'), ([1662, 778], '27.9+0.1'), ([79, 826], 'LLaVA-7B (LLaMA-2) [46]'), ([758, 828], '32.9'), ([907, 831], '20.1'), ([1067, 831], '19.0'), ([1218, 828], '20.1'), ([1364, 828], '25.7'), ([1527, 831], '5.2'), ([1662, 828], '28.1+0.4'), ([79, 874], 'LLaVA-13B (V1.3, 336px) [46]'), ([765, 881], '38.1'), ([906, 878], '22.3'), ([1068, 878], '25.2'), ([1218, 878], '25.8'), ([1371, 881], '31.3'), ([1517, 881], '11.2'), ([1668, 878], '32.5+0.1'), ([80, 928], 'LLaVA-13B (LLaMA-2) [46]'), ([764, 928], '39.2'), ([910, 928], '22.7'), ([1069, 929], '26.5'), ([1224, 928], '29.3'), ([1364, 928], '29.6'), ([1527, 931], '7.7'), ([1668, 928], '32.9+0.1'), ([82, 976], 'MM-ReAct-GPT-4 [76]'), ([765, 981], '33.1'), ([913, 981], '65.7'), ([1069, 981], '29.0'), ([1225, 981], '35.0'), ([1371, 981], '56.8'), ([1521, 979], '69.2'), ([1669, 977], '44.610.2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which model achieves the highest score in terms of Rec?\nChoices:\n(A) Transformers Agent (GPT-4)\n(B) LLaMA-Adapter v2-7B\n(C) LLaVA-7B\n(D) Otter-9B \n(E) MM-ReAct-GPT-3.5\n(F) LLaVA-13B (LLaMA-2)\n(G) MM-ReAct-GPT-4\nImage detected text: [([51, 17], 'Table 3: MM-Vet evaluation results on various LMMs regarding each core VL capability. For each'), ([50, 68], 'column, the highest, the second, and the third highest figures are highlighted by green, orange and'), ([53, 117], 'blue backgrounds. All the numbers are presented in % and the full score is 100%.'), ([83, 177], 'Model'), ([765, 177], 'Rec'), ([901, 175], 'OCR'), ([1049, 177], 'Know'), ([1219, 174], 'Gen'), ([1364, 176], 'Spat'), ([1506, 176], 'Math'), ([1705, 177], 'Total'), ([81, 228], 'Transformers Agent (GPT-4) [34]'), ([760, 228], '18.2'), ([917, 231], '3.9'), ([1075, 231], '2.2'), ([1231, 231], '3.2'), ([1368, 228], '12.4'), ([1527, 231], '4.0'), ([1664, 228], '13.4+0.5'), ([77, 270], 'LLaMA-Adapter v2-7B [28]'), ([761, 279], '16.8'), ([919, 279], '7.8'), ([1075, 281], '25'), ([1228, 276], '3.0'), ([1369, 281], '16.6'), ([1527, 281], '4.4'), ([1664, 278], '13.6+0.2'), ([80, 326], 'OpenFlamingo-9B [2, 6]'), ([759, 329], '24.6'), ([909, 331], '14.4'), ([1067, 331], '13.0'), ([1220, 328], '12.3'), ([1369, 329], '18.0'), ([1523, 331], '15.0'), ([1662, 328], '21.8+0.1'), ([82, 376], 'MiniGPT-4-8B [84]'), ([759, 381], '27.4'), ([908, 378], '15.0'), ([1066, 378], '12.8'), ([1219, 377], '13.9'), ([1364, 378], '20.3'), ([1525, 381], '7.7'), ([1662, 378], '22.1+0.1'), ([82, 428], 'BLIP-2-12B [42]'), ([759, 429], '27.5'), ([909, 431], '11.1'), ([1067, 431], '11.8'), ([1231, 429], '7.0'), ([1369, 429], '16.2'), ([1527, 431], '5.8'), ([1662, 428], '22.4+0.2'), ([79, 478], 'LLaVA-7B [46]'), ([759, 479], '28.0'), ([908, 478], '17.1'), ([1067, 479], '16.3'), ([1220, 478], '18.9'), ([1364, 478], '21.2'), ([1517, 481], '11.'), ([1662, 478], '23.8+0.6'), ([82, 526], 'MiniGPT-4-14B [84]'), ([758, 528], '29.9'), ([908, 528], '16.1'), ([1062, 528], '20.4'), ([1218, 528], '22.1'), ([1364, 528], '22.2'), ([1527, 531], '3.8'), ([1662, 528], '24.4+0.4'), ([81, 577], 'Otter-9B'), ([270, 580], '40]'), ([758, 578], '28.4'), ([908, 578], '16.4'), ([1066, 578], '19.4'), ([1218, 578], '20.7'), ([1368, 578], '19.3'), ([1523, 581], '15.0'), ([1662, 577], '24.610.2'), ([79, 626], 'InstructBLIP-I4B [19]'), ([759, 629], '30.8'), ([907, 627], '16.0'), ([1074, 628], '9.8'), ([1231, 631], '9.0'), ([1365, 631], '21.1'), ([1516, 628], '10.5'), ([1662, 628], '25.6+0.3'), ([81, 676], 'InstructBLIP-8B [19]'), ([758, 678], '32.4'), ([909, 681], '14.6'), ([1067, 681], '16.5'), ([1221, 679], '18.2'), ([1369, 679], '18.6'), ([1527, 681], '7.7'), ([1662, 677], '26.2+0.2'), ([80, 728], 'LLaVA-13B'), ([338, 730], '46]'), ([758, 728], '30.9'), ([904, 726], '20.1'), ([1062, 728], '23.5'), ([1225, 731], '26.4'), ([1367, 729], '24.3'), ([1527, 731], '7.7'), ([1662, 728], '26.4+0.1'), ([84, 778], 'MM-ReAct-GPT-3.5 [76]'), ([759, 779], '24.2'), ([913, 781], '31.5'), ([1063, 781], '21.5'), ([1219, 781], '20.7'), ([1371, 781], '32.3'), ([1518, 778], '26.2'), ([1662, 778], '27.9+0.1'), ([79, 826], 'LLaVA-7B (LLaMA-2) [46]'), ([758, 828], '32.9'), ([907, 831], '20.1'), ([1067, 831], '19.0'), ([1218, 828], '20.1'), ([1364, 828], '25.7'), ([1527, 831], '5.2'), ([1662, 828], '28.1+0.4'), ([79, 874], 'LLaVA-13B (V1.3, 336px) [46]'), ([765, 881], '38.1'), ([906, 878], '22.3'), ([1068, 878], '25.2'), ([1218, 878], '25.8'), ([1371, 881], '31.3'), ([1517, 881], '11.2'), ([1668, 878], '32.5+0.1'), ([80, 928], 'LLaVA-13B (LLaMA-2) [46]'), ([764, 928], '39.2'), ([910, 928], '22.7'), ([1069, 929], '26.5'), ([1224, 928], '29.3'), ([1364, 928], '29.6'), ([1527, 931], '7.7'), ([1668, 928], '32.9+0.1'), ([82, 976], 'MM-ReAct-GPT-4 [76]'), ([765, 981], '33.1'), ([913, 981], '65.7'), ([1069, 981], '29.0'), ([1225, 981], '35.0'), ([1371, 981], '56.8'), ([1521, 979], '69.2'), ([1669, 977], '44.610.2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def highest_score(choices):\n    highest_score = 0\n    highest_model = \"\"\n\n    for choice in choices:\n        model_score = float(choice[1])\n        if model_score > highest_score:\n            highest_score = model_score\n            highest_model = choice[0]\n\n    return highest_model\n\nchoices = [\n    ('Transformers Agent (GPT-4)', '18.2'),\n    ('LLaMA-Adapter v2-7B', '16.8'),\n    ('LLaVA-7B', '28.0'),\n    ('Otter-9B', '28.4'),\n    ('MM-ReAct-GPT-3.5', '24.2'),\n    ('LLaVA-13B (LLaMA-2)', '32.9'),\n    ('MM-ReAct-GPT-4', '33.1')\n]\n\nprint(highest_score(choices))",
        "execution": "MM-ReAct-GPT-4",
        "error": "None",
        "extraction": "LLaVA-13B (LLaMA-2)",
        "prediction": "LLaVA-13B (LLaMA-2)",
        "true_false": true
    },
    "924": {
        "question": "Does Periwinkle have the maximum area under the curve?",
        "image": "images/924.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "924",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 587,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 11], 'title'), ([95, 115], 'Light Slate'), ([95, 137], 'Dark Salmon'), ([7, 155], '9'), ([95, 161], 'Periwinkle'), ([94, 182], 'Turquoise'), ([9, 191], '1'), ([95, 207], 'Medium Purple'), ([95, 228], 'Dark Orange'), ([25, 257], '90.5'), ([95, 253], 'Cyan'), ([547, 363], '100'), ([285, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Periwinkle have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([61, 11], 'title'), ([95, 115], 'Light Slate'), ([95, 137], 'Dark Salmon'), ([7, 155], '9'), ([95, 161], 'Periwinkle'), ([94, 182], 'Turquoise'), ([9, 191], '1'), ([95, 207], 'Medium Purple'), ([95, 228], 'Dark Orange'), ([25, 257], '90.5'), ([95, 253], 'Cyan'), ([547, 363], '100'), ([285, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [9, 25, 61, 90.5, 100]\ny = [1, 90.5, 61, 100, 90.5]\n\nplt.plot(x, y)\nplt.fill_between(x, y, color='purple', alpha=0.5)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Area under the curve')\n\nplt.show()\n\nmax_area = max(y)\nif y.index(max_area) == x.index(61):\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "925": {
        "question": "Haley went to the store. She bought 3+9/10 pounds of pumpernickel bread crumbs. How much did she spend? (Unit: $)",
        "image": "images/925.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "19.5",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "925",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 334,
            "img_height": 130,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([10, 7], 'pumpernickel bread crumbs'), ([259, 7], 'S5 per Ib'), ([9, 39], 'sourdough bread crumbs'), ([259, 39], 'S5 per Ib'), ([9, 73], 'whole'), ([97, 73], 'bread crumbs'), ([259, 71], '54 per Ib'), ([11, 105], 'rye bread crumbs'), ([259, 103], 'S5 per Ib'), ([52, 72], 'grain')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Haley went to the store. She bought 3+9/10 pounds of pumpernickel bread crumbs. How much did she spend? (Unit: $)\nImage detected text: [([10, 7], 'pumpernickel bread crumbs'), ([259, 7], 'S5 per Ib'), ([9, 39], 'sourdough bread crumbs'), ([259, 39], 'S5 per Ib'), ([9, 73], 'whole'), ([97, 73], 'bread crumbs'), ([259, 71], '54 per Ib'), ([11, 105], 'rye bread crumbs'), ([259, 103], 'S5 per Ib'), ([52, 72], 'grain')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "pumpernickel_price = 5.00\npounds = 3 + 9/10\n\ntotal_cost = pumpernickel_price * pounds\nprint(total_cost)",
        "execution": "19.5",
        "error": "None",
        "extraction": "39.5",
        "prediction": "39.5",
        "true_false": false
    },
    "926": {
        "question": "What is the size of the shaded area under the curve? Round the answer to 2 decimal places",
        "image": "images/926.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "7.07",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "926",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 433,
            "img_height": 312,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([14, 8], 'YA'), ([14, 86], '3'), ([122, 62], 'f(x) = 9 = (x = 3)2'), ([370, 276], '6 X')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the size of the shaded area under the curve? Round the answer to 2 decimal places\nImage detected text: [([14, 8], 'YA'), ([14, 86], '3'), ([122, 62], 'f(x) = 9 = (x = 3)2'), ([370, 276], '6 X')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import numpy as np\nfrom scipy.integrate import quad\n\ndef f(x):\n    return 9 - (x - 3)**2\n\nresult, _ = quad(f, 0, 6)\nshaded_area = round(result, 2)\nprint(shaded_area)",
        "execution": "36.0",
        "error": "None",
        "extraction": "6.0",
        "prediction": "6.0",
        "true_false": false
    },
    "927": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cAB\u7684\u5782\u76f4\u5e73\u5206\u7ebf\u4ea4AB\u4e8e\u70b9D\uff0c\u4ea4BC\u4e8e\u70b9E\uff0c\u8fde\u63a5AE\uff0e\u82e5AB\uff1d6\uff0c\u25b3ACE\u7684\u5468\u957f\u4e3a13\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u4e3a\uff08\uff09",
        "image": "images/927.jpg",
        "choices": [
            "19",
            "16",
            "29",
            "18"
        ],
        "unit": null,
        "precision": null,
        "answer": "19",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "927",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 199,
            "img_height": 152,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cAB\u7684\u5782\u76f4\u5e73\u5206\u7ebf\u4ea4AB\u4e8e\u70b9D\uff0c\u4ea4BC\u4e8e\u70b9E\uff0c\u8fde\u63a5AE\uff0e\u82e5AB\uff1d6\uff0c\u25b3ACE\u7684\u5468\u957f\u4e3a13\uff0c\u5219\u25b3ABC\u7684\u5468\u957f\u4e3a\uff08\uff09\nChoices:\n(A) 19\n(B) 16\n(C) 29\n(D) 18\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef triangle_perimeter(AB, ACE_perimeter):\n    # Calculate the length of AC using the perimeter of triangle ACE\n    AC = ACE_perimeter / 2 - AB\n\n    # Calculate the length of BC using the Pythagorean theorem\n    BC = math.sqrt(AC**2 + AB**2)\n\n    # Calculate the perimeter of triangle ABC\n    ABC_perimeter = AB + AC + BC\n\n    return ABC_perimeter\n\nAB = 6\nACE_perimeter = 13\n\nprint(triangle_perimeter(AB, ACE_perimeter))",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "16",
        "prediction": "16",
        "true_false": false
    },
    "928": {
        "question": "How much more does a navy blue bath mat cost than a yellow bath towel? (Unit: $)",
        "image": "images/928.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "928",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 234,
            "img_height": 160,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 9], 'quilt'), ([195, 5], 'S23'), ([6, 36], 'yellow bath towel'), ([195, 37], 'S12'), ([7, 69], 'beach towel'), ([195, 69], 'S10'), ([7, 100], 'navy blue bath mat'), ([195, 101], 'S17'), ([9, 135], 'flannel sheet'), ([195, 133], 'S20')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much more does a navy blue bath mat cost than a yellow bath towel? (Unit: $)\nImage detected text: [([9, 9], 'quilt'), ([195, 5], 'S23'), ([6, 36], 'yellow bath towel'), ([195, 37], 'S12'), ([7, 69], 'beach towel'), ([195, 69], 'S10'), ([7, 100], 'navy blue bath mat'), ([195, 101], 'S17'), ([9, 135], 'flannel sheet'), ([195, 133], 'S20')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "yellow_bath_towel_price = 12.00\nnavy_blue_bath_mat_price = 17.00\n\ndifference = navy_blue_bath_mat_price - yellow_bath_towel_price\nprint(difference)",
        "execution": "5.0",
        "error": "None",
        "extraction": "5.0",
        "prediction": null,
        "true_false": false
    },
    "929": {
        "question": "How much money does Tim need to buy a mystery game and a toy rocket? (Unit: $)",
        "image": "images/929.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "85",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "929",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 226,
            "img_height": 192,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([9, 7], 'board game'), ([187, 5], 'S17'), ([9, 39], 'model airplane'), ([187, 37], 'S23'), ([9, 71], 'model railroad set'), ([187, 69], 'S86'), ([7, 103], 'toy rocket'), ([187, 101], 'S65'), ([7, 133], 'teddy bear'), ([187, 133], 'S15'), ([9, 169], 'mystery game'), ([187, 165], 'S20')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Tim need to buy a mystery game and a toy rocket? (Unit: $)\nImage detected text: [([9, 7], 'board game'), ([187, 5], 'S17'), ([9, 39], 'model airplane'), ([187, 37], 'S23'), ([9, 71], 'model railroad set'), ([187, 69], 'S86'), ([7, 103], 'toy rocket'), ([187, 101], 'S65'), ([7, 133], 'teddy bear'), ([187, 133], 'S15'), ([9, 169], 'mystery game'), ([187, 165], 'S20')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "mystery_game_price = 20.00\ntoy_rocket_price = 65.00\n\nans = mystery_game_price + toy_rocket_price\nprint(ans)",
        "execution": "85.0",
        "error": "None",
        "extraction": "85.0",
        "prediction": null,
        "true_false": false
    },
    "930": {
        "question": "\u5982\u56fe\uff0cF\u662f\u25b3ABC\u7684\u89d2\u5e73\u5206\u7ebfCD\u548cBE\u7684\u4ea4\u70b9\uff0cCG\u22a5AB\u4e8e\u70b9G\uff0e\u82e5\u2220ACG\uff1d32\u00b0\uff0c\u5219\u2220BFC\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/930.jpg",
        "choices": [
            "119\u00b0",
            "122\u00b0",
            "148\u00b0",
            "150\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "119\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "930",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 113,
            "img_height": 79,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cF\u662f\u25b3ABC\u7684\u89d2\u5e73\u5206\u7ebfCD\u548cBE\u7684\u4ea4\u70b9\uff0cCG\u22a5AB\u4e8e\u70b9G\uff0e\u82e5\u2220ACG\uff1d32\u00b0\uff0c\u5219\u2220BFC\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 119\u00b0\n(B) 122\u00b0\n(C) 148\u00b0\n(D) 150\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_ACG = 32\n    angle_CGF = 90\n    angle_BFC = 180 - angle_ACG - angle_CGF\n    return angle_BFC\n\nprint(find_angle())",
        "execution": "58",
        "error": "None",
        "extraction": "122",
        "prediction": "122\u00b0",
        "true_false": false
    },
    "931": {
        "question": "As shown in the figure, \u25b3ABC is the inscribed triangle of \u2299O, AB is the diameter of \u2299O, point D is a point on \u2299O, if \u2220ACD = 40.0, then the size of \u2220BAD is ()",
        "image": "images/931.jpg",
        "choices": [
            "35\u00b0",
            "50\u00b0",
            "40\u00b0",
            "60\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "50\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "931",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 124,
            "img_height": 123,
            "source": "UniGeo",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: As shown in the figure, \u25b3ABC is the inscribed triangle of \u2299O, AB is the diameter of \u2299O, point D is a point on \u2299O, if \u2220ACD = 40.0, then the size of \u2220BAD is ()\nChoices:\n(A) 35\u00b0\n(B) 50\u00b0\n(C) 40\u00b0\n(D) 60\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_ACD = 40.0\n    angle_ADC = 90.0\n    angle_BAC = 180.0 - angle_ACD - angle_ADC\n    angle_BAD = 180.0 - angle_BAC\n    return angle_BAD\n\nprint(find_angle())",
        "execution": "130.0",
        "error": "None",
        "extraction": "50",
        "prediction": "50\u00b0",
        "true_false": true
    },
    "932": {
        "question": "What would happen to the phytoplankton if krill increased?",
        "image": "images/932.jpg",
        "choices": [
            "decrease",
            "increase",
            "can't be predicted",
            "stay the same"
        ],
        "unit": null,
        "precision": null,
        "answer": "decrease",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "932",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 750,
            "img_height": 350,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([597, 131], 'Baleen'), ([599, 153], 'whale'), ([463, 199], 'Krill'), ([455, 299], 'Phytoplankton')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would happen to the phytoplankton if krill increased?\nChoices:\n(A) decrease\n(B) increase\n(C) can't be predicted\n(D) stay the same\nImage detected text: [([597, 131], 'Baleen'), ([599, 153], 'whale'), ([463, 199], 'Krill'), ([455, 299], 'Phytoplankton')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "phytoplankton = \"increase\"\nkrill = \"increase\"\n\nif krill == \"increase\":\n    phytoplankton = \"increase\"\nelse:\n    phytoplankton = \"can't be predicted\"\n\nprint(phytoplankton)",
        "execution": "increase",
        "error": "None",
        "extraction": "increase",
        "prediction": "increase",
        "true_false": false
    },
    "933": {
        "question": "How much money does Hector need to buy a European vacation package and an Australian vacation package? (Unit: $)",
        "image": "images/933.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9606",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "933",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 344,
            "img_height": 160,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([11, 6], 'African safari vacation package'), ([283, 5], '$9,222'), ([9, 39], 'Jamaican vacation package'), ([283, 37], '95,644'), ([9, 71], 'European vacation package'), ([283, 69], '97,670'), ([8, 100], 'Australian vacation package'), ([283, 101], '91,936'), ([6, 132], 'Caribbean vacation package'), ([283, 133], '95,088')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How much money does Hector need to buy a European vacation package and an Australian vacation package? (Unit: $)\nImage detected text: [([11, 6], 'African safari vacation package'), ([283, 5], '$9,222'), ([9, 39], 'Jamaican vacation package'), ([283, 37], '95,644'), ([9, 71], 'European vacation package'), ([283, 69], '97,670'), ([8, 100], 'Australian vacation package'), ([283, 101], '91,936'), ([6, 132], 'Caribbean vacation package'), ([283, 133], '95,088')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "european_package_price = 97670\naustralian_package_price = 91936\n\ntotal_cost = european_package_price + australian_package_price\nprint(total_cost)",
        "execution": "189606",
        "error": "None",
        "extraction": "189,606",
        "prediction": null,
        "true_false": false
    },
    "934": {
        "question": "What is the value of the largest bar?",
        "image": "images/934.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "10000",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "934",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([237, 15], 'Title'), ([43, 187], '106'), ([15, 195], '1'), ([43, 265], '104'), ([43, 345], '102'), ([82, 408], 'picnic'), ([186, 408], 'fair'), ([272, 406], 'draw'), ([362, 408], 'candle'), ([34, 30], '1010'), ([40, 111], '108')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of the largest bar?\nImage detected text: [([237, 15], 'Title'), ([43, 187], '106'), ([15, 195], '1'), ([43, 265], '104'), ([43, 345], '102'), ([82, 408], 'picnic'), ([186, 408], 'fair'), ([272, 406], 'draw'), ([362, 408], 'candle'), ([34, 30], '1010'), ([40, 111], '108')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "largest_bar_value = 0\n\nfor text in image_detected_text:\n    if text[1].isdigit():\n        value = int(text[1])\n        if value > largest_bar_value:\n            largest_bar_value = value\n\nprint(largest_bar_value)",
        "execution": "",
        "error": "name 'image_detected_text' is not defined",
        "extraction": "108",
        "prediction": "108",
        "true_false": false
    },
    "935": {
        "question": "\u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAD\uff1d6\uff0cAB\uff1d4\uff0cDE\u5e73\u5206\u2220ADC\u4ea4BC\u4e8e\u70b9E\uff0c\u5219BE\u7684\u957f\u662f\uff08\uff09",
        "image": "images/935.jpg",
        "choices": [
            "2",
            "3",
            "4",
            "5"
        ],
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "935",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 140,
            "img_height": 81,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728ABCD\u4e2d\uff0cAD\uff1d6\uff0cAB\uff1d4\uff0cDE\u5e73\u5206\u2220ADC\u4ea4BC\u4e8e\u70b9E\uff0c\u5219BE\u7684\u957f\u662f\uff08\uff09\nChoices:\n(A) 2\n(B) 3\n(C) 4\n(D) 5\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_BE_length(AD, AB):\n    DE = (AD**2 + AB**2) / (2 * AD)\n    BE = math.sqrt(AB**2 - DE**2)\n    return BE\n\nAD = 6\nAB = 4\n\nBE_length = find_BE_length(AD, AB)\nprint(BE_length)",
        "execution": "",
        "error": "name 'math' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "936": {
        "question": "How many people in the image were born after the end of World War II?",
        "image": "images/936.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "936",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 710,
            "img_height": 892,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people in the image were born after the end of World War II?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef count_people_after_ww2(people_birth_years):\n    current_year = datetime.datetime.now().year\n    count = 0\n    for year in people_birth_years:\n        if year > 1945 and year <= current_year:\n            count += 1\n    return count\n\npeople_birth_years = [1930, 1950, 1965, 1980, 1995]\nprint(count_people_after_ww2(people_birth_years))",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "937": {
        "question": "Is Dark Periwinkle the roughest?",
        "image": "images/937.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "937",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 785,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([83, 137], 'Dark Slate'), ([7, 155], '9'), ([85, 160], 'Web Gray'), ([83, 183], 'Dark Periwinkle'), ([9, 191], '1'), ([83, 207], 'Web Green'), ([83, 229], 'Medium Turquoise'), ([737, 363], '100'), ([379, 383], 'raxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Dark Periwinkle the roughest?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([83, 137], 'Dark Slate'), ([7, 155], '9'), ([85, 160], 'Web Gray'), ([83, 183], 'Dark Periwinkle'), ([9, 191], '1'), ([83, 207], 'Web Green'), ([83, 229], 'Medium Turquoise'), ([737, 363], '100'), ([379, 383], 'raxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "roughest_color = 'Dark Periwinkle'\nif roughest_color == 'Dark Periwinkle':\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)",
        "execution": "yes",
        "error": "None",
        "extraction": "yes",
        "prediction": "yes",
        "true_false": true
    },
    "938": {
        "question": "In the figure, $m \u22209 = 75$. Find the measure of $\\angle 6$.",
        "image": "images/938.jpg",
        "choices": [
            "75",
            "85",
            "95",
            "105"
        ],
        "unit": null,
        "precision": null,
        "answer": "105",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "938",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 417,
            "img_height": 278,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([232, 26], 'm'), ([322, 44], ''), ([233, 141], '6'), ([318, 160], '10'), ([369, 169], 't'), ([279, 191], '12/11')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In the figure, $m \u22209 = 75$. Find the measure of $\\angle 6$.\nChoices:\n(A) 75\n(B) 85\n(C) 95\n(D) 105\nImage detected text: [([232, 26], 'm'), ([322, 44], ''), ([233, 141], '6'), ([318, 160], '10'), ([369, 169], 't'), ([279, 191], '12/11')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "m_angle_9 = 75\nm_angle_10 = 180 - m_angle_9\nm_angle_12_11 = 180 - m_angle_10\nm_angle_6 = m_angle_12_11\n\nprint(m_angle_6)",
        "execution": "75",
        "error": "None",
        "extraction": "105",
        "prediction": "105",
        "true_false": true
    },
    "939": {
        "question": "What would be most affected if the clams all died?",
        "image": "images/939.jpg",
        "choices": [
            "squid",
            "lantern fish",
            "octopus",
            "sea horse"
        ],
        "unit": null,
        "precision": null,
        "answer": "octopus",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "939",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1162,
            "img_height": 764,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([811, 35], 'Plankton'), ([997, 189], 'Shark'), ([295, 237], 'Small'), ([288, 252], 'Octopus'), ([843, 291], 'Big Shrimp'), ([1043, 313], 'Rock Fish'), ([91, 333], 'Smali'), ([500, 328], 'Octopus Fccd Web'), ([85, 349], 'Lobater'), ([7, 457], 'Small Shrimp'), ([283, 465], 'Squid'), ([971, 474], 'Mysid Shrimp'), ([1083, 495], 'Herring'), ([621, 531], 'Scraw-led'), ([623, 547], 'Cowzish'), ([883, 543], 'Big Lobster'), ([773, 569], 'Crab'), ([193, 577], 'Lantern Fish'), ([373, 597], 'Hcrse'), ([989, 603], 'Flat Fish'), ([497, 651], 'Clam:'), ([735, 681], 'Sea Snail'), ([233, 719], 'Mysid Shrimp'), ([973, 735], 'Aquatic Plants'), ([641, 753], 'penge:'), ([909, 415], 'Moray')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What would be most affected if the clams all died?\nChoices:\n(A) squid\n(B) lantern fish\n(C) octopus\n(D) sea horse\nImage detected text: [([811, 35], 'Plankton'), ([997, 189], 'Shark'), ([295, 237], 'Small'), ([288, 252], 'Octopus'), ([843, 291], 'Big Shrimp'), ([1043, 313], 'Rock Fish'), ([91, 333], 'Smali'), ([500, 328], 'Octopus Fccd Web'), ([85, 349], 'Lobater'), ([7, 457], 'Small Shrimp'), ([283, 465], 'Squid'), ([971, 474], 'Mysid Shrimp'), ([1083, 495], 'Herring'), ([621, 531], 'Scraw-led'), ([623, 547], 'Cowzish'), ([883, 543], 'Big Lobster'), ([773, 569], 'Crab'), ([193, 577], 'Lantern Fish'), ([373, 597], 'Hcrse'), ([989, 603], 'Flat Fish'), ([497, 651], 'Clam:'), ([735, 681], 'Sea Snail'), ([233, 719], 'Mysid Shrimp'), ([973, 735], 'Aquatic Plants'), ([641, 753], 'penge:'), ([909, 415], 'Moray')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def most_affected(species_list):\n    affected_species = {\n        'squid': 0,\n        'lantern fish': 0,\n        'octopus': 0,\n        'sea horse': 0\n    }\n\n    for species in species_list:\n        if species in affected_species:\n            affected_species[species] += 1\n\n    most_affected_species = max(affected_species, key=affected_species.get)\n    return most_affected_species\n\nspecies_list = ['Plankton', 'Shark', 'Small', 'Octopus', 'Big Shrimp', 'Rock Fish', 'Smali', 'Octopus Fccd Web', 'Lobater', 'Small Shrimp', 'Squid', 'Mysid Shrimp', 'Herring', 'Scraw-led', 'Cowzish', 'Big Lobster', 'Crab', 'Lantern Fish', 'Hcrse', 'Flat Fish', 'Clam:', 'Sea Snail', 'Mysid Shrimp', 'Aquatic Plants', 'penge:', 'Moray']\nprint(most_affected(species_list))",
        "execution": "squid",
        "error": "None",
        "extraction": "octopus",
        "prediction": "octopus",
        "true_false": true
    },
    "940": {
        "question": "Subtract all big red things. Subtract all metallic things. How many objects are left?",
        "image": "images/940.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "940",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big red things. Subtract all metallic things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_red_things = 5\nmetallic_things = 3\n\nobjects_left = big_red_things - metallic_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "941": {
        "question": "Which is the next number in the series?",
        "image": "images/941.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "941",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 271,
            "img_height": 327,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([121, 77], '3968')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which is the next number in the series?\nImage detected text: [([121, 77], '3968')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "series = [121, 77, 3968]\n\nnext_number = series[-1] + (series[-1] - series[-2])\nprint(next_number)",
        "execution": "7859",
        "error": "None",
        "extraction": "3968",
        "prediction": "3968",
        "true_false": false
    },
    "942": {
        "question": "What is the value of f(0)?",
        "image": "images/942.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "0",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "942",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 395,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the value of f(0)?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def f(x):\n    return 2*x + 3\n\nvalue = f(0)\nprint(value)",
        "execution": "3",
        "error": "None",
        "extraction": "3",
        "prediction": "3",
        "true_false": false
    },
    "943": {
        "question": "What is the difference between two consecutive major ticks on the Y-axis ?",
        "image": "images/943.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "943",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1258,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([53, 9], 'Total expenditure of government of Greece in healthcare and RGD projects'), ([7, 179], '0'), ([9, 266], 'L'), ([103, 551], '1'), ([285, 551], '{'), ([467, 551], '3'), ([649, 551], '1'), ([831, 551], '1'), ([1013, 551], '8'), ([1193, 551], '2'), ([635, 589], 'Year'), ([35, 623], 'Health'), ([103, 622], 'Research and Development')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the difference between two consecutive major ticks on the Y-axis ?\nImage detected text: [([53, 9], 'Total expenditure of government of Greece in healthcare and RGD projects'), ([7, 179], '0'), ([9, 266], 'L'), ([103, 551], '1'), ([285, 551], '{'), ([467, 551], '3'), ([649, 551], '1'), ([831, 551], '1'), ([1013, 551], '8'), ([1193, 551], '2'), ([635, 589], 'Year'), ([35, 623], 'Health'), ([103, 622], 'Research and Development')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\n# Assuming the Y-axis values are stored in a list called y_values\ny_values = [0, 1, 3, 1, 1, 8, 2]\n\n# Calculate the difference between consecutive values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Find the average difference\naverage_difference = sum(differences) / len(differences)\n\nprint(average_difference)",
        "execution": "",
        "error": "name 'y_values' is not defined",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "944": {
        "question": "What is the perimeter of the shape?",
        "image": "images/944.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "944",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 258,
            "img_height": 241,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "geometry diagram",
            "grade": "elementary school",
            "skills": [
                "geometry reasoning",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([37, 91], '1 ft'), ([195, 91], '1 ft')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the perimeter of the shape?\nImage detected text: [([37, 91], '1 ft'), ([195, 91], '1 ft')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "side1 = 1\nside2 = 1\n\nperimeter = 2 * (side1 + side2)\nprint(perimeter)",
        "execution": "4",
        "error": "None",
        "extraction": "4",
        "prediction": "4",
        "true_false": false
    },
    "945": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/945.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "945",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 610,
            "img_height": 451,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([31, 15], 'Do not lean Or'), ([0, 108], 'MSRGEN')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([31, 15], 'Do not lean Or'), ([0, 108], 'MSRGEN')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 31\nperson2_age = 15\n\nage_gap = abs(person1_age - person2_age)\nprint(age_gap)",
        "execution": "16",
        "error": "None",
        "extraction": "16",
        "prediction": "16",
        "true_false": false
    },
    "946": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/946.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "16",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "946",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 560,
            "img_height": 373,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([79, 297], 'Auloude')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([79, 297], 'Auloude')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_age = 25\nperson2_age = 35\n\nage_gap = abs(person1_age - person2_age)\nprint(age_gap)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "947": {
        "question": "\u5982\u56fe\uff0cAB\u2225CD\uff0cBC\u2225DE\uff0c\u2220A\uff1d45\u00b0\uff0c\u2220C\uff1d110\u00b0\uff0c\u5219\u2220AED\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/947.jpg",
        "choices": [
            "95\u00b0",
            "105\u00b0",
            "115\u00b0",
            "125\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "115\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "947",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 170,
            "img_height": 118,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0cAB\u2225CD\uff0cBC\u2225DE\uff0c\u2220A\uff1d45\u00b0\uff0c\u2220C\uff1d110\u00b0\uff0c\u5219\u2220AED\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 95\u00b0\n(B) 105\u00b0\n(C) 115\u00b0\n(D) 125\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_A = 45\n    angle_C = 110\n\n    angle_B = 180 - angle_A\n    angle_D = 180 - angle_C\n\n    angle_E = 180 - angle_B - angle_D\n\n    return angle_E\n\nprint(find_angle())",
        "execution": "-25",
        "error": "None",
        "extraction": "115",
        "prediction": "115\u00b0",
        "true_false": true
    },
    "948": {
        "question": "Some students compared how many blocks they live from school. What is the mean of the numbers?'",
        "image": "images/948.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "11",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "948",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 207,
            "img_height": 311,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([27, 5], 'Blocks from school'), ([7, 37], 'Name'), ([65, 37], 'Number of blocks'), ([2, 66], 'Wendy'), ([123, 67], '14'), ([5, 101], 'Carson'), ([3, 129], 'Zach'), ([5, 163], 'Lila'), ([5, 193], 'Nicole'), ([5, 225], 'Shane'), ([0, 251], 'Henry'), ([5, 287], 'Devin')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Some students compared how many blocks they live from school. What is the mean of the numbers?'\nImage detected text: [([27, 5], 'Blocks from school'), ([7, 37], 'Name'), ([65, 37], 'Number of blocks'), ([2, 66], 'Wendy'), ([123, 67], '14'), ([5, 101], 'Carson'), ([3, 129], 'Zach'), ([5, 163], 'Lila'), ([5, 193], 'Nicole'), ([5, 225], 'Shane'), ([0, 251], 'Henry'), ([5, 287], 'Devin')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blocks = [14, 3, 5, 5, 5, 0]\nmean = sum(blocks) / len(blocks)\nprint(mean)",
        "execution": "5.333333333333333",
        "error": "None",
        "extraction": "4.5",
        "prediction": null,
        "true_false": false
    },
    "949": {
        "question": "What is the combined percentage of  Lowest ROI and Medium ROI in SEO?",
        "image": "images/949.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "56",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "949",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([193, 49], 'SEO'), ([247, 47], '15X'), ([359, 49], '413'), ([505, 47], '32K'), ([595, 47], '12x'), ([113, 85], 'Content marketing'), ([251, 83], 'ITx'), ([365, 83], '40%'), ([505, 83], '307'), ([593, 83], '13k'), ([39, 113], 'E-mail marketing and marketing'), ([251, 119], 'ITx'), ([373, 119], '43X'), ([519, 119], '307'), ([599, 119], '10k'), ([153, 127], 'automation'), ([37, 157], 'Paid search marketing (AdWords)'), ([255, 155], '19K'), ([367, 155], '37x'), ([481, 155], '20x'), ([571, 155], '24x'), ([95, 191], 'Social'), ([131, 191], 'media (organic)'), ([427, 191], '39'), ([547, 189], '20x'), ([89, 227], 'Socila media (paid ads)'), ([263, 225], '24x'), ([385, 225], '36K'), ([491, 225], 'ITX'), ([573, 227], '23k'), ([85, 263], 'Website personalization'), ([251, 261], '8x'), ([341, 261], '26K'), ([425, 261], 'I6x'), ([539, 263], '403'), ([89, 299], 'Online PR and outreach'), ([271, 297], '28%'), ([403, 297], '37x'), ([507, 297], 'I5K'), ([579, 297], '20k'), ([59, 327], 'Display advertising including'), ([267, 333], '26x'), ([383, 333], '31%'), ([465, 331], 'I0x'), ([553, 333], '33k'), ([139, 341], 'programmatic'), ([295, 369], '2076'), ([377, 369], '4025'), ([457, 369], '6025'), ([539, 369], '8036'), ([617, 369], '10055'), ([683, 367], '12036'), ([417, 389], 'Share'), ([458, 387], 'respondents'), ([179, 431], 'Lowest ROI'), ([277, 431], 'Medium ROI'), ([383, 429], 'Highest ROI'), ([485, 431], \"Don't use or NJA\"), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([279, 190], '35k')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the combined percentage of  Lowest ROI and Medium ROI in SEO?\nImage detected text: [([193, 49], 'SEO'), ([247, 47], '15X'), ([359, 49], '413'), ([505, 47], '32K'), ([595, 47], '12x'), ([113, 85], 'Content marketing'), ([251, 83], 'ITx'), ([365, 83], '40%'), ([505, 83], '307'), ([593, 83], '13k'), ([39, 113], 'E-mail marketing and marketing'), ([251, 119], 'ITx'), ([373, 119], '43X'), ([519, 119], '307'), ([599, 119], '10k'), ([153, 127], 'automation'), ([37, 157], 'Paid search marketing (AdWords)'), ([255, 155], '19K'), ([367, 155], '37x'), ([481, 155], '20x'), ([571, 155], '24x'), ([95, 191], 'Social'), ([131, 191], 'media (organic)'), ([427, 191], '39'), ([547, 189], '20x'), ([89, 227], 'Socila media (paid ads)'), ([263, 225], '24x'), ([385, 225], '36K'), ([491, 225], 'ITX'), ([573, 227], '23k'), ([85, 263], 'Website personalization'), ([251, 261], '8x'), ([341, 261], '26K'), ([425, 261], 'I6x'), ([539, 263], '403'), ([89, 299], 'Online PR and outreach'), ([271, 297], '28%'), ([403, 297], '37x'), ([507, 297], 'I5K'), ([579, 297], '20k'), ([59, 327], 'Display advertising including'), ([267, 333], '26x'), ([383, 333], '31%'), ([465, 331], 'I0x'), ([553, 333], '33k'), ([139, 341], 'programmatic'), ([295, 369], '2076'), ([377, 369], '4025'), ([457, 369], '6025'), ([539, 369], '8036'), ([617, 369], '10055'), ([683, 367], '12036'), ([417, 389], 'Share'), ([458, 387], 'respondents'), ([179, 431], 'Lowest ROI'), ([277, 431], 'Medium ROI'), ([383, 429], 'Highest ROI'), ([485, 431], \"Don't use or NJA\"), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source'), ([279, 190], '35k')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "lowest_roi_percentage = 39\nmedium_roi_percentage = 28\n\ncombined_percentage = lowest_roi_percentage + medium_roi_percentage\nprint(combined_percentage)",
        "execution": "67",
        "error": "None",
        "extraction": "67",
        "prediction": "67",
        "true_false": false
    },
    "950": {
        "question": "The slope of f(x) at x=0 is ____",
        "image": "images/950.jpg",
        "choices": [
            "positive",
            "negative",
            "zero",
            "undefined"
        ],
        "unit": null,
        "precision": null,
        "answer": "positive",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "950",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1114,
            "img_height": 744,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The slope of f(x) at x=0 is ____\nChoices:\n(A) positive\n(B) negative\n(C) zero\n(D) undefined\nImage detected text: [([478, 78], '10'), ([494, 192], '8'), ([232, 258], '9()'), ([320, 270], '='), ([355, 259], '0.5\"'), ([497, 309], '6'), ([494, 538], '2'), ([160, 678], '-3'), ([286, 678], '2'), ([638, 676], '1'), ([754, 676], '2'), ([872, 676], '3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.Symbol('x')\nf = 10*x**2 + 8*x + 9\n\nslope = sp.diff(f, x).subs(x, 0)\n\nif slope > 0:\n    ans = \"(A) positive\"\nelif slope < 0:\n    ans = \"(B) negative\"\nelse:\n    ans = \"(C) zero\"\n\nprint(\"The slope of f(x) at x=0 is\", ans)",
        "execution": "The slope of f(x) at x=0 is (A) positive",
        "error": "None",
        "extraction": "(C) zero",
        "prediction": "zero",
        "true_false": false
    },
    "951": {
        "question": "Find $x$.",
        "image": "images/951.jpg",
        "choices": [
            "10.25",
            "12.75",
            "18.75",
            "25.5"
        ],
        "unit": null,
        "precision": null,
        "answer": "12.75",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "951",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 487,
            "img_height": 427,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([400, 110], 'E'), ([333, 183], '3x'), ([188, 290], '(5x _ 12)8')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Find $x$.\nChoices:\n(A) 10.25\n(B) 12.75\n(C) 18.75\n(D) 25.5\nImage detected text: [([400, 110], 'E'), ([333, 183], '3x'), ([188, 290], '(5x _ 12)8')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "from sympy import symbols, Eq, solve\n\nx = symbols('x')\neq1 = Eq(3*x, 5*x - 12)\neq2 = Eq(5*x - 12, 8)\n\nsol = solve((eq1, eq2), (x))\nprint(sol)",
        "execution": "[]",
        "error": "None",
        "extraction": "12.75",
        "prediction": "12.75",
        "true_false": true
    },
    "952": {
        "question": "Base your answers on the food web below and on your knowledge of biology. A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the",
        "image": "images/952.jpg",
        "choices": [
            "Minnows",
            "Ducks",
            "Fish",
            "Raccoons"
        ],
        "unit": null,
        "precision": null,
        "answer": "Fish",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "952",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 456,
            "img_height": 258,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([24, 21], 'Raccoons'), ([338, 28], 'Ducks'), ([76, 74], 'Fish'), ([358, 78], 'Minnows'), ([27, 143], 'Aquatic crustaceans'), ([195, 217], 'and floating plants'), ([135, 217], 'Algae')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Base your answers on the food web below and on your knowledge of biology. A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the\nChoices:\n(A) Minnows\n(B) Ducks\n(C) Fish\n(D) Raccoons\nImage detected text: [([24, 21], 'Raccoons'), ([338, 28], 'Ducks'), ([76, 74], 'Fish'), ([358, 78], 'Minnows'), ([27, 143], 'Aquatic crustaceans'), ([195, 217], 'and floating plants'), ([135, 217], 'Algae')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "aquatic_crustaceans_population = 100\nminnows_population = 50\nducks_population = 30\nfish_population = 80\nraccoons_population = 20\n\navailable_energy_for_minnows = minnows_population * 10\navailable_energy_for_ducks = ducks_population * 10\navailable_energy_for_fish = fish_population * 10\navailable_energy_for_raccoons = raccoons_population * 10\n\naquatic_crustaceans_population -= 10\n\nnew_available_energy_for_minnows = minnows_population * 10\nnew_available_energy_for_ducks = ducks_population * 10\nnew_available_energy_for_fish = fish_population * 10\nnew_available_energy_for_raccoons = raccoons_population * 10\n\ndecrease_in_available_energy_for_minnows = available_energy_for_minnows - new_available_energy_for_minnows\ndecrease_in_available_energy_for_ducks = available_energy_for_ducks - new_available_energy_for_ducks\ndecrease_in_available_energy_for_fish = available_energy_for_fish - new_available_energy_for_fish\ndecrease_in_available_energy_for_raccoons = available_energy_for_raccoons - new_available_energy_for_raccoons\n\nif decrease_in_available_energy_for_minnows > 0:\n    print(\"A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the Minnows\")\nelif decrease_in_available_energy_for_ducks > 0:\n    print(\"A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the Ducks\")\nelif decrease_in_available_energy_for_fish > 0:\n    print(\"A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the Fish\")\nelif decrease_in_available_energy_for_raccoons > 0:\n    print(\"A decrease in the Aquatic crustaceans population will most immediately decrease the available energy for the Raccoons\")",
        "execution": "",
        "error": "None",
        "extraction": "Minnows",
        "prediction": "Minnows",
        "true_false": false
    },
    "953": {
        "question": "What percentage of trees have leaves?",
        "image": "images/953.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "50",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "953",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What percentage of trees have leaves?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "total_trees = 100\ntrees_with_leaves = 75\n\npercentage = (trees_with_leaves / total_trees) * 100\nprint(percentage)",
        "execution": "75.0",
        "error": "None",
        "extraction": "75",
        "prediction": "75",
        "true_false": false
    },
    "954": {
        "question": "A partial food web is shown below. Which of the following will most likely happen if the snake population decreases?",
        "image": "images/954.jpg",
        "choices": [
            "Cricket will increase",
            "Mouse will increase",
            "Rabbit will increase",
            "All of above"
        ],
        "unit": null,
        "precision": null,
        "answer": "All of above",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "954",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 475,
            "img_height": 277,
            "source": "AI2D",
            "category": "general-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "high school",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([179, 17], 'Hawk'), ([13, 63], 'Mountain Lion'), ([179, 83], 'Snake'), ([345, 116], 'Frog'), ([33, 187], 'Deer'), ([129, 187], 'Rabbit'), ([243, 187], 'Mouse'), ([339, 187], 'Cricket'), ([183, 249], 'Grass')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A partial food web is shown below. Which of the following will most likely happen if the snake population decreases?\nChoices:\n(A) Cricket will increase\n(B) Mouse will increase\n(C) Rabbit will increase\n(D) All of above\nImage detected text: [([179, 17], 'Hawk'), ([13, 63], 'Mountain Lion'), ([179, 83], 'Snake'), ([345, 116], 'Frog'), ([33, 187], 'Deer'), ([129, 187], 'Rabbit'), ([243, 187], 'Mouse'), ([339, 187], 'Cricket'), ([183, 249], 'Grass')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def food_web_change(population_change):\n    if population_change == \"decrease\":\n        return \"Cricket will increase\"\n    else:\n        return \"No change in population\"\n\npopulation_change = \"decrease\"\nprint(food_web_change(population_change))",
        "execution": "Cricket will increase",
        "error": "None",
        "extraction": "Cricket will increase",
        "prediction": "Cricket will increase",
        "true_false": false
    },
    "955": {
        "question": "\u5982\u56fe\uff0e\u70b9O\u662f\u6b63\u4e94\u8fb9\u5f62ABCDE\u7684\u4e2d\u5fc3\uff0c\u2299O\u662f\u6b63\u4e94\u8fb9\u5f62\u7684\u5916\u63a5\u5706\uff0c\u2220ADE\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/955.jpg",
        "choices": [
            "30\u00b0",
            "32\u00b0",
            "36\u00b0",
            "40\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "36\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "955",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 136,
            "img_height": 136,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0e\u70b9O\u662f\u6b63\u4e94\u8fb9\u5f62ABCDE\u7684\u4e2d\u5fc3\uff0c\u2299O\u662f\u6b63\u4e94\u8fb9\u5f62\u7684\u5916\u63a5\u5706\uff0c\u2220ADE\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 30\u00b0\n(B) 32\u00b0\n(C) 36\u00b0\n(D) 40\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    # Since O is the center of the pentagon, angle AOE is 360/5 = 72 degrees\n    angle_AOE = 72\n\n    # Angle ADE is half of angle AOE\n    angle_ADE = angle_AOE / 2\n\n    return angle_ADE\n\nangle = find_angle()\nprint(angle)",
        "execution": "36.0",
        "error": "None",
        "extraction": "36",
        "prediction": "36\u00b0",
        "true_false": true
    },
    "956": {
        "question": "Subtract all small blue rubber objects. Subtract all brown shiny balls. How many objects are left?",
        "image": "images/956.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "956",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all small blue rubber objects. Subtract all brown shiny balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "small_blue_rubber_objects = 10\nbrown_shiny_balls = 5\n\nobjects_left = small_blue_rubber_objects - brown_shiny_balls\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "957": {
        "question": "Is the number of big brown buss behind the gray matte aeroplane greater than the number of yellow shiny scooters?",
        "image": "images/957.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "Yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "957",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of big brown buss behind the gray matte aeroplane greater than the number of yellow shiny scooters?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(big_brown_buses, gray_matte_airplane, yellow_shiny_scooters):\n    if big_brown_buses > yellow_shiny_scooters:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nbig_brown_buses = 5\ngray_matte_airplane = 2\nyellow_shiny_scooters = 3\n\nprint(compare_numbers(big_brown_buses, gray_matte_airplane, yellow_shiny_scooters))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": false
    },
    "958": {
        "question": "Choose the missing letters from below to form a word, using all letters presented",
        "image": "images/958.jpg",
        "choices": [
            "A, R, N",
            "R, D, N",
            "I, A, M",
            "H, O, W"
        ],
        "unit": null,
        "precision": null,
        "answer": "R, D, N",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "958",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 945,
            "img_height": 773,
            "source": "IQTest",
            "category": "math-targeted-vqa",
            "task": "figure question answering",
            "context": "puzzle test",
            "grade": "elementary school",
            "skills": [
                "logical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([140, 132], 'P'), ([430, 138], '2'), ([702, 130], 'E'), ([149, 351], '2'), ([416, 346], 'T'), ([697, 343], 'S'), ([142, 558], 'E'), ([430, 566], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Choose the missing letters from below to form a word, using all letters presented\nChoices:\n(A) A, R, N\n(B) R, D, N\n(C) I, A, M\n(D) H, O, W\nImage detected text: [([140, 132], 'P'), ([430, 138], '2'), ([702, 130], 'E'), ([149, 351], '2'), ([416, 346], 'T'), ([697, 343], 'S'), ([142, 558], 'E'), ([430, 566], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "letters = ['P', '2', 'E', '2', 'T', 'S', 'E', '2']\nmissing_letters = []\n\nfor letter in letters:\n    if letter not in missing_letters:\n        missing_letters.append(letter)\n\nmissing_letters.sort()\nprint(missing_letters)",
        "execution": "['2', 'E', 'P', 'S', 'T']",
        "error": "None",
        "extraction": "['2', 'E', 'P', 'S', 'T']",
        "prediction": "A, R, N",
        "true_false": false
    },
    "959": {
        "question": "The teachers at an elementary school counted how many desks they had in their classrooms. What is the median of the numbers?'",
        "image": "images/959.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "32",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "959",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 230,
            "img_height": 218,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([33, 5], 'Desks in classrooms'), ([15, 37], 'Teacher'), ([95, 37], 'Number of desks'), ([3, 67], 'Miss Petit'), ([5, 99], 'Mr. Gruber'), ([3, 129], 'Mr: Mehta'), ([149, 129], '35'), ([3, 161], 'Miss Gupta'), ([149, 161], '32'), ([2, 188], 'Mrs. Wong'), ([149, 191], '34')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The teachers at an elementary school counted how many desks they had in their classrooms. What is the median of the numbers?'\nImage detected text: [([33, 5], 'Desks in classrooms'), ([15, 37], 'Teacher'), ([95, 37], 'Number of desks'), ([3, 67], 'Miss Petit'), ([5, 99], 'Mr. Gruber'), ([3, 129], 'Mr: Mehta'), ([149, 129], '35'), ([3, 161], 'Miss Gupta'), ([149, 161], '32'), ([2, 188], 'Mrs. Wong'), ([149, 191], '34')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "desks = [35, 32, 34]\ndesks.sort()\nn = len(desks)\nif n % 2 == 0:\n    median = (desks[n//2 - 1] + desks[n//2]) / 2\nelse:\n    median = desks[n//2]\nprint(median)",
        "execution": "34",
        "error": "None",
        "extraction": "33",
        "prediction": "33",
        "true_false": false
    },
    "960": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/960.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "4",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "960",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2048,
            "img_height": 1365,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([1596, 267], 'Navy')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nImage detected text: [([1596, 267], 'Navy')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "person1_birth_year = 1990\nperson2_birth_year = 1985\n\nage_gap = abs(person1_birth_year - person2_birth_year)\nprint(age_gap)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "961": {
        "question": "What is the lowest value in blue bar?",
        "image": "images/961.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "961",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '7035'), ([279, 71], '619'), ([323, 75], '60%'), ([61, 89], '6025'), ([61, 137], '5025'), ([44, 162], '|'), ([61, 183], '4035'), ([61, 231], '3035'), ([43, 237], '1'), ([121, 265], '2036'), ([165, 271], '1996'), ([211, 271], '1996'), ([61, 279], '2055'), ([61, 327], '1055'), ([153, 391], 'check-upS'), ([273, 391], 'Up to three check-upS'), ([435, 391], 'Up to five check-upS'), ([579, 389], 'More than five check-ups'), ([145, 431], 'Black or African American'), ([331, 431], 'Hispanic American or Latino'), ([531, 431], 'White/ Caucasian'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the lowest value in blue bar?\nImage detected text: [([61, 41], '7035'), ([279, 71], '619'), ([323, 75], '60%'), ([61, 89], '6025'), ([61, 137], '5025'), ([44, 162], '|'), ([61, 183], '4035'), ([61, 231], '3035'), ([43, 237], '1'), ([121, 265], '2036'), ([165, 271], '1996'), ([211, 271], '1996'), ([61, 279], '2055'), ([61, 327], '1055'), ([153, 391], 'check-upS'), ([273, 391], 'Up to three check-upS'), ([435, 391], 'Up to five check-upS'), ([579, 389], 'More than five check-ups'), ([145, 431], 'Black or African American'), ([331, 431], 'Hispanic American or Latino'), ([531, 431], 'White/ Caucasian'), ([683, 491], 'Statista 2021'), ([39, 515], 'Addirional Information'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_bar_values = [7035, 619, 60, 6025, 5025, 4035, 3035, 1, 2036, 1996, 1996, 2055, 1055]\n\nlowest_value = min(blue_bar_values)\nprint(lowest_value)",
        "execution": "1",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "962": {
        "question": "The value of y at x=10 is ____ that at x=70.",
        "image": "images/962.jpg",
        "choices": [
            "larger than",
            "equal to",
            "smaller than"
        ],
        "unit": null,
        "precision": null,
        "answer": "smaller than",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "962",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 387,
            "img_height": 301,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([357, 281], '100')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The value of y at x=10 is ____ that at x=70.\nChoices:\n(A) larger than\n(B) equal to\n(C) smaller than\nImage detected text: [([357, 281], '100')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "x1 = 10\ny1 = 100\nx2 = 70\n\ny2 = y1 * (x2 / x1)\n\nif y2 > y1:\n    ans = \"larger than\"\nelif y2 == y1:\n    ans = \"equal to\"\nelse:\n    ans = \"smaller than\"\n\nprint(ans)",
        "execution": "larger than",
        "error": "None",
        "extraction": "larger than",
        "prediction": "larger than",
        "true_false": false
    },
    "963": {
        "question": "For what x does f reach its local maximum?",
        "image": "images/963.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "963",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 441,
            "img_height": 397,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([83, 285], 'F3')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: For what x does f reach its local maximum?\nImage detected text: [([83, 285], 'F3')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\nx = sp.symbols('x')\nf = x**3 - 3*x**2 + 2*x\n\nf_prime = sp.diff(f, x)\ncritical_points = sp.solve(f_prime, x)\n\nlocal_maxima = []\nfor point in critical_points:\n    if sp.diff(f_prime, x).subs(x, point) < 0:\n        local_maxima.append(point)\n\nlocal_maxima",
        "execution": "",
        "error": "None",
        "extraction": "[1]",
        "prediction": null,
        "true_false": false
    },
    "964": {
        "question": "Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.",
        "image": "images/964.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "964",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 342,
            "img_height": 70,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "[([13, 41], 'Ocm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the line to the nearest centimeter. The line is about (_) centimeters long.\nImage detected text: [([13, 41], 'Ocm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "line_length = 0\n\nfor word in detected_text:\n    if word[1].isdigit():\n        line_length = int(word[1])\n        break\n\nprint(\"The line is about\", line_length, \"centimeters long.\")",
        "execution": "",
        "error": "name 'detected_text' is not defined",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "965": {
        "question": "whats the lowest number yard line that you can see?",
        "image": "images/965.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "30",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "965",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1024,
            "img_height": 690,
            "source": "TextVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: whats the lowest number yard line that you can see?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def lowest_yard_line(yard_lines):\n    lowest = min(yard_lines)\n    return lowest\n\nyard_lines = [10, 20, 30, 40, 50]\nprint(lowest_yard_line(yard_lines))",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "966": {
        "question": "Move the ruler to measure the length of the pencil to the nearest inch. The pencil is about (_) inches long.",
        "image": "images/966.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "3",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "966",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 438,
            "img_height": 166,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Move the ruler to measure the length of the pencil to the nearest inch. The pencil is about (_) inches long.\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import cv2\nimport numpy as np\n\ndef measure_length(image_path, object_length, ruler_length):\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to grayscale\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Apply edge detection\n    edges = cv2.Canny(gray, 50, 150)\n\n    # Find contours in the image\n    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    # Find the contour with the largest area\n    largest_contour = max(contours, key=cv2.contourArea)\n\n    # Calculate the length of the contour\n    length = cv2.arcLength(largest_contour, True)\n\n    # Calculate the scale factor\n    scale_factor = ruler_length / object_length\n\n    # Calculate the length of the object in inches\n    length_inches = length * scale_factor\n\n    return length_inches\n\nimage_path = \"image.jpg\"\nobject_length = 10  # Length of the object in inches\nruler_length = 6  # Length of the ruler in inches\n\nlength_inches = measure_length(image_path, object_length, ruler_length)\nprint(\"The length of the pencil is approximately\", round(length_inches), \"inches.\")",
        "execution": "",
        "error": "OpenCV(4.5.4) /tmp/pip-req-build-khv2fx3p/opencv/modules/imgproc/src/color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cvtColor'\n",
        "extraction": "The length of the pencil is approximately 6 inches.",
        "prediction": null,
        "true_false": false
    },
    "967": {
        "question": "In how many years, is the amount earned from national visitors greater than the average amount earned from national visitors taken over all years ?",
        "image": "images/967.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "967",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 1146,
            "img_height": 650,
            "source": "PlotQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([95, 8], 'Earnings from tourism in Guyana'), ([41, 121], '0ode+'), ([41, 225], '0oOe+'), ([7, 217], '3'), ([9, 263], 'E'), ([11, 291], 'I'), ([41, 329], '00Oe +'), ([41, 431], '0ode+'), ([41, 535], '00Oe+0'), ([141, 551], '8'), ([377, 551], '2'), ([615, 551], '8'), ([853, 551], '8'), ([1089, 551], '2'), ([601, 589], 'Year'), ([35, 623], 'National Visitors'), ([163, 623], 'International Visitors')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In how many years, is the amount earned from national visitors greater than the average amount earned from national visitors taken over all years ?\nImage detected text: [([95, 8], 'Earnings from tourism in Guyana'), ([41, 121], '0ode+'), ([41, 225], '0oOe+'), ([7, 217], '3'), ([9, 263], 'E'), ([11, 291], 'I'), ([41, 329], '00Oe +'), ([41, 431], '0ode+'), ([41, 535], '00Oe+0'), ([141, 551], '8'), ([377, 551], '2'), ([615, 551], '8'), ([853, 551], '8'), ([1089, 551], '2'), ([601, 589], 'Year'), ([35, 623], 'National Visitors'), ([163, 623], 'International Visitors')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "earnings = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "execution": "",
        "error": "unexpected EOF while parsing (<string>, line 1)",
        "extraction": "0",
        "prediction": "0",
        "true_false": false
    },
    "968": {
        "question": "Subtract all blue balls. Subtract all big yellow rubber balls. How many objects are left?",
        "image": "images/968.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "968",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all blue balls. Subtract all big yellow rubber balls. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "blue_balls = 5\nbig_yellow_rubber_balls = 3\n\nobjects_left = blue_balls - big_yellow_rubber_balls\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "969": {
        "question": "Does Yellow Green have the maximum area under the curve?",
        "image": "images/969.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "969",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 587,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "scatter plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([7, 153], '1'), ([9, 191], '1'), ([503, 351], 'Yellow Green'), ([437, 363], '100'), ([503, 373], 'Navy Blue'), ([223, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Does Yellow Green have the maximum area under the curve?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([7, 153], '1'), ([9, 191], '1'), ([503, 351], 'Yellow Green'), ([437, 363], '100'), ([503, 373], 'Navy Blue'), ([223, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\n\nplt.plot(x, y)\nplt.fill_between(x, y, color='yellowgreen')\n\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\n\nplt.show()\n\n# The code above generates a plot with a curve and fills the area under the curve with the color 'yellowgreen'.\n# To determine if 'Yellow Green' has the maximum area under the curve, we need to compare the area under the curve with other colors.\n# Since the code provided does not include any calculations or comparisons, it is not possible to determine if 'Yellow Green' has the maximum area under the curve.",
        "execution": "",
        "error": "None",
        "extraction": "No",
        "prediction": "no",
        "true_false": false
    },
    "970": {
        "question": "\u5982\u56fe\uff0c\u4e24\u76f4\u7ebfa\uff0cb\u88ab\u76f4\u7ebfc\u6240\u622a\uff0c\u5df2\u77e5a\u2225b\uff0c\u22201\uff1d62\u00b0\uff0c\u5219\u22202\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/970.jpg",
        "choices": [
            "62\u00b0",
            "108\u00b0",
            "118\u00b0",
            "128\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "118\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "970",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 135,
            "img_height": 141,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([4, 74], ''), ([44, 74], '')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u4e24\u76f4\u7ebfa\uff0cb\u88ab\u76f4\u7ebfc\u6240\u622a\uff0c\u5df2\u77e5a\u2225b\uff0c\u22201\uff1d62\u00b0\uff0c\u5219\u22202\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 62\u00b0\n(B) 108\u00b0\n(C) 118\u00b0\n(D) 128\u00b0\nImage detected text: [([4, 74], ''), ([44, 74], '')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nangle1 = 62\nangle2 = 180 - angle1\nangle2_degrees = math.degrees(angle2)\n\nprint(angle2_degrees)",
        "execution": "6760.901982543714",
        "error": "None",
        "extraction": "118",
        "prediction": "118\u00b0",
        "true_false": true
    },
    "971": {
        "question": "Can the boy reach the highest book?",
        "image": "images/971.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "971",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 400,
            "source": "VQA-AS",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "abstract scene",
            "grade": "daily life",
            "skills": [
                "numeric commonsense"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Can the boy reach the highest book?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def can_reach_highest_book(boy_height, book_heights):\n    highest_book = max(book_heights)\n    if boy_height >= highest_book:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nboy_height = 150\nbook_heights = [120, 130, 140, 160, 170]\nprint(can_reach_highest_book(boy_height, book_heights))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "972": {
        "question": "Is the number of yellow shiny utility bikes greater than the number of brown metallic cruisers?",
        "image": "images/972.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "972",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of yellow shiny utility bikes greater than the number of brown metallic cruisers?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_bike_numbers(yellow_shiny_utility_bikes, brown_metallic_cruisers):\n    if yellow_shiny_utility_bikes > brown_metallic_cruisers:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nyellow_shiny_utility_bikes = 10\nbrown_metallic_cruisers = 5\n\nprint(compare_bike_numbers(yellow_shiny_utility_bikes, brown_metallic_cruisers))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "973": {
        "question": "How many zeros does this function have?",
        "image": "images/973.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "973",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 2560,
            "img_height": 2039,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([163, 83], '4'), ([275, 169], '9'), ([162, 300], '31'), ([1982, 390], '9'), ([2053, 352], '=logz (x)'), ([163, 529], '2'), ([2418, 910], \"'&\"), ([163, 979], '0'), ([2372, 1040], '10'), ([93, 1205], '=1'), ([95, 1431], '~2'), ([95, 1659], '53'), ([106, 1888], '-4')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many zeros does this function have?\nImage detected text: [([163, 83], '4'), ([275, 169], '9'), ([162, 300], '31'), ([1982, 390], '9'), ([2053, 352], '=logz (x)'), ([163, 529], '2'), ([2418, 910], \"'&\"), ([163, 979], '0'), ([2372, 1040], '10'), ([93, 1205], '=1'), ([95, 1431], '~2'), ([95, 1659], '53'), ([106, 1888], '-4')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_zeros(function):\n    zeros = 0\n    for text in function:\n        if text[1] == '0':\n            zeros += 1\n    return zeros\n\nfunction = [([163, 83], '4'), ([275, 169], '9'), ([162, 300], '31'), ([1982, 390], '9'), ([2053, 352], '=logz (x)'), ([163, 529], '2'), ([2418, 910], \"'&\"), ([163, 979], '0'), ([2372, 1040], '10'), ([93, 1205], '=1'), ([95, 1431], '~2'), ([95, 1659], '53'), ([106, 1888], '-4')]\n\nprint(count_zeros(function))",
        "execution": "1",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "974": {
        "question": "Are there the same number of big blue trucks and large purple metal double buss?",
        "image": "images/974.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "974",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Are there the same number of big blue trucks and large purple metal double buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_blue_trucks = 5\nlarge_purple_metal_double_buss = 5\n\nif big_blue_trucks == large_purple_metal_double_buss:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "975": {
        "question": "Subtract all brown matte objects. Subtract all blue metallic objects. How many objects are left?",
        "image": "images/975.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "6",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "975",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown matte objects. Subtract all blue metallic objects. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    brown_matte_objects = 0\n    blue_metallic_objects = 0\n\n    for obj in objects:\n        if obj['color'] == 'brown' and obj['finish'] == 'matte':\n            brown_matte_objects += 1\n        elif obj['color'] == 'blue' and obj['finish'] == 'metallic':\n            blue_metallic_objects += 1\n\n    total_objects = len(objects) - brown_matte_objects - blue_metallic_objects\n    return total_objects\n\nobjects = [\n    {'color': 'brown', 'finish': 'matte'},\n    {'color': 'blue', 'finish': 'metallic'},\n    {'color': 'red', 'finish': 'glossy'},\n    {'color': 'brown', 'finish': 'matte'},\n    {'color': 'green', 'finish': 'glossy'},\n    {'color': 'blue', 'finish': 'metallic'},\n    {'color': 'yellow', 'finish': 'glossy'},\n]\n\nprint(count_objects(objects))",
        "execution": "3",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    },
    "976": {
        "question": "Is the number of metal biplanes behind the purple shiny object less than the number of purple school buss behind the big red object?",
        "image": "images/976.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "976",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of metal biplanes behind the purple shiny object less than the number of purple school buss behind the big red object?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(num1, num2):\n    if num1 < num2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nnum_metal_biplanes = 5\nnum_purple_school_busses = 3\n\nprint(compare_numbers(num_metal_biplanes, num_purple_school_busses))",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "977": {
        "question": "\u5982\u56fe\uff0c\u5df2\u77e5AB\u2225CD\uff0cAF\u4e0eCD\u4ea4\u4e8e\u70b9E\uff0cBE\u22a5AF\uff0c\u2220B\uff1d65\u00b0\uff0c\u5219\u2220DEF\u7684\u5ea6\u6570\u662f\uff08\uff09",
        "image": "images/977.jpg",
        "choices": [
            "65\u00b0",
            "5\u00b0",
            "15\u00b0",
            "25\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "25\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "977",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 250,
            "img_height": 129,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5df2\u77e5AB\u2225CD\uff0cAF\u4e0eCD\u4ea4\u4e8e\u70b9E\uff0cBE\u22a5AF\uff0c\u2220B\uff1d65\u00b0\uff0c\u5219\u2220DEF\u7684\u5ea6\u6570\u662f\uff08\uff09\nChoices:\n(A) 65\u00b0\n(B) 5\u00b0\n(C) 15\u00b0\n(D) 25\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_B = 65\n    angle_A = 180 - angle_B\n    angle_E = 180 - angle_A\n    angle_D = angle_E\n    angle_F = 180 - angle_D\n    angle_DEF = 180 - angle_F\n    return angle_DEF\n\nprint(find_angle())",
        "execution": "65",
        "error": "None",
        "extraction": "25",
        "prediction": "25\u00b0",
        "true_false": true
    },
    "978": {
        "question": "Allie kept a written log of how many miles she biked during the past 7 days. What is the range of the numbers?'",
        "image": "images/978.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "7",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "978",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 230,
            "img_height": 280,
            "source": "TabMWP",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "table",
            "grade": "high school",
            "skills": [
                "arithmetic reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([73, 5], 'Miles biked'), ([31, 37], 'Day'), ([99, 39], 'Number of miles'), ([1, 63], 'Wednesday'), ([3, 99], 'Thursday'), ([1, 126], 'Friday'), ([3, 161], 'Saturday'), ([1, 188], 'Sunday'), ([3, 223], 'Monday'), ([1, 250], 'Tuesday')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Allie kept a written log of how many miles she biked during the past 7 days. What is the range of the numbers?'\nImage detected text: [([73, 5], 'Miles biked'), ([31, 37], 'Day'), ([99, 39], 'Number of miles'), ([1, 63], 'Wednesday'), ([3, 99], 'Thursday'), ([1, 126], 'Friday'), ([3, 161], 'Saturday'), ([1, 188], 'Sunday'), ([3, 223], 'Monday'), ([1, 250], 'Tuesday')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "miles_biked = [73, 99, 1, 3, 1, 3, 1]\nrange_of_numbers = max(miles_biked) - min(miles_biked)\nprint(range_of_numbers)",
        "execution": "98",
        "error": "None",
        "extraction": "98",
        "prediction": "98",
        "true_false": false
    },
    "979": {
        "question": "What number is shown?",
        "image": "images/979.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9079",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "979",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 634,
            "img_height": 279,
            "source": "IconQA",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "abstract scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What number is shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "number_shown = 42\nprint(number_shown)",
        "execution": "42",
        "error": "None",
        "extraction": "42",
        "prediction": "42",
        "true_false": false
    },
    "980": {
        "question": "What is the highest number shown?",
        "image": "images/980.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "12",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "980",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 429,
            "img_height": 640,
            "source": "VQA2.0",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest number shown?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "numbers = [5, 10, 15, 20, 25]\nhighest_number = max(numbers)\nprint(highest_number)",
        "execution": "25",
        "error": "None",
        "extraction": "25",
        "prediction": "25",
        "true_false": false
    },
    "981": {
        "question": "What is the sum of 2002, 2003 and 2004?",
        "image": "images/981.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "70.4",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "981",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([665, 63], '72.19'), ([633, 89], '67.496'), ([61, 95], '7070'), ([571, 105], '64.3%'), ([545, 117], '6296'), ([507, 123], '60.6%'), ([61, 149], '6076'), ([475, 149], '55.796'), ([445, 177], '50.756'), ([61, 201], '5070'), ([381, 225], '41.5%'), ([44, 228], '6'), ([319, 235], '39.8%'), ([61, 255], '4070'), ([44, 262], 'e'), ([223, 299], '27.8%6'), ([61, 309], '3076'), ([255, 311], '25.1%'), ([191, 323], '23.296'), ([161, 345], '19.496'), ([61, 361], '2076'), ([97, 381], '12-79'), ([683, 491], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([620, 452], '2017'), ([85, 450], '2000'), ([116, 452], '2001'), ([148, 452], '2002'), ([180, 452], '2003'), ([210, 451], \"'2004\"), ([242, 452], '2005'), ([274, 452], '2006'), ([305, 453], '2007'), ([336, 452], '2008'), ([368, 451], \"'2009\"), ([400, 452], '2010'), ([432, 452], '2011'), ([462, 451], '2012'), ([494, 452], '2013'), ([526, 452], '2014'), ([558, 452], '2015'), ([590, 452], '2016'), ([652, 452], '2018')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of 2002, 2003 and 2004?\nImage detected text: [([665, 63], '72.19'), ([633, 89], '67.496'), ([61, 95], '7070'), ([571, 105], '64.3%'), ([545, 117], '6296'), ([507, 123], '60.6%'), ([61, 149], '6076'), ([475, 149], '55.796'), ([445, 177], '50.756'), ([61, 201], '5070'), ([381, 225], '41.5%'), ([44, 228], '6'), ([319, 235], '39.8%'), ([61, 255], '4070'), ([44, 262], 'e'), ([223, 299], '27.8%6'), ([61, 309], '3076'), ([255, 311], '25.1%'), ([191, 323], '23.296'), ([161, 345], '19.496'), ([61, 361], '2076'), ([97, 381], '12-79'), ([683, 491], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce'), ([620, 452], '2017'), ([85, 450], '2000'), ([116, 452], '2001'), ([148, 452], '2002'), ([180, 452], '2003'), ([210, 451], \"'2004\"), ([242, 452], '2005'), ([274, 452], '2006'), ([305, 453], '2007'), ([336, 452], '2008'), ([368, 451], \"'2009\"), ([400, 452], '2010'), ([432, 452], '2011'), ([462, 451], '2012'), ([494, 452], '2013'), ([526, 452], '2014'), ([558, 452], '2015'), ([590, 452], '2016'), ([652, 452], '2018')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "sum = 2002 + 2003 + 2004\nprint(sum)",
        "execution": "6009",
        "error": "None",
        "extraction": "6009",
        "prediction": "6009.0",
        "true_false": false
    },
    "982": {
        "question": "Among the states that border Wyoming , does South Dakota have the highest value ?",
        "image": "images/982.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "982",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 700,
            "img_height": 500,
            "source": "MapQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "map chart",
            "grade": "high school",
            "skills": [
                "scientific reasoning",
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 19], 'Hospital Outpatient Visits per'), ([51, 467], '1,026-1,366'), ([176, 467], '1,403-1,802'), ([303, 467], '1,859-2,320'), ([429, 467], '2,330-3,127')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Among the states that border Wyoming , does South Dakota have the highest value ?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([51, 19], 'Hospital Outpatient Visits per'), ([51, 467], '1,026-1,366'), ([176, 467], '1,403-1,802'), ([303, 467], '1,859-2,320'), ([429, 467], '2,330-3,127')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "south_dakota_value = 2300\nwyoming_value = 1800\n\nif south_dakota_value > wyoming_value:\n    ans = \"Yes\"\nelse:\n    ans = \"No\"\n\nprint(ans)",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "983": {
        "question": "What is the highest accuracy reported in the whole chart?",
        "image": "images/983.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "8",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "983",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([59, 13], 'Accuracy of algorithms'), ([77, 52], 'on different datasets'), ([258, 108], 'datasets'), ([304, 140], 'bow'), ([302, 167], 'swing'), ([303, 200], 'proud'), ([302, 234], 'soup'), ([78, 368], '0.0'), ([152, 368], '2.5'), ([224, 368], '5.0'), ([298, 368], '7.5'), ([364, 368], '10.0'), ([180, 392], 'Accuracy'), ([33, 133], 'dash'), ([78, 147], '8'), ([19, 249], 'muzzle'), ([34, 293], 'want'), ([26, 350], 'breed')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the highest accuracy reported in the whole chart?\nImage detected text: [([59, 13], 'Accuracy of algorithms'), ([77, 52], 'on different datasets'), ([258, 108], 'datasets'), ([304, 140], 'bow'), ([302, 167], 'swing'), ([303, 200], 'proud'), ([302, 234], 'soup'), ([78, 368], '0.0'), ([152, 368], '2.5'), ([224, 368], '5.0'), ([298, 368], '7.5'), ([364, 368], '10.0'), ([180, 392], 'Accuracy'), ([33, 133], 'dash'), ([78, 147], '8'), ([19, 249], 'muzzle'), ([34, 293], 'want'), ([26, 350], 'breed')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "accuracy_data = {\n    'bow': 8.0,\n    'swing': 2.5,\n    'proud': 5.0,\n    'soup': 7.5\n}\n\nhighest_accuracy = max(accuracy_data.values())\nprint(highest_accuracy)",
        "execution": "8.0",
        "error": "None",
        "extraction": "7.5",
        "prediction": null,
        "true_false": false
    },
    "984": {
        "question": "Is the number of gray cars less than the number of small metallic minivans?",
        "image": "images/984.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "984",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of gray cars less than the number of small metallic minivans?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "gray_cars = 10\nsmall_metallic_minivans = 8\n\nif gray_cars < small_metallic_minivans:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "985": {
        "question": "What is the smallest percentage value recorded in the chart?",
        "image": "images/985.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "5",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "985",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([61, 41], '6035'), ([61, 95], '5025'), ([61, 147], '4035'), ([149, 159], '31%'), ([43, 155], 'L'), ([61, 201], '3025'), ([277, 181], '13x'), ([44, 232], 'E'), ([61, 253], '2035'), ([527, 275], 'ITX'), ([275, 287], '273'), ([149, 299], '22x'), ([401, 301], '21x'), ([653, 297], '13k'), ([105, 375], 'Find and book hotels'), ([231, 375], 'Manage parking lots'), ([383, 375], 'Internet TV'), ([499, 375], 'Voice to email'), ([623, 375], 'Twitter'), ([673, 375], 'social'), ([261, 389], 'car services'), ([509, 389], 'technology'), ([639, 389], 'networks'), ([323, 429], 'Very useful'), ([423, 431], 'Useful'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the smallest percentage value recorded in the chart?\nImage detected text: [([61, 41], '6035'), ([61, 95], '5025'), ([61, 147], '4035'), ([149, 159], '31%'), ([43, 155], 'L'), ([61, 201], '3025'), ([277, 181], '13x'), ([44, 232], 'E'), ([61, 253], '2035'), ([527, 275], 'ITX'), ([275, 287], '273'), ([149, 299], '22x'), ([401, 301], '21x'), ([653, 297], '13k'), ([105, 375], 'Find and book hotels'), ([231, 375], 'Manage parking lots'), ([383, 375], 'Internet TV'), ([499, 375], 'Voice to email'), ([623, 375], 'Twitter'), ([673, 375], 'social'), ([261, 389], 'car services'), ([509, 389], 'technology'), ([639, 389], 'networks'), ([323, 429], 'Very useful'), ([423, 431], 'Useful'), ([683, 489], 'Statista 2021'), ([41, 515], 'Addirional Information'), ([687, 515], 'Show scurce')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "percentage_values = ['6035', '5025', '4035', '31%', '3025', '13x', '2035', '273', '22x', '21x', '13k']\npercentage_values = [int(value.strip('%xk')) for value in percentage_values]\nsmallest_percentage = min(percentage_values)\nprint(smallest_percentage)",
        "execution": "13",
        "error": "None",
        "extraction": "31",
        "prediction": "31",
        "true_false": false
    },
    "986": {
        "question": "\u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cAD\u662f\u89d2\u5e73\u5206\u7ebf\uff0cAE\u662f\u9ad8\uff0e\u82e5\u2220B\uff1d40\u00b0\uff0c\u2220C\uff1d70\u00b0\uff0c\u5219\u2220EAD\u7684\u5ea6\u6570\u4e3a\uff08\uff09",
        "image": "images/986.jpg",
        "choices": [
            "10\u00b0",
            "15\u00b0",
            "17.5\u00b0",
            "20\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "15\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "986",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 101,
            "img_height": 68,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff0c\u5728\u25b3ABC\u4e2d\uff0cAD\u662f\u89d2\u5e73\u5206\u7ebf\uff0cAE\u662f\u9ad8\uff0e\u82e5\u2220B\uff1d40\u00b0\uff0c\u2220C\uff1d70\u00b0\uff0c\u5219\u2220EAD\u7684\u5ea6\u6570\u4e3a\uff08\uff09\nChoices:\n(A) 10\u00b0\n(B) 15\u00b0\n(C) 17.5\u00b0\n(D) 20\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle():\n    angle_B = 40\n    angle_C = 70\n\n    angle_A = 180 - angle_B - angle_C\n\n    angle_EAD = angle_A / 2\n\n    return angle_EAD\n\nprint(find_angle())",
        "execution": "35.0",
        "error": "None",
        "extraction": "20",
        "prediction": "20\u00b0",
        "true_false": false
    },
    "987": {
        "question": "A cross-section of an airplane wing is shown. Measurements of the thickness of the wing, in centimeters, at 20-centimeter intervals are 5.8, 20.3, 26.7, 29.0, 27.6, 27.3, 23.8, 20.5, 15.1, 8.7, and 2.8. Use the Midpoint Rule to estimate the area of the wing's cross-section.",
        "image": "images/987.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "4232",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "987",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 946,
            "img_height": 338,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "arithmetic reasoning",
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([408, 248], '200 cm')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: A cross-section of an airplane wing is shown. Measurements of the thickness of the wing, in centimeters, at 20-centimeter intervals are 5.8, 20.3, 26.7, 29.0, 27.6, 27.3, 23.8, 20.5, 15.1, 8.7, and 2.8. Use the Midpoint Rule to estimate the area of the wing's cross-section.\nImage detected text: [([408, 248], '200 cm')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "thickness_measurements = [5.8, 20.3, 26.7, 29.0, 27.6, 27.3, 23.8, 20.5, 15.1, 8.7, 2.8]\ninterval = 20\n\narea = 0\nfor i in range(len(thickness_measurements)-1):\n    width = interval\n    height = (thickness_measurements[i] + thickness_measurements[i+1]) / 2\n    area += width * height\n\nprint(area)",
        "execution": "4066.0",
        "error": "None",
        "extraction": "200.0",
        "prediction": null,
        "true_false": false
    },
    "988": {
        "question": "What is the age gap between these two people in image?",
        "image": "images/988.jpg",
        "choices": null,
        "unit": "years",
        "precision": null,
        "answer": "1",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "988",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 500,
            "img_height": 333,
            "source": "KVQA",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "natural image",
            "grade": "daily life",
            "skills": [
                "numeric commonsense",
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the age gap between these two people in image? (Unit: years)\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import datetime\n\ndef calculate_age(date_of_birth1, date_of_birth2):\n    today = datetime.date.today()\n    age1 = today.year - date_of_birth1.year\n    age2 = today.year - date_of_birth2.year\n    if today < datetime.date(today.year, date_of_birth1.month, date_of_birth1.day):\n        age1 -= 1\n    if today < datetime.date(today.year, date_of_birth2.month, date_of_birth2.day):\n        age2 -= 1\n    age_gap = abs(age1 - age2)\n    return age_gap\n\ndate_of_birth1 = datetime.date(1990, 5, 10)\ndate_of_birth2 = datetime.date(1985, 8, 15)\n\nage_gap = calculate_age(date_of_birth1, date_of_birth2)\nprint(age_gap)",
        "execution": "",
        "error": "name 'datetime' is not defined",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "989": {
        "question": "How many people like the most preferred object in the whole chart?",
        "image": "images/989.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "989",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 448,
            "img_height": 448,
            "source": "DVQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([51, 16], 'Most preferred objects'), ([52, 50], 'of different categories'), ([270, 200], 'categories'), ([328, 232], 'arch'), ([328, 262], 'glow'), ([25, 261], '1'), ([328, 292], 'die'), ([328, 322], 'ballot'), ([396, 368], '10'), ([111, 393], 'Number of People'), ([24, 132], '2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: How many people like the most preferred object in the whole chart?\nImage detected text: [([51, 16], 'Most preferred objects'), ([52, 50], 'of different categories'), ([270, 200], 'categories'), ([328, 232], 'arch'), ([328, 262], 'glow'), ([25, 261], '1'), ([328, 292], 'die'), ([328, 322], 'ballot'), ([396, 368], '10'), ([111, 393], 'Number of People'), ([24, 132], '2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "most_preferred_objects = {\n    'arch': 10,\n    'glow': 8,\n    'die': 6,\n    'ballot': 4\n}\n\nmax_likes = max(most_preferred_objects.values())\nprint(max_likes)",
        "execution": "10",
        "error": "None",
        "extraction": "10",
        "prediction": "10",
        "true_false": false
    },
    "990": {
        "question": "In $\\odot S$, $m \\widehat {PQR}=98$, Find $m \\widehat {PQ}$.",
        "image": "images/990.jpg",
        "choices": [
            "45",
            "49",
            "90",
            "98"
        ],
        "unit": null,
        "precision": null,
        "answer": "49",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "990",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 544,
            "img_height": 452,
            "source": "Geometry3K",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([106, 154], 'P'), ([403, 153], 'R'), ([265, 259], 'S')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: In $\\odot S$, $m \\widehat {PQR}=98$, Find $m \\widehat {PQ}$.\nChoices:\n(A) 45\n(B) 49\n(C) 90\n(D) 98\nImage detected text: [([106, 154], 'P'), ([403, 153], 'R'), ([265, 259], 'S')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\ndef find_angle(m_angle_PQR):\n    m_angle_PQ = (180 - m_angle_PQR) / 2\n    return m_angle_PQ\n\nm_angle_PQR = 98\nm_angle_PQ = find_angle(m_angle_PQR)\nprint(m_angle_PQ)",
        "execution": "41.0",
        "error": "None",
        "extraction": "49",
        "prediction": "49",
        "true_false": true
    },
    "991": {
        "question": "Which functions have no zeros?",
        "image": "images/991.jpg",
        "choices": [
            "green and red",
            "blue and orange",
            "purple and grey"
        ],
        "unit": null,
        "precision": null,
        "answer": "purple and grey",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "991",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 616,
            "img_height": 383,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([55, 55], 'f:y = *'), ([53, 93], 'E: Y = *'), ([57, 131], 'h :Y =x'), ([56, 168], 'P : Y =*'), ([57, 215], 'q ; y ='), ([73, 261], 'Y =')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Which functions have no zeros?\nChoices:\n(A) green and red\n(B) blue and orange\n(C) purple and grey\nImage detected text: [([55, 55], 'f:y = *'), ([53, 93], 'E: Y = *'), ([57, 131], 'h :Y =x'), ([56, 168], 'P : Y =*'), ([57, 215], 'q ; y ='), ([73, 261], 'Y =')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def no_zeros(functions):\n    no_zeros_functions = []\n    for function in functions:\n        if '0' not in function:\n            no_zeros_functions.append(function)\n    return no_zeros_functions\n\nfunctions = ['f:y = x^2', 'E: Y = 3x + 2', 'h :Y =x^3', 'P : Y = 5', 'q ; y = 2x - 1', 'Y = 4x']\nprint(no_zeros(functions))",
        "execution": "['f:y = x^2', 'E: Y = 3x + 2', 'h :Y =x^3', 'P : Y = 5', 'q ; y = 2x - 1', 'Y = 4x']",
        "error": "None",
        "extraction": "['f:y = x^2', 'P : Y = 5']",
        "prediction": "green and red",
        "true_false": false
    },
    "992": {
        "question": "Is the number of purple metallic things that are behind the small green motorbike less than the number of blue metal articulated buss?",
        "image": "images/992.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "992",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 640,
            "img_height": 480,
            "source": "Super-CLEVR",
            "category": "general-vqa",
            "task": "visual question answering",
            "context": "synthetic scene",
            "grade": "daily life",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is the number of purple metallic things that are behind the small green motorbike less than the number of blue metal articulated buss?\nChoices:\n(A) Yes\n(B) No\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def compare_numbers(purple_metallic, small_green_motorbike, blue_metal_articulated_buss):\n    if purple_metallic < blue_metal_articulated_buss:\n        return \"Yes\"\n    else:\n        return \"No\"\n\npurple_metallic = 5\nsmall_green_motorbike = 3\nblue_metal_articulated_buss = 7\n\nprint(compare_numbers(purple_metallic, small_green_motorbike, blue_metal_articulated_buss))",
        "execution": "Yes",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "993": {
        "question": "Subtract all tiny yellow matte cylinders. Subtract all small blue rubber spheres. How many objects are left?",
        "image": "images/993.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "993",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all tiny yellow matte cylinders. Subtract all small blue rubber spheres. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "def count_objects(objects):\n    yellow_cylinders = 0\n    blue_spheres = 0\n\n    for obj in objects:\n        if obj['color'] == 'yellow' and obj['material'] == 'matte' and obj['shape'] == 'cylinder' and obj['size'] == 'tiny':\n            yellow_cylinders += 1\n        elif obj['color'] == 'blue' and obj['material'] == 'rubber' and obj['shape'] == 'sphere' and obj['size'] == 'small':\n            blue_spheres += 1\n\n    total_objects = len(objects) - yellow_cylinders - blue_spheres\n    return total_objects\n\nobjects = [\n    {'color': 'yellow', 'material': 'matte', 'shape': 'cylinder', 'size': 'tiny'},\n    {'color': 'blue', 'material': 'rubber', 'shape': 'sphere', 'size': 'small'},\n    {'color': 'red', 'material': 'plastic', 'shape': 'cube', 'size': 'medium'},\n    {'color': 'yellow', 'material': 'glossy', 'shape': 'cylinder', 'size': 'large'},\n    {'color': 'blue', 'material': 'rubber', 'shape': 'sphere', 'size': 'small'},\n    {'color': 'green', 'material': 'wood', 'shape': 'pyramid', 'size': 'tiny'}\n]\n\nprint(count_objects(objects))",
        "execution": "3",
        "error": "None",
        "extraction": "1",
        "prediction": "1",
        "true_false": false
    },
    "994": {
        "question": "Is Magenta greater than Web Maroon?",
        "image": "images/994.jpg",
        "choices": [
            "yes",
            "no"
        ],
        "unit": null,
        "precision": null,
        "answer": "yes",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "994",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 548,
            "img_height": 400,
            "source": "FigureQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "line plot",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([49, 11], 'title'), ([85, 137], 'Medium Turquoise'), ([7, 155], '9'), ([85, 161], 'Web Maroon'), ([82, 182], 'Magenta'), ([9, 191], '1'), ([83, 207], 'Salmon'), ([83, 229], 'Deep Sky Blue'), ([509, 363], '100'), ([259, 383], 'xaxis label')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is Magenta greater than Web Maroon?\nChoices:\n(A) yes\n(B) no\nImage detected text: [([49, 11], 'title'), ([85, 137], 'Medium Turquoise'), ([7, 155], '9'), ([85, 161], 'Web Maroon'), ([82, 182], 'Magenta'), ([9, 191], '1'), ([83, 207], 'Salmon'), ([83, 229], 'Deep Sky Blue'), ([509, 363], '100'), ([259, 383], 'xaxis label')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "magenta = 1\nweb_maroon = 9\n\nif magenta > web_maroon:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\n\nprint(ans)",
        "execution": "no",
        "error": "None",
        "extraction": "no",
        "prediction": "no",
        "true_false": false
    },
    "995": {
        "question": "What is the sum of the two bars in  18 to 21?",
        "image": "images/995.jpg",
        "choices": null,
        "unit": null,
        "precision": 2,
        "answer": "18.27",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "995",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 800,
            "img_height": 557,
            "source": "ChartQA",
            "category": "general-vqa",
            "task": "figure question answering",
            "context": "bar chart",
            "grade": "daily life",
            "skills": [
                "statistical reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([464, 120], 'I 43'), ([555, 135], '17.04'), ([373, 147], '16.25 16.13'), ([501, 145], '16.29'), ([43, 151], '8'), ([593, 165], '14.77'), ([645, 171], '14.45'), ([281, 191], '12.99 12.82'), ([683, 195], '12.53'), ([44, 174], 'L'), ([194, 242], '9l'), ([231, 241], '9.06'), ([43, 239], '1'), ([113, 389], '16 to 17'), ([203, 391], '18 to 21'), ([295, 389], '22 to 29'), ([385, 391], '30 t0 39'), ([475, 391], '40 t0 49'), ([567, 391], '50 t0 59'), ([649, 391], '60 and over'), ([339, 431], 'Male'), ([401, 431], 'Female'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: What is the sum of the two bars in  18 to 21?\nImage detected text: [([464, 120], 'I 43'), ([555, 135], '17.04'), ([373, 147], '16.25 16.13'), ([501, 145], '16.29'), ([43, 151], '8'), ([593, 165], '14.77'), ([645, 171], '14.45'), ([281, 191], '12.99 12.82'), ([683, 195], '12.53'), ([44, 174], 'L'), ([194, 242], '9l'), ([231, 241], '9.06'), ([43, 239], '1'), ([113, 389], '16 to 17'), ([203, 391], '18 to 21'), ([295, 389], '22 to 29'), ([385, 391], '30 t0 39'), ([475, 391], '40 t0 49'), ([567, 391], '50 t0 59'), ([649, 391], '60 and over'), ([339, 431], 'Male'), ([401, 431], 'Female'), ([683, 491], 'Statista 2021'), ([39, 515], 'Additional Informarion'), ([687, 515], 'Show source')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "bar1 = 18\nbar2 = 21\n\nsum_of_bars = bar1 + bar2\nprint(sum_of_bars)",
        "execution": "39",
        "error": "None",
        "extraction": "39",
        "prediction": "39.0",
        "true_false": false
    },
    "996": {
        "question": "Subtract all big shiny balls. Subtract all blue rubber blocks. How many objects are left?",
        "image": "images/996.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "2",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "996",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all big shiny balls. Subtract all blue rubber blocks. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "big_shiny_balls = 10\nblue_rubber_blocks = 5\n\nobjects_left = big_shiny_balls - blue_rubber_blocks\nprint(objects_left)",
        "execution": "5",
        "error": "None",
        "extraction": "5",
        "prediction": "5",
        "true_false": false
    },
    "997": {
        "question": "Is kx^2/2 larger than E at x=0?",
        "image": "images/997.jpg",
        "choices": [
            "Yes",
            "No"
        ],
        "unit": null,
        "precision": null,
        "answer": "No",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "997",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 537,
            "img_height": 197,
            "source": "FunctionQA",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "function plot",
            "grade": "college",
            "skills": [
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([394, 18], 'kx? /2')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Is kx^2/2 larger than E at x=0?\nChoices:\n(A) Yes\n(B) No\nImage detected text: [([394, 18], 'kx? /2')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "k = 2\nx = 0\nE = 1\n\nkx_squared_over_2 = (k * x ** 2) / 2\n\nif kx_squared_over_2 > E:\n    answer = \"Yes\"\nelse:\n    answer = \"No\"\n\nprint(answer)",
        "execution": "No",
        "error": "None",
        "extraction": "No",
        "prediction": "No",
        "true_false": true
    },
    "998": {
        "question": "\u5982\u56fe\uff1a\u2220AOB\uff1a\u2220BOC\uff1a\u2220COD\uff1d2\uff1a3\uff1a4\uff0c\u5c04\u7ebfOM\u3001ON\uff0c\u5206\u522b\u5e73\u5206\u2220AOB\u4e0e\u2220COD\uff0c\u53c8\u2220MON\uff1d84\u00b0\uff0c\u5219\u2220AOB\u4e3a\uff08\uff09",
        "image": "images/998.jpg",
        "choices": [
            "28\u00b0",
            "30\u00b0",
            "32\u00b0",
            "38\u00b0"
        ],
        "unit": null,
        "precision": null,
        "answer": "28\u00b0",
        "question_type": "multi_choice",
        "answer_type": "text",
        "pid": "998",
        "metadata": {
            "split": "testmini",
            "language": "chinese",
            "img_width": 181,
            "img_height": 118,
            "source": "GeoQA+",
            "category": "math-targeted-vqa",
            "task": "geometry problem solving",
            "context": "geometry diagram",
            "grade": "high school",
            "skills": [
                "geometry reasoning",
                "algebraic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: \u5982\u56fe\uff1a\u2220AOB\uff1a\u2220BOC\uff1a\u2220COD\uff1d2\uff1a3\uff1a4\uff0c\u5c04\u7ebfOM\u3001ON\uff0c\u5206\u522b\u5e73\u5206\u2220AOB\u4e0e\u2220COD\uff0c\u53c8\u2220MON\uff1d84\u00b0\uff0c\u5219\u2220AOB\u4e3a\uff08\uff09\nChoices:\n(A) 28\u00b0\n(B) 30\u00b0\n(C) 32\u00b0\n(D) 38\u00b0\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import sympy as sp\n\n# Let x be the measure of angle AOB\nx = sp.Symbol('x')\n\n# Given that angle AOB : angle BOC : angle COD = 2 : 3 : 4\nangle_BOC = 3 * x / 2\nangle_COD = 4 * x / 2\n\n# Since angle MON is 84 degrees, angle MOB + angle BOC + angle COD = 84 degrees\nangle_MOB = 84 - angle_BOC - angle_COD\n\n# Since angle MOB and angle NOC are bisectors of angle AOB and angle COD respectively,\n# angle MOB = angle NOC = x / 2\nangle_NOC = x / 2\n\n# Since angle MON is a straight angle, angle MOB + angle NOC + angle MON = 180 degrees\nequation = angle_MOB + angle_NOC + 84 - 180\n\n# Solve the equation to find the value of x\nsolution = sp.solve(equation, x)\n\n# Convert the solution to degrees\nangle_AOB = sp.deg(solution[0])\n\nprint(f\"The measure of angle AOB is {angle_AOB} degrees\")",
        "execution": "The measure of angle AOB is -720/pi degrees",
        "error": "None",
        "extraction": "The measure of angle AOB is 28 degrees.",
        "prediction": "28\u00b0",
        "true_false": true
    },
    "999": {
        "question": "The magnitude of the acceleration vector a is $10 \\mathrm{~cm} / \\mathrm{s}^2$. Use the figure to estimate the tangential components of $\\mathbf{a}$.\r\n",
        "image": "images/999.jpg",
        "choices": null,
        "unit": null,
        "precision": 1,
        "answer": "4.5",
        "question_type": "free_form",
        "answer_type": "float",
        "pid": "999",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 478,
            "img_height": 484,
            "source": "SciBench",
            "category": "math-targeted-vqa",
            "task": "textbook question answering",
            "context": "scientific figure",
            "grade": "college",
            "skills": [
                "scientific reasoning"
            ]
        },
        "caption": "",
        "ocr": "[([80, 62], 'y')]",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: The magnitude of the acceleration vector a is $10 \\mathrm{~cm} / \\mathrm{s}^2$. Use the figure to estimate the tangential components of $\\mathbf{a}$.\r\n\nImage detected text: [([80, 62], 'y')]\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "import math\n\nacceleration_magnitude = 10  # cm/s^2\n\n# Assuming the angle between the acceleration vector and the x-axis is 45 degrees\nangle = 45  # degrees\n\n# Calculating the tangential component of acceleration\ntangential_component = acceleration_magnitude * math.cos(math.radians(angle))\n\nprint(tangential_component)",
        "execution": "7.0710678118654755",
        "error": "None",
        "extraction": "7.07",
        "prediction": "7.1",
        "true_false": false
    },
    "1000": {
        "question": "Subtract all brown matte cylinders. Subtract all big purple matte things. How many objects are left?",
        "image": "images/1000.jpg",
        "choices": null,
        "unit": null,
        "precision": null,
        "answer": "9",
        "question_type": "free_form",
        "answer_type": "integer",
        "pid": "1000",
        "metadata": {
            "split": "testmini",
            "language": "english",
            "img_width": 320,
            "img_height": 240,
            "source": "CLEVR-Math",
            "category": "math-targeted-vqa",
            "task": "math word problem",
            "context": "synthetic scene",
            "grade": "elementary school",
            "skills": [
                "arithmetic reasoning"
            ]
        },
        "caption": "",
        "ocr": "",
        "query": "Question: How much money does Ruth need to buy a baking dish, a casserole dish, and an ice cream scoop? (Unit: $)\nImage detected text: [([5, 3], 'baking dish'), ([177, 5], '$4.00'), ([7, 41], 'ice cream scoop'), ([177, 37], '$6.00'), ([9, 69], 'casserole dish'), ([177, 69], '$3.00'), ([5, 98], 'rolling pin'), ([177, 101], '$4.00')]\nPython code: baking_dish_price = 4.00\ncasserole_dish_price = 3.00\nice_cream_scoop_price = 6.00\n\nans = baking_dish_price + casserole_dish_price + ice_cream_scoop_price\nprint(ans)\n\nQuestion: What is the largest city in the nation where this plane is headquartered?\nChoices:\n(A) hong kong\n(B) osaka\n(C) shanghai\n(D) tokyo\nPython code: def largest_city(caption, choices):\n    countries_largest_cities = {\n        'Japan': 'tokyo',\n        'China': 'shanghai'\n    }\n\n    if \"Japan\" in caption:\n        country = 'Japan'\n    elif \"China\" in caption:\n        country = 'China'\n\n    for choice in choices:\n        if choice == countries_largest_cities[country]:\n            return choice\n    return \"\"\n\nchoices = ['hong kong', 'osaka', 'shanghai', 'tokyo']\ncaption = \"The image shows a large passenger jet parked on a tarmac at an airport. The jet is white with red trim and has a red tail. It is sitting on top of a tarmac next to a building. The jet is being loaded with passengers and cargo. The text on the image says 'Japan. Endless Discovery'.\"\n\nprint(largest_city(caption, choices))\n\nQuestion: Subtract all brown matte cylinders. Subtract all big purple matte things. How many objects are left?\nHint: Please generate a python code to solve the problem\nPython code:",
        "response": "brown_matte_cylinders = 5\nbig_purple_matte_things = 3\n\nobjects_left = brown_matte_cylinders - big_purple_matte_things\nprint(objects_left)",
        "execution": "2",
        "error": "None",
        "extraction": "2",
        "prediction": "2",
        "true_false": false
    }
}